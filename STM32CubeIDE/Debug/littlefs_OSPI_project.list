
littlefs_OSPI_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013404  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001220  08013650  08013650  00014650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014870  08014870  00016068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014870  08014870  00015870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014878  08014878  00016068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014878  08014878  00015878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801487c  0801487c  0001587c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08014880  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000068  080148e8  00016068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  080148e8  00016328  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00016068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001de56  00000000  00000000  0001609e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035f1  00000000  00000000  00033ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  000374e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001293  00000000  00000000  00038ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000357eb  00000000  00000000  00039d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f241  00000000  00000000  0006f54e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00142431  00000000  00000000  0008e78f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d0bc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006674  00000000  00000000  001d0c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001d7278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000068 	.word	0x20000068
 8000268:	00000000 	.word	0x00000000
 800026c:	08013638 	.word	0x08013638

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	2000006c 	.word	0x2000006c
 8000288:	08013638 	.word	0x08013638

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_uldivmod>:
 800029c:	b953      	cbnz	r3, 80002b4 <__aeabi_uldivmod+0x18>
 800029e:	b94a      	cbnz	r2, 80002b4 <__aeabi_uldivmod+0x18>
 80002a0:	2900      	cmp	r1, #0
 80002a2:	bf08      	it	eq
 80002a4:	2800      	cmpeq	r0, #0
 80002a6:	bf1c      	itt	ne
 80002a8:	f04f 31ff 	movne.w	r1, #4294967295
 80002ac:	f04f 30ff 	movne.w	r0, #4294967295
 80002b0:	f000 b9c4 	b.w	800063c <__aeabi_idiv0>
 80002b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002bc:	f000 f81a 	bl	80002f4 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4770      	bx	lr

080002cc <__popcountsi2>:
 80002cc:	0843      	lsrs	r3, r0, #1
 80002ce:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	0883      	lsrs	r3, r0, #2
 80002d6:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 80002da:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80002de:	4418      	add	r0, r3
 80002e0:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002e4:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 80002e8:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002ec:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002f0:	0e00      	lsrs	r0, r0, #24
 80002f2:	4770      	bx	lr

080002f4 <__udivmoddi4>:
 80002f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002f8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002fa:	4688      	mov	r8, r1
 80002fc:	4604      	mov	r4, r0
 80002fe:	468e      	mov	lr, r1
 8000300:	2b00      	cmp	r3, #0
 8000302:	d14a      	bne.n	800039a <__udivmoddi4+0xa6>
 8000304:	428a      	cmp	r2, r1
 8000306:	4617      	mov	r7, r2
 8000308:	d95f      	bls.n	80003ca <__udivmoddi4+0xd6>
 800030a:	fab2 f682 	clz	r6, r2
 800030e:	b14e      	cbz	r6, 8000324 <__udivmoddi4+0x30>
 8000310:	f1c6 0320 	rsb	r3, r6, #32
 8000314:	fa01 fe06 	lsl.w	lr, r1, r6
 8000318:	40b7      	lsls	r7, r6
 800031a:	40b4      	lsls	r4, r6
 800031c:	fa20 f303 	lsr.w	r3, r0, r3
 8000320:	ea43 0e0e 	orr.w	lr, r3, lr
 8000324:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fbbe f1f8 	udiv	r1, lr, r8
 8000332:	fb08 ee11 	mls	lr, r8, r1, lr
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x5e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f101 30ff 	add.w	r0, r1, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x5c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 8154 	bhi.w	80005f8 <__udivmoddi4+0x304>
 8000350:	4601      	mov	r1, r0
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	b2a2      	uxth	r2, r4
 8000356:	fbb3 f0f8 	udiv	r0, r3, r8
 800035a:	fb08 3310 	mls	r3, r8, r0, r3
 800035e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000362:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000366:	4594      	cmp	ip, r2
 8000368:	d90b      	bls.n	8000382 <__udivmoddi4+0x8e>
 800036a:	18ba      	adds	r2, r7, r2
 800036c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000370:	bf2c      	ite	cs
 8000372:	2401      	movcs	r4, #1
 8000374:	2400      	movcc	r4, #0
 8000376:	4594      	cmp	ip, r2
 8000378:	d902      	bls.n	8000380 <__udivmoddi4+0x8c>
 800037a:	2c00      	cmp	r4, #0
 800037c:	f000 813f 	beq.w	80005fe <__udivmoddi4+0x30a>
 8000380:	4618      	mov	r0, r3
 8000382:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000386:	eba2 020c 	sub.w	r2, r2, ip
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa2>
 800038e:	40f2      	lsrs	r2, r6
 8000390:	2300      	movs	r3, #0
 8000392:	e9c5 2300 	strd	r2, r3, [r5]
 8000396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xb6>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb0>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa2>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d14e      	bne.n	8000450 <__udivmoddi4+0x15c>
 80003b2:	4543      	cmp	r3, r8
 80003b4:	f0c0 8112 	bcc.w	80005dc <__udivmoddi4+0x2e8>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f240 810f 	bls.w	80005dc <__udivmoddi4+0x2e8>
 80003be:	4608      	mov	r0, r1
 80003c0:	2d00      	cmp	r5, #0
 80003c2:	d0e8      	beq.n	8000396 <__udivmoddi4+0xa2>
 80003c4:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c8:	e7e5      	b.n	8000396 <__udivmoddi4+0xa2>
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	f000 80ac 	beq.w	8000528 <__udivmoddi4+0x234>
 80003d0:	fab2 f682 	clz	r6, r2
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	f040 80bb 	bne.w	8000550 <__udivmoddi4+0x25c>
 80003da:	1a8b      	subs	r3, r1, r2
 80003dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003e0:	b2bc      	uxth	r4, r7
 80003e2:	2101      	movs	r1, #1
 80003e4:	0c02      	lsrs	r2, r0, #16
 80003e6:	b280      	uxth	r0, r0
 80003e8:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80003f0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003f4:	fb04 f20c 	mul.w	r2, r4, ip
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d90e      	bls.n	800041a <__udivmoddi4+0x126>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0901 	movcs.w	r9, #1
 8000408:	f04f 0900 	movcc.w	r9, #0
 800040c:	429a      	cmp	r2, r3
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x124>
 8000410:	f1b9 0f00 	cmp.w	r9, #0
 8000414:	f000 80ec 	beq.w	80005f0 <__udivmoddi4+0x2fc>
 8000418:	46c4      	mov	ip, r8
 800041a:	1a9b      	subs	r3, r3, r2
 800041c:	fbb3 f8fe 	udiv	r8, r3, lr
 8000420:	fb0e 3318 	mls	r3, lr, r8, r3
 8000424:	fb04 f408 	mul.w	r4, r4, r8
 8000428:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800042c:	4294      	cmp	r4, r2
 800042e:	d90b      	bls.n	8000448 <__udivmoddi4+0x154>
 8000430:	18ba      	adds	r2, r7, r2
 8000432:	f108 33ff 	add.w	r3, r8, #4294967295
 8000436:	bf2c      	ite	cs
 8000438:	2001      	movcs	r0, #1
 800043a:	2000      	movcc	r0, #0
 800043c:	4294      	cmp	r4, r2
 800043e:	d902      	bls.n	8000446 <__udivmoddi4+0x152>
 8000440:	2800      	cmp	r0, #0
 8000442:	f000 80d1 	beq.w	80005e8 <__udivmoddi4+0x2f4>
 8000446:	4698      	mov	r8, r3
 8000448:	1b12      	subs	r2, r2, r4
 800044a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 800044e:	e79d      	b.n	800038c <__udivmoddi4+0x98>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa08 f401 	lsl.w	r4, r8, r1
 800045a:	fa00 f901 	lsl.w	r9, r0, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	fa28 f806 	lsr.w	r8, r8, r6
 8000466:	408a      	lsls	r2, r1
 8000468:	431f      	orrs	r7, r3
 800046a:	fa20 f306 	lsr.w	r3, r0, r6
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa1f fc87 	uxth.w	ip, r7
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fbb8 fef0 	udiv	lr, r8, r0
 800047c:	fb00 881e 	mls	r8, r0, lr, r8
 8000480:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000484:	fb0e f80c 	mul.w	r8, lr, ip
 8000488:	45a0      	cmp	r8, r4
 800048a:	d90e      	bls.n	80004aa <__udivmoddi4+0x1b6>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000492:	bf2c      	ite	cs
 8000494:	f04f 0b01 	movcs.w	fp, #1
 8000498:	f04f 0b00 	movcc.w	fp, #0
 800049c:	45a0      	cmp	r8, r4
 800049e:	d903      	bls.n	80004a8 <__udivmoddi4+0x1b4>
 80004a0:	f1bb 0f00 	cmp.w	fp, #0
 80004a4:	f000 80b8 	beq.w	8000618 <__udivmoddi4+0x324>
 80004a8:	46d6      	mov	lr, sl
 80004aa:	eba4 0408 	sub.w	r4, r4, r8
 80004ae:	fa1f f883 	uxth.w	r8, r3
 80004b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b6:	fb00 4413 	mls	r4, r0, r3, r4
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d90e      	bls.n	80004e4 <__udivmoddi4+0x1f0>
 80004c6:	193c      	adds	r4, r7, r4
 80004c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004cc:	bf2c      	ite	cs
 80004ce:	f04f 0801 	movcs.w	r8, #1
 80004d2:	f04f 0800 	movcc.w	r8, #0
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d903      	bls.n	80004e2 <__udivmoddi4+0x1ee>
 80004da:	f1b8 0f00 	cmp.w	r8, #0
 80004de:	f000 809f 	beq.w	8000620 <__udivmoddi4+0x32c>
 80004e2:	4603      	mov	r3, r0
 80004e4:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e8:	eba4 040c 	sub.w	r4, r4, ip
 80004ec:	fba0 ec02 	umull	lr, ip, r0, r2
 80004f0:	4564      	cmp	r4, ip
 80004f2:	4673      	mov	r3, lr
 80004f4:	46e0      	mov	r8, ip
 80004f6:	d302      	bcc.n	80004fe <__udivmoddi4+0x20a>
 80004f8:	d107      	bne.n	800050a <__udivmoddi4+0x216>
 80004fa:	45f1      	cmp	r9, lr
 80004fc:	d205      	bcs.n	800050a <__udivmoddi4+0x216>
 80004fe:	ebbe 0302 	subs.w	r3, lr, r2
 8000502:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000506:	3801      	subs	r0, #1
 8000508:	46e0      	mov	r8, ip
 800050a:	b15d      	cbz	r5, 8000524 <__udivmoddi4+0x230>
 800050c:	ebb9 0203 	subs.w	r2, r9, r3
 8000510:	eb64 0408 	sbc.w	r4, r4, r8
 8000514:	fa04 f606 	lsl.w	r6, r4, r6
 8000518:	fa22 f301 	lsr.w	r3, r2, r1
 800051c:	40cc      	lsrs	r4, r1
 800051e:	431e      	orrs	r6, r3
 8000520:	e9c5 6400 	strd	r6, r4, [r5]
 8000524:	2100      	movs	r1, #0
 8000526:	e736      	b.n	8000396 <__udivmoddi4+0xa2>
 8000528:	fbb1 fcf2 	udiv	ip, r1, r2
 800052c:	0c01      	lsrs	r1, r0, #16
 800052e:	4614      	mov	r4, r2
 8000530:	b280      	uxth	r0, r0
 8000532:	4696      	mov	lr, r2
 8000534:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000538:	2620      	movs	r6, #32
 800053a:	4690      	mov	r8, r2
 800053c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000540:	4610      	mov	r0, r2
 8000542:	fbb1 f1f2 	udiv	r1, r1, r2
 8000546:	eba3 0308 	sub.w	r3, r3, r8
 800054a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054e:	e74b      	b.n	80003e8 <__udivmoddi4+0xf4>
 8000550:	40b7      	lsls	r7, r6
 8000552:	f1c6 0320 	rsb	r3, r6, #32
 8000556:	fa01 f206 	lsl.w	r2, r1, r6
 800055a:	fa21 f803 	lsr.w	r8, r1, r3
 800055e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000562:	fa20 f303 	lsr.w	r3, r0, r3
 8000566:	b2bc      	uxth	r4, r7
 8000568:	40b0      	lsls	r0, r6
 800056a:	4313      	orrs	r3, r2
 800056c:	0c02      	lsrs	r2, r0, #16
 800056e:	0c19      	lsrs	r1, r3, #16
 8000570:	b280      	uxth	r0, r0
 8000572:	fbb8 f9fe 	udiv	r9, r8, lr
 8000576:	fb0e 8819 	mls	r8, lr, r9, r8
 800057a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	4588      	cmp	r8, r1
 8000584:	d951      	bls.n	800062a <__udivmoddi4+0x336>
 8000586:	1879      	adds	r1, r7, r1
 8000588:	f109 3cff 	add.w	ip, r9, #4294967295
 800058c:	bf2c      	ite	cs
 800058e:	f04f 0a01 	movcs.w	sl, #1
 8000592:	f04f 0a00 	movcc.w	sl, #0
 8000596:	4588      	cmp	r8, r1
 8000598:	d902      	bls.n	80005a0 <__udivmoddi4+0x2ac>
 800059a:	f1ba 0f00 	cmp.w	sl, #0
 800059e:	d031      	beq.n	8000604 <__udivmoddi4+0x310>
 80005a0:	eba1 0108 	sub.w	r1, r1, r8
 80005a4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a8:	fb09 f804 	mul.w	r8, r9, r4
 80005ac:	fb0e 1119 	mls	r1, lr, r9, r1
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005b6:	4543      	cmp	r3, r8
 80005b8:	d235      	bcs.n	8000626 <__udivmoddi4+0x332>
 80005ba:	18fb      	adds	r3, r7, r3
 80005bc:	f109 31ff 	add.w	r1, r9, #4294967295
 80005c0:	bf2c      	ite	cs
 80005c2:	f04f 0a01 	movcs.w	sl, #1
 80005c6:	f04f 0a00 	movcc.w	sl, #0
 80005ca:	4543      	cmp	r3, r8
 80005cc:	d2bb      	bcs.n	8000546 <__udivmoddi4+0x252>
 80005ce:	f1ba 0f00 	cmp.w	sl, #0
 80005d2:	d1b8      	bne.n	8000546 <__udivmoddi4+0x252>
 80005d4:	f1a9 0102 	sub.w	r1, r9, #2
 80005d8:	443b      	add	r3, r7
 80005da:	e7b4      	b.n	8000546 <__udivmoddi4+0x252>
 80005dc:	1a84      	subs	r4, r0, r2
 80005de:	eb68 0203 	sbc.w	r2, r8, r3
 80005e2:	2001      	movs	r0, #1
 80005e4:	4696      	mov	lr, r2
 80005e6:	e6eb      	b.n	80003c0 <__udivmoddi4+0xcc>
 80005e8:	443a      	add	r2, r7
 80005ea:	f1a8 0802 	sub.w	r8, r8, #2
 80005ee:	e72b      	b.n	8000448 <__udivmoddi4+0x154>
 80005f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f4:	443b      	add	r3, r7
 80005f6:	e710      	b.n	800041a <__udivmoddi4+0x126>
 80005f8:	3902      	subs	r1, #2
 80005fa:	443b      	add	r3, r7
 80005fc:	e6a9      	b.n	8000352 <__udivmoddi4+0x5e>
 80005fe:	443a      	add	r2, r7
 8000600:	3802      	subs	r0, #2
 8000602:	e6be      	b.n	8000382 <__udivmoddi4+0x8e>
 8000604:	eba7 0808 	sub.w	r8, r7, r8
 8000608:	f1a9 0c02 	sub.w	ip, r9, #2
 800060c:	4441      	add	r1, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c9      	b.n	80005ac <__udivmoddi4+0x2b8>
 8000618:	f1ae 0e02 	sub.w	lr, lr, #2
 800061c:	443c      	add	r4, r7
 800061e:	e744      	b.n	80004aa <__udivmoddi4+0x1b6>
 8000620:	3b02      	subs	r3, #2
 8000622:	443c      	add	r4, r7
 8000624:	e75e      	b.n	80004e4 <__udivmoddi4+0x1f0>
 8000626:	4649      	mov	r1, r9
 8000628:	e78d      	b.n	8000546 <__udivmoddi4+0x252>
 800062a:	eba1 0108 	sub.w	r1, r1, r8
 800062e:	46cc      	mov	ip, r9
 8000630:	fbb1 f9fe 	udiv	r9, r1, lr
 8000634:	fb09 f804 	mul.w	r8, r9, r4
 8000638:	e7b8      	b.n	80005ac <__udivmoddi4+0x2b8>
 800063a:	bf00      	nop

0800063c <__aeabi_idiv0>:
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop

08000640 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08e      	sub	sp, #56	@ 0x38
 8000644:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000656:	4b48      	ldr	r3, [pc, #288]	@ (8000778 <MX_GPIO_Init+0x138>)
 8000658:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800065c:	4a46      	ldr	r2, [pc, #280]	@ (8000778 <MX_GPIO_Init+0x138>)
 800065e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000662:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000666:	4b44      	ldr	r3, [pc, #272]	@ (8000778 <MX_GPIO_Init+0x138>)
 8000668:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800066c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000670:	623b      	str	r3, [r7, #32]
 8000672:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000674:	4b40      	ldr	r3, [pc, #256]	@ (8000778 <MX_GPIO_Init+0x138>)
 8000676:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800067a:	4a3f      	ldr	r2, [pc, #252]	@ (8000778 <MX_GPIO_Init+0x138>)
 800067c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000680:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000684:	4b3c      	ldr	r3, [pc, #240]	@ (8000778 <MX_GPIO_Init+0x138>)
 8000686:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800068a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800068e:	61fb      	str	r3, [r7, #28]
 8000690:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b39      	ldr	r3, [pc, #228]	@ (8000778 <MX_GPIO_Init+0x138>)
 8000694:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000698:	4a37      	ldr	r2, [pc, #220]	@ (8000778 <MX_GPIO_Init+0x138>)
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006a2:	4b35      	ldr	r3, [pc, #212]	@ (8000778 <MX_GPIO_Init+0x138>)
 80006a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	61bb      	str	r3, [r7, #24]
 80006ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006b0:	4b31      	ldr	r3, [pc, #196]	@ (8000778 <MX_GPIO_Init+0x138>)
 80006b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006b6:	4a30      	ldr	r2, [pc, #192]	@ (8000778 <MX_GPIO_Init+0x138>)
 80006b8:	f043 0320 	orr.w	r3, r3, #32
 80006bc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000778 <MX_GPIO_Init+0x138>)
 80006c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006c6:	f003 0320 	and.w	r3, r3, #32
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000778 <MX_GPIO_Init+0x138>)
 80006d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006d4:	4a28      	ldr	r2, [pc, #160]	@ (8000778 <MX_GPIO_Init+0x138>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006de:	4b26      	ldr	r3, [pc, #152]	@ (8000778 <MX_GPIO_Init+0x138>)
 80006e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ec:	4b22      	ldr	r3, [pc, #136]	@ (8000778 <MX_GPIO_Init+0x138>)
 80006ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006f2:	4a21      	ldr	r2, [pc, #132]	@ (8000778 <MX_GPIO_Init+0x138>)
 80006f4:	f043 0308 	orr.w	r3, r3, #8
 80006f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000778 <MX_GPIO_Init+0x138>)
 80006fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000702:	f003 0308 	and.w	r3, r3, #8
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	4b1b      	ldr	r3, [pc, #108]	@ (8000778 <MX_GPIO_Init+0x138>)
 800070c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000710:	4a19      	ldr	r2, [pc, #100]	@ (8000778 <MX_GPIO_Init+0x138>)
 8000712:	f043 0302 	orr.w	r3, r3, #2
 8000716:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800071a:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <MX_GPIO_Init+0x138>)
 800071c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000720:	f003 0302 	and.w	r3, r3, #2
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000728:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <MX_GPIO_Init+0x138>)
 800072a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800072e:	4a12      	ldr	r2, [pc, #72]	@ (8000778 <MX_GPIO_Init+0x138>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000734:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_GPIO_Init+0x138>)
 800073a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800073e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_8, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800074c:	480b      	ldr	r0, [pc, #44]	@ (800077c <MX_GPIO_Init+0x13c>)
 800074e:	f003 fa29 	bl	8003ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000752:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000756:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	2301      	movs	r3, #1
 800075a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000768:	4619      	mov	r1, r3
 800076a:	4804      	ldr	r0, [pc, #16]	@ (800077c <MX_GPIO_Init+0x13c>)
 800076c:	f003 f8bc 	bl	80038e8 <HAL_GPIO_Init>

}
 8000770:	bf00      	nop
 8000772:	3738      	adds	r7, #56	@ 0x38
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	44020c00 	.word	0x44020c00
 800077c:	42022000 	.word	0x42022000

08000780 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000784:	f003 fa52 	bl	8003c2c <HAL_ICACHE_Enable>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 800078e:	f000 fb35 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <lfs_init>:
#include "stm32h573i_discovery_ospi.h"
#include "usart.h"
#include "gpio.h"
#include <string.h>

int lfs_init(lfs_t *lfs, struct lfs_config *cfg) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b098      	sub	sp, #96	@ 0x60
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*)"Init LittleFS...\r\n", 19, HAL_MAX_DELAY);
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	2213      	movs	r2, #19
 80007a8:	493c      	ldr	r1, [pc, #240]	@ (800089c <lfs_init+0x104>)
 80007aa:	483d      	ldr	r0, [pc, #244]	@ (80008a0 <lfs_init+0x108>)
 80007ac:	f009 fa70 	bl	8009c90 <HAL_UART_Transmit>

    BSP_OSPI_NOR_Init_t FlashConfig = {
 80007b0:	2301      	movs	r3, #1
 80007b2:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 80007b6:	2300      	movs	r3, #0
 80007b8:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
        .InterfaceMode = BSP_OSPI_NOR_OPI_MODE,
        .TransferRate = BSP_OSPI_NOR_STR_TRANSFER
    };

    if (BSP_OSPI_NOR_Init(0, &FlashConfig) != BSP_ERROR_NONE) {
 80007bc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007c0:	4619      	mov	r1, r3
 80007c2:	2000      	movs	r0, #0
 80007c4:	f001 fd78 	bl	80022b8 <BSP_OSPI_NOR_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d009      	beq.n	80007e2 <lfs_init+0x4a>
        HAL_UART_Transmit(&huart1, (uint8_t*)"Erreur BSP_OSPI_NOR_Init\r\n", 27, HAL_MAX_DELAY);
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295
 80007d2:	221b      	movs	r2, #27
 80007d4:	4933      	ldr	r1, [pc, #204]	@ (80008a4 <lfs_init+0x10c>)
 80007d6:	4832      	ldr	r0, [pc, #200]	@ (80008a0 <lfs_init+0x108>)
 80007d8:	f009 fa5a 	bl	8009c90 <HAL_UART_Transmit>
        return -1;
 80007dc:	f04f 33ff 	mov.w	r3, #4294967295
 80007e0:	e057      	b.n	8000892 <lfs_init+0xfa>
    }

    *cfg = (struct lfs_config){
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	4618      	mov	r0, r3
 80007e6:	2354      	movs	r3, #84	@ 0x54
 80007e8:	461a      	mov	r2, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	f012 f931 	bl	8012a52 <memset>
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	4a2d      	ldr	r2, [pc, #180]	@ (80008a8 <lfs_init+0x110>)
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	4a2c      	ldr	r2, [pc, #176]	@ (80008ac <lfs_init+0x114>)
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	4a2c      	ldr	r2, [pc, #176]	@ (80008b0 <lfs_init+0x118>)
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	4a2b      	ldr	r2, [pc, #172]	@ (80008b4 <lfs_init+0x11c>)
 8000806:	611a      	str	r2, [r3, #16]
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800080e:	615a      	str	r2, [r3, #20]
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000816:	619a      	str	r2, [r3, #24]
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800081e:	61da      	str	r2, [r3, #28]
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000826:	621a      	str	r2, [r3, #32]
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800082e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000836:	629a      	str	r2, [r3, #40]	@ 0x28
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	2210      	movs	r2, #16
 800083c:	62da      	str	r2, [r3, #44]	@ 0x2c
        .cache_size = 256,
        .lookahead_size = 16,
        .block_cycles = 500,
    };

    if (lfs_format(lfs, cfg) != 0) {
 800083e:	6839      	ldr	r1, [r7, #0]
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f011 fdb1 	bl	80123a8 <lfs_format>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d009      	beq.n	8000860 <lfs_init+0xc8>
        HAL_UART_Transmit(&huart1, (uint8_t*)"Format failed\r\n", 15, HAL_MAX_DELAY);
 800084c:	f04f 33ff 	mov.w	r3, #4294967295
 8000850:	220f      	movs	r2, #15
 8000852:	4919      	ldr	r1, [pc, #100]	@ (80008b8 <lfs_init+0x120>)
 8000854:	4812      	ldr	r0, [pc, #72]	@ (80008a0 <lfs_init+0x108>)
 8000856:	f009 fa1b 	bl	8009c90 <HAL_UART_Transmit>
        return -2;
 800085a:	f06f 0301 	mvn.w	r3, #1
 800085e:	e018      	b.n	8000892 <lfs_init+0xfa>
    }

    if (lfs_mount(lfs, cfg) != 0) {
 8000860:	6839      	ldr	r1, [r7, #0]
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f011 fdb6 	bl	80123d4 <lfs_mount>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d009      	beq.n	8000882 <lfs_init+0xea>
        HAL_UART_Transmit(&huart1, (uint8_t*)"Mount failed\r\n", 14, HAL_MAX_DELAY);
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
 8000872:	220e      	movs	r2, #14
 8000874:	4911      	ldr	r1, [pc, #68]	@ (80008bc <lfs_init+0x124>)
 8000876:	480a      	ldr	r0, [pc, #40]	@ (80008a0 <lfs_init+0x108>)
 8000878:	f009 fa0a 	bl	8009c90 <HAL_UART_Transmit>
        return -3;
 800087c:	f06f 0302 	mvn.w	r3, #2
 8000880:	e007      	b.n	8000892 <lfs_init+0xfa>
    }

    HAL_UART_Transmit(&huart1, (uint8_t*)"LittleFS OK\r\n", 13, HAL_MAX_DELAY);
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
 8000886:	220d      	movs	r2, #13
 8000888:	490d      	ldr	r1, [pc, #52]	@ (80008c0 <lfs_init+0x128>)
 800088a:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <lfs_init+0x108>)
 800088c:	f009 fa00 	bl	8009c90 <HAL_UART_Transmit>
    return 0;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3760      	adds	r7, #96	@ 0x60
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	08013650 	.word	0x08013650
 80008a0:	200000e4 	.word	0x200000e4
 80008a4:	08013664 	.word	0x08013664
 80008a8:	080015b1 	.word	0x080015b1
 80008ac:	080015f1 	.word	0x080015f1
 80008b0:	08001631 	.word	0x08001631
 80008b4:	0800166d 	.word	0x0800166d
 80008b8:	08013680 	.word	0x08013680
 80008bc:	08013690 	.word	0x08013690
 80008c0:	080136a0 	.word	0x080136a0

080008c4 <blink_led>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void blink_led(int times) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < times; i++) {
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	e014      	b.n	80008fc <blink_led+0x38>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_8); // LD2
 80008d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008d6:	480e      	ldr	r0, [pc, #56]	@ (8000910 <blink_led+0x4c>)
 80008d8:	f003 f97c 	bl	8003bd4 <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 80008dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008e0:	f002 fdfe 	bl	80034e0 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_8);
 80008e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008e8:	4809      	ldr	r0, [pc, #36]	@ (8000910 <blink_led+0x4c>)
 80008ea:	f003 f973 	bl	8003bd4 <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 80008ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008f2:	f002 fdf5 	bl	80034e0 <HAL_Delay>
  for (int i = 0; i < times; i++) {
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	3301      	adds	r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fa      	ldr	r2, [r7, #12]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	429a      	cmp	r2, r3
 8000902:	dbe6      	blt.n	80008d2 <blink_led+0xe>
  }
}
 8000904:	bf00      	nop
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	42022000 	.word	0x42022000

08000914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 800091c:	f002 fd22 	bl	8003364 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  SystemClock_Config();
 8000920:	f000 f9fa 	bl	8000d18 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  MX_GPIO_Init();
 8000924:	f7ff fe8c 	bl	8000640 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000928:	f7ff ff2a 	bl	8000780 <MX_ICACHE_Init>
  MX_OCTOSPI1_Init();
 800092c:	f000 fa76 	bl	8000e1c <MX_OCTOSPI1_Init>
  MX_USART1_UART_Init();
 8000930:	f000 fd64 	bl	80013fc <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1, (uint8_t*)"Init done. Starting LittleFS test...\r\n", 38, HAL_MAX_DELAY);
 8000934:	f04f 33ff 	mov.w	r3, #4294967295
 8000938:	2226      	movs	r2, #38	@ 0x26
 800093a:	49d8      	ldr	r1, [pc, #864]	@ (8000c9c <main+0x388>)
 800093c:	48d8      	ldr	r0, [pc, #864]	@ (8000ca0 <main+0x38c>)
 800093e:	f009 f9a7 	bl	8009c90 <HAL_UART_Transmit>
  blink_led(4);
 8000942:	2004      	movs	r0, #4
 8000944:	f7ff ffbe 	bl	80008c4 <blink_led>

  lfs_t lfs;
  struct lfs_config cfg;

  if (lfs_init(&lfs, &cfg) != 0) {
 8000948:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 800094c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff20 	bl	8000798 <lfs_init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <main+0x4e>
    Error_Handler();
 800095e:	f000 fa4d 	bl	8000dfc <Error_Handler>
  }

  lfs_file_t file;
  const char *text = "Hello from LittleFS!\r\n";
 8000962:	4bd0      	ldr	r3, [pc, #832]	@ (8000ca4 <main+0x390>)
 8000964:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
  if (lfs_file_open(&lfs, &file, "test.txt", LFS_O_WRONLY | LFS_O_CREAT) < 0) {
 8000968:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 800096c:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8000970:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000974:	4acc      	ldr	r2, [pc, #816]	@ (8000ca8 <main+0x394>)
 8000976:	f011 fd59 	bl	801242c <lfs_file_open>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	da01      	bge.n	8000984 <main+0x70>
    Error_Handler();
 8000980:	f000 fa3c 	bl	8000dfc <Error_Handler>
  }
  lfs_file_write(&lfs, &file, text, strlen(text));
 8000984:	f8d7 024c 	ldr.w	r0, [r7, #588]	@ 0x24c
 8000988:	f7ff fc80 	bl	800028c <strlen>
 800098c:	4603      	mov	r3, r0
 800098e:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000992:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8000996:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 800099a:	f011 fdd7 	bl	801254c <lfs_file_write>
  lfs_file_close(&lfs, &file);
 800099e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80009a2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f011 fd73 	bl	8012494 <lfs_file_close>

  char buffer[64] = {0};
 80009ae:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80009b2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80009b6:	4618      	mov	r0, r3
 80009b8:	2340      	movs	r3, #64	@ 0x40
 80009ba:	461a      	mov	r2, r3
 80009bc:	2100      	movs	r1, #0
 80009be:	f012 f848 	bl	8012a52 <memset>
  if (lfs_file_open(&lfs, &file, "test.txt", LFS_O_RDONLY) < 0) {
 80009c2:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80009c6:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 80009ca:	2301      	movs	r3, #1
 80009cc:	4ab6      	ldr	r2, [pc, #728]	@ (8000ca8 <main+0x394>)
 80009ce:	f011 fd2d 	bl	801242c <lfs_file_open>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	da01      	bge.n	80009dc <main+0xc8>
    Error_Handler();
 80009d8:	f000 fa10 	bl	8000dfc <Error_Handler>
  }
  lfs_file_read(&lfs, &file, buffer, sizeof(buffer));
 80009dc:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 80009e0:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80009e4:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 80009e8:	2340      	movs	r3, #64	@ 0x40
 80009ea:	f011 fd7f 	bl	80124ec <lfs_file_read>
  lfs_file_close(&lfs, &file);
 80009ee:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80009f2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f011 fd4b 	bl	8012494 <lfs_file_close>
  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80009fe:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fc42 	bl	800028c <strlen>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295
 8000a14:	48a2      	ldr	r0, [pc, #648]	@ (8000ca0 <main+0x38c>)
 8000a16:	f009 f93b 	bl	8009c90 <HAL_UART_Transmit>
  blink_led(5);
 8000a1a:	2005      	movs	r0, #5
 8000a1c:	f7ff ff52 	bl	80008c4 <blink_led>

  lfs_file_t file2;
  const char *text2 = "Test File2!\r\n";
 8000a20:	4ba2      	ldr	r3, [pc, #648]	@ (8000cac <main+0x398>)
 8000a22:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
  if (lfs_file_open(&lfs, &file2, "test2.txt", LFS_O_WRONLY | LFS_O_CREAT) < 0) {
 8000a26:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8000a2a:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8000a2e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000a32:	4a9f      	ldr	r2, [pc, #636]	@ (8000cb0 <main+0x39c>)
 8000a34:	f011 fcfa 	bl	801242c <lfs_file_open>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	da01      	bge.n	8000a42 <main+0x12e>
    Error_Handler();
 8000a3e:	f000 f9dd 	bl	8000dfc <Error_Handler>
  }
  lfs_file_write(&lfs, &file2, text2, strlen(text2));
 8000a42:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 8000a46:	f7ff fc21 	bl	800028c <strlen>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8000a50:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8000a54:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8000a58:	f011 fd78 	bl	801254c <lfs_file_write>
  lfs_file_close(&lfs, &file2);
 8000a5c:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8000a60:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000a64:	4611      	mov	r1, r2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f011 fd14 	bl	8012494 <lfs_file_close>

  if (lfs_file_open(&lfs, &file2, "test2.txt", LFS_O_RDONLY) < 0) {
 8000a6c:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8000a70:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8000a74:	2301      	movs	r3, #1
 8000a76:	4a8e      	ldr	r2, [pc, #568]	@ (8000cb0 <main+0x39c>)
 8000a78:	f011 fcd8 	bl	801242c <lfs_file_open>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	da01      	bge.n	8000a86 <main+0x172>
    Error_Handler();
 8000a82:	f000 f9bb 	bl	8000dfc <Error_Handler>
  }
  char bufferr[64] = {0};
 8000a86:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000a8a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000a8e:	4618      	mov	r0, r3
 8000a90:	2340      	movs	r3, #64	@ 0x40
 8000a92:	461a      	mov	r2, r3
 8000a94:	2100      	movs	r1, #0
 8000a96:	f011 ffdc 	bl	8012a52 <memset>
  lfs_file_read(&lfs, &file2, bufferr, sizeof(bufferr));
 8000a9a:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000a9e:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8000aa2:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8000aa6:	2340      	movs	r3, #64	@ 0x40
 8000aa8:	f011 fd20 	bl	80124ec <lfs_file_read>
  lfs_file_close(&lfs, &file2);
 8000aac:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8000ab0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f011 fcec 	bl	8012494 <lfs_file_close>
  HAL_UART_Transmit(&huart1, (uint8_t*)bufferr, strlen(bufferr), HAL_MAX_DELAY);
 8000abc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fbe3 	bl	800028c <strlen>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	4873      	ldr	r0, [pc, #460]	@ (8000ca0 <main+0x38c>)
 8000ad4:	f009 f8dc 	bl	8009c90 <HAL_UART_Transmit>
  blink_led(5);
 8000ad8:	2005      	movs	r0, #5
 8000ada:	f7ff fef3 	bl	80008c4 <blink_led>

  HAL_UART_Transmit(&huart1, (uint8_t*)"Testing lfs_remove()...\r\n", 26, HAL_MAX_DELAY);
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	221a      	movs	r2, #26
 8000ae4:	4973      	ldr	r1, [pc, #460]	@ (8000cb4 <main+0x3a0>)
 8000ae6:	486e      	ldr	r0, [pc, #440]	@ (8000ca0 <main+0x38c>)
 8000ae8:	f009 f8d2 	bl	8009c90 <HAL_UART_Transmit>

  int err = lfs_remove(&lfs, "test.txt");
 8000aec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000af0:	496d      	ldr	r1, [pc, #436]	@ (8000ca8 <main+0x394>)
 8000af2:	4618      	mov	r0, r3
 8000af4:	f011 fc84 	bl	8012400 <lfs_remove>
 8000af8:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
  if (err == 0) {
 8000afc:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d107      	bne.n	8000b14 <main+0x200>
    HAL_UART_Transmit(&huart1, (uint8_t*)"File removed successfully.\r\n", 29, HAL_MAX_DELAY);
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
 8000b08:	221d      	movs	r2, #29
 8000b0a:	496b      	ldr	r1, [pc, #428]	@ (8000cb8 <main+0x3a4>)
 8000b0c:	4864      	ldr	r0, [pc, #400]	@ (8000ca0 <main+0x38c>)
 8000b0e:	f009 f8bf 	bl	8009c90 <HAL_UART_Transmit>
 8000b12:	e018      	b.n	8000b46 <main+0x232>
  } else if (err == LFS_ERR_NOENT) {
 8000b14:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000b18:	f113 0f02 	cmn.w	r3, #2
 8000b1c:	d107      	bne.n	8000b2e <main+0x21a>
    HAL_UART_Transmit(&huart1, (uint8_t*)"File did not exist (OK).\r\n", 27, HAL_MAX_DELAY);
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	221b      	movs	r2, #27
 8000b24:	4965      	ldr	r1, [pc, #404]	@ (8000cbc <main+0x3a8>)
 8000b26:	485e      	ldr	r0, [pc, #376]	@ (8000ca0 <main+0x38c>)
 8000b28:	f009 f8b2 	bl	8009c90 <HAL_UART_Transmit>
 8000b2c:	e00b      	b.n	8000b46 <main+0x232>
  } else {
    HAL_UART_Transmit(&huart1, (uint8_t*)"Remove failed!\r\n", 17, HAL_MAX_DELAY);
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	2211      	movs	r2, #17
 8000b34:	4962      	ldr	r1, [pc, #392]	@ (8000cc0 <main+0x3ac>)
 8000b36:	485a      	ldr	r0, [pc, #360]	@ (8000ca0 <main+0x38c>)
 8000b38:	f009 f8aa 	bl	8009c90 <HAL_UART_Transmit>
    blink_led(3);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f7ff fec1 	bl	80008c4 <blink_led>
    Error_Handler();
 8000b42:	f000 f95b 	bl	8000dfc <Error_Handler>
  }

  const char *msg = "contenu file 2!\r\n";
 8000b46:	4b5f      	ldr	r3, [pc, #380]	@ (8000cc4 <main+0x3b0>)
 8000b48:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
  err = lfs_file_open(&lfs, &file, "test.txt", LFS_O_WRONLY | LFS_O_CREAT);
 8000b4c:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000b50:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8000b54:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000b58:	4a53      	ldr	r2, [pc, #332]	@ (8000ca8 <main+0x394>)
 8000b5a:	f011 fc67 	bl	801242c <lfs_file_open>
 8000b5e:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
  if (err < 0) {
 8000b62:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	da08      	bge.n	8000b7c <main+0x268>
    HAL_UART_Transmit(&huart1, (uint8_t*)"Failed to create file\r\n", 24, HAL_MAX_DELAY);
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	2218      	movs	r2, #24
 8000b70:	4955      	ldr	r1, [pc, #340]	@ (8000cc8 <main+0x3b4>)
 8000b72:	484b      	ldr	r0, [pc, #300]	@ (8000ca0 <main+0x38c>)
 8000b74:	f009 f88c 	bl	8009c90 <HAL_UART_Transmit>
    Error_Handler();
 8000b78:	f000 f940 	bl	8000dfc <Error_Handler>
  }
  lfs_file_write(&lfs, &file, msg, strlen(msg));
 8000b7c:	f8d7 0240 	ldr.w	r0, [r7, #576]	@ 0x240
 8000b80:	f7ff fb84 	bl	800028c <strlen>
 8000b84:	4603      	mov	r3, r0
 8000b86:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000b8a:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8000b8e:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 8000b92:	f011 fcdb 	bl	801254c <lfs_file_write>
  lfs_file_close(&lfs, &file);
 8000b96:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000b9a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f011 fc77 	bl	8012494 <lfs_file_close>

  err = lfs_file_open(&lfs, &file, "test.txt", LFS_O_RDONLY);
 8000ba6:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000baa:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8000bae:	2301      	movs	r3, #1
 8000bb0:	4a3d      	ldr	r2, [pc, #244]	@ (8000ca8 <main+0x394>)
 8000bb2:	f011 fc3b 	bl	801242c <lfs_file_open>
 8000bb6:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
  if (err < 0) {
 8000bba:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	da08      	bge.n	8000bd4 <main+0x2c0>
    HAL_UART_Transmit(&huart1, (uint8_t*)"Read failed\r\n", 14, HAL_MAX_DELAY);
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc6:	220e      	movs	r2, #14
 8000bc8:	4940      	ldr	r1, [pc, #256]	@ (8000ccc <main+0x3b8>)
 8000bca:	4835      	ldr	r0, [pc, #212]	@ (8000ca0 <main+0x38c>)
 8000bcc:	f009 f860 	bl	8009c90 <HAL_UART_Transmit>
    Error_Handler();
 8000bd0:	f000 f914 	bl	8000dfc <Error_Handler>
  }
  char buffer2[64] = {0};
 8000bd4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000bd8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8000bdc:	4618      	mov	r0, r3
 8000bde:	2340      	movs	r3, #64	@ 0x40
 8000be0:	461a      	mov	r2, r3
 8000be2:	2100      	movs	r1, #0
 8000be4:	f011 ff35 	bl	8012a52 <memset>
  lfs_file_read(&lfs, &file, buffer2, sizeof(buffer2));
 8000be8:	1d3a      	adds	r2, r7, #4
 8000bea:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000bee:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8000bf2:	2340      	movs	r3, #64	@ 0x40
 8000bf4:	f011 fc7a 	bl	80124ec <lfs_file_read>
  lfs_file_close(&lfs, &file);
 8000bf8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000bfc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f011 fc46 	bl	8012494 <lfs_file_close>
  HAL_UART_Transmit(&huart1, (uint8_t*)"Read content: ", 14, HAL_MAX_DELAY);
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	220e      	movs	r2, #14
 8000c0e:	4930      	ldr	r1, [pc, #192]	@ (8000cd0 <main+0x3bc>)
 8000c10:	4823      	ldr	r0, [pc, #140]	@ (8000ca0 <main+0x38c>)
 8000c12:	f009 f83d 	bl	8009c90 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t*)buffer2, strlen(buffer2), HAL_MAX_DELAY);
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fb37 	bl	800028c <strlen>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	1d39      	adds	r1, r7, #4
 8000c24:	f04f 33ff 	mov.w	r3, #4294967295
 8000c28:	481d      	ldr	r0, [pc, #116]	@ (8000ca0 <main+0x38c>)
 8000c2a:	f009 f831 	bl	8009c90 <HAL_UART_Transmit>

  err = lfs_remove(&lfs, "test.txt");
 8000c2e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000c32:	491d      	ldr	r1, [pc, #116]	@ (8000ca8 <main+0x394>)
 8000c34:	4618      	mov	r0, r3
 8000c36:	f011 fbe3 	bl	8012400 <lfs_remove>
 8000c3a:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
  if (err == 0) {
 8000c3e:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d107      	bne.n	8000c56 <main+0x342>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\nFile removed again successfully.\r\n", 35, HAL_MAX_DELAY);
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4a:	2223      	movs	r2, #35	@ 0x23
 8000c4c:	4921      	ldr	r1, [pc, #132]	@ (8000cd4 <main+0x3c0>)
 8000c4e:	4814      	ldr	r0, [pc, #80]	@ (8000ca0 <main+0x38c>)
 8000c50:	f009 f81e 	bl	8009c90 <HAL_UART_Transmit>
 8000c54:	e008      	b.n	8000c68 <main+0x354>
  } else {
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\nFinal remove failed.\r\n", 24, HAL_MAX_DELAY);
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	2218      	movs	r2, #24
 8000c5c:	491e      	ldr	r1, [pc, #120]	@ (8000cd8 <main+0x3c4>)
 8000c5e:	4810      	ldr	r0, [pc, #64]	@ (8000ca0 <main+0x38c>)
 8000c60:	f009 f816 	bl	8009c90 <HAL_UART_Transmit>
    Error_Handler();
 8000c64:	f000 f8ca 	bl	8000dfc <Error_Handler>
  }

  err = lfs_file_open(&lfs, &file2, "test.txt", LFS_O_RDONLY);
 8000c68:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8000c6c:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8000c70:	2301      	movs	r3, #1
 8000c72:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca8 <main+0x394>)
 8000c74:	f011 fbda 	bl	801242c <lfs_file_open>
 8000c78:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
  if (err == LFS_ERR_NOENT) {
 8000c7c:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000c80:	f113 0f02 	cmn.w	r3, #2
 8000c84:	d12c      	bne.n	8000ce0 <main+0x3cc>
    HAL_UART_Transmit(&huart1, (uint8_t*)"Confirmed: file no longer exists.\r\n", 35, HAL_MAX_DELAY);
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8a:	2223      	movs	r2, #35	@ 0x23
 8000c8c:	4913      	ldr	r1, [pc, #76]	@ (8000cdc <main+0x3c8>)
 8000c8e:	4804      	ldr	r0, [pc, #16]	@ (8000ca0 <main+0x38c>)
 8000c90:	f008 fffe 	bl	8009c90 <HAL_UART_Transmit>
    blink_led(2);
 8000c94:	2002      	movs	r0, #2
 8000c96:	f7ff fe15 	bl	80008c4 <blink_led>
 8000c9a:	e036      	b.n	8000d0a <main+0x3f6>
 8000c9c:	080136b0 	.word	0x080136b0
 8000ca0:	200000e4 	.word	0x200000e4
 8000ca4:	080136d8 	.word	0x080136d8
 8000ca8:	080136f0 	.word	0x080136f0
 8000cac:	080136fc 	.word	0x080136fc
 8000cb0:	0801370c 	.word	0x0801370c
 8000cb4:	08013718 	.word	0x08013718
 8000cb8:	08013734 	.word	0x08013734
 8000cbc:	08013754 	.word	0x08013754
 8000cc0:	08013770 	.word	0x08013770
 8000cc4:	08013784 	.word	0x08013784
 8000cc8:	08013798 	.word	0x08013798
 8000ccc:	080137b0 	.word	0x080137b0
 8000cd0:	080137c0 	.word	0x080137c0
 8000cd4:	080137d0 	.word	0x080137d0
 8000cd8:	080137f8 	.word	0x080137f8
 8000cdc:	08013814 	.word	0x08013814
  } else {
    HAL_UART_Transmit(&huart1, (uint8_t*)"ERROR: File still exists.\r\n", 27, HAL_MAX_DELAY);
 8000ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce4:	221b      	movs	r2, #27
 8000ce6:	490a      	ldr	r1, [pc, #40]	@ (8000d10 <main+0x3fc>)
 8000ce8:	480a      	ldr	r0, [pc, #40]	@ (8000d14 <main+0x400>)
 8000cea:	f008 ffd1 	bl	8009c90 <HAL_UART_Transmit>
    lfs_file_close(&lfs, &file2);
 8000cee:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8000cf2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f011 fbcb 	bl	8012494 <lfs_file_close>
    blink_led(4);
 8000cfe:	2004      	movs	r0, #4
 8000d00:	f7ff fde0 	bl	80008c4 <blink_led>
    Error_Handler();
 8000d04:	f000 f87a 	bl	8000dfc <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	e7fd      	b.n	8000d0a <main+0x3f6>
 8000d0e:	bf00      	nop
 8000d10:	08013838 	.word	0x08013838
 8000d14:	200000e4 	.word	0x200000e4

08000d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b09c      	sub	sp, #112	@ 0x70
 8000d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 0320 	add.w	r3, r7, #32
 8000d22:	2250      	movs	r2, #80	@ 0x50
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f011 fe93 	bl	8012a52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
 8000d3c:	615a      	str	r2, [r3, #20]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000df4 <SystemClock_Config+0xdc>)
 8000d40:	691b      	ldr	r3, [r3, #16]
 8000d42:	4a2c      	ldr	r2, [pc, #176]	@ (8000df4 <SystemClock_Config+0xdc>)
 8000d44:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000d48:	6113      	str	r3, [r2, #16]
 8000d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000df4 <SystemClock_Config+0xdc>)
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d56:	bf00      	nop
 8000d58:	4b26      	ldr	r3, [pc, #152]	@ (8000df4 <SystemClock_Config+0xdc>)
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	f003 0308 	and.w	r3, r3, #8
 8000d60:	2b08      	cmp	r3, #8
 8000d62:	d1f9      	bne.n	8000d58 <SystemClock_Config+0x40>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000d64:	2310      	movs	r3, #16
 8000d66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000d68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000d6e:	2320      	movs	r3, #32
 8000d70:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d72:	2302      	movs	r3, #2
 8000d74:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8000d76:	2302      	movs	r3, #2
 8000d78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 8000d7e:	237d      	movs	r3, #125	@ 0x7d
 8000d80:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d82:	2302      	movs	r3, #2
 8000d84:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d86:	2302      	movs	r3, #2
 8000d88:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000d8e:	2308      	movs	r3, #8
 8000d90:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9a:	f107 0320 	add.w	r3, r7, #32
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 ff54 	bl	8003c4c <HAL_RCC_OscConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000daa:	f000 f827 	bl	8000dfc <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dae:	231f      	movs	r3, #31
 8000db0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db2:	2303      	movs	r3, #3
 8000db4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dc6:	f107 0308 	add.w	r3, r7, #8
 8000dca:	2105      	movs	r1, #5
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f003 fb75 	bl	80044bc <HAL_RCC_ClockConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000dd8:	f000 f810 	bl	8000dfc <Error_Handler>
  }

  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000ddc:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <SystemClock_Config+0xe0>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000de4:	4a04      	ldr	r2, [pc, #16]	@ (8000df8 <SystemClock_Config+0xe0>)
 8000de6:	f043 0320 	orr.w	r3, r3, #32
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	bf00      	nop
 8000dee:	3770      	adds	r7, #112	@ 0x70
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	44020800 	.word	0x44020800
 8000df8:	40022000 	.word	0x40022000

08000dfc <Error_Handler>:

/* USER CODE BEGIN 4 */
/* USER CODE END 4 */

void Error_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  __disable_irq();
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_9);
 8000e04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e08:	4803      	ldr	r0, [pc, #12]	@ (8000e18 <Error_Handler+0x1c>)
 8000e0a:	f002 fee3 	bl	8003bd4 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000e0e:	2064      	movs	r0, #100	@ 0x64
 8000e10:	f002 fb66 	bl	80034e0 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_9);
 8000e14:	bf00      	nop
 8000e16:	e7f5      	b.n	8000e04 <Error_Handler+0x8>
 8000e18:	42022000 	.word	0x42022000

08000e1c <MX_OCTOSPI1_Init>:

XSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END OCTOSPI1_Init 0 */

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	@ (8000e90 <MX_OCTOSPI1_Init+0x74>)
 8000e22:	4a1c      	ldr	r2, [pc, #112]	@ (8000e94 <MX_OCTOSPI1_Init+0x78>)
 8000e24:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThresholdByte = 1;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	@ (8000e90 <MX_OCTOSPI1_Init+0x74>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	605a      	str	r2, [r3, #4]
  hospi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <MX_OCTOSPI1_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 8000e32:	4b17      	ldr	r3, [pc, #92]	@ (8000e90 <MX_OCTOSPI1_Init+0x74>)
 8000e34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000e38:	60da      	str	r2, [r3, #12]
  hospi1.Init.MemorySize = HAL_XSPI_SIZE_64B;
 8000e3a:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <MX_OCTOSPI1_Init+0x74>)
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTimeCycle = 1;
 8000e40:	4b13      	ldr	r3, [pc, #76]	@ (8000e90 <MX_OCTOSPI1_Init+0x74>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000e46:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <MX_OCTOSPI1_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000e4c:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <MX_OCTOSPI1_Init+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8000e52:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <MX_OCTOSPI1_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 0;
 8000e58:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <MX_OCTOSPI1_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <MX_OCTOSPI1_Init+0x74>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8000e64:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <MX_OCTOSPI1_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000e6a:	4b09      	ldr	r3, [pc, #36]	@ (8000e90 <MX_OCTOSPI1_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_XSPI_DELAY_BLOCK_BYPASS;
 8000e70:	4b07      	ldr	r3, [pc, #28]	@ (8000e90 <MX_OCTOSPI1_Init+0x74>)
 8000e72:	2208      	movs	r2, #8
 8000e74:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.Refresh = 0;
 8000e76:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <MX_OCTOSPI1_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_XSPI_Init(&hospi1) != HAL_OK)
 8000e7c:	4804      	ldr	r0, [pc, #16]	@ (8000e90 <MX_OCTOSPI1_Init+0x74>)
 8000e7e:	f009 fcd5 	bl	800a82c <HAL_XSPI_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_OCTOSPI1_Init+0x70>
  {
    Error_Handler();
 8000e88:	f7ff ffb8 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000084 	.word	0x20000084
 8000e94:	47001400 	.word	0x47001400

08000e98 <HAL_XSPI_MspInit>:

void HAL_XSPI_MspInit(XSPI_HandleTypeDef* xspiHandle)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b0d2      	sub	sp, #328	@ 0x148
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000ea2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000ea6:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000ebc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	2100      	movs	r1, #0
 8000eca:	f011 fdc2 	bl	8012a52 <memset>
  if(xspiHandle->Instance==OCTOSPI1)
 8000ece:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000ed2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4ac2      	ldr	r2, [pc, #776]	@ (80011e4 <HAL_XSPI_MspInit+0x34c>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	f040 817c 	bne.w	80011da <HAL_XSPI_MspInit+0x342>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000ee2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000ee6:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000eea:	f04f 0200 	mov.w	r2, #0
 8000eee:	f04f 0302 	mov.w	r3, #2
 8000ef2:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_HCLK;
 8000ef6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000efa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000efe:	2200      	movs	r2, #0
 8000f00:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f003 fe19 	bl	8004b40 <HAL_RCCEx_PeriphCLKConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_XSPI_MspInit+0x80>
    {
      Error_Handler();
 8000f14:	f7ff ff72 	bl	8000dfc <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000f18:	4bb3      	ldr	r3, [pc, #716]	@ (80011e8 <HAL_XSPI_MspInit+0x350>)
 8000f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f1e:	4ab2      	ldr	r2, [pc, #712]	@ (80011e8 <HAL_XSPI_MspInit+0x350>)
 8000f20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000f24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000f28:	4baf      	ldr	r3, [pc, #700]	@ (80011e8 <HAL_XSPI_MspInit+0x350>)
 8000f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f2e:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8000f32:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000f36:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000f40:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000f44:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f46:	4ba8      	ldr	r3, [pc, #672]	@ (80011e8 <HAL_XSPI_MspInit+0x350>)
 8000f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f4c:	4aa6      	ldr	r2, [pc, #664]	@ (80011e8 <HAL_XSPI_MspInit+0x350>)
 8000f4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f52:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f56:	4ba4      	ldr	r3, [pc, #656]	@ (80011e8 <HAL_XSPI_MspInit+0x350>)
 8000f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f5c:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8000f60:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000f64:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000f6e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000f72:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f74:	4b9c      	ldr	r3, [pc, #624]	@ (80011e8 <HAL_XSPI_MspInit+0x350>)
 8000f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f7a:	4a9b      	ldr	r2, [pc, #620]	@ (80011e8 <HAL_XSPI_MspInit+0x350>)
 8000f7c:	f043 0320 	orr.w	r3, r3, #32
 8000f80:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f84:	4b98      	ldr	r3, [pc, #608]	@ (80011e8 <HAL_XSPI_MspInit+0x350>)
 8000f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f8a:	f003 0220 	and.w	r2, r3, #32
 8000f8e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000f92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000f9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000fa0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	4b91      	ldr	r3, [pc, #580]	@ (80011e8 <HAL_XSPI_MspInit+0x350>)
 8000fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fa8:	4a8f      	ldr	r2, [pc, #572]	@ (80011e8 <HAL_XSPI_MspInit+0x350>)
 8000faa:	f043 0304 	orr.w	r3, r3, #4
 8000fae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fb2:	4b8d      	ldr	r3, [pc, #564]	@ (80011e8 <HAL_XSPI_MspInit+0x350>)
 8000fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fb8:	f003 0204 	and.w	r2, r3, #4
 8000fbc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000fc0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000fca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000fce:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd0:	4b85      	ldr	r3, [pc, #532]	@ (80011e8 <HAL_XSPI_MspInit+0x350>)
 8000fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fd6:	4a84      	ldr	r2, [pc, #528]	@ (80011e8 <HAL_XSPI_MspInit+0x350>)
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fe0:	4b81      	ldr	r3, [pc, #516]	@ (80011e8 <HAL_XSPI_MspInit+0x350>)
 8000fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fe6:	f003 0208 	and.w	r2, r3, #8
 8000fea:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000fee:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000ff8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000ffc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	4b7a      	ldr	r3, [pc, #488]	@ (80011e8 <HAL_XSPI_MspInit+0x350>)
 8001000:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001004:	4a78      	ldr	r2, [pc, #480]	@ (80011e8 <HAL_XSPI_MspInit+0x350>)
 8001006:	f043 0302 	orr.w	r3, r3, #2
 800100a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800100e:	4b76      	ldr	r3, [pc, #472]	@ (80011e8 <HAL_XSPI_MspInit+0x350>)
 8001010:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001014:	f003 0202 	and.w	r2, r3, #2
 8001018:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800101c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001026:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800102a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800102c:	4b6e      	ldr	r3, [pc, #440]	@ (80011e8 <HAL_XSPI_MspInit+0x350>)
 800102e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001032:	4a6d      	ldr	r2, [pc, #436]	@ (80011e8 <HAL_XSPI_MspInit+0x350>)
 8001034:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001038:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800103c:	4b6a      	ldr	r3, [pc, #424]	@ (80011e8 <HAL_XSPI_MspInit+0x350>)
 800103e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001042:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8001046:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800104a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001054:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001058:	681b      	ldr	r3, [r3, #0]
    PB1     ------> OCTOSPI1_IO0
    PH3     ------> OCTOSPI1_IO5
    PB2     ------> OCTOSPI1_DQS
    PH2     ------> OCTOSPI1_IO4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800105a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800105e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 8001074:	2309      	movs	r3, #9
 8001076:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800107a:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800107e:	4619      	mov	r1, r3
 8001080:	485a      	ldr	r0, [pc, #360]	@ (80011ec <HAL_XSPI_MspInit+0x354>)
 8001082:	f002 fc31 	bl	80038e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001086:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800108a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109a:	2303      	movs	r3, #3
 800109c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 80010a0:	2309      	movs	r3, #9
 80010a2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010a6:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80010aa:	4619      	mov	r1, r3
 80010ac:	4850      	ldr	r0, [pc, #320]	@ (80011f0 <HAL_XSPI_MspInit+0x358>)
 80010ae:	f002 fc1b 	bl	80038e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010b2:	2340      	movs	r3, #64	@ 0x40
 80010b4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80010ca:	230a      	movs	r3, #10
 80010cc:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010d0:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80010d4:	4619      	mov	r1, r3
 80010d6:	4845      	ldr	r0, [pc, #276]	@ (80011ec <HAL_XSPI_MspInit+0x354>)
 80010d8:	f002 fc06 	bl	80038e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010dc:	2304      	movs	r3, #4
 80010de:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ee:	2303      	movs	r3, #3
 80010f0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 80010f4:	2309      	movs	r3, #9
 80010f6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fa:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80010fe:	4619      	mov	r1, r3
 8001100:	483c      	ldr	r0, [pc, #240]	@ (80011f4 <HAL_XSPI_MspInit+0x35c>)
 8001102:	f002 fbf1 	bl	80038e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001106:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800110a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 8001120:	2309      	movs	r3, #9
 8001122:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001126:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800112a:	4619      	mov	r1, r3
 800112c:	4832      	ldr	r0, [pc, #200]	@ (80011f8 <HAL_XSPI_MspInit+0x360>)
 800112e:	f002 fbdb 	bl	80038e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001132:	2301      	movs	r3, #1
 8001134:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800114a:	230a      	movs	r3, #10
 800114c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001150:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001154:	4619      	mov	r1, r3
 8001156:	4827      	ldr	r0, [pc, #156]	@ (80011f4 <HAL_XSPI_MspInit+0x35c>)
 8001158:	f002 fbc6 	bl	80038e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800115c:	2302      	movs	r3, #2
 800115e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116e:	2303      	movs	r3, #3
 8001170:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPI1;
 8001174:	2306      	movs	r3, #6
 8001176:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800117e:	4619      	mov	r1, r3
 8001180:	481e      	ldr	r0, [pc, #120]	@ (80011fc <HAL_XSPI_MspInit+0x364>)
 8001182:	f002 fbb1 	bl	80038e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8001186:	230c      	movs	r3, #12
 8001188:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001198:	2303      	movs	r3, #3
 800119a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 800119e:	2309      	movs	r3, #9
 80011a0:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011a4:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80011a8:	4619      	mov	r1, r3
 80011aa:	4815      	ldr	r0, [pc, #84]	@ (8001200 <HAL_XSPI_MspInit+0x368>)
 80011ac:	f002 fb9c 	bl	80038e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011b0:	2304      	movs	r3, #4
 80011b2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c2:	2303      	movs	r3, #3
 80011c4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80011c8:	230a      	movs	r3, #10
 80011ca:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80011d2:	4619      	mov	r1, r3
 80011d4:	4809      	ldr	r0, [pc, #36]	@ (80011fc <HAL_XSPI_MspInit+0x364>)
 80011d6:	f002 fb87 	bl	80038e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 80011da:	bf00      	nop
 80011dc:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	47001400 	.word	0x47001400
 80011e8:	44020c00 	.word	0x44020c00
 80011ec:	42021800 	.word	0x42021800
 80011f0:	42021400 	.word	0x42021400
 80011f4:	42020800 	.word	0x42020800
 80011f8:	42020c00 	.word	0x42020c00
 80011fc:	42020400 	.word	0x42020400
 8001200:	42021c00 	.word	0x42021c00

08001204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001216:	bf00      	nop
 8001218:	e7fd      	b.n	8001216 <NMI_Handler+0x4>

0800121a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121e:	bf00      	nop
 8001220:	e7fd      	b.n	800121e <HardFault_Handler+0x4>

08001222 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001226:	bf00      	nop
 8001228:	e7fd      	b.n	8001226 <MemManage_Handler+0x4>

0800122a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122e:	bf00      	nop
 8001230:	e7fd      	b.n	800122e <BusFault_Handler+0x4>

08001232 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001236:	bf00      	nop
 8001238:	e7fd      	b.n	8001236 <UsageFault_Handler+0x4>

0800123a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001268:	f002 f91a 	bl	80034a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return 1;
 8001274:	2301      	movs	r3, #1
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <_kill>:

int _kill(int pid, int sig)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800128a:	f011 fc61 	bl	8012b50 <__errno>
 800128e:	4603      	mov	r3, r0
 8001290:	2216      	movs	r2, #22
 8001292:	601a      	str	r2, [r3, #0]
  return -1;
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_exit>:

void _exit (int status)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ffe7 	bl	8001280 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012b2:	bf00      	nop
 80012b4:	e7fd      	b.n	80012b2 <_exit+0x12>

080012b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60f8      	str	r0, [r7, #12]
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	e00a      	b.n	80012de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012c8:	f3af 8000 	nop.w
 80012cc:	4601      	mov	r1, r0
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	60ba      	str	r2, [r7, #8]
 80012d4:	b2ca      	uxtb	r2, r1
 80012d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	3301      	adds	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	dbf0      	blt.n	80012c8 <_read+0x12>
  }

  return len;
 80012e6:	687b      	ldr	r3, [r7, #4]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	e009      	b.n	8001316 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1c5a      	adds	r2, r3, #1
 8001306:	60ba      	str	r2, [r7, #8]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	3301      	adds	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	429a      	cmp	r2, r3
 800131c:	dbf1      	blt.n	8001302 <_write+0x12>
  }
  return len;
 800131e:	687b      	ldr	r3, [r7, #4]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <_close>:

int _close(int file)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001350:	605a      	str	r2, [r3, #4]
  return 0;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <_isatty>:

int _isatty(int file)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001368:	2301      	movs	r3, #1
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001376:	b480      	push	{r7}
 8001378:	b085      	sub	sp, #20
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001398:	4a14      	ldr	r2, [pc, #80]	@ (80013ec <_sbrk+0x5c>)
 800139a:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <_sbrk+0x60>)
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a4:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <_sbrk+0x64>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	@ (80013f8 <_sbrk+0x68>)
 80013b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d207      	bcs.n	80013d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c0:	f011 fbc6 	bl	8012b50 <__errno>
 80013c4:	4603      	mov	r3, r0
 80013c6:	220c      	movs	r2, #12
 80013c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	e009      	b.n	80013e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d0:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d6:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	4a05      	ldr	r2, [pc, #20]	@ (80013f4 <_sbrk+0x64>)
 80013e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e2:	68fb      	ldr	r3, [r7, #12]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200a0000 	.word	0x200a0000
 80013f0:	00000400 	.word	0x00000400
 80013f4:	200000e0 	.word	0x200000e0
 80013f8:	20000328 	.word	0x20000328

080013fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001400:	4b22      	ldr	r3, [pc, #136]	@ (800148c <MX_USART1_UART_Init+0x90>)
 8001402:	4a23      	ldr	r2, [pc, #140]	@ (8001490 <MX_USART1_UART_Init+0x94>)
 8001404:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001406:	4b21      	ldr	r3, [pc, #132]	@ (800148c <MX_USART1_UART_Init+0x90>)
 8001408:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800140c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800140e:	4b1f      	ldr	r3, [pc, #124]	@ (800148c <MX_USART1_UART_Init+0x90>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001414:	4b1d      	ldr	r3, [pc, #116]	@ (800148c <MX_USART1_UART_Init+0x90>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800141a:	4b1c      	ldr	r3, [pc, #112]	@ (800148c <MX_USART1_UART_Init+0x90>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001420:	4b1a      	ldr	r3, [pc, #104]	@ (800148c <MX_USART1_UART_Init+0x90>)
 8001422:	220c      	movs	r2, #12
 8001424:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001426:	4b19      	ldr	r3, [pc, #100]	@ (800148c <MX_USART1_UART_Init+0x90>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800142c:	4b17      	ldr	r3, [pc, #92]	@ (800148c <MX_USART1_UART_Init+0x90>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001432:	4b16      	ldr	r3, [pc, #88]	@ (800148c <MX_USART1_UART_Init+0x90>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001438:	4b14      	ldr	r3, [pc, #80]	@ (800148c <MX_USART1_UART_Init+0x90>)
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800143e:	4b13      	ldr	r3, [pc, #76]	@ (800148c <MX_USART1_UART_Init+0x90>)
 8001440:	2200      	movs	r2, #0
 8001442:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001444:	4811      	ldr	r0, [pc, #68]	@ (800148c <MX_USART1_UART_Init+0x90>)
 8001446:	f008 fbd3 	bl	8009bf0 <HAL_UART_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001450:	f7ff fcd4 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001454:	2100      	movs	r1, #0
 8001456:	480d      	ldr	r0, [pc, #52]	@ (800148c <MX_USART1_UART_Init+0x90>)
 8001458:	f009 f8fe 	bl	800a658 <HAL_UARTEx_SetTxFifoThreshold>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001462:	f7ff fccb 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001466:	2100      	movs	r1, #0
 8001468:	4808      	ldr	r0, [pc, #32]	@ (800148c <MX_USART1_UART_Init+0x90>)
 800146a:	f009 f933 	bl	800a6d4 <HAL_UARTEx_SetRxFifoThreshold>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001474:	f7ff fcc2 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001478:	4804      	ldr	r0, [pc, #16]	@ (800148c <MX_USART1_UART_Init+0x90>)
 800147a:	f009 f8b4 	bl	800a5e6 <HAL_UARTEx_DisableFifoMode>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001484:	f7ff fcba 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200000e4 	.word	0x200000e4
 8001490:	40013800 	.word	0x40013800

08001494 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b0cc      	sub	sp, #304	@ 0x130
 8001498:	af00      	add	r7, sp, #0
 800149a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800149e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014a2:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014b8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014bc:	4618      	mov	r0, r3
 80014be:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80014c2:	461a      	mov	r2, r3
 80014c4:	2100      	movs	r1, #0
 80014c6:	f011 fac4 	bl	8012a52 <memset>
  if(uartHandle->Instance==USART1)
 80014ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a33      	ldr	r2, [pc, #204]	@ (80015a4 <HAL_UART_MspInit+0x110>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d15d      	bne.n	8001598 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014e0:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80014e4:	f04f 0201 	mov.w	r2, #1
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014f4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014f8:	2200      	movs	r2, #0
 80014fa:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	4618      	mov	r0, r3
 8001502:	f003 fb1d 	bl	8004b40 <HAL_RCCEx_PeriphCLKConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 800150c:	f7ff fc76 	bl	8000dfc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001510:	4b25      	ldr	r3, [pc, #148]	@ (80015a8 <HAL_UART_MspInit+0x114>)
 8001512:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001516:	4a24      	ldr	r2, [pc, #144]	@ (80015a8 <HAL_UART_MspInit+0x114>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800151c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001520:	4b21      	ldr	r3, [pc, #132]	@ (80015a8 <HAL_UART_MspInit+0x114>)
 8001522:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001526:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800152a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800152e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001538:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800153c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <HAL_UART_MspInit+0x114>)
 8001540:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001544:	4a18      	ldr	r2, [pc, #96]	@ (80015a8 <HAL_UART_MspInit+0x114>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800154e:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <HAL_UART_MspInit+0x114>)
 8001550:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001554:	f003 0201 	and.w	r2, r3, #1
 8001558:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800155c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001566:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800156a:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800156c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001570:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001586:	2307      	movs	r3, #7
 8001588:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001590:	4619      	mov	r1, r3
 8001592:	4806      	ldr	r0, [pc, #24]	@ (80015ac <HAL_UART_MspInit+0x118>)
 8001594:	f002 f9a8 	bl	80038e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001598:	bf00      	nop
 800159a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40013800 	.word	0x40013800
 80015a8:	44020c00 	.word	0x44020c00
 80015ac:	42020000 	.word	0x42020000

080015b0 <xspi_read>:
#include "main.h"

#define START_ADDRESS  0  // Point de départ de la mémoire utile

int xspi_read(const struct lfs_config *c, lfs_block_t block,
              lfs_off_t off, void *buffer, lfs_size_t size) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	603b      	str	r3, [r7, #0]
    uint32_t addr = block * c->block_size + off + START_ADDRESS;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	fb02 f303 	mul.w	r3, r2, r3
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	4413      	add	r3, r2
 80015cc:	617b      	str	r3, [r7, #20]

    if (BSP_OSPI_NOR_Read(0, (uint8_t*)buffer, addr, size) != BSP_ERROR_NONE) {
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	6839      	ldr	r1, [r7, #0]
 80015d4:	2000      	movs	r0, #0
 80015d6:	f000 ff4f 	bl	8002478 <BSP_OSPI_NOR_Read>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <xspi_read+0x36>
        return -1;
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295
 80015e4:	e000      	b.n	80015e8 <xspi_read+0x38>
    }
    return 0;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <xspi_write>:

int xspi_write(const struct lfs_config *c, lfs_block_t block,
               lfs_off_t off, const void *buffer, lfs_size_t size) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	603b      	str	r3, [r7, #0]
    uint32_t addr = block * c->block_size + off + START_ADDRESS;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	fb02 f303 	mul.w	r3, r2, r3
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	617b      	str	r3, [r7, #20]

    if (BSP_OSPI_NOR_Write(0, (uint8_t*)buffer, addr, size) != BSP_ERROR_NONE) {
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	6839      	ldr	r1, [r7, #0]
 8001614:	2000      	movs	r0, #0
 8001616:	f000 ff85 	bl	8002524 <BSP_OSPI_NOR_Write>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <xspi_write+0x36>
        return -1;
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
 8001624:	e000      	b.n	8001628 <xspi_write+0x38>
    }
    return 0;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <xspi_erase>:

int xspi_erase(const struct lfs_config *c, lfs_block_t block) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
    uint32_t addr = block * c->block_size + START_ADDRESS;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69da      	ldr	r2, [r3, #28]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	fb02 f303 	mul.w	r3, r2, r3
 8001644:	60fb      	str	r3, [r7, #12]

    // ✅ Correction : passage du troisième argument (type d'effacement)
    if (BSP_OSPI_NOR_Erase_Block(0, addr, BSP_OSPI_NOR_ERASE_4K) != BSP_ERROR_NONE) {
 8001646:	2200      	movs	r2, #0
 8001648:	68f9      	ldr	r1, [r7, #12]
 800164a:	2000      	movs	r0, #0
 800164c:	f001 f850 	bl	80026f0 <BSP_OSPI_NOR_Erase_Block>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <xspi_erase+0x2c>
        return -1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	e003      	b.n	8001664 <xspi_erase+0x34>
    }
    HAL_Delay(10);
 800165c:	200a      	movs	r0, #10
 800165e:	f001 ff3f 	bl	80034e0 <HAL_Delay>
    return 0;
 8001662:	2300      	movs	r3, #0

}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <xspi_sync>:

int xspi_sync(const struct lfs_config *c) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
    // ⚠️ Ajoute un délai pour s'assurer que les opérations sont terminées physiquement
    HAL_Delay(10);
 8001674:	200a      	movs	r0, #10
 8001676:	f001 ff33 	bl	80034e0 <HAL_Delay>

    // Optionnel : ajoute une opération de lecture "dummy" pour forcer le vidage du buffer
    uint8_t dummy;
    BSP_OSPI_NOR_Read(0, &dummy, 0, 1);
 800167a:	f107 010f 	add.w	r1, r7, #15
 800167e:	2301      	movs	r3, #1
 8001680:	2200      	movs	r2, #0
 8001682:	2000      	movs	r0, #0
 8001684:	f000 fef8 	bl	8002478 <BSP_OSPI_NOR_Read>

    return 0;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001694:	480d      	ldr	r0, [pc, #52]	@ (80016cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001696:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001698:	f001 fde8 	bl	800326c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800169c:	480c      	ldr	r0, [pc, #48]	@ (80016d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800169e:	490d      	ldr	r1, [pc, #52]	@ (80016d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016a0:	4a0d      	ldr	r2, [pc, #52]	@ (80016d8 <LoopForever+0xe>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a4:	e002      	b.n	80016ac <LoopCopyDataInit>

080016a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016aa:	3304      	adds	r3, #4

080016ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b0:	d3f9      	bcc.n	80016a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b2:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80016b4:	4c0a      	ldr	r4, [pc, #40]	@ (80016e0 <LoopForever+0x16>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b8:	e001      	b.n	80016be <LoopFillZerobss>

080016ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016bc:	3204      	adds	r2, #4

080016be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c0:	d3fb      	bcc.n	80016ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016c2:	f011 fa4b 	bl	8012b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016c6:	f7ff f925 	bl	8000914 <main>

080016ca <LoopForever>:

LoopForever:
    b LoopForever
 80016ca:	e7fe      	b.n	80016ca <LoopForever>
  ldr   r0, =_estack
 80016cc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80016d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80016d8:	08014880 	.word	0x08014880
  ldr r2, =_sbss
 80016dc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80016e0:	20000328 	.word	0x20000328

080016e4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016e4:	e7fe      	b.n	80016e4 <ADC1_IRQHandler>

080016e6 <MX25LM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80016f4:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016fc:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE / MX25LM51245G_SECTOR_64K);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001704:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800170c:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE / MX25LM51245G_SUBSECTOR_4K);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001714:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800171c:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE / MX25LM51245G_SUBSECTOR_4K);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001724:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800172c:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE / MX25LM51245G_PAGE_SIZE);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001734:	621a      	str	r2, [r3, #32]

  return MX25LM51245G_OK;
 8001736:	2300      	movs	r3, #0
};
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(XSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode,
                                         MX25LM51245G_Transfer_t Rate)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b09c      	sub	sp, #112	@ 0x70
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	70fb      	strb	r3, [r7, #3]
 8001750:	4613      	mov	r3, r2
 8001752:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef  s_command = {0};
 8001754:	f107 0320 	add.w	r3, r7, #32
 8001758:	2250      	movs	r2, #80	@ 0x50
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f011 f978 	bl	8012a52 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d105      	bne.n	8001784 <MX25LM51245G_AutoPollingMemReady+0x40>
 8001778:	78bb      	ldrb	r3, [r7, #2]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d102      	bne.n	8001784 <MX25LM51245G_AutoPollingMemReady+0x40>
  {
    return MX25LM51245G_ERROR;
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
 8001782:	e08d      	b.n	80018a0 <MX25LM51245G_AutoPollingMemReady+0x15c>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8001788:	2300      	movs	r3, #0
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <MX25LM51245G_AutoPollingMemReady+0x52>
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <MX25LM51245G_AutoPollingMemReady+0x54>
 8001796:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 8001798:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800179a:	78bb      	ldrb	r3, [r7, #2]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d101      	bne.n	80017a4 <MX25LM51245G_AutoPollingMemReady+0x60>
 80017a0:	2308      	movs	r3, #8
 80017a2:	e000      	b.n	80017a6 <MX25LM51245G_AutoPollingMemReady+0x62>
 80017a4:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 80017a6:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <MX25LM51245G_AutoPollingMemReady+0x6e>
 80017ae:	2300      	movs	r3, #0
 80017b0:	e000      	b.n	80017b4 <MX25LM51245G_AutoPollingMemReady+0x70>
 80017b2:	2310      	movs	r3, #16
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
 80017b4:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? MX25LM51245G_READ_STATUS_REG_CMD
                                 : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <MX25LM51245G_AutoPollingMemReady+0x7c>
 80017bc:	2305      	movs	r3, #5
 80017be:	e001      	b.n	80017c4 <MX25LM51245G_AutoPollingMemReady+0x80>
 80017c0:	f240 53fa 	movw	r3, #1530	@ 0x5fa
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 80017c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <MX25LM51245G_AutoPollingMemReady+0x8c>
 80017cc:	2300      	movs	r3, #0
 80017ce:	e001      	b.n	80017d4 <MX25LM51245G_AutoPollingMemReady+0x90>
 80017d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AddressDTRMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 80017d6:	78bb      	ldrb	r3, [r7, #2]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d102      	bne.n	80017e2 <MX25LM51245G_AutoPollingMemReady+0x9e>
 80017dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017e0:	e000      	b.n	80017e4 <MX25LM51245G_AutoPollingMemReady+0xa0>
 80017e2:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
 80017e4:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 80017e6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80017ea:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Address            = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d102      	bne.n	8001800 <MX25LM51245G_AutoPollingMemReady+0xbc>
 80017fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017fe:	e001      	b.n	8001804 <MX25LM51245G_AutoPollingMemReady+0xc0>
 8001800:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001804:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DataDTRMode        = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 8001806:	78bb      	ldrb	r3, [r7, #2]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d102      	bne.n	8001812 <MX25LM51245G_AutoPollingMemReady+0xce>
 800180c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001810:	e000      	b.n	8001814 <MX25LM51245G_AutoPollingMemReady+0xd0>
 8001812:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25LM51245G_DTR_TRANSFER)
 8001814:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25LM51245G_DTR_TRANSFER)
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <MX25LM51245G_AutoPollingMemReady+0xe6>
 800181c:	78bb      	ldrb	r3, [r7, #2]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d101      	bne.n	8001826 <MX25LM51245G_AutoPollingMemReady+0xe2>
 8001822:	2305      	movs	r3, #5
 8001824:	e002      	b.n	800182c <MX25LM51245G_AutoPollingMemReady+0xe8>
 8001826:	2304      	movs	r3, #4
 8001828:	e000      	b.n	800182c <MX25LM51245G_AutoPollingMemReady+0xe8>
 800182a:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE)
 800182c:	667b      	str	r3, [r7, #100]	@ 0x64
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800182e:	78bb      	ldrb	r3, [r7, #2]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <MX25LM51245G_AutoPollingMemReady+0xf4>
 8001834:	2302      	movs	r3, #2
 8001836:	e000      	b.n	800183a <MX25LM51245G_AutoPollingMemReady+0xf6>
 8001838:	2301      	movs	r3, #1
 800183a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 800183c:	78bb      	ldrb	r3, [r7, #2]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d102      	bne.n	8001848 <MX25LM51245G_AutoPollingMemReady+0x104>
 8001842:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001846:	e000      	b.n	800184a <MX25LM51245G_AutoPollingMemReady+0x106>
 8001848:	2300      	movs	r3, #0
 800184a:	66bb      	str	r3, [r7, #104]	@ 0x68
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 800184c:	2300      	movs	r3, #0
 800184e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  s_config.MatchValue         = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
  s_config.MatchMask          = MX25LM51245G_SR_WIP;
 8001854:	2301      	movs	r3, #1
 8001856:	613b      	str	r3, [r7, #16]
  s_config.MatchMode          = HAL_XSPI_MATCH_MODE_AND;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
  s_config.IntervalTime      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 800185c:	2310      	movs	r3, #16
 800185e:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
 8001860:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001864:	61bb      	str	r3, [r7, #24]

  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001866:	f107 0320 	add.w	r3, r7, #32
 800186a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800186e:	4619      	mov	r1, r3
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f009 f8b3 	bl	800a9dc <HAL_XSPI_Command>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d002      	beq.n	8001882 <MX25LM51245G_AutoPollingMemReady+0x13e>
  {
    return MX25LM51245G_ERROR;
 800187c:	f04f 33ff 	mov.w	r3, #4294967295
 8001880:	e00e      	b.n	80018a0 <MX25LM51245G_AutoPollingMemReady+0x15c>
  }

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001882:	f107 030c 	add.w	r3, r7, #12
 8001886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800188a:	4619      	mov	r1, r3
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f009 fa4b 	bl	800ad28 <HAL_XSPI_AutoPolling>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d002      	beq.n	800189e <MX25LM51245G_AutoPollingMemReady+0x15a>
  {
    return MX25LM51245G_ERROR;
 8001898:	f04f 33ff 	mov.w	r3, #4294967295
 800189c:	e000      	b.n	80018a0 <MX25LM51245G_AutoPollingMemReady+0x15c>
  }

  return MX25LM51245G_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3770      	adds	r7, #112	@ 0x70
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <MX25LM51245G_ReadSTR>:
  * @param  Size Size of data to read
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_ReadSTR(XSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode,
                             MX25LM51245G_AddressSize_t AddressSize, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b098      	sub	sp, #96	@ 0x60
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	460b      	mov	r3, r1
 80018b4:	72fb      	strb	r3, [r7, #11]
 80018b6:	4613      	mov	r3, r2
 80018b8:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
 80018ba:	f107 0310 	add.w	r3, r7, #16
 80018be:	2250      	movs	r2, #80	@ 0x50
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f011 f8c5 	bl	8012a52 <memset>

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 80018c8:	7afb      	ldrb	r3, [r7, #11]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d105      	bne.n	80018da <MX25LM51245G_ReadSTR+0x32>
 80018ce:	7abb      	ldrb	r3, [r7, #10]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <MX25LM51245G_ReadSTR+0x32>
  {
    return MX25LM51245G_ERROR;
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
 80018d8:	e06b      	b.n	80019b2 <MX25LM51245G_ReadSTR+0x10a>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 80018e2:	7afb      	ldrb	r3, [r7, #11]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <MX25LM51245G_ReadSTR+0x44>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <MX25LM51245G_ReadSTR+0x46>
 80018ec:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 80018ee:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 80018f4:	7afb      	ldrb	r3, [r7, #11]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <MX25LM51245G_ReadSTR+0x56>
 80018fa:	2300      	movs	r3, #0
 80018fc:	e000      	b.n	8001900 <MX25LM51245G_ReadSTR+0x58>
 80018fe:	2310      	movs	r3, #16
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
 8001900:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25LM51245G_3BYTES_SIZE)
                                    ? MX25LM51245G_FAST_READ_CMD
                                    : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD)
                                 : MX25LM51245G_OCTA_READ_CMD;
 8001902:	7afb      	ldrb	r3, [r7, #11]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d106      	bne.n	8001916 <MX25LM51245G_ReadSTR+0x6e>
 8001908:	7abb      	ldrb	r3, [r7, #10]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <MX25LM51245G_ReadSTR+0x6a>
 800190e:	230b      	movs	r3, #11
 8001910:	e003      	b.n	800191a <MX25LM51245G_ReadSTR+0x72>
 8001912:	230c      	movs	r3, #12
 8001914:	e001      	b.n	800191a <MX25LM51245G_ReadSTR+0x72>
 8001916:	f64e 4313 	movw	r3, #60435	@ 0xec13
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 800191a:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_ADDRESS_1_LINE
                                 : HAL_XSPI_ADDRESS_8_LINES;
 800191c:	7afb      	ldrb	r3, [r7, #11]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d102      	bne.n	8001928 <MX25LM51245G_ReadSTR+0x80>
 8001922:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001926:	e001      	b.n	800192c <MX25LM51245G_ReadSTR+0x84>
 8001928:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE)
 800192c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressWidth        = (AddressSize == MX25LM51245G_3BYTES_SIZE)
                                 ? HAL_XSPI_ADDRESS_24_BITS
                                 : HAL_XSPI_ADDRESS_32_BITS;
 8001932:	7abb      	ldrb	r3, [r7, #10]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <MX25LM51245G_ReadSTR+0x96>
 8001938:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800193c:	e001      	b.n	8001942 <MX25LM51245G_ReadSTR+0x9a>
 800193e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.AddressWidth        = (AddressSize == MX25LM51245G_3BYTES_SIZE)
 8001942:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = ReadAddr;
 8001944:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001946:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8001948:	2300      	movs	r3, #0
 800194a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 800194c:	7afb      	ldrb	r3, [r7, #11]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <MX25LM51245G_ReadSTR+0xb0>
 8001952:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001956:	e001      	b.n	800195c <MX25LM51245G_ReadSTR+0xb4>
 8001958:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800195c:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8001962:	7afb      	ldrb	r3, [r7, #11]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <MX25LM51245G_ReadSTR+0xc4>
 8001968:	2308      	movs	r3, #8
 800196a:	e000      	b.n	800196e <MX25LM51245G_ReadSTR+0xc6>
 800196c:	2306      	movs	r3, #6
 800196e:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength             = Size;
 8001970:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001972:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8001978:	2300      	movs	r3, #0
 800197a:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800197c:	f107 0310 	add.w	r3, r7, #16
 8001980:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001984:	4619      	mov	r1, r3
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f009 f828 	bl	800a9dc <HAL_XSPI_Command>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <MX25LM51245G_ReadSTR+0xf0>
  {
    return MX25LM51245G_ERROR;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
 8001996:	e00c      	b.n	80019b2 <MX25LM51245G_ReadSTR+0x10a>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, pData, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001998:	f241 3288 	movw	r2, #5000	@ 0x1388
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f009 f91f 	bl	800abe2 <HAL_XSPI_Receive>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <MX25LM51245G_ReadSTR+0x108>
  {
    return MX25LM51245G_ERROR;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	e000      	b.n	80019b2 <MX25LM51245G_ReadSTR+0x10a>
  }

  return MX25LM51245G_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3760      	adds	r7, #96	@ 0x60
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <MX25LM51245G_ReadDTR>:
  * @param  Size Size of data to read
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_ReadDTR(XSPI_HandleTypeDef *Ctx, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b098      	sub	sp, #96	@ 0x60
 80019be:	af00      	add	r7, sp, #0
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	603b      	str	r3, [r7, #0]
  XSPI_RegularCmdTypeDef s_command = {0};
 80019c8:	f107 0310 	add.w	r3, r7, #16
 80019cc:	2250      	movs	r2, #80	@ 0x50
 80019ce:	2100      	movs	r1, #0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f011 f83e 	bl	8012a52 <memset>

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 80019de:	2304      	movs	r3, #4
 80019e0:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
 80019e2:	2308      	movs	r3, #8
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionWidth    = HAL_XSPI_INSTRUCTION_16_BITS;
 80019e6:	2310      	movs	r3, #16
 80019e8:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 80019ea:	f64e 6311 	movw	r3, #60945	@ 0xee11
 80019ee:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 80019f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
 80019f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019fa:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 80019fc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a00:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = ReadAddr;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
 8001a0a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
 8001a10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001a14:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8001a16:	2306      	movs	r3, #6
 8001a18:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength             = Size;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
 8001a1e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001a22:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8001a24:	2300      	movs	r3, #0
 8001a26:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a30:	4619      	mov	r1, r3
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f008 ffd2 	bl	800a9dc <HAL_XSPI_Command>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <MX25LM51245G_ReadDTR+0x8a>
  {
    return MX25LM51245G_ERROR;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a42:	e00c      	b.n	8001a5e <MX25LM51245G_ReadDTR+0xa4>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, pData, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f009 f8c9 	bl	800abe2 <HAL_XSPI_Receive>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d002      	beq.n	8001a5c <MX25LM51245G_ReadDTR+0xa2>
  {
    return MX25LM51245G_ERROR;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	e000      	b.n	8001a5e <MX25LM51245G_ReadDTR+0xa4>
  }

  return MX25LM51245G_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3760      	adds	r7, #96	@ 0x60
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <MX25LM51245G_PageProgram>:
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_PageProgram(XSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode,
                                 MX25LM51245G_AddressSize_t AddressSize, uint8_t *pData, uint32_t WriteAddr,
                                 uint32_t Size)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b098      	sub	sp, #96	@ 0x60
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	72fb      	strb	r3, [r7, #11]
 8001a74:	4613      	mov	r3, r2
 8001a76:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	2250      	movs	r2, #80	@ 0x50
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f010 ffe6 	bl	8012a52 <memset>

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8001a86:	7afb      	ldrb	r3, [r7, #11]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d105      	bne.n	8001a98 <MX25LM51245G_PageProgram+0x32>
 8001a8c:	7abb      	ldrb	r3, [r7, #10]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d102      	bne.n	8001a98 <MX25LM51245G_PageProgram+0x32>
  {
    return MX25LM51245G_ERROR;
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295
 8001a96:	e066      	b.n	8001b66 <MX25LM51245G_PageProgram+0x100>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8001aa0:	7afb      	ldrb	r3, [r7, #11]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <MX25LM51245G_PageProgram+0x44>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <MX25LM51245G_PageProgram+0x46>
 8001aaa:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 8001aac:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8001ab2:	7afb      	ldrb	r3, [r7, #11]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <MX25LM51245G_PageProgram+0x56>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	e000      	b.n	8001abe <MX25LM51245G_PageProgram+0x58>
 8001abc:	2310      	movs	r3, #16
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
 8001abe:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25LM51245G_3BYTES_SIZE)
                                    ? MX25LM51245G_PAGE_PROG_CMD
                                    : MX25LM51245G_4_BYTE_PAGE_PROG_CMD)
                                 : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8001ac0:	7afb      	ldrb	r3, [r7, #11]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d106      	bne.n	8001ad4 <MX25LM51245G_PageProgram+0x6e>
 8001ac6:	7abb      	ldrb	r3, [r7, #10]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <MX25LM51245G_PageProgram+0x6a>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e003      	b.n	8001ad8 <MX25LM51245G_PageProgram+0x72>
 8001ad0:	2312      	movs	r3, #18
 8001ad2:	e001      	b.n	8001ad8 <MX25LM51245G_PageProgram+0x72>
 8001ad4:	f241 23ed 	movw	r3, #4845	@ 0x12ed
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 8001ad8:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_ADDRESS_1_LINE
                                 : HAL_XSPI_ADDRESS_8_LINES;
 8001ada:	7afb      	ldrb	r3, [r7, #11]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <MX25LM51245G_PageProgram+0x80>
 8001ae0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ae4:	e001      	b.n	8001aea <MX25LM51245G_PageProgram+0x84>
 8001ae6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE)
 8001aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressWidth        = (AddressSize == MX25LM51245G_3BYTES_SIZE)
                                 ? HAL_XSPI_ADDRESS_24_BITS
                                 : HAL_XSPI_ADDRESS_32_BITS;
 8001af0:	7abb      	ldrb	r3, [r7, #10]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d102      	bne.n	8001afc <MX25LM51245G_PageProgram+0x96>
 8001af6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001afa:	e001      	b.n	8001b00 <MX25LM51245G_PageProgram+0x9a>
 8001afc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.AddressWidth        = (AddressSize == MX25LM51245G_3BYTES_SIZE)
 8001b00:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = WriteAddr;
 8001b02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8001b0a:	7afb      	ldrb	r3, [r7, #11]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d102      	bne.n	8001b16 <MX25LM51245G_PageProgram+0xb0>
 8001b10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b14:	e001      	b.n	8001b1a <MX25LM51245G_PageProgram+0xb4>
 8001b16:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_DISABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength             = Size;
 8001b24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b38:	4619      	mov	r1, r3
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f008 ff4e 	bl	800a9dc <HAL_XSPI_Command>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <MX25LM51245G_PageProgram+0xe6>
  {
    return MX25LM51245G_ERROR;
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4a:	e00c      	b.n	8001b66 <MX25LM51245G_PageProgram+0x100>
  }

  /* Transmission of the data */
  if (HAL_XSPI_Transmit(Ctx, pData, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f008 ffd2 	bl	800aafc <HAL_XSPI_Transmit>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <MX25LM51245G_PageProgram+0xfe>
  {
    return MX25LM51245G_ERROR;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	e000      	b.n	8001b66 <MX25LM51245G_PageProgram+0x100>
  }

  return MX25LM51245G_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3760      	adds	r7, #96	@ 0x60
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <MX25LM51245G_PageProgramDTR>:
  * @param  Size Size of data to write. Range 1 ~ MX25LM51245G_PAGE_SIZE
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_PageProgramDTR(XSPI_HandleTypeDef *Ctx, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b098      	sub	sp, #96	@ 0x60
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	603b      	str	r3, [r7, #0]
  XSPI_RegularCmdTypeDef s_command = {0};
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	2250      	movs	r2, #80	@ 0x50
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f010 ff64 	bl	8012a52 <memset>

  /* Initialize the program command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 8001b92:	2304      	movs	r3, #4
 8001b94:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
 8001b96:	2308      	movs	r3, #8
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionWidth    = HAL_XSPI_INSTRUCTION_16_BITS;
 8001b9a:	2310      	movs	r3, #16
 8001b9c:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8001b9e:	f241 23ed 	movw	r3, #4845	@ 0x12ed
 8001ba2:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 8001ba4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8001baa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001bae:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 8001bb0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001bb4:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = WriteAddr;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
 8001bbe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
 8001bc4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001bc8:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = 0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength             = Size;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001bda:	f107 0310 	add.w	r3, r7, #16
 8001bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be2:	4619      	mov	r1, r3
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f008 fef9 	bl	800a9dc <HAL_XSPI_Command>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <MX25LM51245G_PageProgramDTR+0x88>
  {
    return MX25LM51245G_ERROR;
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf4:	e00c      	b.n	8001c10 <MX25LM51245G_PageProgramDTR+0xa2>
  }

  /* Transmission of the data */
  if (HAL_XSPI_Transmit(Ctx, pData, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bfa:	68b9      	ldr	r1, [r7, #8]
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f008 ff7d 	bl	800aafc <HAL_XSPI_Transmit>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <MX25LM51245G_PageProgramDTR+0xa0>
  {
    return MX25LM51245G_ERROR;
 8001c08:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0c:	e000      	b.n	8001c10 <MX25LM51245G_PageProgramDTR+0xa2>
  }

  return MX25LM51245G_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3760      	adds	r7, #96	@ 0x60
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <MX25LM51245G_BlockErase>:
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_BlockErase(XSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate,
                                MX25LM51245G_AddressSize_t AddressSize, uint32_t BlockAddress,
                                MX25LM51245G_Erase_t BlockSize)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b096      	sub	sp, #88	@ 0x58
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	4608      	mov	r0, r1
 8001c22:	4611      	mov	r1, r2
 8001c24:	461a      	mov	r2, r3
 8001c26:	4603      	mov	r3, r0
 8001c28:	70fb      	strb	r3, [r7, #3]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	70bb      	strb	r3, [r7, #2]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	707b      	strb	r3, [r7, #1]
  XSPI_RegularCmdTypeDef s_command = {0};
 8001c32:	f107 0308 	add.w	r3, r7, #8
 8001c36:	2250      	movs	r2, #80	@ 0x50
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f010 ff09 	bl	8012a52 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d105      	bne.n	8001c52 <MX25LM51245G_BlockErase+0x3a>
 8001c46:	78bb      	ldrb	r3, [r7, #2]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d102      	bne.n	8001c52 <MX25LM51245G_BlockErase+0x3a>
  {
    return MX25LM51245G_ERROR;
 8001c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c50:	e079      	b.n	8001d46 <MX25LM51245G_BlockErase+0x12e>
  }

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d105      	bne.n	8001c64 <MX25LM51245G_BlockErase+0x4c>
 8001c58:	787b      	ldrb	r3, [r7, #1]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d102      	bne.n	8001c64 <MX25LM51245G_BlockErase+0x4c>
  {
    return MX25LM51245G_ERROR;
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c62:	e070      	b.n	8001d46 <MX25LM51245G_BlockErase+0x12e>
  }

  /* Initialize the erase command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60bb      	str	r3, [r7, #8]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <MX25LM51245G_BlockErase+0x5e>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <MX25LM51245G_BlockErase+0x60>
 8001c76:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 8001c78:	617b      	str	r3, [r7, #20]
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8001c7a:	78bb      	ldrb	r3, [r7, #2]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <MX25LM51245G_BlockErase+0x6c>
 8001c80:	2308      	movs	r3, #8
 8001c82:	e000      	b.n	8001c86 <MX25LM51245G_BlockErase+0x6e>
 8001c84:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 8001c86:	61fb      	str	r3, [r7, #28]
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <MX25LM51245G_BlockErase+0x7a>
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e000      	b.n	8001c94 <MX25LM51245G_BlockErase+0x7c>
 8001c92:	2310      	movs	r3, #16
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
 8001c94:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 8001c96:	78fb      	ldrb	r3, [r7, #3]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d102      	bne.n	8001ca2 <MX25LM51245G_BlockErase+0x8a>
 8001c9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ca0:	e001      	b.n	8001ca6 <MX25LM51245G_BlockErase+0x8e>
 8001ca2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressDTRMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 8001ca8:	78bb      	ldrb	r3, [r7, #2]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d102      	bne.n	8001cb4 <MX25LM51245G_BlockErase+0x9c>
 8001cae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001cb2:	e000      	b.n	8001cb6 <MX25LM51245G_BlockErase+0x9e>
 8001cb4:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
 8001cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressWidth        = (AddressSize == MX25LM51245G_3BYTES_SIZE)
                                 ? HAL_XSPI_ADDRESS_24_BITS
                                 : HAL_XSPI_ADDRESS_32_BITS;
 8001cb8:	787b      	ldrb	r3, [r7, #1]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d102      	bne.n	8001cc4 <MX25LM51245G_BlockErase+0xac>
 8001cbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cc2:	e001      	b.n	8001cc8 <MX25LM51245G_BlockErase+0xb0>
 8001cc4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.AddressWidth        = (AddressSize == MX25LM51245G_3BYTES_SIZE)
 8001cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.Address            = BlockAddress;
 8001cca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ccc:	623b      	str	r3, [r7, #32]
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DummyCycles        = 0U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	657b      	str	r3, [r7, #84]	@ 0x54

  switch (Mode)
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d10b      	bne.n	8001d00 <MX25LM51245G_BlockErase+0xe8>
  {
    case MX25LM51245G_OPI_MODE :
      if (BlockSize == MX25LM51245G_ERASE_64K)
 8001ce8:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d103      	bne.n	8001cf8 <MX25LM51245G_BlockErase+0xe0>
      {
        s_command.Instruction = MX25LM51245G_OCTA_SECTOR_ERASE_64K_CMD;
 8001cf0:	f64d 4323 	movw	r3, #56355	@ 0xdc23
 8001cf4:	613b      	str	r3, [r7, #16]
      }
      else
      {
        s_command.Instruction = MX25LM51245G_OCTA_SUBSECTOR_ERASE_4K_CMD;
      }
      break;
 8001cf6:	e017      	b.n	8001d28 <MX25LM51245G_BlockErase+0x110>
        s_command.Instruction = MX25LM51245G_OCTA_SUBSECTOR_ERASE_4K_CMD;
 8001cf8:	f242 13de 	movw	r3, #8670	@ 0x21de
 8001cfc:	613b      	str	r3, [r7, #16]
      break;
 8001cfe:	e013      	b.n	8001d28 <MX25LM51245G_BlockErase+0x110>

    case MX25LM51245G_SPI_MODE :
    default:
      if (BlockSize == MX25LM51245G_ERASE_64K)
 8001d00:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d107      	bne.n	8001d18 <MX25LM51245G_BlockErase+0x100>
      {
        s_command.Instruction = (AddressSize == MX25LM51245G_3BYTES_SIZE)
                                ? MX25LM51245G_SECTOR_ERASE_64K_CMD
                                : MX25LM51245G_4_BYTE_SECTOR_ERASE_64K_CMD;
 8001d08:	787b      	ldrb	r3, [r7, #1]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <MX25LM51245G_BlockErase+0xfa>
 8001d0e:	23d8      	movs	r3, #216	@ 0xd8
 8001d10:	e000      	b.n	8001d14 <MX25LM51245G_BlockErase+0xfc>
 8001d12:	23dc      	movs	r3, #220	@ 0xdc
        s_command.Instruction = (AddressSize == MX25LM51245G_3BYTES_SIZE)
 8001d14:	613b      	str	r3, [r7, #16]
      {
        s_command.Instruction = (AddressSize == MX25LM51245G_3BYTES_SIZE)
                                ? MX25LM51245G_SUBSECTOR_ERASE_4K_CMD
                                : MX25LM51245G_4_BYTE_SUBSECTOR_ERASE_4K_CMD;
      }
      break;
 8001d16:	e006      	b.n	8001d26 <MX25LM51245G_BlockErase+0x10e>
                                : MX25LM51245G_4_BYTE_SUBSECTOR_ERASE_4K_CMD;
 8001d18:	787b      	ldrb	r3, [r7, #1]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <MX25LM51245G_BlockErase+0x10a>
 8001d1e:	2320      	movs	r3, #32
 8001d20:	e000      	b.n	8001d24 <MX25LM51245G_BlockErase+0x10c>
 8001d22:	2321      	movs	r3, #33	@ 0x21
        s_command.Instruction = (AddressSize == MX25LM51245G_3BYTES_SIZE)
 8001d24:	613b      	str	r3, [r7, #16]
      break;
 8001d26:	bf00      	nop
  }

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d28:	f107 0308 	add.w	r3, r7, #8
 8001d2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d30:	4619      	mov	r1, r3
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f008 fe52 	bl	800a9dc <HAL_XSPI_Command>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d002      	beq.n	8001d44 <MX25LM51245G_BlockErase+0x12c>
  {
    return MX25LM51245G_ERROR;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	e000      	b.n	8001d46 <MX25LM51245G_BlockErase+0x12e>
  }

  return MX25LM51245G_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3758      	adds	r7, #88	@ 0x58
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(XSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b09c      	sub	sp, #112	@ 0x70
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	460b      	mov	r3, r1
 8001d58:	70fb      	strb	r3, [r7, #3]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef     s_command = {0};
 8001d5e:	f107 0320 	add.w	r3, r7, #32
 8001d62:	2250      	movs	r2, #80	@ 0x50
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f010 fe73 	bl	8012a52 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d105      	bne.n	8001d8e <MX25LM51245G_WriteEnable+0x40>
 8001d82:	78bb      	ldrb	r3, [r7, #2]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d102      	bne.n	8001d8e <MX25LM51245G_WriteEnable+0x40>
  {
    return MX25LM51245G_ERROR;
 8001d88:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8c:	e0ab      	b.n	8001ee6 <MX25LM51245G_WriteEnable+0x198>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <MX25LM51245G_WriteEnable+0x52>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <MX25LM51245G_WriteEnable+0x54>
 8001da0:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 8001da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8001da4:	78bb      	ldrb	r3, [r7, #2]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <MX25LM51245G_WriteEnable+0x60>
 8001daa:	2308      	movs	r3, #8
 8001dac:	e000      	b.n	8001db0 <MX25LM51245G_WriteEnable+0x62>
 8001dae:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 8001db0:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <MX25LM51245G_WriteEnable+0x6e>
 8001db8:	2300      	movs	r3, #0
 8001dba:	e000      	b.n	8001dbe <MX25LM51245G_WriteEnable+0x70>
 8001dbc:	2310      	movs	r3, #16
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
 8001dbe:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? MX25LM51245G_WRITE_ENABLE_CMD
                                 : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <MX25LM51245G_WriteEnable+0x7c>
 8001dc6:	2306      	movs	r3, #6
 8001dc8:	e001      	b.n	8001dce <MX25LM51245G_WriteEnable+0x80>
 8001dca:	f240 63f9 	movw	r3, #1785	@ 0x6f9
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 8001dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DummyCycles        = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	66bb      	str	r3, [r7, #104]	@ 0x68
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8001de4:	2300      	movs	r3, #0
 8001de6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001de8:	f107 0320 	add.w	r3, r7, #32
 8001dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001df0:	4619      	mov	r1, r3
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f008 fdf2 	bl	800a9dc <HAL_XSPI_Command>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d002      	beq.n	8001e04 <MX25LM51245G_WriteEnable+0xb6>
  {
    return MX25LM51245G_ERROR;
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001e02:	e070      	b.n	8001ee6 <MX25LM51245G_WriteEnable+0x198>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE)
                             ? MX25LM51245G_READ_STATUS_REG_CMD
                             : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <MX25LM51245G_WriteEnable+0xc0>
 8001e0a:	2305      	movs	r3, #5
 8001e0c:	e001      	b.n	8001e12 <MX25LM51245G_WriteEnable+0xc4>
 8001e0e:	f240 53fa 	movw	r3, #1530	@ 0x5fa
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE)
 8001e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <MX25LM51245G_WriteEnable+0xd0>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e001      	b.n	8001e22 <MX25LM51245G_WriteEnable+0xd4>
 8001e1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AddressDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                             ? HAL_XSPI_ADDRESS_DTR_ENABLE
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
 8001e24:	78bb      	ldrb	r3, [r7, #2]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d102      	bne.n	8001e30 <MX25LM51245G_WriteEnable+0xe2>
 8001e2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e2e:	e000      	b.n	8001e32 <MX25LM51245G_WriteEnable+0xe4>
 8001e30:	2300      	movs	r3, #0
  s_command.AddressDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 8001e32:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AddressWidth    = HAL_XSPI_ADDRESS_32_BITS;
 8001e34:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001e38:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Address        = 0U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d102      	bne.n	8001e4a <MX25LM51245G_WriteEnable+0xfc>
 8001e44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e48:	e001      	b.n	8001e4e <MX25LM51245G_WriteEnable+0x100>
 8001e4a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001e4e:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DataDTRMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
 8001e50:	78bb      	ldrb	r3, [r7, #2]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d102      	bne.n	8001e5c <MX25LM51245G_WriteEnable+0x10e>
 8001e56:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001e5a:	e000      	b.n	8001e5e <MX25LM51245G_WriteEnable+0x110>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE)
                             ? 0U
                             : ((Rate == MX25LM51245G_DTR_TRANSFER)
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d006      	beq.n	8001e74 <MX25LM51245G_WriteEnable+0x126>
 8001e66:	78bb      	ldrb	r3, [r7, #2]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <MX25LM51245G_WriteEnable+0x122>
 8001e6c:	2305      	movs	r3, #5
 8001e6e:	e002      	b.n	8001e76 <MX25LM51245G_WriteEnable+0x128>
 8001e70:	2304      	movs	r3, #4
 8001e72:	e000      	b.n	8001e76 <MX25LM51245G_WriteEnable+0x128>
 8001e74:	2300      	movs	r3, #0
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE)
 8001e76:	667b      	str	r3, [r7, #100]	@ 0x64
                                ? DUMMY_CYCLES_REG_OCTAL_DTR
                                : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8001e78:	78bb      	ldrb	r3, [r7, #2]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <MX25LM51245G_WriteEnable+0x134>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e000      	b.n	8001e84 <MX25LM51245G_WriteEnable+0x136>
 8001e82:	2301      	movs	r3, #1
 8001e84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 8001e86:	78bb      	ldrb	r3, [r7, #2]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d102      	bne.n	8001e92 <MX25LM51245G_WriteEnable+0x144>
 8001e8c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001e90:	e000      	b.n	8001e94 <MX25LM51245G_WriteEnable+0x146>
 8001e92:	2300      	movs	r3, #0
 8001e94:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e96:	f107 0320 	add.w	r3, r7, #32
 8001e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f008 fd9b 	bl	800a9dc <HAL_XSPI_Command>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <MX25LM51245G_WriteEnable+0x164>
  {
    return MX25LM51245G_ERROR;
 8001eac:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb0:	e019      	b.n	8001ee6 <MX25LM51245G_WriteEnable+0x198>
  }

  s_config.MatchValue           = 2U;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	60fb      	str	r3, [r7, #12]
  s_config.MatchMask            = 2U;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_XSPI_MATCH_MODE_AND;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
  s_config.IntervalTime        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8001ebe:	2310      	movs	r3, #16
 8001ec0:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
 8001ec2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ec6:	61bb      	str	r3, [r7, #24]

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ec8:	f107 030c 	add.w	r3, r7, #12
 8001ecc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f008 ff28 	bl	800ad28 <HAL_XSPI_AutoPolling>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d002      	beq.n	8001ee4 <MX25LM51245G_WriteEnable+0x196>
  {
    return MX25LM51245G_ERROR;
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee2:	e000      	b.n	8001ee6 <MX25LM51245G_WriteEnable+0x198>
  }

  return MX25LM51245G_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3770      	adds	r7, #112	@ 0x70
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <MX25LM51245G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(XSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode,
                                       MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b098      	sub	sp, #96	@ 0x60
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	72fb      	strb	r3, [r7, #11]
 8001efc:	4613      	mov	r3, r2
 8001efe:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
 8001f00:	f107 0310 	add.w	r3, r7, #16
 8001f04:	2250      	movs	r2, #80	@ 0x50
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f010 fda2 	bl	8012a52 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8001f0e:	7afb      	ldrb	r3, [r7, #11]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d105      	bne.n	8001f20 <MX25LM51245G_WriteCfg2Register+0x32>
 8001f14:	7abb      	ldrb	r3, [r7, #10]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d102      	bne.n	8001f20 <MX25LM51245G_WriteCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1e:	e077      	b.n	8002010 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8001f20:	2300      	movs	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8001f28:	7afb      	ldrb	r3, [r7, #11]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <MX25LM51245G_WriteCfg2Register+0x44>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <MX25LM51245G_WriteCfg2Register+0x46>
 8001f32:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 8001f34:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8001f36:	7abb      	ldrb	r3, [r7, #10]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <MX25LM51245G_WriteCfg2Register+0x52>
 8001f3c:	2308      	movs	r3, #8
 8001f3e:	e000      	b.n	8001f42 <MX25LM51245G_WriteCfg2Register+0x54>
 8001f40:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8001f44:	7afb      	ldrb	r3, [r7, #11]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <MX25LM51245G_WriteCfg2Register+0x60>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	e000      	b.n	8001f50 <MX25LM51245G_WriteCfg2Register+0x62>
 8001f4e:	2310      	movs	r3, #16
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
 8001f50:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? MX25LM51245G_WRITE_CFG_REG2_CMD
                                 : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8001f52:	7afb      	ldrb	r3, [r7, #11]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <MX25LM51245G_WriteCfg2Register+0x6e>
 8001f58:	2372      	movs	r3, #114	@ 0x72
 8001f5a:	e001      	b.n	8001f60 <MX25LM51245G_WriteCfg2Register+0x72>
 8001f5c:	f247 238d 	movw	r3, #29325	@ 0x728d
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 8001f60:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 8001f62:	7afb      	ldrb	r3, [r7, #11]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d102      	bne.n	8001f6e <MX25LM51245G_WriteCfg2Register+0x80>
 8001f68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f6c:	e001      	b.n	8001f72 <MX25LM51245G_WriteCfg2Register+0x84>
 8001f6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDTRMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 8001f74:	7abb      	ldrb	r3, [r7, #10]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d102      	bne.n	8001f80 <MX25LM51245G_WriteCfg2Register+0x92>
 8001f7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f7e:	e000      	b.n	8001f82 <MX25LM51245G_WriteCfg2Register+0x94>
 8001f80:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
 8001f82:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 8001f84:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001f88:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = WriteAddr;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8001f92:	7afb      	ldrb	r3, [r7, #11]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <MX25LM51245G_WriteCfg2Register+0xb0>
 8001f98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f9c:	e001      	b.n	8001fa2 <MX25LM51245G_WriteCfg2Register+0xb4>
 8001f9e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDTRMode        = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 8001fa4:	7abb      	ldrb	r3, [r7, #10]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d102      	bne.n	8001fb0 <MX25LM51245G_WriteCfg2Register+0xc2>
 8001faa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001fae:	e000      	b.n	8001fb2 <MX25LM51245G_WriteCfg2Register+0xc4>
 8001fb0:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25LM51245G_DTR_TRANSFER)
 8001fb2:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8001fb8:	7afb      	ldrb	r3, [r7, #11]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d006      	beq.n	8001fcc <MX25LM51245G_WriteCfg2Register+0xde>
 8001fbe:	7abb      	ldrb	r3, [r7, #10]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <MX25LM51245G_WriteCfg2Register+0xda>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e002      	b.n	8001fce <MX25LM51245G_WriteCfg2Register+0xe0>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <MX25LM51245G_WriteCfg2Register+0xe0>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001fd8:	f107 0310 	add.w	r3, r7, #16
 8001fdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f008 fcfa 	bl	800a9dc <HAL_XSPI_Command>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <MX25LM51245G_WriteCfg2Register+0x106>
  {
    return MX25LM51245G_ERROR;
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff2:	e00d      	b.n	8002010 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_XSPI_Transmit(Ctx, &Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff8:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f008 fd7d 	bl	800aafc <HAL_XSPI_Transmit>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d002      	beq.n	800200e <MX25LM51245G_WriteCfg2Register+0x120>
  {
    return MX25LM51245G_ERROR;
 8002008:	f04f 33ff 	mov.w	r3, #4294967295
 800200c:	e000      	b.n	8002010 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  return MX25LM51245G_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3760      	adds	r7, #96	@ 0x60
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <MX25LM51245G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(XSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode,
                                      MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b098      	sub	sp, #96	@ 0x60
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	460b      	mov	r3, r1
 8002024:	72fb      	strb	r3, [r7, #11]
 8002026:	4613      	mov	r3, r2
 8002028:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
 800202a:	f107 0310 	add.w	r3, r7, #16
 800202e:	2250      	movs	r2, #80	@ 0x50
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f010 fd0d 	bl	8012a52 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8002038:	7afb      	ldrb	r3, [r7, #11]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d105      	bne.n	800204a <MX25LM51245G_ReadCfg2Register+0x32>
 800203e:	7abb      	ldrb	r3, [r7, #10]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d102      	bne.n	800204a <MX25LM51245G_ReadCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8002044:	f04f 33ff 	mov.w	r3, #4294967295
 8002048:	e081      	b.n	800214e <MX25LM51245G_ReadCfg2Register+0x136>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8002052:	7afb      	ldrb	r3, [r7, #11]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <MX25LM51245G_ReadCfg2Register+0x44>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <MX25LM51245G_ReadCfg2Register+0x46>
 800205c:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 800205e:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8002060:	7abb      	ldrb	r3, [r7, #10]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <MX25LM51245G_ReadCfg2Register+0x52>
 8002066:	2308      	movs	r3, #8
 8002068:	e000      	b.n	800206c <MX25LM51245G_ReadCfg2Register+0x54>
 800206a:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 800206c:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 800206e:	7afb      	ldrb	r3, [r7, #11]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <MX25LM51245G_ReadCfg2Register+0x60>
 8002074:	2300      	movs	r3, #0
 8002076:	e000      	b.n	800207a <MX25LM51245G_ReadCfg2Register+0x62>
 8002078:	2310      	movs	r3, #16
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
 800207a:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? MX25LM51245G_READ_CFG_REG2_CMD
                                 : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 800207c:	7afb      	ldrb	r3, [r7, #11]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <MX25LM51245G_ReadCfg2Register+0x6e>
 8002082:	2371      	movs	r3, #113	@ 0x71
 8002084:	e001      	b.n	800208a <MX25LM51245G_ReadCfg2Register+0x72>
 8002086:	f247 138e 	movw	r3, #29070	@ 0x718e
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 800208a:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 800208c:	7afb      	ldrb	r3, [r7, #11]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d102      	bne.n	8002098 <MX25LM51245G_ReadCfg2Register+0x80>
 8002092:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002096:	e001      	b.n	800209c <MX25LM51245G_ReadCfg2Register+0x84>
 8002098:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800209c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDTRMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 800209e:	7abb      	ldrb	r3, [r7, #10]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d102      	bne.n	80020aa <MX25LM51245G_ReadCfg2Register+0x92>
 80020a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020a8:	e000      	b.n	80020ac <MX25LM51245G_ReadCfg2Register+0x94>
 80020aa:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
 80020ac:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 80020ae:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80020b2:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = ReadAddr;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 80020b8:	2300      	movs	r3, #0
 80020ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 80020bc:	7afb      	ldrb	r3, [r7, #11]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d102      	bne.n	80020c8 <MX25LM51245G_ReadCfg2Register+0xb0>
 80020c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020c6:	e001      	b.n	80020cc <MX25LM51245G_ReadCfg2Register+0xb4>
 80020c8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80020cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDTRMode        = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 80020ce:	7abb      	ldrb	r3, [r7, #10]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d102      	bne.n	80020da <MX25LM51245G_ReadCfg2Register+0xc2>
 80020d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80020d8:	e000      	b.n	80020dc <MX25LM51245G_ReadCfg2Register+0xc4>
 80020da:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25LM51245G_DTR_TRANSFER)
 80020dc:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25LM51245G_DTR_TRANSFER)
 80020de:	7afb      	ldrb	r3, [r7, #11]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d006      	beq.n	80020f2 <MX25LM51245G_ReadCfg2Register+0xda>
 80020e4:	7abb      	ldrb	r3, [r7, #10]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d101      	bne.n	80020ee <MX25LM51245G_ReadCfg2Register+0xd6>
 80020ea:	2305      	movs	r3, #5
 80020ec:	e002      	b.n	80020f4 <MX25LM51245G_ReadCfg2Register+0xdc>
 80020ee:	2304      	movs	r3, #4
 80020f0:	e000      	b.n	80020f4 <MX25LM51245G_ReadCfg2Register+0xdc>
 80020f2:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE)
 80020f4:	657b      	str	r3, [r7, #84]	@ 0x54
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80020f6:	7abb      	ldrb	r3, [r7, #10]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <MX25LM51245G_ReadCfg2Register+0xe8>
 80020fc:	2302      	movs	r3, #2
 80020fe:	e000      	b.n	8002102 <MX25LM51245G_ReadCfg2Register+0xea>
 8002100:	2301      	movs	r3, #1
 8002102:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 8002104:	7abb      	ldrb	r3, [r7, #10]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d102      	bne.n	8002110 <MX25LM51245G_ReadCfg2Register+0xf8>
 800210a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800210e:	e000      	b.n	8002112 <MX25LM51245G_ReadCfg2Register+0xfa>
 8002110:	2300      	movs	r3, #0
 8002112:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8002114:	2300      	movs	r3, #0
 8002116:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002118:	f107 0310 	add.w	r3, r7, #16
 800211c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002120:	4619      	mov	r1, r3
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f008 fc5a 	bl	800a9dc <HAL_XSPI_Command>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <MX25LM51245G_ReadCfg2Register+0x11c>
  {
    return MX25LM51245G_ERROR;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
 8002132:	e00c      	b.n	800214e <MX25LM51245G_ReadCfg2Register+0x136>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002138:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f008 fd51 	bl	800abe2 <HAL_XSPI_Receive>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d002      	beq.n	800214c <MX25LM51245G_ReadCfg2Register+0x134>
  {
    return MX25LM51245G_ERROR;
 8002146:	f04f 33ff 	mov.w	r3, #4294967295
 800214a:	e000      	b.n	800214e <MX25LM51245G_ReadCfg2Register+0x136>
  }

  return MX25LM51245G_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3760      	adds	r7, #96	@ 0x60
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(XSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b096      	sub	sp, #88	@ 0x58
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	460b      	mov	r3, r1
 8002160:	70fb      	strb	r3, [r7, #3]
 8002162:	4613      	mov	r3, r2
 8002164:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
 8002166:	f107 0308 	add.w	r3, r7, #8
 800216a:	2250      	movs	r2, #80	@ 0x50
 800216c:	2100      	movs	r1, #0
 800216e:	4618      	mov	r0, r3
 8002170:	f010 fc6f 	bl	8012a52 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d105      	bne.n	8002186 <MX25LM51245G_ResetEnable+0x30>
 800217a:	78bb      	ldrb	r3, [r7, #2]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d102      	bne.n	8002186 <MX25LM51245G_ResetEnable+0x30>
  {
    return MX25LM51245G_ERROR;
 8002180:	f04f 33ff 	mov.w	r3, #4294967295
 8002184:	e03b      	b.n	80021fe <MX25LM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <MX25LM51245G_ResetEnable+0x42>
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <MX25LM51245G_ResetEnable+0x44>
 8002198:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 800219a:	617b      	str	r3, [r7, #20]
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800219c:	78bb      	ldrb	r3, [r7, #2]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <MX25LM51245G_ResetEnable+0x50>
 80021a2:	2308      	movs	r3, #8
 80021a4:	e000      	b.n	80021a8 <MX25LM51245G_ResetEnable+0x52>
 80021a6:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 80021a8:	61fb      	str	r3, [r7, #28]
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <MX25LM51245G_ResetEnable+0x5e>
 80021b0:	2300      	movs	r3, #0
 80021b2:	e000      	b.n	80021b6 <MX25LM51245G_ResetEnable+0x60>
 80021b4:	2310      	movs	r3, #16
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
 80021b6:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? MX25LM51245G_RESET_ENABLE_CMD
                                 : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <MX25LM51245G_ResetEnable+0x6c>
 80021be:	2366      	movs	r3, #102	@ 0x66
 80021c0:	e001      	b.n	80021c6 <MX25LM51245G_ResetEnable+0x70>
 80021c2:	f246 6399 	movw	r3, #26265	@ 0x6699
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 80021c6:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DummyCycles        = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 80021dc:	2300      	movs	r3, #0
 80021de:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021e0:	f107 0308 	add.w	r3, r7, #8
 80021e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e8:	4619      	mov	r1, r3
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f008 fbf6 	bl	800a9dc <HAL_XSPI_Command>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d002      	beq.n	80021fc <MX25LM51245G_ResetEnable+0xa6>
  {
    return MX25LM51245G_ERROR;
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295
 80021fa:	e000      	b.n	80021fe <MX25LM51245G_ResetEnable+0xa8>
  }

  return MX25LM51245G_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3758      	adds	r7, #88	@ 0x58
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(XSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b096      	sub	sp, #88	@ 0x58
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	460b      	mov	r3, r1
 8002210:	70fb      	strb	r3, [r7, #3]
 8002212:	4613      	mov	r3, r2
 8002214:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
 8002216:	f107 0308 	add.w	r3, r7, #8
 800221a:	2250      	movs	r2, #80	@ 0x50
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f010 fc17 	bl	8012a52 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d105      	bne.n	8002236 <MX25LM51245G_ResetMemory+0x30>
 800222a:	78bb      	ldrb	r3, [r7, #2]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d102      	bne.n	8002236 <MX25LM51245G_ResetMemory+0x30>
  {
    return MX25LM51245G_ERROR;
 8002230:	f04f 33ff 	mov.w	r3, #4294967295
 8002234:	e03b      	b.n	80022ae <MX25LM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8002236:	2300      	movs	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <MX25LM51245G_ResetMemory+0x42>
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <MX25LM51245G_ResetMemory+0x44>
 8002248:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 800224a:	617b      	str	r3, [r7, #20]
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800224c:	78bb      	ldrb	r3, [r7, #2]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <MX25LM51245G_ResetMemory+0x50>
 8002252:	2308      	movs	r3, #8
 8002254:	e000      	b.n	8002258 <MX25LM51245G_ResetMemory+0x52>
 8002256:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 8002258:	61fb      	str	r3, [r7, #28]
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <MX25LM51245G_ResetMemory+0x5e>
 8002260:	2300      	movs	r3, #0
 8002262:	e000      	b.n	8002266 <MX25LM51245G_ResetMemory+0x60>
 8002264:	2310      	movs	r3, #16
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
 8002266:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? MX25LM51245G_RESET_MEMORY_CMD
                                 : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <MX25LM51245G_ResetMemory+0x6c>
 800226e:	2399      	movs	r3, #153	@ 0x99
 8002270:	e001      	b.n	8002276 <MX25LM51245G_ResetMemory+0x70>
 8002272:	f649 1366 	movw	r3, #39270	@ 0x9966
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 8002276:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 8002278:	2300      	movs	r3, #0
 800227a:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 800227c:	2300      	movs	r3, #0
 800227e:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 8002280:	2300      	movs	r3, #0
 8002282:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DummyCycles        = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8002288:	2300      	movs	r3, #0
 800228a:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 800228c:	2300      	movs	r3, #0
 800228e:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002290:	f107 0308 	add.w	r3, r7, #8
 8002294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002298:	4619      	mov	r1, r3
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f008 fb9e 	bl	800a9dc <HAL_XSPI_Command>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <MX25LM51245G_ResetMemory+0xa6>
  {
    return MX25LM51245G_ERROR;
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
 80022aa:	e000      	b.n	80022ae <MX25LM51245G_ResetMemory+0xa8>
  }

  return MX25LM51245G_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3758      	adds	r7, #88	@ 0x58
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 80022b8:	b590      	push	{r4, r7, lr}
 80022ba:	b095      	sub	sp, #84	@ 0x54
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_InitTypeDef ospi_init;

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <BSP_OSPI_NOR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80022c8:	f06f 0301 	mvn.w	r3, #1
 80022cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022ce:	e083      	b.n	80023d8 <BSP_OSPI_NOR_Init+0x120>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 80022d0:	4944      	ldr	r1, [pc, #272]	@ (80023e4 <BSP_OSPI_NOR_Init+0x12c>)
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	440b      	add	r3, r1
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d178      	bne.n	80023d4 <BSP_OSPI_NOR_Init+0x11c>
    {
#if (USE_HAL_XSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	225c      	movs	r2, #92	@ 0x5c
 80022e6:	fb02 f303 	mul.w	r3, r2, r3
 80022ea:	4a3f      	ldr	r2, [pc, #252]	@ (80023e8 <BSP_OSPI_NOR_Init+0x130>)
 80022ec:	4413      	add	r3, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 fb08 	bl	8002904 <OSPI_NOR_MspInit>
        }
      }
#endif /* USE_HAL_XSPI_REGISTER_CALLBACKS */

      /* Get Flash information of one memory */
      (void)MX25LM51245G_GetFlashInfo(&pInfo);
 80022f4:	f107 031c 	add.w	r3, r7, #28
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff f9f4 	bl	80016e6 <MX25LM51245G_GetFlashInfo>

      /* Fill config structure */
      ospi_init.ClockPrescaler = 1;
 80022fe:	2301      	movs	r3, #1
 8002300:	613b      	str	r3, [r7, #16]
      ospi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800230e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002310:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002312:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <BSP_OSPI_NOR_Init+0x64>
    return 32U;
 8002318:	2320      	movs	r3, #32
 800231a:	e003      	b.n	8002324 <BSP_OSPI_NOR_Init+0x6c>
  return __builtin_clz(value);
 800231c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800231e:	fab3 f383 	clz	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	60fb      	str	r3, [r7, #12]
      ospi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
      ospi_init.TransferRate   = (uint32_t)Init->TransferRate;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	785b      	ldrb	r3, [r3, #1]
 800232e:	61bb      	str	r3, [r7, #24]

      /* STM32 OSPI interface initialization */
      if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_init) != HAL_OK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	225c      	movs	r2, #92	@ 0x5c
 8002334:	fb02 f303 	mul.w	r3, r2, r3
 8002338:	4a2b      	ldr	r2, [pc, #172]	@ (80023e8 <BSP_OSPI_NOR_Init+0x130>)
 800233a:	4413      	add	r3, r2
 800233c:	f107 020c 	add.w	r2, r7, #12
 8002340:	4611      	mov	r1, r2
 8002342:	4618      	mov	r0, r3
 8002344:	f000 f852 	bl	80023ec <MX_OSPI_NOR_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <BSP_OSPI_NOR_Init+0x9e>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800234e:	f06f 0303 	mvn.w	r3, #3
 8002352:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002354:	e040      	b.n	80023d8 <BSP_OSPI_NOR_Init+0x120>
      }
      else
      {
        /* OSPI Delay Block enable */
        OSPI1_DLYB_Enable(Instance);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 ff62 	bl	8003220 <OSPI1_DLYB_Enable>

        /* OSPI memory reset */
        if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 fc53 	bl	8002c08 <OSPI_NOR_ResetMemory>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <BSP_OSPI_NOR_Init+0xb8>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8002368:	f06f 0304 	mvn.w	r3, #4
 800236c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800236e:	e033      	b.n	80023d8 <BSP_OSPI_NOR_Init+0x120>
        }/* Check if memory is ready */
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	225c      	movs	r2, #92	@ 0x5c
 8002374:	fb02 f303 	mul.w	r3, r2, r3
 8002378:	4a1b      	ldr	r2, [pc, #108]	@ (80023e8 <BSP_OSPI_NOR_Init+0x130>)
 800237a:	1898      	adds	r0, r3, r2
 800237c:	4919      	ldr	r1, [pc, #100]	@ (80023e4 <BSP_OSPI_NOR_Init+0x12c>)
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4413      	add	r3, r2
 8002386:	440b      	add	r3, r1
 8002388:	3301      	adds	r3, #1
 800238a:	7819      	ldrb	r1, [r3, #0]
 800238c:	4c15      	ldr	r4, [pc, #84]	@ (80023e4 <BSP_OSPI_NOR_Init+0x12c>)
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4413      	add	r3, r2
 8002396:	4423      	add	r3, r4
 8002398:	3302      	adds	r3, #2
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	f7ff f9d1 	bl	8001744 <MX25LM51245G_AutoPollingMemReady>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <BSP_OSPI_NOR_Init+0xf8>
                                                  Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80023a8:	f06f 0304 	mvn.w	r3, #4
 80023ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023ae:	e013      	b.n	80023d8 <BSP_OSPI_NOR_Init+0x120>
        }/* Configure the memory */
        else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	7819      	ldrb	r1, [r3, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	785b      	ldrb	r3, [r3, #1]
 80023b8:	461a      	mov	r2, r3
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 fa16 	bl	80027ec <BSP_OSPI_NOR_ConfigFlash>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <BSP_OSPI_NOR_Init+0x116>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80023c6:	f06f 0304 	mvn.w	r3, #4
 80023ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023cc:	e004      	b.n	80023d8 <BSP_OSPI_NOR_Init+0x120>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023d2:	e001      	b.n	80023d8 <BSP_OSPI_NOR_Init+0x120>
        }
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80023d4:	2300      	movs	r3, #0
 80023d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  /* Return BSP status */
  return ret;
 80023d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3754      	adds	r7, #84	@ 0x54
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd90      	pop	{r4, r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200001d4 	.word	0x200001d4
 80023e8:	20000178 	.word	0x20000178

080023ec <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Init           OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(XSPI_HandleTypeDef *hospi, MX_OSPI_InitTypeDef *Init)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002474 <MX_OSPI_NOR_Init+0x88>)
 80023fa:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThresholdByte       = 1;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	605a      	str	r2, [r3, #4]
  hospi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  hospi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTimeCycle = 2;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode               = HAL_XSPI_CLOCK_MODE_0;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize                = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler          = Init->ClockPrescaler;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi->Init.SampleShifting          = Init->SampleShifting;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi->Init.ChipSelectBoundary      = 0;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	631a      	str	r2, [r3, #48]	@ 0x30

  if (Init->TransferRate == (uint32_t) BSP_OSPI_NOR_DTR_TRANSFER)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d108      	bne.n	8002458 <MX_OSPI_NOR_Init+0x6c>
  {
    hospi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800244c:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002454:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002456:	e005      	b.n	8002464 <MX_OSPI_NOR_Init+0x78>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  return HAL_XSPI_Init(hospi);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f008 f9e1 	bl	800a82c <HAL_XSPI_Init>
 800246a:	4603      	mov	r3, r0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	47001400 	.word	0x47001400

08002478 <BSP_OSPI_NOR_Read>:
  * @param  ReadAddr  Read start address
  * @param  Size      Size of data to read
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Read(uint32_t Instance, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
  int32_t ret;

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <BSP_OSPI_NOR_Read+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800248c:	f06f 0301 	mvn.w	r3, #1
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	e03d      	b.n	8002510 <BSP_OSPI_NOR_Read+0x98>
  }
  else
  {
    if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8002494:	4921      	ldr	r1, [pc, #132]	@ (800251c <BSP_OSPI_NOR_Read+0xa4>)
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	4613      	mov	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4413      	add	r3, r2
 800249e:	440b      	add	r3, r1
 80024a0:	3302      	adds	r3, #2
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d11f      	bne.n	80024e8 <BSP_OSPI_NOR_Read+0x70>
    {
      if (MX25LM51245G_ReadSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	225c      	movs	r2, #92	@ 0x5c
 80024ac:	fb02 f303 	mul.w	r3, r2, r3
 80024b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002520 <BSP_OSPI_NOR_Read+0xa8>)
 80024b2:	1898      	adds	r0, r3, r2
 80024b4:	4919      	ldr	r1, [pc, #100]	@ (800251c <BSP_OSPI_NOR_Read+0xa4>)
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	440b      	add	r3, r1
 80024c0:	3301      	adds	r3, #1
 80024c2:	7819      	ldrb	r1, [r3, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	9301      	str	r3, [sp, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f7ff f9ea 	bl	80018a8 <MX25LM51245G_ReadSTR>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <BSP_OSPI_NOR_Read+0x6a>
                               MX25LM51245G_4BYTES_SIZE, pData, ReadAddr, Size) != MX25LM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80024da:	f06f 0304 	mvn.w	r3, #4
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	e016      	b.n	8002510 <BSP_OSPI_NOR_Read+0x98>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	e013      	b.n	8002510 <BSP_OSPI_NOR_Read+0x98>
      }
    }
    else
    {
      if (MX25LM51245G_ReadDTR(&hospi_nor[Instance], pData, ReadAddr, Size) != MX25LM51245G_OK)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	225c      	movs	r2, #92	@ 0x5c
 80024ec:	fb02 f303 	mul.w	r3, r2, r3
 80024f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002520 <BSP_OSPI_NOR_Read+0xa8>)
 80024f2:	1898      	adds	r0, r3, r2
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	f7ff fa5e 	bl	80019ba <MX25LM51245G_ReadDTR>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <BSP_OSPI_NOR_Read+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002504:	f06f 0304 	mvn.w	r3, #4
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	e001      	b.n	8002510 <BSP_OSPI_NOR_Read+0x98>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8002510:	697b      	ldr	r3, [r7, #20]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	200001d4 	.word	0x200001d4
 8002520:	20000178 	.word	0x20000178

08002524 <BSP_OSPI_NOR_Write>:
  * @param  WriteAddr Write start address
  * @param  Size      Size of data to write
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Write(uint32_t Instance, const uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8002524:	b590      	push	{r4, r7, lr}
 8002526:	b08d      	sub	sp, #52	@ 0x34
 8002528:	af02      	add	r7, sp, #8
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002532:	2300      	movs	r3, #0
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t current_size;
  uint32_t current_addr;
  uint32_t data_addr;

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <BSP_OSPI_NOR_Write+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800253c:	f06f 0301 	mvn.w	r3, #1
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24
 8002542:	e0cb      	b.n	80026dc <BSP_OSPI_NOR_Write+0x1b8>
  }
  else
  {
    /* Calculation of the size between the write address and the end of the page */
    current_size = MX25LM51245G_PAGE_SIZE - (WriteAddr % MX25LM51245G_PAGE_SIZE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800254c:	623b      	str	r3, [r7, #32]

    /* Check if the size of the data is less than the remaining place in the page */
    if (current_size > Size)
 800254e:	6a3a      	ldr	r2, [r7, #32]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d901      	bls.n	800255a <BSP_OSPI_NOR_Write+0x36>
    {
      current_size = Size;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	623b      	str	r3, [r7, #32]
    }

    /* Initialize the address variables */
    current_addr = WriteAddr;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	61fb      	str	r3, [r7, #28]
    end_addr = WriteAddr + Size;
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	4413      	add	r3, r2
 8002564:	617b      	str	r3, [r7, #20]
    data_addr = (uint32_t)pData;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	61bb      	str	r3, [r7, #24]

    /* Perform the write page by page */
    do
    {
      /* Check if Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	225c      	movs	r2, #92	@ 0x5c
 800256e:	fb02 f303 	mul.w	r3, r2, r3
 8002572:	4a5d      	ldr	r2, [pc, #372]	@ (80026e8 <BSP_OSPI_NOR_Write+0x1c4>)
 8002574:	1898      	adds	r0, r3, r2
 8002576:	495d      	ldr	r1, [pc, #372]	@ (80026ec <BSP_OSPI_NOR_Write+0x1c8>)
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4613      	mov	r3, r2
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	4413      	add	r3, r2
 8002580:	440b      	add	r3, r1
 8002582:	3301      	adds	r3, #1
 8002584:	7819      	ldrb	r1, [r3, #0]
 8002586:	4c59      	ldr	r4, [pc, #356]	@ (80026ec <BSP_OSPI_NOR_Write+0x1c8>)
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	4613      	mov	r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	4413      	add	r3, r2
 8002590:	4423      	add	r3, r4
 8002592:	3302      	adds	r3, #2
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	f7ff f8d4 	bl	8001744 <MX25LM51245G_AutoPollingMemReady>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <BSP_OSPI_NOR_Write+0x86>
                                           Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80025a2:	f06f 0304 	mvn.w	r3, #4
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025a8:	e090      	b.n	80026cc <BSP_OSPI_NOR_Write+0x1a8>
      }/* Enable write operations */
      else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	225c      	movs	r2, #92	@ 0x5c
 80025ae:	fb02 f303 	mul.w	r3, r2, r3
 80025b2:	4a4d      	ldr	r2, [pc, #308]	@ (80026e8 <BSP_OSPI_NOR_Write+0x1c4>)
 80025b4:	1898      	adds	r0, r3, r2
 80025b6:	494d      	ldr	r1, [pc, #308]	@ (80026ec <BSP_OSPI_NOR_Write+0x1c8>)
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4613      	mov	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	440b      	add	r3, r1
 80025c2:	3301      	adds	r3, #1
 80025c4:	7819      	ldrb	r1, [r3, #0]
 80025c6:	4c49      	ldr	r4, [pc, #292]	@ (80026ec <BSP_OSPI_NOR_Write+0x1c8>)
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	4423      	add	r3, r4
 80025d2:	3302      	adds	r3, #2
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	f7ff fbb9 	bl	8001d4e <MX25LM51245G_WriteEnable>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <BSP_OSPI_NOR_Write+0xc6>
                                        Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80025e2:	f06f 0304 	mvn.w	r3, #4
 80025e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025e8:	e070      	b.n	80026cc <BSP_OSPI_NOR_Write+0x1a8>
      }
      else
      {
        if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80025ea:	4940      	ldr	r1, [pc, #256]	@ (80026ec <BSP_OSPI_NOR_Write+0x1c8>)
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	4613      	mov	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4413      	add	r3, r2
 80025f4:	440b      	add	r3, r1
 80025f6:	3302      	adds	r3, #2
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d11d      	bne.n	800263a <BSP_OSPI_NOR_Write+0x116>
        {
          /* Issue page program command */
          if (MX25LM51245G_PageProgram(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	225c      	movs	r2, #92	@ 0x5c
 8002602:	fb02 f303 	mul.w	r3, r2, r3
 8002606:	4a38      	ldr	r2, [pc, #224]	@ (80026e8 <BSP_OSPI_NOR_Write+0x1c4>)
 8002608:	1898      	adds	r0, r3, r2
 800260a:	4938      	ldr	r1, [pc, #224]	@ (80026ec <BSP_OSPI_NOR_Write+0x1c8>)
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	440b      	add	r3, r1
 8002616:	3301      	adds	r3, #1
 8002618:	7819      	ldrb	r1, [r3, #0]
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	9301      	str	r3, [sp, #4]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	4613      	mov	r3, r2
 8002626:	2201      	movs	r2, #1
 8002628:	f7ff fa1d 	bl	8001a66 <MX25LM51245G_PageProgram>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d014      	beq.n	800265c <BSP_OSPI_NOR_Write+0x138>
                                       MX25LM51245G_4BYTES_SIZE, (uint8_t *)data_addr, current_addr,
                                       current_size) != MX25LM51245G_OK)
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8002632:	f06f 0304 	mvn.w	r3, #4
 8002636:	627b      	str	r3, [r7, #36]	@ 0x24
 8002638:	e010      	b.n	800265c <BSP_OSPI_NOR_Write+0x138>
          }
        }
        else
        {
          /* Issue page program command */
          if (MX25LM51245G_PageProgramDTR(&hospi_nor[Instance], (uint8_t *)data_addr, current_addr,
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	225c      	movs	r2, #92	@ 0x5c
 800263e:	fb02 f303 	mul.w	r3, r2, r3
 8002642:	4a29      	ldr	r2, [pc, #164]	@ (80026e8 <BSP_OSPI_NOR_Write+0x1c4>)
 8002644:	1898      	adds	r0, r3, r2
 8002646:	69b9      	ldr	r1, [r7, #24]
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	f7ff fa8f 	bl	8001b6e <MX25LM51245G_PageProgramDTR>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <BSP_OSPI_NOR_Write+0x138>
                                          current_size) != MX25LM51245G_OK)
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8002656:	f06f 0304 	mvn.w	r3, #4
 800265a:	627b      	str	r3, [r7, #36]	@ 0x24
          }
        }

        if (ret == BSP_ERROR_NONE)
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	2b00      	cmp	r3, #0
 8002660:	d134      	bne.n	80026cc <BSP_OSPI_NOR_Write+0x1a8>
        {
          /* Configure automatic polling mode to wait for end of program */
          if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	225c      	movs	r2, #92	@ 0x5c
 8002666:	fb02 f303 	mul.w	r3, r2, r3
 800266a:	4a1f      	ldr	r2, [pc, #124]	@ (80026e8 <BSP_OSPI_NOR_Write+0x1c4>)
 800266c:	1898      	adds	r0, r3, r2
 800266e:	491f      	ldr	r1, [pc, #124]	@ (80026ec <BSP_OSPI_NOR_Write+0x1c8>)
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4613      	mov	r3, r2
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4413      	add	r3, r2
 8002678:	440b      	add	r3, r1
 800267a:	3301      	adds	r3, #1
 800267c:	7819      	ldrb	r1, [r3, #0]
 800267e:	4c1b      	ldr	r4, [pc, #108]	@ (80026ec <BSP_OSPI_NOR_Write+0x1c8>)
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4613      	mov	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	4423      	add	r3, r4
 800268a:	3302      	adds	r3, #2
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	f7ff f858 	bl	8001744 <MX25LM51245G_AutoPollingMemReady>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <BSP_OSPI_NOR_Write+0x17e>
                                               Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800269a:	f06f 0304 	mvn.w	r3, #4
 800269e:	627b      	str	r3, [r7, #36]	@ 0x24
 80026a0:	e014      	b.n	80026cc <BSP_OSPI_NOR_Write+0x1a8>
          }
          else
          {
            /* Update the address and size variables for next page programming */
            current_addr += current_size;
 80026a2:	69fa      	ldr	r2, [r7, #28]
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	4413      	add	r3, r2
 80026a8:	61fb      	str	r3, [r7, #28]
            data_addr += current_size;
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	4413      	add	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
            current_size = ((current_addr + MX25LM51245G_PAGE_SIZE) > end_addr)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
                           ? (end_addr - current_addr)
                           : MX25LM51245G_PAGE_SIZE;
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d203      	bcs.n	80026c6 <BSP_OSPI_NOR_Write+0x1a2>
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	e001      	b.n	80026ca <BSP_OSPI_NOR_Write+0x1a6>
 80026c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
            current_size = ((current_addr + MX25LM51245G_PAGE_SIZE) > end_addr)
 80026ca:	623b      	str	r3, [r7, #32]
          }
        }
      }
    } while ((current_addr < end_addr) && (ret == BSP_ERROR_NONE));
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d203      	bcs.n	80026dc <BSP_OSPI_NOR_Write+0x1b8>
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f43f af47 	beq.w	800256a <BSP_OSPI_NOR_Write+0x46>
  }

  /* Return BSP status */
  return ret;
 80026dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80026de:	4618      	mov	r0, r3
 80026e0:	372c      	adds	r7, #44	@ 0x2c
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd90      	pop	{r4, r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000178 	.word	0x20000178
 80026ec:	200001d4 	.word	0x200001d4

080026f0 <BSP_OSPI_NOR_Erase_Block>:
  * @param  BlockAddress Block address to erase
  * @param  BlockSize    Erase Block size: MX25LM51245G_ERASE_4K or MX25LM51245G_ERASE_64K
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Erase_Block(uint32_t Instance, uint32_t BlockAddress, BSP_OSPI_NOR_Erase_t BlockSize)
{
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b089      	sub	sp, #36	@ 0x24
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	4613      	mov	r3, r2
 80026fc:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <BSP_OSPI_NOR_Erase_Block+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002704:	f06f 0301 	mvn.w	r3, #1
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	e065      	b.n	80027d8 <BSP_OSPI_NOR_Erase_Block+0xe8>
  }
  else
  {
    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	225c      	movs	r2, #92	@ 0x5c
 8002710:	fb02 f303 	mul.w	r3, r2, r3
 8002714:	4a33      	ldr	r2, [pc, #204]	@ (80027e4 <BSP_OSPI_NOR_Erase_Block+0xf4>)
 8002716:	1898      	adds	r0, r3, r2
 8002718:	4933      	ldr	r1, [pc, #204]	@ (80027e8 <BSP_OSPI_NOR_Erase_Block+0xf8>)
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4613      	mov	r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4413      	add	r3, r2
 8002722:	440b      	add	r3, r1
 8002724:	3301      	adds	r3, #1
 8002726:	7819      	ldrb	r1, [r3, #0]
 8002728:	4c2f      	ldr	r4, [pc, #188]	@ (80027e8 <BSP_OSPI_NOR_Erase_Block+0xf8>)
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4613      	mov	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4413      	add	r3, r2
 8002732:	4423      	add	r3, r4
 8002734:	3302      	adds	r3, #2
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	f7ff f803 	bl	8001744 <MX25LM51245G_AutoPollingMemReady>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <BSP_OSPI_NOR_Erase_Block+0x5c>
                                         Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002744:	f06f 0304 	mvn.w	r3, #4
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	e045      	b.n	80027d8 <BSP_OSPI_NOR_Erase_Block+0xe8>
    }/* Enable write operations */
    else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	225c      	movs	r2, #92	@ 0x5c
 8002750:	fb02 f303 	mul.w	r3, r2, r3
 8002754:	4a23      	ldr	r2, [pc, #140]	@ (80027e4 <BSP_OSPI_NOR_Erase_Block+0xf4>)
 8002756:	1898      	adds	r0, r3, r2
 8002758:	4923      	ldr	r1, [pc, #140]	@ (80027e8 <BSP_OSPI_NOR_Erase_Block+0xf8>)
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4613      	mov	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	4413      	add	r3, r2
 8002762:	440b      	add	r3, r1
 8002764:	3301      	adds	r3, #1
 8002766:	7819      	ldrb	r1, [r3, #0]
 8002768:	4c1f      	ldr	r4, [pc, #124]	@ (80027e8 <BSP_OSPI_NOR_Erase_Block+0xf8>)
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4613      	mov	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4413      	add	r3, r2
 8002772:	4423      	add	r3, r4
 8002774:	3302      	adds	r3, #2
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	f7ff fae8 	bl	8001d4e <MX25LM51245G_WriteEnable>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <BSP_OSPI_NOR_Erase_Block+0x9c>
                                      Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002784:	f06f 0304 	mvn.w	r3, #4
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	e025      	b.n	80027d8 <BSP_OSPI_NOR_Erase_Block+0xe8>
    }/* Issue Block Erase command */
    else if (MX25LM51245G_BlockErase(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	225c      	movs	r2, #92	@ 0x5c
 8002790:	fb02 f303 	mul.w	r3, r2, r3
 8002794:	4a13      	ldr	r2, [pc, #76]	@ (80027e4 <BSP_OSPI_NOR_Erase_Block+0xf4>)
 8002796:	1898      	adds	r0, r3, r2
 8002798:	4913      	ldr	r1, [pc, #76]	@ (80027e8 <BSP_OSPI_NOR_Erase_Block+0xf8>)
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4613      	mov	r3, r2
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	4413      	add	r3, r2
 80027a2:	440b      	add	r3, r1
 80027a4:	3301      	adds	r3, #1
 80027a6:	7819      	ldrb	r1, [r3, #0]
 80027a8:	4c0f      	ldr	r4, [pc, #60]	@ (80027e8 <BSP_OSPI_NOR_Erase_Block+0xf8>)
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4613      	mov	r3, r2
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4413      	add	r3, r2
 80027b2:	4423      	add	r3, r4
 80027b4:	3302      	adds	r3, #2
 80027b6:	781a      	ldrb	r2, [r3, #0]
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	9301      	str	r3, [sp, #4]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	2301      	movs	r3, #1
 80027c2:	f7ff fa29 	bl	8001c18 <MX25LM51245G_BlockErase>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <BSP_OSPI_NOR_Erase_Block+0xe4>
                                     Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_4BYTES_SIZE,
                                     BlockAddress, BlockSize) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80027cc:	f06f 0304 	mvn.w	r3, #4
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	e001      	b.n	80027d8 <BSP_OSPI_NOR_Erase_Block+0xe8>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 80027d8:	697b      	ldr	r3, [r7, #20]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	371c      	adds	r7, #28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd90      	pop	{r4, r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000178 	.word	0x20000178
 80027e8:	200001d4 	.word	0x200001d4

080027ec <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	70fb      	strb	r3, [r7, #3]
 80027f8:	4613      	mov	r3, r2
 80027fa:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002806:	f06f 0301 	mvn.w	r3, #1
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	e072      	b.n	80028f4 <BSP_OSPI_NOR_ConfigFlash+0x108>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800280e:	493c      	ldr	r1, [pc, #240]	@ (8002900 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	440b      	add	r3, r1
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d103      	bne.n	8002828 <BSP_OSPI_NOR_ConfigFlash+0x3c>
    {
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8002820:	f06f 0319 	mvn.w	r3, #25
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	e065      	b.n	80028f4 <BSP_OSPI_NOR_ConfigFlash+0x108>
    }
    else
    {
      /* Setup Flash interface ***************************************************/
      switch (Ospi_Nor_Ctx[Instance].InterfaceMode)
 8002828:	4935      	ldr	r1, [pc, #212]	@ (8002900 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4413      	add	r3, r2
 8002832:	440b      	add	r3, r1
 8002834:	3301      	adds	r3, #1
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d12b      	bne.n	8002894 <BSP_OSPI_NOR_ConfigFlash+0xa8>
      {
        case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
          if ((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d10a      	bne.n	8002858 <BSP_OSPI_NOR_ConfigFlash+0x6c>
 8002842:	492f      	ldr	r1, [pc, #188]	@ (8002900 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	440b      	add	r3, r1
 800284e:	3302      	adds	r3, #2
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	78ba      	ldrb	r2, [r7, #2]
 8002854:	429a      	cmp	r2, r3
 8002856:	d02d      	beq.n	80028b4 <BSP_OSPI_NOR_ConfigFlash+0xc8>
          {
            /* Exit OPI mode */
            ret = OSPI_NOR_ExitOPIMode(Instance);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 fc31 	bl	80030c0 <OSPI_NOR_ExitOPIMode>
 800285e:	60f8      	str	r0, [r7, #12]

            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d126      	bne.n	80028b4 <BSP_OSPI_NOR_ConfigFlash+0xc8>
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d123      	bne.n	80028b4 <BSP_OSPI_NOR_ConfigFlash+0xc8>
            {

              if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800286c:	4924      	ldr	r1, [pc, #144]	@ (8002900 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	440b      	add	r3, r1
 8002878:	3302      	adds	r3, #2
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d104      	bne.n	800288a <BSP_OSPI_NOR_ConfigFlash+0x9e>
              {
                /* Enter DTR OPI mode */
                ret = OSPI_NOR_EnterDOPIMode(Instance);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 fa75 	bl	8002d70 <OSPI_NOR_EnterDOPIMode>
 8002886:	60f8      	str	r0, [r7, #12]
                /* Enter STR OPI mode */
                ret = OSPI_NOR_EnterSOPIMode(Instance);
              }
            }
          }
          break;
 8002888:	e014      	b.n	80028b4 <BSP_OSPI_NOR_ConfigFlash+0xc8>
                ret = OSPI_NOR_EnterSOPIMode(Instance);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fb56 	bl	8002f3c <OSPI_NOR_EnterSOPIMode>
 8002890:	60f8      	str	r0, [r7, #12]
          break;
 8002892:	e00f      	b.n	80028b4 <BSP_OSPI_NOR_ConfigFlash+0xc8>

        case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
        default :
          if (Mode == BSP_OSPI_NOR_OPI_MODE)
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d10e      	bne.n	80028b8 <BSP_OSPI_NOR_ConfigFlash+0xcc>
          {
            if (Rate == BSP_OSPI_NOR_STR_TRANSFER)
 800289a:	78bb      	ldrb	r3, [r7, #2]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d104      	bne.n	80028aa <BSP_OSPI_NOR_ConfigFlash+0xbe>
            {
              /* Enter STR OPI mode */
              ret = OSPI_NOR_EnterSOPIMode(Instance);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 fb4b 	bl	8002f3c <OSPI_NOR_EnterSOPIMode>
 80028a6:	60f8      	str	r0, [r7, #12]
            {
              /* Enter DTR OPI mode */
              ret = OSPI_NOR_EnterDOPIMode(Instance);
            }
          }
          break;
 80028a8:	e006      	b.n	80028b8 <BSP_OSPI_NOR_ConfigFlash+0xcc>
              ret = OSPI_NOR_EnterDOPIMode(Instance);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fa60 	bl	8002d70 <OSPI_NOR_EnterDOPIMode>
 80028b0:	60f8      	str	r0, [r7, #12]
          break;
 80028b2:	e001      	b.n	80028b8 <BSP_OSPI_NOR_ConfigFlash+0xcc>
          break;
 80028b4:	bf00      	nop
 80028b6:	e000      	b.n	80028ba <BSP_OSPI_NOR_ConfigFlash+0xce>
          break;
 80028b8:	bf00      	nop
      }

      /* Update OSPI context if all operations are well done */
      if (ret == BSP_ERROR_NONE)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d119      	bne.n	80028f4 <BSP_OSPI_NOR_ConfigFlash+0x108>
      {
        /* Update current status parameter *****************************************/
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 80028c0:	490f      	ldr	r1, [pc, #60]	@ (8002900 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	440b      	add	r3, r1
 80028cc:	2201      	movs	r2, #1
 80028ce:	701a      	strb	r2, [r3, #0]
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 80028d0:	490b      	ldr	r1, [pc, #44]	@ (8002900 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	440b      	add	r3, r1
 80028dc:	3301      	adds	r3, #1
 80028de:	78fa      	ldrb	r2, [r7, #3]
 80028e0:	701a      	strb	r2, [r3, #0]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 80028e2:	4907      	ldr	r1, [pc, #28]	@ (8002900 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	4413      	add	r3, r2
 80028ec:	440b      	add	r3, r1
 80028ee:	3302      	adds	r3, #2
 80028f0:	78ba      	ldrb	r2, [r7, #2]
 80028f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80028f4:	68fb      	ldr	r3, [r7, #12]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	200001d4 	.word	0x200001d4

08002904 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(XSPI_HandleTypeDef *hospi)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b094      	sub	sp, #80	@ 0x50
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_NOR_CLK_ENABLE();
 800290c:	4bb7      	ldr	r3, [pc, #732]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 800290e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002912:	4ab6      	ldr	r2, [pc, #728]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002914:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002918:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800291c:	4bb3      	ldr	r3, [pc, #716]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 800291e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002922:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002926:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

  /* Reset the OctoSPI memory interface */
  OSPI_NOR_FORCE_RESET();
 800292a:	4bb0      	ldr	r3, [pc, #704]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 800292c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800292e:	4aaf      	ldr	r2, [pc, #700]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002930:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002934:	66d3      	str	r3, [r2, #108]	@ 0x6c
  OSPI_NOR_RELEASE_RESET();
 8002936:	4bad      	ldr	r3, [pc, #692]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002938:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800293a:	4aac      	ldr	r2, [pc, #688]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 800293c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002940:	66d3      	str	r3, [r2, #108]	@ 0x6c

  /* Enable GPIO clocks */
  OSPI_NOR_CLK_GPIO_CLK_ENABLE();
 8002942:	4baa      	ldr	r3, [pc, #680]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002944:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002948:	4aa8      	ldr	r2, [pc, #672]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 800294a:	f043 0320 	orr.w	r3, r3, #32
 800294e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002952:	4ba6      	ldr	r3, [pc, #664]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002954:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	637b      	str	r3, [r7, #52]	@ 0x34
 800295e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
  OSPI_NOR_DQS_GPIO_CLK_ENABLE();
 8002960:	4ba2      	ldr	r3, [pc, #648]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002962:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002966:	4aa1      	ldr	r2, [pc, #644]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002970:	4b9e      	ldr	r3, [pc, #632]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002972:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	633b      	str	r3, [r7, #48]	@ 0x30
 800297c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  OSPI_NOR_CS_GPIO_CLK_ENABLE();
 800297e:	4b9b      	ldr	r3, [pc, #620]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002984:	4a99      	ldr	r2, [pc, #612]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800298a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800298e:	4b97      	ldr	r3, [pc, #604]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002990:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002998:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800299a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  OSPI_NOR_D0_GPIO_CLK_ENABLE();
 800299c:	4b93      	ldr	r3, [pc, #588]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 800299e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029a2:	4a92      	ldr	r2, [pc, #584]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 80029a4:	f043 0302 	orr.w	r3, r3, #2
 80029a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029ac:	4b8f      	ldr	r3, [pc, #572]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 80029ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  OSPI_NOR_D1_GPIO_CLK_ENABLE();
 80029ba:	4b8c      	ldr	r3, [pc, #560]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 80029bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029c0:	4a8a      	ldr	r2, [pc, #552]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 80029c2:	f043 0308 	orr.w	r3, r3, #8
 80029c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029ca:	4b88      	ldr	r3, [pc, #544]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 80029cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  OSPI_NOR_D2_GPIO_CLK_ENABLE();
 80029d8:	4b84      	ldr	r3, [pc, #528]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 80029da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029de:	4a83      	ldr	r2, [pc, #524]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 80029e0:	f043 0304 	orr.w	r3, r3, #4
 80029e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029e8:	4b80      	ldr	r3, [pc, #512]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 80029ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	623b      	str	r3, [r7, #32]
 80029f4:	6a3b      	ldr	r3, [r7, #32]
  OSPI_NOR_D3_GPIO_CLK_ENABLE();
 80029f6:	4b7d      	ldr	r3, [pc, #500]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 80029f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029fc:	4a7b      	ldr	r2, [pc, #492]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 80029fe:	f043 0308 	orr.w	r3, r3, #8
 8002a02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a06:	4b79      	ldr	r3, [pc, #484]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	61fb      	str	r3, [r7, #28]
 8002a12:	69fb      	ldr	r3, [r7, #28]
  OSPI_NOR_D4_GPIO_CLK_ENABLE();
 8002a14:	4b75      	ldr	r3, [pc, #468]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a1a:	4a74      	ldr	r2, [pc, #464]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a20:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a24:	4b71      	ldr	r3, [pc, #452]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a2e:	61bb      	str	r3, [r7, #24]
 8002a30:	69bb      	ldr	r3, [r7, #24]
  OSPI_NOR_D5_GPIO_CLK_ENABLE();
 8002a32:	4b6e      	ldr	r3, [pc, #440]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a38:	4a6c      	ldr	r2, [pc, #432]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a42:	4b6a      	ldr	r3, [pc, #424]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	697b      	ldr	r3, [r7, #20]
  OSPI_NOR_D6_GPIO_CLK_ENABLE();
 8002a50:	4b66      	ldr	r3, [pc, #408]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a56:	4a65      	ldr	r2, [pc, #404]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002a58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a60:	4b62      	ldr	r3, [pc, #392]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	693b      	ldr	r3, [r7, #16]
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8002a6e:	4b5f      	ldr	r3, [pc, #380]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a74:	4a5d      	ldr	r2, [pc, #372]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002a76:	f043 0304 	orr.w	r3, r3, #4
 8002a7a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a7e:	4b5b      	ldr	r3, [pc, #364]	@ (8002bec <OSPI_NOR_MspInit+0x2e8>)
 8002a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]

  /* Activate HSLV */
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_NOR_CS_GPIO_PORT, OSPI_NOR_CS_PIN);
 8002a8c:	2140      	movs	r1, #64	@ 0x40
 8002a8e:	4858      	ldr	r0, [pc, #352]	@ (8002bf0 <OSPI_NOR_MspInit+0x2ec>)
 8002a90:	f001 f8ba 	bl	8003c08 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8002a94:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a98:	4856      	ldr	r0, [pc, #344]	@ (8002bf4 <OSPI_NOR_MspInit+0x2f0>)
 8002a9a:	f001 f8b5 	bl	8003c08 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_NOR_D0_GPIO_PORT, OSPI_NOR_D0_PIN);
 8002a9e:	2102      	movs	r1, #2
 8002aa0:	4855      	ldr	r0, [pc, #340]	@ (8002bf8 <OSPI_NOR_MspInit+0x2f4>)
 8002aa2:	f001 f8b1 	bl	8003c08 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_NOR_D1_GPIO_PORT, OSPI_NOR_D1_PIN);
 8002aa6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002aaa:	4854      	ldr	r0, [pc, #336]	@ (8002bfc <OSPI_NOR_MspInit+0x2f8>)
 8002aac:	f001 f8ac 	bl	8003c08 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_NOR_D2_GPIO_PORT, OSPI_NOR_D3_PIN);
 8002ab0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ab4:	4852      	ldr	r0, [pc, #328]	@ (8002c00 <OSPI_NOR_MspInit+0x2fc>)
 8002ab6:	f001 f8a7 	bl	8003c08 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_NOR_D3_GPIO_PORT, OSPI_NOR_D3_PIN);
 8002aba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002abe:	484f      	ldr	r0, [pc, #316]	@ (8002bfc <OSPI_NOR_MspInit+0x2f8>)
 8002ac0:	f001 f8a2 	bl	8003c08 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_NOR_D4_GPIO_PORT, OSPI_NOR_D4_PIN);
 8002ac4:	2104      	movs	r1, #4
 8002ac6:	484f      	ldr	r0, [pc, #316]	@ (8002c04 <OSPI_NOR_MspInit+0x300>)
 8002ac8:	f001 f89e 	bl	8003c08 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_NOR_D5_GPIO_PORT, OSPI_NOR_D5_PIN);
 8002acc:	2108      	movs	r1, #8
 8002ace:	484d      	ldr	r0, [pc, #308]	@ (8002c04 <OSPI_NOR_MspInit+0x300>)
 8002ad0:	f001 f89a 	bl	8003c08 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_NOR_D6_GPIO_PORT, OSPI_NOR_D6_PIN);
 8002ad4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ad8:	4845      	ldr	r0, [pc, #276]	@ (8002bf0 <OSPI_NOR_MspInit+0x2ec>)
 8002ada:	f001 f895 	bl	8003c08 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_NOR_D7_GPIO_PORT, OSPI_NOR_D7_PIN);
 8002ade:	2101      	movs	r1, #1
 8002ae0:	4847      	ldr	r0, [pc, #284]	@ (8002c00 <OSPI_NOR_MspInit+0x2fc>)
 8002ae2:	f001 f891 	bl	8003c08 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_NOR_DQS_GPIO_PORT, OSPI_NOR_DQS_PIN);
 8002ae6:	2104      	movs	r1, #4
 8002ae8:	4843      	ldr	r0, [pc, #268]	@ (8002bf8 <OSPI_NOR_MspInit+0x2f4>)
 8002aea:	f001 f88d 	bl	8003c08 <HAL_GPIO_EnableHighSPeedLowVoltage>

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_CS_PIN;
 8002aee:	2340      	movs	r3, #64	@ 0x40
 8002af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002af2:	2302      	movs	r3, #2
 8002af4:	643b      	str	r3, [r7, #64]	@ 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8002af6:	2301      	movs	r3, #1
 8002af8:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002afa:	2302      	movs	r3, #2
 8002afc:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8002afe:	230a      	movs	r3, #10
 8002b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8002b02:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b06:	4619      	mov	r1, r3
 8002b08:	4839      	ldr	r0, [pc, #228]	@ (8002bf0 <OSPI_NOR_MspInit+0x2ec>)
 8002b0a:	f000 feed 	bl	80038e8 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8002b0e:	2304      	movs	r3, #4
 8002b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_DQS_PIN_AF;
 8002b12:	230a      	movs	r3, #10
 8002b14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8002b16:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4836      	ldr	r0, [pc, #216]	@ (8002bf8 <OSPI_NOR_MspInit+0x2f4>)
 8002b1e:	f000 fee3 	bl	80038e8 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8002b22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8002b2c:	2309      	movs	r3, #9
 8002b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8002b30:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b34:	4619      	mov	r1, r3
 8002b36:	482f      	ldr	r0, [pc, #188]	@ (8002bf4 <OSPI_NOR_MspInit+0x2f0>)
 8002b38:	f000 fed6 	bl	80038e8 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D0_PIN_AF;
 8002b40:	2306      	movs	r3, #6
 8002b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8002b44:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b48:	4619      	mov	r1, r3
 8002b4a:	482b      	ldr	r0, [pc, #172]	@ (8002bf8 <OSPI_NOR_MspInit+0x2f4>)
 8002b4c:	f000 fecc 	bl	80038e8 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8002b50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D1_PIN_AF;
 8002b56:	2309      	movs	r3, #9
 8002b58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8002b5a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4826      	ldr	r0, [pc, #152]	@ (8002bfc <OSPI_NOR_MspInit+0x2f8>)
 8002b62:	f000 fec1 	bl	80038e8 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D2_PIN;
 8002b66:	2304      	movs	r3, #4
 8002b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D2_PIN_AF;
 8002b6a:	2309      	movs	r3, #9
 8002b6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8002b6e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b72:	4619      	mov	r1, r3
 8002b74:	4822      	ldr	r0, [pc, #136]	@ (8002c00 <OSPI_NOR_MspInit+0x2fc>)
 8002b76:	f000 feb7 	bl	80038e8 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8002b7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D3_PIN_AF;
 8002b80:	2309      	movs	r3, #9
 8002b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8002b84:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b88:	4619      	mov	r1, r3
 8002b8a:	481c      	ldr	r0, [pc, #112]	@ (8002bfc <OSPI_NOR_MspInit+0x2f8>)
 8002b8c:	f000 feac 	bl	80038e8 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8002b90:	2304      	movs	r3, #4
 8002b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D4_PIN_AF;
 8002b94:	2309      	movs	r3, #9
 8002b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8002b98:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4819      	ldr	r0, [pc, #100]	@ (8002c04 <OSPI_NOR_MspInit+0x300>)
 8002ba0:	f000 fea2 	bl	80038e8 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8002ba4:	2308      	movs	r3, #8
 8002ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D5_PIN_AF;
 8002ba8:	2309      	movs	r3, #9
 8002baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8002bac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4814      	ldr	r0, [pc, #80]	@ (8002c04 <OSPI_NOR_MspInit+0x300>)
 8002bb4:	f000 fe98 	bl	80038e8 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 8002bb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D6_PIN_AF;
 8002bbe:	2309      	movs	r3, #9
 8002bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 8002bc2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4809      	ldr	r0, [pc, #36]	@ (8002bf0 <OSPI_NOR_MspInit+0x2ec>)
 8002bca:	f000 fe8d 	bl	80038e8 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D7_PIN_AF;
 8002bd2:	230a      	movs	r3, #10
 8002bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 8002bd6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4808      	ldr	r0, [pc, #32]	@ (8002c00 <OSPI_NOR_MspInit+0x2fc>)
 8002bde:	f000 fe83 	bl	80038e8 <HAL_GPIO_Init>
}
 8002be2:	bf00      	nop
 8002be4:	3750      	adds	r7, #80	@ 0x50
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	44020c00 	.word	0x44020c00
 8002bf0:	42021800 	.word	0x42021800
 8002bf4:	42021400 	.word	0x42021400
 8002bf8:	42020400 	.word	0x42020400
 8002bfc:	42020c00 	.word	0x42020c00
 8002c00:	42020800 	.word	0x42020800
 8002c04:	42021c00 	.word	0x42021c00

08002c08 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory(uint32_t Instance)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]

  if (MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	225c      	movs	r2, #92	@ 0x5c
 8002c18:	fb02 f303 	mul.w	r3, r2, r3
 8002c1c:	4a52      	ldr	r2, [pc, #328]	@ (8002d68 <OSPI_NOR_ResetMemory+0x160>)
 8002c1e:	4413      	add	r3, r2
 8002c20:	2200      	movs	r2, #0
 8002c22:	2100      	movs	r1, #0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fa96 	bl	8002156 <MX25LM51245G_ResetEnable>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <OSPI_NOR_ResetMemory+0x30>
                               BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002c30:	f06f 0304 	mvn.w	r3, #4
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	e092      	b.n	8002d5e <OSPI_NOR_ResetMemory+0x156>
  }
  else if (MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	225c      	movs	r2, #92	@ 0x5c
 8002c3c:	fb02 f303 	mul.w	r3, r2, r3
 8002c40:	4a49      	ldr	r2, [pc, #292]	@ (8002d68 <OSPI_NOR_ResetMemory+0x160>)
 8002c42:	4413      	add	r3, r2
 8002c44:	2200      	movs	r2, #0
 8002c46:	2100      	movs	r1, #0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff fadc 	bl	8002206 <MX25LM51245G_ResetMemory>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <OSPI_NOR_ResetMemory+0x54>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002c54:	f06f 0304 	mvn.w	r3, #4
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	e080      	b.n	8002d5e <OSPI_NOR_ResetMemory+0x156>
  }
  else if (MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	225c      	movs	r2, #92	@ 0x5c
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	4a40      	ldr	r2, [pc, #256]	@ (8002d68 <OSPI_NOR_ResetMemory+0x160>)
 8002c66:	4413      	add	r3, r2
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fa72 	bl	8002156 <MX25LM51245G_ResetEnable>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <OSPI_NOR_ResetMemory+0x78>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002c78:	f06f 0304 	mvn.w	r3, #4
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	e06e      	b.n	8002d5e <OSPI_NOR_ResetMemory+0x156>
  }
  else if (MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	225c      	movs	r2, #92	@ 0x5c
 8002c84:	fb02 f303 	mul.w	r3, r2, r3
 8002c88:	4a37      	ldr	r2, [pc, #220]	@ (8002d68 <OSPI_NOR_ResetMemory+0x160>)
 8002c8a:	4413      	add	r3, r2
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2101      	movs	r1, #1
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fab8 	bl	8002206 <MX25LM51245G_ResetMemory>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <OSPI_NOR_ResetMemory+0x9c>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002c9c:	f06f 0304 	mvn.w	r3, #4
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	e05c      	b.n	8002d5e <OSPI_NOR_ResetMemory+0x156>
  }
  else if (MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	225c      	movs	r2, #92	@ 0x5c
 8002ca8:	fb02 f303 	mul.w	r3, r2, r3
 8002cac:	4a2e      	ldr	r2, [pc, #184]	@ (8002d68 <OSPI_NOR_ResetMemory+0x160>)
 8002cae:	4413      	add	r3, r2
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff fa4e 	bl	8002156 <MX25LM51245G_ResetEnable>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <OSPI_NOR_ResetMemory+0xc0>
                                    BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002cc0:	f06f 0304 	mvn.w	r3, #4
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	e04a      	b.n	8002d5e <OSPI_NOR_ResetMemory+0x156>
  }
  else if (MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	225c      	movs	r2, #92	@ 0x5c
 8002ccc:	fb02 f303 	mul.w	r3, r2, r3
 8002cd0:	4a25      	ldr	r2, [pc, #148]	@ (8002d68 <OSPI_NOR_ResetMemory+0x160>)
 8002cd2:	4413      	add	r3, r2
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fa94 	bl	8002206 <MX25LM51245G_ResetMemory>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <OSPI_NOR_ResetMemory+0xe4>
                                    BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002ce4:	f06f 0304 	mvn.w	r3, #4
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	e038      	b.n	8002d5e <OSPI_NOR_ResetMemory+0x156>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;     /* After reset S/W setting to indirect access  */
 8002cec:	491f      	ldr	r1, [pc, #124]	@ (8002d6c <OSPI_NOR_ResetMemory+0x164>)
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4413      	add	r3, r2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	701a      	strb	r2, [r3, #0]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;    /* After reset H/W back to SPI mode by default */
 8002cfc:	491b      	ldr	r1, [pc, #108]	@ (8002d6c <OSPI_NOR_ResetMemory+0x164>)
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4413      	add	r3, r2
 8002d06:	440b      	add	r3, r1
 8002d08:	3301      	adds	r3, #1
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode        */
 8002d0e:	4917      	ldr	r1, [pc, #92]	@ (8002d6c <OSPI_NOR_ResetMemory+0x164>)
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4413      	add	r3, r2
 8002d18:	440b      	add	r3, r1
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]

    /* Wait SWreset CMD is effective and check that memory is ready */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	225c      	movs	r2, #92	@ 0x5c
 8002d24:	fb02 f303 	mul.w	r3, r2, r3
 8002d28:	4a0f      	ldr	r2, [pc, #60]	@ (8002d68 <OSPI_NOR_ResetMemory+0x160>)
 8002d2a:	1898      	adds	r0, r3, r2
 8002d2c:	490f      	ldr	r1, [pc, #60]	@ (8002d6c <OSPI_NOR_ResetMemory+0x164>)
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	4413      	add	r3, r2
 8002d36:	440b      	add	r3, r1
 8002d38:	3301      	adds	r3, #1
 8002d3a:	7819      	ldrb	r1, [r3, #0]
 8002d3c:	4c0b      	ldr	r4, [pc, #44]	@ (8002d6c <OSPI_NOR_ResetMemory+0x164>)
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4413      	add	r3, r2
 8002d46:	4423      	add	r3, r4
 8002d48:	3302      	adds	r3, #2
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	f7fe fcf9 	bl	8001744 <MX25LM51245G_AutoPollingMemReady>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <OSPI_NOR_ResetMemory+0x156>
                                         Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002d58:	f06f 0304 	mvn.w	r3, #4
 8002d5c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd90      	pop	{r4, r7, pc}
 8002d68:	20000178 	.word	0x20000178
 8002d6c:	200001d4 	.word	0x200001d4

08002d70 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 8002d70:	b590      	push	{r4, r7, lr}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	225c      	movs	r2, #92	@ 0x5c
 8002d7c:	fb02 f303 	mul.w	r3, r2, r3
 8002d80:	4a6c      	ldr	r2, [pc, #432]	@ (8002f34 <OSPI_NOR_EnterDOPIMode+0x1c4>)
 8002d82:	1898      	adds	r0, r3, r2
 8002d84:	496c      	ldr	r1, [pc, #432]	@ (8002f38 <OSPI_NOR_EnterDOPIMode+0x1c8>)
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	440b      	add	r3, r1
 8002d90:	3301      	adds	r3, #1
 8002d92:	7819      	ldrb	r1, [r3, #0]
 8002d94:	4c68      	ldr	r4, [pc, #416]	@ (8002f38 <OSPI_NOR_EnterDOPIMode+0x1c8>)
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4413      	add	r3, r2
 8002d9e:	4423      	add	r3, r4
 8002da0:	3302      	adds	r3, #2
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	f7fe ffd2 	bl	8001d4e <MX25LM51245G_WriteEnable>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <OSPI_NOR_EnterDOPIMode+0x48>
                               Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002db0:	f06f 0304 	mvn.w	r3, #4
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	e0b8      	b.n	8002f2a <OSPI_NOR_EnterDOPIMode+0x1ba>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	225c      	movs	r2, #92	@ 0x5c
 8002dbc:	fb02 f303 	mul.w	r3, r2, r3
 8002dc0:	4a5c      	ldr	r2, [pc, #368]	@ (8002f34 <OSPI_NOR_EnterDOPIMode+0x1c4>)
 8002dc2:	1898      	adds	r0, r3, r2
 8002dc4:	495c      	ldr	r1, [pc, #368]	@ (8002f38 <OSPI_NOR_EnterDOPIMode+0x1c8>)
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	4413      	add	r3, r2
 8002dce:	440b      	add	r3, r1
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	7819      	ldrb	r1, [r3, #0]
 8002dd4:	4c58      	ldr	r4, [pc, #352]	@ (8002f38 <OSPI_NOR_EnterDOPIMode+0x1c8>)
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4413      	add	r3, r2
 8002dde:	4423      	add	r3, r4
 8002de0:	3302      	adds	r3, #2
 8002de2:	781a      	ldrb	r2, [r3, #0]
 8002de4:	2307      	movs	r3, #7
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002dec:	f7ff f87f 	bl	8001eee <MX25LM51245G_WriteCfg2Register>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <OSPI_NOR_EnterDOPIMode+0x8e>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR,
                                          MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002df6:	f06f 0304 	mvn.w	r3, #4
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	e095      	b.n	8002f2a <OSPI_NOR_EnterDOPIMode+0x1ba>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	225c      	movs	r2, #92	@ 0x5c
 8002e02:	fb02 f303 	mul.w	r3, r2, r3
 8002e06:	4a4b      	ldr	r2, [pc, #300]	@ (8002f34 <OSPI_NOR_EnterDOPIMode+0x1c4>)
 8002e08:	1898      	adds	r0, r3, r2
 8002e0a:	494b      	ldr	r1, [pc, #300]	@ (8002f38 <OSPI_NOR_EnterDOPIMode+0x1c8>)
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	4413      	add	r3, r2
 8002e14:	440b      	add	r3, r1
 8002e16:	3301      	adds	r3, #1
 8002e18:	7819      	ldrb	r1, [r3, #0]
 8002e1a:	4c47      	ldr	r4, [pc, #284]	@ (8002f38 <OSPI_NOR_EnterDOPIMode+0x1c8>)
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4413      	add	r3, r2
 8002e24:	4423      	add	r3, r4
 8002e26:	3302      	adds	r3, #2
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f7fe ff8f 	bl	8001d4e <MX25LM51245G_WriteEnable>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <OSPI_NOR_EnterDOPIMode+0xce>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002e36:	f06f 0304 	mvn.w	r3, #4
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	e075      	b.n	8002f2a <OSPI_NOR_EnterDOPIMode+0x1ba>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	225c      	movs	r2, #92	@ 0x5c
 8002e42:	fb02 f303 	mul.w	r3, r2, r3
 8002e46:	4a3b      	ldr	r2, [pc, #236]	@ (8002f34 <OSPI_NOR_EnterDOPIMode+0x1c4>)
 8002e48:	1898      	adds	r0, r3, r2
 8002e4a:	493b      	ldr	r1, [pc, #236]	@ (8002f38 <OSPI_NOR_EnterDOPIMode+0x1c8>)
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	4413      	add	r3, r2
 8002e54:	440b      	add	r3, r1
 8002e56:	3301      	adds	r3, #1
 8002e58:	7819      	ldrb	r1, [r3, #0]
 8002e5a:	4c37      	ldr	r4, [pc, #220]	@ (8002f38 <OSPI_NOR_EnterDOPIMode+0x1c8>)
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4413      	add	r3, r2
 8002e64:	4423      	add	r3, r4
 8002e66:	3302      	adds	r3, #2
 8002e68:	781a      	ldrb	r2, [r3, #0]
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f7ff f83d 	bl	8001eee <MX25LM51245G_WriteCfg2Register>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <OSPI_NOR_EnterDOPIMode+0x112>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR,
                                          MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002e7a:	f06f 0304 	mvn.w	r3, #4
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	e053      	b.n	8002f2a <OSPI_NOR_EnterDOPIMode+0x1ba>
  }
  else
  {
    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
 8002e82:	4a2c      	ldr	r2, [pc, #176]	@ (8002f34 <OSPI_NOR_EnterDOPIMode+0x1c4>)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	215c      	movs	r1, #92	@ 0x5c
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	330c      	adds	r3, #12
 8002e90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e94:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 8002e96:	4a27      	ldr	r2, [pc, #156]	@ (8002f34 <OSPI_NOR_EnterDOPIMode+0x1c4>)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	215c      	movs	r1, #92	@ 0x5c
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	332c      	adds	r3, #44	@ 0x2c
 8002ea4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ea8:	601a      	str	r2, [r3, #0]
    if (HAL_XSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	225c      	movs	r2, #92	@ 0x5c
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	4a20      	ldr	r2, [pc, #128]	@ (8002f34 <OSPI_NOR_EnterDOPIMode+0x1c4>)
 8002eb4:	4413      	add	r3, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f007 fcb8 	bl	800a82c <HAL_XSPI_Init>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <OSPI_NOR_EnterDOPIMode+0x15a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002ec2:	f06f 0303 	mvn.w	r3, #3
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	e02f      	b.n	8002f2a <OSPI_NOR_EnterDOPIMode+0x1ba>
    }
    /* Check Flash busy ? */
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	225c      	movs	r2, #92	@ 0x5c
 8002ece:	fb02 f303 	mul.w	r3, r2, r3
 8002ed2:	4a18      	ldr	r2, [pc, #96]	@ (8002f34 <OSPI_NOR_EnterDOPIMode+0x1c4>)
 8002ed4:	4413      	add	r3, r2
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	2101      	movs	r1, #1
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fe fc32 	bl	8001744 <MX25LM51245G_AutoPollingMemReady>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <OSPI_NOR_EnterDOPIMode+0x17e>
                                              BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002ee6:	f06f 0304 	mvn.w	r3, #4
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	e01d      	b.n	8002f2a <OSPI_NOR_EnterDOPIMode+0x1ba>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	225c      	movs	r2, #92	@ 0x5c
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8002f34 <OSPI_NOR_EnterDOPIMode+0x1c4>)
 8002ef8:	1898      	adds	r0, r3, r2
 8002efa:	f107 0308 	add.w	r3, r7, #8
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	2300      	movs	r3, #0
 8002f02:	2201      	movs	r2, #1
 8002f04:	2101      	movs	r1, #1
 8002f06:	f7ff f887 	bl	8002018 <MX25LM51245G_ReadCfg2Register>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <OSPI_NOR_EnterDOPIMode+0x1a8>
                                           MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002f10:	f06f 0304 	mvn.w	r3, #4
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	e008      	b.n	8002f2a <OSPI_NOR_EnterDOPIMode+0x1ba>
    }
    else if (reg[0] != MX25LM51245G_CR2_DOPI)
 8002f18:	7a3b      	ldrb	r3, [r7, #8]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d003      	beq.n	8002f26 <OSPI_NOR_EnterDOPIMode+0x1b6>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002f1e:	f06f 0304 	mvn.w	r3, #4
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	e001      	b.n	8002f2a <OSPI_NOR_EnterDOPIMode+0x1ba>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd90      	pop	{r4, r7, pc}
 8002f34:	20000178 	.word	0x20000178
 8002f38:	200001d4 	.word	0x200001d4

08002f3c <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 8002f3c:	b590      	push	{r4, r7, lr}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af02      	add	r7, sp, #8
 8002f42:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	225c      	movs	r2, #92	@ 0x5c
 8002f48:	fb02 f303 	mul.w	r3, r2, r3
 8002f4c:	4a5a      	ldr	r2, [pc, #360]	@ (80030b8 <OSPI_NOR_EnterSOPIMode+0x17c>)
 8002f4e:	1898      	adds	r0, r3, r2
 8002f50:	495a      	ldr	r1, [pc, #360]	@ (80030bc <OSPI_NOR_EnterSOPIMode+0x180>)
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4413      	add	r3, r2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	7819      	ldrb	r1, [r3, #0]
 8002f60:	4c56      	ldr	r4, [pc, #344]	@ (80030bc <OSPI_NOR_EnterSOPIMode+0x180>)
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	4413      	add	r3, r2
 8002f6a:	4423      	add	r3, r4
 8002f6c:	3302      	adds	r3, #2
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	f7fe feec 	bl	8001d4e <MX25LM51245G_WriteEnable>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <OSPI_NOR_EnterSOPIMode+0x48>
                               Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002f7c:	f06f 0304 	mvn.w	r3, #4
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	e094      	b.n	80030ae <OSPI_NOR_EnterSOPIMode+0x172>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	225c      	movs	r2, #92	@ 0x5c
 8002f88:	fb02 f303 	mul.w	r3, r2, r3
 8002f8c:	4a4a      	ldr	r2, [pc, #296]	@ (80030b8 <OSPI_NOR_EnterSOPIMode+0x17c>)
 8002f8e:	1898      	adds	r0, r3, r2
 8002f90:	494a      	ldr	r1, [pc, #296]	@ (80030bc <OSPI_NOR_EnterSOPIMode+0x180>)
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	4413      	add	r3, r2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	7819      	ldrb	r1, [r3, #0]
 8002fa0:	4c46      	ldr	r4, [pc, #280]	@ (80030bc <OSPI_NOR_EnterSOPIMode+0x180>)
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4413      	add	r3, r2
 8002faa:	4423      	add	r3, r4
 8002fac:	3302      	adds	r3, #2
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	2307      	movs	r3, #7
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002fb8:	f7fe ff99 	bl	8001eee <MX25LM51245G_WriteCfg2Register>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <OSPI_NOR_EnterSOPIMode+0x8e>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR,
                                          MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002fc2:	f06f 0304 	mvn.w	r3, #4
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	e071      	b.n	80030ae <OSPI_NOR_EnterSOPIMode+0x172>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	225c      	movs	r2, #92	@ 0x5c
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	4a39      	ldr	r2, [pc, #228]	@ (80030b8 <OSPI_NOR_EnterSOPIMode+0x17c>)
 8002fd4:	1898      	adds	r0, r3, r2
 8002fd6:	4939      	ldr	r1, [pc, #228]	@ (80030bc <OSPI_NOR_EnterSOPIMode+0x180>)
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	4413      	add	r3, r2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	7819      	ldrb	r1, [r3, #0]
 8002fe6:	4c35      	ldr	r4, [pc, #212]	@ (80030bc <OSPI_NOR_EnterSOPIMode+0x180>)
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4413      	add	r3, r2
 8002ff0:	4423      	add	r3, r4
 8002ff2:	3302      	adds	r3, #2
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f7fe fea9 	bl	8001d4e <MX25LM51245G_WriteEnable>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <OSPI_NOR_EnterSOPIMode+0xce>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003002:	f06f 0304 	mvn.w	r3, #4
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	e051      	b.n	80030ae <OSPI_NOR_EnterSOPIMode+0x172>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	225c      	movs	r2, #92	@ 0x5c
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	4a29      	ldr	r2, [pc, #164]	@ (80030b8 <OSPI_NOR_EnterSOPIMode+0x17c>)
 8003014:	1898      	adds	r0, r3, r2
 8003016:	4929      	ldr	r1, [pc, #164]	@ (80030bc <OSPI_NOR_EnterSOPIMode+0x180>)
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	4413      	add	r3, r2
 8003020:	440b      	add	r3, r1
 8003022:	3301      	adds	r3, #1
 8003024:	7819      	ldrb	r1, [r3, #0]
 8003026:	4c25      	ldr	r4, [pc, #148]	@ (80030bc <OSPI_NOR_EnterSOPIMode+0x180>)
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	4413      	add	r3, r2
 8003030:	4423      	add	r3, r4
 8003032:	3302      	adds	r3, #2
 8003034:	781a      	ldrb	r2, [r3, #0]
 8003036:	2301      	movs	r3, #1
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	2300      	movs	r3, #0
 800303c:	f7fe ff57 	bl	8001eee <MX25LM51245G_WriteCfg2Register>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <OSPI_NOR_EnterSOPIMode+0x112>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR,
                                          MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003046:	f06f 0304 	mvn.w	r3, #4
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	e02f      	b.n	80030ae <OSPI_NOR_EnterSOPIMode+0x172>
  }
  else
  {
    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	225c      	movs	r2, #92	@ 0x5c
 8003052:	fb02 f303 	mul.w	r3, r2, r3
 8003056:	4a18      	ldr	r2, [pc, #96]	@ (80030b8 <OSPI_NOR_EnterSOPIMode+0x17c>)
 8003058:	4413      	add	r3, r2
 800305a:	2200      	movs	r2, #0
 800305c:	2101      	movs	r1, #1
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe fb70 	bl	8001744 <MX25LM51245G_AutoPollingMemReady>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <OSPI_NOR_EnterSOPIMode+0x136>
                                         BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800306a:	f06f 0304 	mvn.w	r3, #4
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	e01d      	b.n	80030ae <OSPI_NOR_EnterSOPIMode+0x172>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	225c      	movs	r2, #92	@ 0x5c
 8003076:	fb02 f303 	mul.w	r3, r2, r3
 800307a:	4a0f      	ldr	r2, [pc, #60]	@ (80030b8 <OSPI_NOR_EnterSOPIMode+0x17c>)
 800307c:	1898      	adds	r0, r3, r2
 800307e:	f107 0308 	add.w	r3, r7, #8
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	2300      	movs	r3, #0
 8003086:	2200      	movs	r2, #0
 8003088:	2101      	movs	r1, #1
 800308a:	f7fe ffc5 	bl	8002018 <MX25LM51245G_ReadCfg2Register>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <OSPI_NOR_EnterSOPIMode+0x160>
                                           MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003094:	f06f 0304 	mvn.w	r3, #4
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	e008      	b.n	80030ae <OSPI_NOR_EnterSOPIMode+0x172>
    }
    else if (reg[0] != MX25LM51245G_CR2_SOPI)
 800309c:	7a3b      	ldrb	r3, [r7, #8]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d003      	beq.n	80030aa <OSPI_NOR_EnterSOPIMode+0x16e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80030a2:	f06f 0304 	mvn.w	r3, #4
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	e001      	b.n	80030ae <OSPI_NOR_EnterSOPIMode+0x172>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 80030ae:	68fb      	ldr	r3, [r7, #12]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd90      	pop	{r4, r7, pc}
 80030b8:	20000178 	.word	0x20000178
 80030bc:	200001d4 	.word	0x200001d4

080030c0 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode(uint32_t Instance)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	225c      	movs	r2, #92	@ 0x5c
 80030d0:	fb02 f303 	mul.w	r3, r2, r3
 80030d4:	4a50      	ldr	r2, [pc, #320]	@ (8003218 <OSPI_NOR_ExitOPIMode+0x158>)
 80030d6:	1898      	adds	r0, r3, r2
 80030d8:	4950      	ldr	r1, [pc, #320]	@ (800321c <OSPI_NOR_ExitOPIMode+0x15c>)
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	4413      	add	r3, r2
 80030e2:	440b      	add	r3, r1
 80030e4:	3301      	adds	r3, #1
 80030e6:	7819      	ldrb	r1, [r3, #0]
 80030e8:	4c4c      	ldr	r4, [pc, #304]	@ (800321c <OSPI_NOR_ExitOPIMode+0x15c>)
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	4423      	add	r3, r4
 80030f4:	3302      	adds	r3, #2
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	f7fe fe28 	bl	8001d4e <MX25LM51245G_WriteEnable>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <OSPI_NOR_ExitOPIMode+0x4c>
                               Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003104:	f06f 0304 	mvn.w	r3, #4
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	e080      	b.n	800320e <OSPI_NOR_ExitOPIMode+0x14e>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	727b      	strb	r3, [r7, #9]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	225c      	movs	r2, #92	@ 0x5c
 8003118:	fb02 f303 	mul.w	r3, r2, r3
 800311c:	4a3e      	ldr	r2, [pc, #248]	@ (8003218 <OSPI_NOR_ExitOPIMode+0x158>)
 800311e:	1898      	adds	r0, r3, r2
 8003120:	493e      	ldr	r1, [pc, #248]	@ (800321c <OSPI_NOR_ExitOPIMode+0x15c>)
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	4413      	add	r3, r2
 800312a:	440b      	add	r3, r1
 800312c:	3301      	adds	r3, #1
 800312e:	7819      	ldrb	r1, [r3, #0]
 8003130:	4c3a      	ldr	r4, [pc, #232]	@ (800321c <OSPI_NOR_ExitOPIMode+0x15c>)
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4413      	add	r3, r2
 800313a:	4423      	add	r3, r4
 800313c:	3302      	adds	r3, #2
 800313e:	781a      	ldrb	r2, [r3, #0]
 8003140:	7a3b      	ldrb	r3, [r7, #8]
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	2300      	movs	r3, #0
 8003146:	f7fe fed2 	bl	8001eee <MX25LM51245G_WriteCfg2Register>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <OSPI_NOR_ExitOPIMode+0x98>
                                       Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR,
                                       reg[0]) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003150:	f06f 0304 	mvn.w	r3, #4
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	e05a      	b.n	800320e <OSPI_NOR_ExitOPIMode+0x14e>
    }
    else
    {
      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8003158:	4930      	ldr	r1, [pc, #192]	@ (800321c <OSPI_NOR_ExitOPIMode+0x15c>)
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	4413      	add	r3, r2
 8003162:	440b      	add	r3, r1
 8003164:	3302      	adds	r3, #2
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d120      	bne.n	80031ae <OSPI_NOR_ExitOPIMode+0xee>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
 800316c:	4a2a      	ldr	r2, [pc, #168]	@ (8003218 <OSPI_NOR_ExitOPIMode+0x158>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	215c      	movs	r1, #92	@ 0x5c
 8003172:	fb01 f303 	mul.w	r3, r1, r3
 8003176:	4413      	add	r3, r2
 8003178:	330c      	adds	r3, #12
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 800317e:	4a26      	ldr	r2, [pc, #152]	@ (8003218 <OSPI_NOR_ExitOPIMode+0x158>)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	215c      	movs	r1, #92	@ 0x5c
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	4413      	add	r3, r2
 800318a:	332c      	adds	r3, #44	@ 0x2c
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
        if (HAL_XSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	225c      	movs	r2, #92	@ 0x5c
 8003194:	fb02 f303 	mul.w	r3, r2, r3
 8003198:	4a1f      	ldr	r2, [pc, #124]	@ (8003218 <OSPI_NOR_ExitOPIMode+0x158>)
 800319a:	4413      	add	r3, r2
 800319c:	4618      	mov	r0, r3
 800319e:	f007 fb45 	bl	800a82c <HAL_XSPI_Init>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <OSPI_NOR_ExitOPIMode+0xee>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80031a8:	f06f 0303 	mvn.w	r3, #3
 80031ac:	60fb      	str	r3, [r7, #12]
        }
      }

      if (ret == BSP_ERROR_NONE)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d12c      	bne.n	800320e <OSPI_NOR_ExitOPIMode+0x14e>
      {
        /* Check Flash busy ? */
        if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	225c      	movs	r2, #92	@ 0x5c
 80031b8:	fb02 f303 	mul.w	r3, r2, r3
 80031bc:	4a16      	ldr	r2, [pc, #88]	@ (8003218 <OSPI_NOR_ExitOPIMode+0x158>)
 80031be:	4413      	add	r3, r2
 80031c0:	2200      	movs	r2, #0
 80031c2:	2100      	movs	r1, #0
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fe fabd 	bl	8001744 <MX25LM51245G_AutoPollingMemReady>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <OSPI_NOR_ExitOPIMode+0x118>
                                             BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80031d0:	f06f 0304 	mvn.w	r3, #4
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	e01a      	b.n	800320e <OSPI_NOR_ExitOPIMode+0x14e>
        }
        /* Check the configuration has been correctly done */
        else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	225c      	movs	r2, #92	@ 0x5c
 80031dc:	fb02 f303 	mul.w	r3, r2, r3
 80031e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003218 <OSPI_NOR_ExitOPIMode+0x158>)
 80031e2:	1898      	adds	r0, r3, r2
 80031e4:	f107 0308 	add.w	r3, r7, #8
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	2300      	movs	r3, #0
 80031ec:	2200      	movs	r2, #0
 80031ee:	2100      	movs	r1, #0
 80031f0:	f7fe ff12 	bl	8002018 <MX25LM51245G_ReadCfg2Register>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <OSPI_NOR_ExitOPIMode+0x142>
                                               MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80031fa:	f06f 0304 	mvn.w	r3, #4
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	e005      	b.n	800320e <OSPI_NOR_ExitOPIMode+0x14e>
        }
        else if (reg[0] != 0U)
 8003202:	7a3b      	ldrb	r3, [r7, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <OSPI_NOR_ExitOPIMode+0x14e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8003208:	f06f 0304 	mvn.w	r3, #4
 800320c:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800320e:	68fb      	ldr	r3, [r7, #12]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	bd90      	pop	{r4, r7, pc}
 8003218:	20000178 	.word	0x20000178
 800321c:	200001d4 	.word	0x200001d4

08003220 <OSPI1_DLYB_Enable>:
  * @brief  This function enables delay block.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static void OSPI1_DLYB_Enable(uint32_t Instance)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  HAL_XSPI_DLYB_CfgTypeDef  dlyb_cfg;

  (void)HAL_XSPI_DLYB_GetClockPeriod(&hospi_nor[Instance], &dlyb_cfg);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	225c      	movs	r2, #92	@ 0x5c
 800322c:	fb02 f303 	mul.w	r3, r2, r3
 8003230:	4a0d      	ldr	r2, [pc, #52]	@ (8003268 <OSPI1_DLYB_Enable+0x48>)
 8003232:	4413      	add	r3, r2
 8003234:	f107 0208 	add.w	r2, r7, #8
 8003238:	4611      	mov	r1, r2
 800323a:	4618      	mov	r0, r3
 800323c:	f007 fed0 	bl	800afe0 <HAL_XSPI_DLYB_GetClockPeriod>

  /*when DTR, PhaseSel is divided by 4 (emperic value)*/
  dlyb_cfg.PhaseSel /= 4U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	089b      	lsrs	r3, r3, #2
 8003244:	60fb      	str	r3, [r7, #12]

  /*set delay block configuration*/
  (void)HAL_XSPI_DLYB_SetConfig(&hospi_nor[Instance], &dlyb_cfg);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	225c      	movs	r2, #92	@ 0x5c
 800324a:	fb02 f303 	mul.w	r3, r2, r3
 800324e:	4a06      	ldr	r2, [pc, #24]	@ (8003268 <OSPI1_DLYB_Enable+0x48>)
 8003250:	4413      	add	r3, r2
 8003252:	f107 0208 	add.w	r2, r7, #8
 8003256:	4611      	mov	r1, r2
 8003258:	4618      	mov	r0, r3
 800325a:	f007 fe85 	bl	800af68 <HAL_XSPI_DLYB_SetConfig>
}
 800325e:	bf00      	nop
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000178 	.word	0x20000178

0800326c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003272:	4b35      	ldr	r3, [pc, #212]	@ (8003348 <SystemInit+0xdc>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003278:	4a33      	ldr	r2, [pc, #204]	@ (8003348 <SystemInit+0xdc>)
 800327a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800327e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8003282:	4b32      	ldr	r3, [pc, #200]	@ (800334c <SystemInit+0xe0>)
 8003284:	2201      	movs	r2, #1
 8003286:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8003288:	4b30      	ldr	r3, [pc, #192]	@ (800334c <SystemInit+0xe0>)
 800328a:	2200      	movs	r2, #0
 800328c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800328e:	4b2f      	ldr	r3, [pc, #188]	@ (800334c <SystemInit+0xe0>)
 8003290:	2200      	movs	r2, #0
 8003292:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8003294:	4b2d      	ldr	r3, [pc, #180]	@ (800334c <SystemInit+0xe0>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	492c      	ldr	r1, [pc, #176]	@ (800334c <SystemInit+0xe0>)
 800329a:	4b2d      	ldr	r3, [pc, #180]	@ (8003350 <SystemInit+0xe4>)
 800329c:	4013      	ands	r3, r2
 800329e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80032a0:	4b2a      	ldr	r3, [pc, #168]	@ (800334c <SystemInit+0xe0>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80032a6:	4b29      	ldr	r3, [pc, #164]	@ (800334c <SystemInit+0xe0>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80032ac:	4b27      	ldr	r3, [pc, #156]	@ (800334c <SystemInit+0xe0>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80032b2:	4b26      	ldr	r3, [pc, #152]	@ (800334c <SystemInit+0xe0>)
 80032b4:	4a27      	ldr	r2, [pc, #156]	@ (8003354 <SystemInit+0xe8>)
 80032b6:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80032b8:	4b24      	ldr	r3, [pc, #144]	@ (800334c <SystemInit+0xe0>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80032be:	4b23      	ldr	r3, [pc, #140]	@ (800334c <SystemInit+0xe0>)
 80032c0:	4a24      	ldr	r2, [pc, #144]	@ (8003354 <SystemInit+0xe8>)
 80032c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80032c4:	4b21      	ldr	r3, [pc, #132]	@ (800334c <SystemInit+0xe0>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80032ca:	4b20      	ldr	r3, [pc, #128]	@ (800334c <SystemInit+0xe0>)
 80032cc:	4a21      	ldr	r2, [pc, #132]	@ (8003354 <SystemInit+0xe8>)
 80032ce:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80032d0:	4b1e      	ldr	r3, [pc, #120]	@ (800334c <SystemInit+0xe0>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80032d6:	4b1d      	ldr	r3, [pc, #116]	@ (800334c <SystemInit+0xe0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a1c      	ldr	r2, [pc, #112]	@ (800334c <SystemInit+0xe0>)
 80032dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80032e2:	4b1a      	ldr	r3, [pc, #104]	@ (800334c <SystemInit+0xe0>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032e8:	4b17      	ldr	r3, [pc, #92]	@ (8003348 <SystemInit+0xdc>)
 80032ea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80032ee:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80032f0:	4b19      	ldr	r3, [pc, #100]	@ (8003358 <SystemInit+0xec>)
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80032f8:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8003300:	d003      	beq.n	800330a <SystemInit+0x9e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003308:	d117      	bne.n	800333a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800330a:	4b13      	ldr	r3, [pc, #76]	@ (8003358 <SystemInit+0xec>)
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d005      	beq.n	8003322 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8003316:	4b10      	ldr	r3, [pc, #64]	@ (8003358 <SystemInit+0xec>)
 8003318:	4a10      	ldr	r2, [pc, #64]	@ (800335c <SystemInit+0xf0>)
 800331a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800331c:	4b0e      	ldr	r3, [pc, #56]	@ (8003358 <SystemInit+0xec>)
 800331e:	4a10      	ldr	r2, [pc, #64]	@ (8003360 <SystemInit+0xf4>)
 8003320:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8003322:	4b0d      	ldr	r3, [pc, #52]	@ (8003358 <SystemInit+0xec>)
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	4a0c      	ldr	r2, [pc, #48]	@ (8003358 <SystemInit+0xec>)
 8003328:	f043 0302 	orr.w	r3, r3, #2
 800332c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800332e:	4b0a      	ldr	r3, [pc, #40]	@ (8003358 <SystemInit+0xec>)
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	4a09      	ldr	r2, [pc, #36]	@ (8003358 <SystemInit+0xec>)
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	61d3      	str	r3, [r2, #28]
  }
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	e000ed00 	.word	0xe000ed00
 800334c:	44020c00 	.word	0x44020c00
 8003350:	eae2eae3 	.word	0xeae2eae3
 8003354:	01010280 	.word	0x01010280
 8003358:	40022000 	.word	0x40022000
 800335c:	08192a3b 	.word	0x08192a3b
 8003360:	4c5d6e7f 	.word	0x4c5d6e7f

08003364 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003368:	2003      	movs	r0, #3
 800336a:	f000 f96c 	bl	8003646 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800336e:	f001 fa5d 	bl	800482c <HAL_RCC_GetSysClockFreq>
 8003372:	4602      	mov	r2, r0
 8003374:	4b0c      	ldr	r3, [pc, #48]	@ (80033a8 <HAL_Init+0x44>)
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	490b      	ldr	r1, [pc, #44]	@ (80033ac <HAL_Init+0x48>)
 800337e:	5ccb      	ldrb	r3, [r1, r3]
 8003380:	fa22 f303 	lsr.w	r3, r2, r3
 8003384:	4a0a      	ldr	r2, [pc, #40]	@ (80033b0 <HAL_Init+0x4c>)
 8003386:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003388:	2004      	movs	r0, #4
 800338a:	f000 f9a3 	bl	80036d4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800338e:	200f      	movs	r0, #15
 8003390:	f000 f810 	bl	80033b4 <HAL_InitTick>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e002      	b.n	80033a4 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800339e:	f7fd ff31 	bl	8001204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	44020c00 	.word	0x44020c00
 80033ac:	0801463c 	.word	0x0801463c
 80033b0:	20000000 	.word	0x20000000

080033b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80033c0:	4b33      	ldr	r3, [pc, #204]	@ (8003490 <HAL_InitTick+0xdc>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e05c      	b.n	8003486 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80033cc:	4b31      	ldr	r3, [pc, #196]	@ (8003494 <HAL_InitTick+0xe0>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d10c      	bne.n	80033f2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80033d8:	4b2f      	ldr	r3, [pc, #188]	@ (8003498 <HAL_InitTick+0xe4>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4b2c      	ldr	r3, [pc, #176]	@ (8003490 <HAL_InitTick+0xdc>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	4619      	mov	r1, r3
 80033e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	e037      	b.n	8003462 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80033f2:	f000 f9c7 	bl	8003784 <HAL_SYSTICK_GetCLKSourceConfig>
 80033f6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d023      	beq.n	8003446 <HAL_InitTick+0x92>
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d82d      	bhi.n	8003460 <HAL_InitTick+0xac>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_InitTick+0x5e>
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d00d      	beq.n	800342c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8003410:	e026      	b.n	8003460 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8003412:	4b21      	ldr	r3, [pc, #132]	@ (8003498 <HAL_InitTick+0xe4>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	4b1e      	ldr	r3, [pc, #120]	@ (8003490 <HAL_InitTick+0xdc>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	4619      	mov	r1, r3
 800341c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003420:	fbb3 f3f1 	udiv	r3, r3, r1
 8003424:	fbb2 f3f3 	udiv	r3, r2, r3
 8003428:	60fb      	str	r3, [r7, #12]
        break;
 800342a:	e01a      	b.n	8003462 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800342c:	4b18      	ldr	r3, [pc, #96]	@ (8003490 <HAL_InitTick+0xdc>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003436:	fbb3 f3f2 	udiv	r3, r3, r2
 800343a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800343e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003442:	60fb      	str	r3, [r7, #12]
        break;
 8003444:	e00d      	b.n	8003462 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003446:	4b12      	ldr	r3, [pc, #72]	@ (8003490 <HAL_InitTick+0xdc>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003450:	fbb3 f3f2 	udiv	r3, r3, r2
 8003454:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003458:	fbb2 f3f3 	udiv	r3, r2, r3
 800345c:	60fb      	str	r3, [r7, #12]
        break;
 800345e:	e000      	b.n	8003462 <HAL_InitTick+0xae>
        break;
 8003460:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f914 	bl	8003690 <HAL_SYSTICK_Config>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e009      	b.n	8003486 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003472:	2200      	movs	r2, #0
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	f04f 30ff 	mov.w	r0, #4294967295
 800347a:	f000 f8ef 	bl	800365c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800347e:	4a07      	ldr	r2, [pc, #28]	@ (800349c <HAL_InitTick+0xe8>)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000008 	.word	0x20000008
 8003494:	e000e010 	.word	0xe000e010
 8003498:	20000000 	.word	0x20000000
 800349c:	20000004 	.word	0x20000004

080034a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034a4:	4b06      	ldr	r3, [pc, #24]	@ (80034c0 <HAL_IncTick+0x20>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	4b06      	ldr	r3, [pc, #24]	@ (80034c4 <HAL_IncTick+0x24>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4413      	add	r3, r2
 80034b0:	4a04      	ldr	r2, [pc, #16]	@ (80034c4 <HAL_IncTick+0x24>)
 80034b2:	6013      	str	r3, [r2, #0]
}
 80034b4:	bf00      	nop
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	20000008 	.word	0x20000008
 80034c4:	200001d8 	.word	0x200001d8

080034c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return uwTick;
 80034cc:	4b03      	ldr	r3, [pc, #12]	@ (80034dc <HAL_GetTick+0x14>)
 80034ce:	681b      	ldr	r3, [r3, #0]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	200001d8 	.word	0x200001d8

080034e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034e8:	f7ff ffee 	bl	80034c8 <HAL_GetTick>
 80034ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f8:	d005      	beq.n	8003506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003524 <HAL_Delay+0x44>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4413      	add	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003506:	bf00      	nop
 8003508:	f7ff ffde 	bl	80034c8 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	429a      	cmp	r2, r3
 8003516:	d8f7      	bhi.n	8003508 <HAL_Delay+0x28>
  {
  }
}
 8003518:	bf00      	nop
 800351a:	bf00      	nop
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20000008 	.word	0x20000008

08003528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003538:	4b0c      	ldr	r3, [pc, #48]	@ (800356c <__NVIC_SetPriorityGrouping+0x44>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003544:	4013      	ands	r3, r2
 8003546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003550:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800355a:	4a04      	ldr	r2, [pc, #16]	@ (800356c <__NVIC_SetPriorityGrouping+0x44>)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	60d3      	str	r3, [r2, #12]
}
 8003560:	bf00      	nop
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003574:	4b04      	ldr	r3, [pc, #16]	@ (8003588 <__NVIC_GetPriorityGrouping+0x18>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	0a1b      	lsrs	r3, r3, #8
 800357a:	f003 0307 	and.w	r3, r3, #7
}
 800357e:	4618      	mov	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	6039      	str	r1, [r7, #0]
 8003596:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003598:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800359c:	2b00      	cmp	r3, #0
 800359e:	db0a      	blt.n	80035b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	490c      	ldr	r1, [pc, #48]	@ (80035d8 <__NVIC_SetPriority+0x4c>)
 80035a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035aa:	0112      	lsls	r2, r2, #4
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	440b      	add	r3, r1
 80035b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b4:	e00a      	b.n	80035cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4908      	ldr	r1, [pc, #32]	@ (80035dc <__NVIC_SetPriority+0x50>)
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	3b04      	subs	r3, #4
 80035c4:	0112      	lsls	r2, r2, #4
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	440b      	add	r3, r1
 80035ca:	761a      	strb	r2, [r3, #24]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	e000e100 	.word	0xe000e100
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b089      	sub	sp, #36	@ 0x24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f1c3 0307 	rsb	r3, r3, #7
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	bf28      	it	cs
 80035fe:	2304      	movcs	r3, #4
 8003600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3304      	adds	r3, #4
 8003606:	2b06      	cmp	r3, #6
 8003608:	d902      	bls.n	8003610 <NVIC_EncodePriority+0x30>
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3b03      	subs	r3, #3
 800360e:	e000      	b.n	8003612 <NVIC_EncodePriority+0x32>
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003614:	f04f 32ff 	mov.w	r2, #4294967295
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43da      	mvns	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	401a      	ands	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003628:	f04f 31ff 	mov.w	r1, #4294967295
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	fa01 f303 	lsl.w	r3, r1, r3
 8003632:	43d9      	mvns	r1, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003638:	4313      	orrs	r3, r2
         );
}
 800363a:	4618      	mov	r0, r3
 800363c:	3724      	adds	r7, #36	@ 0x24
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff ff6a 	bl	8003528 <__NVIC_SetPriorityGrouping>
}
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800366a:	f7ff ff81 	bl	8003570 <__NVIC_GetPriorityGrouping>
 800366e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	6978      	ldr	r0, [r7, #20]
 8003676:	f7ff ffb3 	bl	80035e0 <NVIC_EncodePriority>
 800367a:	4602      	mov	r2, r0
 800367c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003680:	4611      	mov	r1, r2
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff ff82 	bl	800358c <__NVIC_SetPriority>
}
 8003688:	bf00      	nop
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3b01      	subs	r3, #1
 800369c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036a0:	d301      	bcc.n	80036a6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80036a2:	2301      	movs	r3, #1
 80036a4:	e00d      	b.n	80036c2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80036a6:	4a0a      	ldr	r2, [pc, #40]	@ (80036d0 <HAL_SYSTICK_Config+0x40>)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80036ae:	4b08      	ldr	r3, [pc, #32]	@ (80036d0 <HAL_SYSTICK_Config+0x40>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80036b4:	4b06      	ldr	r3, [pc, #24]	@ (80036d0 <HAL_SYSTICK_Config+0x40>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a05      	ldr	r2, [pc, #20]	@ (80036d0 <HAL_SYSTICK_Config+0x40>)
 80036ba:	f043 0303 	orr.w	r3, r3, #3
 80036be:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	e000e010 	.word	0xe000e010

080036d4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d844      	bhi.n	800376c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80036e2:	a201      	add	r2, pc, #4	@ (adr r2, 80036e8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80036e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e8:	0800370b 	.word	0x0800370b
 80036ec:	08003729 	.word	0x08003729
 80036f0:	0800374b 	.word	0x0800374b
 80036f4:	0800376d 	.word	0x0800376d
 80036f8:	080036fd 	.word	0x080036fd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80036fc:	4b1f      	ldr	r3, [pc, #124]	@ (800377c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1e      	ldr	r2, [pc, #120]	@ (800377c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003702:	f043 0304 	orr.w	r3, r3, #4
 8003706:	6013      	str	r3, [r2, #0]
      break;
 8003708:	e031      	b.n	800376e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800370a:	4b1c      	ldr	r3, [pc, #112]	@ (800377c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a1b      	ldr	r2, [pc, #108]	@ (800377c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003710:	f023 0304 	bic.w	r3, r3, #4
 8003714:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8003716:	4b1a      	ldr	r3, [pc, #104]	@ (8003780 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003718:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800371c:	4a18      	ldr	r2, [pc, #96]	@ (8003780 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800371e:	f023 030c 	bic.w	r3, r3, #12
 8003722:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003726:	e022      	b.n	800376e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003728:	4b14      	ldr	r3, [pc, #80]	@ (800377c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a13      	ldr	r2, [pc, #76]	@ (800377c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800372e:	f023 0304 	bic.w	r3, r3, #4
 8003732:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8003734:	4b12      	ldr	r3, [pc, #72]	@ (8003780 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003736:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800373a:	f023 030c 	bic.w	r3, r3, #12
 800373e:	4a10      	ldr	r2, [pc, #64]	@ (8003780 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003740:	f043 0304 	orr.w	r3, r3, #4
 8003744:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003748:	e011      	b.n	800376e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800374a:	4b0c      	ldr	r3, [pc, #48]	@ (800377c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a0b      	ldr	r2, [pc, #44]	@ (800377c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003750:	f023 0304 	bic.w	r3, r3, #4
 8003754:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8003756:	4b0a      	ldr	r3, [pc, #40]	@ (8003780 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003758:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800375c:	f023 030c 	bic.w	r3, r3, #12
 8003760:	4a07      	ldr	r2, [pc, #28]	@ (8003780 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003762:	f043 0308 	orr.w	r3, r3, #8
 8003766:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800376a:	e000      	b.n	800376e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800376c:	bf00      	nop
  }
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	e000e010 	.word	0xe000e010
 8003780:	44020c00 	.word	0x44020c00

08003784 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800378a:	4b17      	ldr	r3, [pc, #92]	@ (80037e8 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8003796:	2304      	movs	r3, #4
 8003798:	607b      	str	r3, [r7, #4]
 800379a:	e01e      	b.n	80037da <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 800379c:	4b13      	ldr	r3, [pc, #76]	@ (80037ec <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800379e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80037a2:	f003 030c 	and.w	r3, r3, #12
 80037a6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d00f      	beq.n	80037ce <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d80f      	bhi.n	80037d4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d003      	beq.n	80037c8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80037c0:	e008      	b.n	80037d4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80037c2:	2300      	movs	r3, #0
 80037c4:	607b      	str	r3, [r7, #4]
        break;
 80037c6:	e008      	b.n	80037da <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80037c8:	2301      	movs	r3, #1
 80037ca:	607b      	str	r3, [r7, #4]
        break;
 80037cc:	e005      	b.n	80037da <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80037ce:	2302      	movs	r3, #2
 80037d0:	607b      	str	r3, [r7, #4]
        break;
 80037d2:	e002      	b.n	80037da <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80037d4:	2300      	movs	r3, #0
 80037d6:	607b      	str	r3, [r7, #4]
        break;
 80037d8:	bf00      	nop
    }
  }
  return systick_source;
 80037da:	687b      	ldr	r3, [r7, #4]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000e010 	.word	0xe000e010
 80037ec:	44020c00 	.word	0x44020c00

080037f0 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80037f8:	f7ff fe66 	bl	80034c8 <HAL_GetTick>
 80037fc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e06b      	b.n	80038e0 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d008      	beq.n	8003826 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2220      	movs	r2, #32
 8003818:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e05c      	b.n	80038e0 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0204 	orr.w	r2, r2, #4
 8003834:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2205      	movs	r2, #5
 800383a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800383e:	e020      	b.n	8003882 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003840:	f7ff fe42 	bl	80034c8 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b05      	cmp	r3, #5
 800384c:	d919      	bls.n	8003882 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003852:	f043 0210 	orr.w	r2, r3, #16
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2203      	movs	r2, #3
 800385e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003872:	2201      	movs	r2, #1
 8003874:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e02e      	b.n	80038e0 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0d7      	beq.n	8003840 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0202 	orr.w	r2, r2, #2
 800389e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2204      	movs	r2, #4
 80038a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80038b0:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d007      	beq.n	80038d6 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ca:	2201      	movs	r2, #1
 80038cc:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2200      	movs	r2, #0
 80038d4:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80038f6:	e142      	b.n	8003b7e <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	2101      	movs	r1, #1
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	fa01 f303 	lsl.w	r3, r1, r3
 8003904:	4013      	ands	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 8134 	beq.w	8003b78 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b02      	cmp	r3, #2
 8003916:	d003      	beq.n	8003920 <HAL_GPIO_Init+0x38>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b12      	cmp	r3, #18
 800391e:	d125      	bne.n	800396c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	08da      	lsrs	r2, r3, #3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3208      	adds	r2, #8
 8003928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800392c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	220f      	movs	r2, #15
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4013      	ands	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f003 020f 	and.w	r2, r3, #15
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	08da      	lsrs	r2, r3, #3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3208      	adds	r2, #8
 8003966:	6979      	ldr	r1, [r7, #20]
 8003968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	2203      	movs	r2, #3
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	43db      	mvns	r3, r3
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4013      	ands	r3, r2
 8003982:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 0203 	and.w	r2, r3, #3
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d00b      	beq.n	80039c0 <HAL_GPIO_Init+0xd8>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d007      	beq.n	80039c0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039b4:	2b11      	cmp	r3, #17
 80039b6:	d003      	beq.n	80039c0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b12      	cmp	r3, #18
 80039be:	d130      	bne.n	8003a22 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	2203      	movs	r2, #3
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4013      	ands	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039f6:	2201      	movs	r2, #1
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	4013      	ands	r3, r2
 8003a04:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	f003 0201 	and.w	r2, r3, #1
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d109      	bne.n	8003a42 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d11b      	bne.n	8003a72 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d017      	beq.n	8003a72 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	2203      	movs	r2, #3
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	43db      	mvns	r3, r3
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	4013      	ands	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d07c      	beq.n	8003b78 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003a7e:	4a47      	ldr	r2, [pc, #284]	@ (8003b9c <HAL_GPIO_Init+0x2b4>)
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	089b      	lsrs	r3, r3, #2
 8003a84:	3318      	adds	r3, #24
 8003a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	220f      	movs	r2, #15
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	0a9a      	lsrs	r2, r3, #10
 8003aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ba0 <HAL_GPIO_Init+0x2b8>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	f002 0203 	and.w	r2, r2, #3
 8003ab0:	00d2      	lsls	r2, r2, #3
 8003ab2:	4093      	lsls	r3, r2
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003aba:	4938      	ldr	r1, [pc, #224]	@ (8003b9c <HAL_GPIO_Init+0x2b4>)
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	089b      	lsrs	r3, r3, #2
 8003ac0:	3318      	adds	r3, #24
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003ac8:	4b34      	ldr	r3, [pc, #208]	@ (8003b9c <HAL_GPIO_Init+0x2b4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003aec:	4a2b      	ldr	r2, [pc, #172]	@ (8003b9c <HAL_GPIO_Init+0x2b4>)
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003af2:	4b2a      	ldr	r3, [pc, #168]	@ (8003b9c <HAL_GPIO_Init+0x2b4>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	43db      	mvns	r3, r3
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4013      	ands	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003b16:	4a21      	ldr	r2, [pc, #132]	@ (8003b9c <HAL_GPIO_Init+0x2b4>)
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8003b9c <HAL_GPIO_Init+0x2b4>)
 8003b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b22:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	43db      	mvns	r3, r3
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003b42:	4a16      	ldr	r2, [pc, #88]	@ (8003b9c <HAL_GPIO_Init+0x2b4>)
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003b4a:	4b14      	ldr	r3, [pc, #80]	@ (8003b9c <HAL_GPIO_Init+0x2b4>)
 8003b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b50:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	43db      	mvns	r3, r3
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003b70:	4a0a      	ldr	r2, [pc, #40]	@ (8003b9c <HAL_GPIO_Init+0x2b4>)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	fa22 f303 	lsr.w	r3, r2, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f47f aeb5 	bne.w	80038f8 <HAL_GPIO_Init+0x10>
  }
}
 8003b8e:	bf00      	nop
 8003b90:	bf00      	nop
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	44022000 	.word	0x44022000
 8003ba0:	002f7f7f 	.word	0x002f7f7f

08003ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	807b      	strh	r3, [r7, #2]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bb4:	787b      	ldrb	r3, [r7, #1]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bba:	887a      	ldrh	r2, [r7, #2]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bc0:	e002      	b.n	8003bc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bc2:	887a      	ldrh	r2, [r7, #2]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003be6:	887a      	ldrh	r2, [r7, #2]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4013      	ands	r3, r2
 8003bec:	041a      	lsls	r2, r3, #16
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	43d9      	mvns	r1, r3
 8003bf2:	887b      	ldrh	r3, [r7, #2]
 8003bf4:	400b      	ands	r3, r1
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	619a      	str	r2, [r3, #24]
}
 8003bfc:	bf00      	nop
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_GPIO_EnableHighSPeedLowVoltage>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_EnableHighSPeedLowVoltage(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Set HSLVR gpio pin */
  SET_BIT(GPIOx->HSLVR, GPIO_Pin);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c18:	887b      	ldrh	r3, [r7, #2]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003c30:	4b05      	ldr	r3, [pc, #20]	@ (8003c48 <HAL_ICACHE_Enable+0x1c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a04      	ldr	r2, [pc, #16]	@ (8003c48 <HAL_ICACHE_Enable+0x1c>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	40030400 	.word	0x40030400

08003c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b088      	sub	sp, #32
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	f000 bc28 	b.w	80044b0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c60:	4b94      	ldr	r3, [pc, #592]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	f003 0318 	and.w	r3, r3, #24
 8003c68:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003c6a:	4b92      	ldr	r3, [pc, #584]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d05b      	beq.n	8003d38 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d005      	beq.n	8003c92 <HAL_RCC_OscConfig+0x46>
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	2b18      	cmp	r3, #24
 8003c8a:	d114      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d111      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d102      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f000 bc08 	b.w	80044b0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003ca0:	4b84      	ldr	r3, [pc, #528]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	041b      	lsls	r3, r3, #16
 8003cae:	4981      	ldr	r1, [pc, #516]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003cb4:	e040      	b.n	8003d38 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d023      	beq.n	8003d06 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003cbe:	4b7d      	ldr	r3, [pc, #500]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a7c      	ldr	r2, [pc, #496]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7ff fbfd 	bl	80034c8 <HAL_GetTick>
 8003cce:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003cd2:	f7ff fbf9 	bl	80034c8 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e3e5      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003ce4:	4b73      	ldr	r3, [pc, #460]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003cf0:	4b70      	ldr	r3, [pc, #448]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	041b      	lsls	r3, r3, #16
 8003cfe:	496d      	ldr	r1, [pc, #436]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	618b      	str	r3, [r1, #24]
 8003d04:	e018      	b.n	8003d38 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003d06:	4b6b      	ldr	r3, [pc, #428]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a6a      	ldr	r2, [pc, #424]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003d0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d12:	f7ff fbd9 	bl	80034c8 <HAL_GetTick>
 8003d16:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003d1a:	f7ff fbd5 	bl	80034c8 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e3c1      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003d2c:	4b61      	ldr	r3, [pc, #388]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f0      	bne.n	8003d1a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80a0 	beq.w	8003e86 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	2b10      	cmp	r3, #16
 8003d4a:	d005      	beq.n	8003d58 <HAL_RCC_OscConfig+0x10c>
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	2b18      	cmp	r3, #24
 8003d50:	d109      	bne.n	8003d66 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d106      	bne.n	8003d66 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f040 8092 	bne.w	8003e86 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e3a4      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d6e:	d106      	bne.n	8003d7e <HAL_RCC_OscConfig+0x132>
 8003d70:	4b50      	ldr	r3, [pc, #320]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a4f      	ldr	r2, [pc, #316]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003d76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	e058      	b.n	8003e30 <HAL_RCC_OscConfig+0x1e4>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d112      	bne.n	8003dac <HAL_RCC_OscConfig+0x160>
 8003d86:	4b4b      	ldr	r3, [pc, #300]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a4a      	ldr	r2, [pc, #296]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003d8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	4b48      	ldr	r3, [pc, #288]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a47      	ldr	r2, [pc, #284]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003d98:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	4b45      	ldr	r3, [pc, #276]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a44      	ldr	r2, [pc, #272]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003da4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	e041      	b.n	8003e30 <HAL_RCC_OscConfig+0x1e4>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003db4:	d112      	bne.n	8003ddc <HAL_RCC_OscConfig+0x190>
 8003db6:	4b3f      	ldr	r3, [pc, #252]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a3e      	ldr	r2, [pc, #248]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003dbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	4b3c      	ldr	r3, [pc, #240]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a3b      	ldr	r2, [pc, #236]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003dc8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	4b39      	ldr	r3, [pc, #228]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a38      	ldr	r2, [pc, #224]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	e029      	b.n	8003e30 <HAL_RCC_OscConfig+0x1e4>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003de4:	d112      	bne.n	8003e0c <HAL_RCC_OscConfig+0x1c0>
 8003de6:	4b33      	ldr	r3, [pc, #204]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a32      	ldr	r2, [pc, #200]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	4b30      	ldr	r3, [pc, #192]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a2f      	ldr	r2, [pc, #188]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003df8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a2c      	ldr	r2, [pc, #176]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	e011      	b.n	8003e30 <HAL_RCC_OscConfig+0x1e4>
 8003e0c:	4b29      	ldr	r3, [pc, #164]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a28      	ldr	r2, [pc, #160]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	4b26      	ldr	r3, [pc, #152]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a25      	ldr	r2, [pc, #148]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003e1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	4b23      	ldr	r3, [pc, #140]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a22      	ldr	r2, [pc, #136]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003e2a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d013      	beq.n	8003e60 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e38:	f7ff fb46 	bl	80034c8 <HAL_GetTick>
 8003e3c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003e40:	f7ff fb42 	bl	80034c8 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b64      	cmp	r3, #100	@ 0x64
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e32e      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e52:	4b18      	ldr	r3, [pc, #96]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0f0      	beq.n	8003e40 <HAL_RCC_OscConfig+0x1f4>
 8003e5e:	e012      	b.n	8003e86 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7ff fb32 	bl	80034c8 <HAL_GetTick>
 8003e64:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003e68:	f7ff fb2e 	bl	80034c8 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b64      	cmp	r3, #100	@ 0x64
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e31a      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb4 <HAL_RCC_OscConfig+0x268>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f0      	bne.n	8003e68 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 809a 	beq.w	8003fc8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x25a>
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	2b18      	cmp	r3, #24
 8003e9e:	d149      	bne.n	8003f34 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d146      	bne.n	8003f34 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d104      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e2fe      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
 8003eb2:	bf00      	nop
 8003eb4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d11c      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003ebe:	4b9a      	ldr	r3, [pc, #616]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0218 	and.w	r2, r3, #24
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d014      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003ece:	4b96      	ldr	r3, [pc, #600]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f023 0218 	bic.w	r2, r3, #24
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	4993      	ldr	r1, [pc, #588]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003ee0:	f000 fdd0 	bl	8004a84 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ee4:	4b91      	ldr	r3, [pc, #580]	@ (800412c <HAL_RCC_OscConfig+0x4e0>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff fa63 	bl	80033b4 <HAL_InitTick>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e2db      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7ff fae6 	bl	80034c8 <HAL_GetTick>
 8003efc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003f00:	f7ff fae2 	bl	80034c8 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e2ce      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f12:	4b85      	ldr	r3, [pc, #532]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003f1e:	4b82      	ldr	r3, [pc, #520]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	041b      	lsls	r3, r3, #16
 8003f2c:	497e      	ldr	r1, [pc, #504]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003f32:	e049      	b.n	8003fc8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d02c      	beq.n	8003f96 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003f3c:	4b7a      	ldr	r3, [pc, #488]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f023 0218 	bic.w	r2, r3, #24
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	4977      	ldr	r1, [pc, #476]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003f4e:	4b76      	ldr	r3, [pc, #472]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a75      	ldr	r2, [pc, #468]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5a:	f7ff fab5 	bl	80034c8 <HAL_GetTick>
 8003f5e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003f62:	f7ff fab1 	bl	80034c8 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e29d      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f74:	4b6c      	ldr	r3, [pc, #432]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0f0      	beq.n	8003f62 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003f80:	4b69      	ldr	r3, [pc, #420]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	041b      	lsls	r3, r3, #16
 8003f8e:	4966      	ldr	r1, [pc, #408]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	610b      	str	r3, [r1, #16]
 8003f94:	e018      	b.n	8003fc8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f96:	4b64      	ldr	r3, [pc, #400]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a63      	ldr	r2, [pc, #396]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa2:	f7ff fa91 	bl	80034c8 <HAL_GetTick>
 8003fa6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003faa:	f7ff fa8d 	bl	80034c8 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e279      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fbc:	4b5a      	ldr	r3, [pc, #360]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1f0      	bne.n	8003faa <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d03c      	beq.n	800404e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01c      	beq.n	8004016 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fdc:	4b52      	ldr	r3, [pc, #328]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fe2:	4a51      	ldr	r2, [pc, #324]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8003fe4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003fe8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fec:	f7ff fa6c 	bl	80034c8 <HAL_GetTick>
 8003ff0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003ff4:	f7ff fa68 	bl	80034c8 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e254      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004006:	4b48      	ldr	r3, [pc, #288]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8004008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800400c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0ef      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x3a8>
 8004014:	e01b      	b.n	800404e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004016:	4b44      	ldr	r3, [pc, #272]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8004018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800401c:	4a42      	ldr	r2, [pc, #264]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 800401e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004022:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004026:	f7ff fa4f 	bl	80034c8 <HAL_GetTick>
 800402a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800402e:	f7ff fa4b 	bl	80034c8 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e237      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004040:	4b39      	ldr	r3, [pc, #228]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8004042:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004046:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1ef      	bne.n	800402e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 80d2 	beq.w	8004200 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800405c:	4b34      	ldr	r3, [pc, #208]	@ (8004130 <HAL_RCC_OscConfig+0x4e4>)
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d118      	bne.n	800409a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004068:	4b31      	ldr	r3, [pc, #196]	@ (8004130 <HAL_RCC_OscConfig+0x4e4>)
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	4a30      	ldr	r2, [pc, #192]	@ (8004130 <HAL_RCC_OscConfig+0x4e4>)
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004074:	f7ff fa28 	bl	80034c8 <HAL_GetTick>
 8004078:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407c:	f7ff fa24 	bl	80034c8 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e210      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800408e:	4b28      	ldr	r3, [pc, #160]	@ (8004130 <HAL_RCC_OscConfig+0x4e4>)
 8004090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0f0      	beq.n	800407c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d108      	bne.n	80040b4 <HAL_RCC_OscConfig+0x468>
 80040a2:	4b21      	ldr	r3, [pc, #132]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 80040a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040b2:	e074      	b.n	800419e <HAL_RCC_OscConfig+0x552>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d118      	bne.n	80040ee <HAL_RCC_OscConfig+0x4a2>
 80040bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 80040be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040c2:	4a19      	ldr	r2, [pc, #100]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 80040c4:	f023 0301 	bic.w	r3, r3, #1
 80040c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040cc:	4b16      	ldr	r3, [pc, #88]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 80040ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040d2:	4a15      	ldr	r2, [pc, #84]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 80040d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040dc:	4b12      	ldr	r3, [pc, #72]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 80040de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040e2:	4a11      	ldr	r2, [pc, #68]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 80040e4:	f023 0304 	bic.w	r3, r3, #4
 80040e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040ec:	e057      	b.n	800419e <HAL_RCC_OscConfig+0x552>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2b05      	cmp	r3, #5
 80040f4:	d11e      	bne.n	8004134 <HAL_RCC_OscConfig+0x4e8>
 80040f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 80040f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040fc:	4a0a      	ldr	r2, [pc, #40]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 80040fe:	f043 0304 	orr.w	r3, r3, #4
 8004102:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004106:	4b08      	ldr	r3, [pc, #32]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8004108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800410c:	4a06      	ldr	r2, [pc, #24]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 800410e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004112:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004116:	4b04      	ldr	r3, [pc, #16]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8004118:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800411c:	4a02      	ldr	r2, [pc, #8]	@ (8004128 <HAL_RCC_OscConfig+0x4dc>)
 800411e:	f043 0301 	orr.w	r3, r3, #1
 8004122:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004126:	e03a      	b.n	800419e <HAL_RCC_OscConfig+0x552>
 8004128:	44020c00 	.word	0x44020c00
 800412c:	20000004 	.word	0x20000004
 8004130:	44020800 	.word	0x44020800
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b85      	cmp	r3, #133	@ 0x85
 800413a:	d118      	bne.n	800416e <HAL_RCC_OscConfig+0x522>
 800413c:	4ba2      	ldr	r3, [pc, #648]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800413e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004142:	4aa1      	ldr	r2, [pc, #644]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004144:	f043 0304 	orr.w	r3, r3, #4
 8004148:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800414c:	4b9e      	ldr	r3, [pc, #632]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800414e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004152:	4a9d      	ldr	r2, [pc, #628]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004158:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800415c:	4b9a      	ldr	r3, [pc, #616]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800415e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004162:	4a99      	ldr	r2, [pc, #612]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800416c:	e017      	b.n	800419e <HAL_RCC_OscConfig+0x552>
 800416e:	4b96      	ldr	r3, [pc, #600]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004170:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004174:	4a94      	ldr	r2, [pc, #592]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800417e:	4b92      	ldr	r3, [pc, #584]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004180:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004184:	4a90      	ldr	r2, [pc, #576]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004186:	f023 0304 	bic.w	r3, r3, #4
 800418a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800418e:	4b8e      	ldr	r3, [pc, #568]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004194:	4a8c      	ldr	r2, [pc, #560]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004196:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800419a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d016      	beq.n	80041d4 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a6:	f7ff f98f 	bl	80034c8 <HAL_GetTick>
 80041aa:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ac:	e00a      	b.n	80041c4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ae:	f7ff f98b 	bl	80034c8 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041bc:	4293      	cmp	r3, r2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e175      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041c4:	4b80      	ldr	r3, [pc, #512]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 80041c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0ed      	beq.n	80041ae <HAL_RCC_OscConfig+0x562>
 80041d2:	e015      	b.n	8004200 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d4:	f7ff f978 	bl	80034c8 <HAL_GetTick>
 80041d8:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041da:	e00a      	b.n	80041f2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041dc:	f7ff f974 	bl	80034c8 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e15e      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041f2:	4b75      	ldr	r3, [pc, #468]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 80041f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1ed      	bne.n	80041dc <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b00      	cmp	r3, #0
 800420a:	d036      	beq.n	800427a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004210:	2b00      	cmp	r3, #0
 8004212:	d019      	beq.n	8004248 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004214:	4b6c      	ldr	r3, [pc, #432]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a6b      	ldr	r2, [pc, #428]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800421a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800421e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004220:	f7ff f952 	bl	80034c8 <HAL_GetTick>
 8004224:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004228:	f7ff f94e 	bl	80034c8 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e13a      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800423a:	4b63      	ldr	r3, [pc, #396]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f0      	beq.n	8004228 <HAL_RCC_OscConfig+0x5dc>
 8004246:	e018      	b.n	800427a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004248:	4b5f      	ldr	r3, [pc, #380]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a5e      	ldr	r2, [pc, #376]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800424e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004252:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004254:	f7ff f938 	bl	80034c8 <HAL_GetTick>
 8004258:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800425c:	f7ff f934 	bl	80034c8 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e120      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800426e:	4b56      	ldr	r3, [pc, #344]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 8115 	beq.w	80044ae <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	2b18      	cmp	r3, #24
 8004288:	f000 80af 	beq.w	80043ea <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004290:	2b02      	cmp	r3, #2
 8004292:	f040 8086 	bne.w	80043a2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004296:	4b4c      	ldr	r3, [pc, #304]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a4b      	ldr	r2, [pc, #300]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800429c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a2:	f7ff f911 	bl	80034c8 <HAL_GetTick>
 80042a6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80042aa:	f7ff f90d 	bl	80034c8 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e0f9      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80042bc:	4b42      	ldr	r3, [pc, #264]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1f0      	bne.n	80042aa <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80042c8:	4b3f      	ldr	r3, [pc, #252]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 80042ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80042d0:	f023 0303 	bic.w	r3, r3, #3
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80042dc:	0212      	lsls	r2, r2, #8
 80042de:	430a      	orrs	r2, r1
 80042e0:	4939      	ldr	r1, [pc, #228]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	628b      	str	r3, [r1, #40]	@ 0x28
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ea:	3b01      	subs	r3, #1
 80042ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f4:	3b01      	subs	r3, #1
 80042f6:	025b      	lsls	r3, r3, #9
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004300:	3b01      	subs	r3, #1
 8004302:	041b      	lsls	r3, r3, #16
 8004304:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430e:	3b01      	subs	r3, #1
 8004310:	061b      	lsls	r3, r3, #24
 8004312:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004316:	492c      	ldr	r1, [pc, #176]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004318:	4313      	orrs	r3, r2
 800431a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800431c:	4b2a      	ldr	r3, [pc, #168]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800431e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004320:	4a29      	ldr	r2, [pc, #164]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004322:	f023 0310 	bic.w	r3, r3, #16
 8004326:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800432c:	4a26      	ldr	r2, [pc, #152]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004332:	4b25      	ldr	r3, [pc, #148]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004336:	4a24      	ldr	r2, [pc, #144]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004338:	f043 0310 	orr.w	r3, r3, #16
 800433c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800433e:	4b22      	ldr	r3, [pc, #136]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004342:	f023 020c 	bic.w	r2, r3, #12
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434a:	491f      	ldr	r1, [pc, #124]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800434c:	4313      	orrs	r3, r2
 800434e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004350:	4b1d      	ldr	r3, [pc, #116]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004354:	f023 0220 	bic.w	r2, r3, #32
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800435c:	491a      	ldr	r1, [pc, #104]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 800435e:	4313      	orrs	r3, r2
 8004360:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004362:	4b19      	ldr	r3, [pc, #100]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004366:	4a18      	ldr	r2, [pc, #96]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800436c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800436e:	4b16      	ldr	r3, [pc, #88]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a15      	ldr	r2, [pc, #84]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004374:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437a:	f7ff f8a5 	bl	80034c8 <HAL_GetTick>
 800437e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004382:	f7ff f8a1 	bl	80034c8 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e08d      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004394:	4b0c      	ldr	r3, [pc, #48]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0f0      	beq.n	8004382 <HAL_RCC_OscConfig+0x736>
 80043a0:	e085      	b.n	80044ae <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80043a2:	4b09      	ldr	r3, [pc, #36]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a08      	ldr	r2, [pc, #32]	@ (80043c8 <HAL_RCC_OscConfig+0x77c>)
 80043a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ae:	f7ff f88b 	bl	80034c8 <HAL_GetTick>
 80043b2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80043b4:	e00a      	b.n	80043cc <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80043b6:	f7ff f887 	bl	80034c8 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d903      	bls.n	80043cc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e073      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
 80043c8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80043cc:	4b3a      	ldr	r3, [pc, #232]	@ (80044b8 <HAL_RCC_OscConfig+0x86c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1ee      	bne.n	80043b6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80043d8:	4b37      	ldr	r3, [pc, #220]	@ (80044b8 <HAL_RCC_OscConfig+0x86c>)
 80043da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043dc:	4a36      	ldr	r2, [pc, #216]	@ (80044b8 <HAL_RCC_OscConfig+0x86c>)
 80043de:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80043e2:	f023 0303 	bic.w	r3, r3, #3
 80043e6:	6293      	str	r3, [r2, #40]	@ 0x28
 80043e8:	e061      	b.n	80044ae <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80043ea:	4b33      	ldr	r3, [pc, #204]	@ (80044b8 <HAL_RCC_OscConfig+0x86c>)
 80043ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ee:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80043f0:	4b31      	ldr	r3, [pc, #196]	@ (80044b8 <HAL_RCC_OscConfig+0x86c>)
 80043f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043f4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d031      	beq.n	8004462 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f003 0203 	and.w	r2, r3, #3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004408:	429a      	cmp	r2, r3
 800440a:	d12a      	bne.n	8004462 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	0a1b      	lsrs	r3, r3, #8
 8004410:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004418:	429a      	cmp	r2, r3
 800441a:	d122      	bne.n	8004462 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004426:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004428:	429a      	cmp	r2, r3
 800442a:	d11a      	bne.n	8004462 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	0a5b      	lsrs	r3, r3, #9
 8004430:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004438:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800443a:	429a      	cmp	r2, r3
 800443c:	d111      	bne.n	8004462 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	0c1b      	lsrs	r3, r3, #16
 8004442:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800444a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800444c:	429a      	cmp	r2, r3
 800444e:	d108      	bne.n	8004462 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	0e1b      	lsrs	r3, r3, #24
 8004454:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800445e:	429a      	cmp	r2, r3
 8004460:	d001      	beq.n	8004466 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e024      	b.n	80044b0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004466:	4b14      	ldr	r3, [pc, #80]	@ (80044b8 <HAL_RCC_OscConfig+0x86c>)
 8004468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800446a:	08db      	lsrs	r3, r3, #3
 800446c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004474:	429a      	cmp	r2, r3
 8004476:	d01a      	beq.n	80044ae <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004478:	4b0f      	ldr	r3, [pc, #60]	@ (80044b8 <HAL_RCC_OscConfig+0x86c>)
 800447a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447c:	4a0e      	ldr	r2, [pc, #56]	@ (80044b8 <HAL_RCC_OscConfig+0x86c>)
 800447e:	f023 0310 	bic.w	r3, r3, #16
 8004482:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004484:	f7ff f820 	bl	80034c8 <HAL_GetTick>
 8004488:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800448a:	bf00      	nop
 800448c:	f7ff f81c 	bl	80034c8 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	4293      	cmp	r3, r2
 8004496:	d0f9      	beq.n	800448c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800449c:	4a06      	ldr	r2, [pc, #24]	@ (80044b8 <HAL_RCC_OscConfig+0x86c>)
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80044a2:	4b05      	ldr	r3, [pc, #20]	@ (80044b8 <HAL_RCC_OscConfig+0x86c>)
 80044a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a6:	4a04      	ldr	r2, [pc, #16]	@ (80044b8 <HAL_RCC_OscConfig+0x86c>)
 80044a8:	f043 0310 	orr.w	r3, r3, #16
 80044ac:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3720      	adds	r7, #32
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	44020c00 	.word	0x44020c00

080044bc <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e19e      	b.n	800480e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044d0:	4b83      	ldr	r3, [pc, #524]	@ (80046e0 <HAL_RCC_ClockConfig+0x224>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d910      	bls.n	8004500 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044de:	4b80      	ldr	r3, [pc, #512]	@ (80046e0 <HAL_RCC_ClockConfig+0x224>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f023 020f 	bic.w	r2, r3, #15
 80044e6:	497e      	ldr	r1, [pc, #504]	@ (80046e0 <HAL_RCC_ClockConfig+0x224>)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ee:	4b7c      	ldr	r3, [pc, #496]	@ (80046e0 <HAL_RCC_ClockConfig+0x224>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e186      	b.n	800480e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	2b00      	cmp	r3, #0
 800450a:	d012      	beq.n	8004532 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	695a      	ldr	r2, [r3, #20]
 8004510:	4b74      	ldr	r3, [pc, #464]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	0a1b      	lsrs	r3, r3, #8
 8004516:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800451a:	429a      	cmp	r2, r3
 800451c:	d909      	bls.n	8004532 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800451e:	4b71      	ldr	r3, [pc, #452]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	021b      	lsls	r3, r3, #8
 800452c:	496d      	ldr	r1, [pc, #436]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 800452e:	4313      	orrs	r3, r2
 8004530:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d012      	beq.n	8004564 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	4b68      	ldr	r3, [pc, #416]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	091b      	lsrs	r3, r3, #4
 8004548:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800454c:	429a      	cmp	r2, r3
 800454e:	d909      	bls.n	8004564 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004550:	4b64      	ldr	r3, [pc, #400]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	4961      	ldr	r1, [pc, #388]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004560:	4313      	orrs	r3, r2
 8004562:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	d010      	beq.n	8004592 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	4b5b      	ldr	r3, [pc, #364]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800457c:	429a      	cmp	r2, r3
 800457e:	d908      	bls.n	8004592 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004580:	4b58      	ldr	r3, [pc, #352]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	4955      	ldr	r1, [pc, #340]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 800458e:	4313      	orrs	r3, r2
 8004590:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d010      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	4b50      	ldr	r3, [pc, #320]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d908      	bls.n	80045c0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80045ae:	4b4d      	ldr	r3, [pc, #308]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	f023 020f 	bic.w	r2, r3, #15
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	494a      	ldr	r1, [pc, #296]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8093 	beq.w	80046f4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	d107      	bne.n	80045e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80045d6:	4b43      	ldr	r3, [pc, #268]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d121      	bne.n	8004626 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e113      	b.n	800480e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d107      	bne.n	80045fe <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045ee:	4b3d      	ldr	r3, [pc, #244]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d115      	bne.n	8004626 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e107      	b.n	800480e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d107      	bne.n	8004616 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004606:	4b37      	ldr	r3, [pc, #220]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e0fb      	b.n	800480e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004616:	4b33      	ldr	r3, [pc, #204]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e0f3      	b.n	800480e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004626:	4b2f      	ldr	r3, [pc, #188]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f023 0203 	bic.w	r2, r3, #3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	492c      	ldr	r1, [pc, #176]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004634:	4313      	orrs	r3, r2
 8004636:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004638:	f7fe ff46 	bl	80034c8 <HAL_GetTick>
 800463c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b03      	cmp	r3, #3
 8004644:	d112      	bne.n	800466c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004646:	e00a      	b.n	800465e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004648:	f7fe ff3e 	bl	80034c8 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004656:	4293      	cmp	r3, r2
 8004658:	d901      	bls.n	800465e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e0d7      	b.n	800480e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800465e:	4b21      	ldr	r3, [pc, #132]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f003 0318 	and.w	r3, r3, #24
 8004666:	2b18      	cmp	r3, #24
 8004668:	d1ee      	bne.n	8004648 <HAL_RCC_ClockConfig+0x18c>
 800466a:	e043      	b.n	80046f4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b02      	cmp	r3, #2
 8004672:	d112      	bne.n	800469a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004674:	e00a      	b.n	800468c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004676:	f7fe ff27 	bl	80034c8 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004684:	4293      	cmp	r3, r2
 8004686:	d901      	bls.n	800468c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e0c0      	b.n	800480e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800468c:	4b15      	ldr	r3, [pc, #84]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	f003 0318 	and.w	r3, r3, #24
 8004694:	2b10      	cmp	r3, #16
 8004696:	d1ee      	bne.n	8004676 <HAL_RCC_ClockConfig+0x1ba>
 8004698:	e02c      	b.n	80046f4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d122      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80046a2:	e00a      	b.n	80046ba <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80046a4:	f7fe ff10 	bl	80034c8 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e0a9      	b.n	800480e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80046ba:	4b0a      	ldr	r3, [pc, #40]	@ (80046e4 <HAL_RCC_ClockConfig+0x228>)
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	f003 0318 	and.w	r3, r3, #24
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d1ee      	bne.n	80046a4 <HAL_RCC_ClockConfig+0x1e8>
 80046c6:	e015      	b.n	80046f4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80046c8:	f7fe fefe 	bl	80034c8 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d906      	bls.n	80046e8 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e097      	b.n	800480e <HAL_RCC_ClockConfig+0x352>
 80046de:	bf00      	nop
 80046e0:	40022000 	.word	0x40022000
 80046e4:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80046e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	f003 0318 	and.w	r3, r3, #24
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1e9      	bne.n	80046c8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d010      	beq.n	8004722 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	4b44      	ldr	r3, [pc, #272]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	429a      	cmp	r2, r3
 800470e:	d208      	bcs.n	8004722 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004710:	4b41      	ldr	r3, [pc, #260]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	f023 020f 	bic.w	r2, r3, #15
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	493e      	ldr	r1, [pc, #248]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 800471e:	4313      	orrs	r3, r2
 8004720:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004722:	4b3e      	ldr	r3, [pc, #248]	@ (800481c <HAL_RCC_ClockConfig+0x360>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d210      	bcs.n	8004752 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004730:	4b3a      	ldr	r3, [pc, #232]	@ (800481c <HAL_RCC_ClockConfig+0x360>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f023 020f 	bic.w	r2, r3, #15
 8004738:	4938      	ldr	r1, [pc, #224]	@ (800481c <HAL_RCC_ClockConfig+0x360>)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	4313      	orrs	r3, r2
 800473e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004740:	4b36      	ldr	r3, [pc, #216]	@ (800481c <HAL_RCC_ClockConfig+0x360>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 030f 	and.w	r3, r3, #15
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d001      	beq.n	8004752 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e05d      	b.n	800480e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0304 	and.w	r3, r3, #4
 800475a:	2b00      	cmp	r3, #0
 800475c:	d010      	beq.n	8004780 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	4b2d      	ldr	r3, [pc, #180]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800476a:	429a      	cmp	r2, r3
 800476c:	d208      	bcs.n	8004780 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800476e:	4b2a      	ldr	r3, [pc, #168]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	4927      	ldr	r1, [pc, #156]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 800477c:	4313      	orrs	r3, r2
 800477e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d012      	beq.n	80047b2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691a      	ldr	r2, [r3, #16]
 8004790:	4b21      	ldr	r3, [pc, #132]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	091b      	lsrs	r3, r3, #4
 8004796:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800479a:	429a      	cmp	r2, r3
 800479c:	d209      	bcs.n	80047b2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800479e:	4b1e      	ldr	r3, [pc, #120]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	491a      	ldr	r1, [pc, #104]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0310 	and.w	r3, r3, #16
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d012      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695a      	ldr	r2, [r3, #20]
 80047c2:	4b15      	ldr	r3, [pc, #84]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d209      	bcs.n	80047e4 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80047d0:	4b11      	ldr	r3, [pc, #68]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	490e      	ldr	r1, [pc, #56]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80047e4:	f000 f822 	bl	800482c <HAL_RCC_GetSysClockFreq>
 80047e8:	4602      	mov	r2, r0
 80047ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004818 <HAL_RCC_ClockConfig+0x35c>)
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	490b      	ldr	r1, [pc, #44]	@ (8004820 <HAL_RCC_ClockConfig+0x364>)
 80047f4:	5ccb      	ldrb	r3, [r1, r3]
 80047f6:	fa22 f303 	lsr.w	r3, r2, r3
 80047fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004824 <HAL_RCC_ClockConfig+0x368>)
 80047fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80047fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004828 <HAL_RCC_ClockConfig+0x36c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f7fe fdd6 	bl	80033b4 <HAL_InitTick>
 8004808:	4603      	mov	r3, r0
 800480a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800480c:	7afb      	ldrb	r3, [r7, #11]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	44020c00 	.word	0x44020c00
 800481c:	40022000 	.word	0x40022000
 8004820:	0801463c 	.word	0x0801463c
 8004824:	20000000 	.word	0x20000000
 8004828:	20000004 	.word	0x20000004

0800482c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800482c:	b480      	push	{r7}
 800482e:	b089      	sub	sp, #36	@ 0x24
 8004830:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004832:	4b8c      	ldr	r3, [pc, #560]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f003 0318 	and.w	r3, r3, #24
 800483a:	2b08      	cmp	r3, #8
 800483c:	d102      	bne.n	8004844 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800483e:	4b8a      	ldr	r3, [pc, #552]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x23c>)
 8004840:	61fb      	str	r3, [r7, #28]
 8004842:	e107      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004844:	4b87      	ldr	r3, [pc, #540]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	f003 0318 	and.w	r3, r3, #24
 800484c:	2b00      	cmp	r3, #0
 800484e:	d112      	bne.n	8004876 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004850:	4b84      	ldr	r3, [pc, #528]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0320 	and.w	r3, r3, #32
 8004858:	2b00      	cmp	r3, #0
 800485a:	d009      	beq.n	8004870 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800485c:	4b81      	ldr	r3, [pc, #516]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	08db      	lsrs	r3, r3, #3
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	4a81      	ldr	r2, [pc, #516]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x240>)
 8004868:	fa22 f303 	lsr.w	r3, r2, r3
 800486c:	61fb      	str	r3, [r7, #28]
 800486e:	e0f1      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004870:	4b7e      	ldr	r3, [pc, #504]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x240>)
 8004872:	61fb      	str	r3, [r7, #28]
 8004874:	e0ee      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004876:	4b7b      	ldr	r3, [pc, #492]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	f003 0318 	and.w	r3, r3, #24
 800487e:	2b10      	cmp	r3, #16
 8004880:	d102      	bne.n	8004888 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004882:	4b7b      	ldr	r3, [pc, #492]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0x244>)
 8004884:	61fb      	str	r3, [r7, #28]
 8004886:	e0e5      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004888:	4b76      	ldr	r3, [pc, #472]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	f003 0318 	and.w	r3, r3, #24
 8004890:	2b18      	cmp	r3, #24
 8004892:	f040 80dd 	bne.w	8004a50 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004896:	4b73      	ldr	r3, [pc, #460]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 8004898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80048a0:	4b70      	ldr	r3, [pc, #448]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 80048a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a4:	0a1b      	lsrs	r3, r3, #8
 80048a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80048ac:	4b6d      	ldr	r3, [pc, #436]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 80048ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80048b8:	4b6a      	ldr	r3, [pc, #424]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 80048ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80048bc:	08db      	lsrs	r3, r3, #3
 80048be:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	fb02 f303 	mul.w	r3, r2, r3
 80048c8:	ee07 3a90 	vmov	s15, r3
 80048cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 80b7 	beq.w	8004a4a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d003      	beq.n	80048ea <HAL_RCC_GetSysClockFreq+0xbe>
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d056      	beq.n	8004996 <HAL_RCC_GetSysClockFreq+0x16a>
 80048e8:	e077      	b.n	80049da <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80048ea:	4b5e      	ldr	r3, [pc, #376]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d02d      	beq.n	8004952 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80048f6:	4b5b      	ldr	r3, [pc, #364]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	08db      	lsrs	r3, r3, #3
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	4a5a      	ldr	r2, [pc, #360]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x240>)
 8004902:	fa22 f303 	lsr.w	r3, r2, r3
 8004906:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	ee07 3a90 	vmov	s15, r3
 800490e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	ee07 3a90 	vmov	s15, r3
 8004918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004920:	4b50      	ldr	r3, [pc, #320]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 8004922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004928:	ee07 3a90 	vmov	s15, r3
 800492c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004930:	ed97 6a02 	vldr	s12, [r7, #8]
 8004934:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004a74 <HAL_RCC_GetSysClockFreq+0x248>
 8004938:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800493c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004940:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004944:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800494c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004950:	e065      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	ee07 3a90 	vmov	s15, r3
 8004958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004a78 <HAL_RCC_GetSysClockFreq+0x24c>
 8004960:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004964:	4b3f      	ldr	r3, [pc, #252]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 8004966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496c:	ee07 3a90 	vmov	s15, r3
 8004970:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004974:	ed97 6a02 	vldr	s12, [r7, #8]
 8004978:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004a74 <HAL_RCC_GetSysClockFreq+0x248>
 800497c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004980:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004984:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004988:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800498c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004990:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004994:	e043      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	ee07 3a90 	vmov	s15, r3
 800499c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004a7c <HAL_RCC_GetSysClockFreq+0x250>
 80049a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 80049aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b0:	ee07 3a90 	vmov	s15, r3
 80049b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80049b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80049bc:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004a74 <HAL_RCC_GetSysClockFreq+0x248>
 80049c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80049c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d4:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80049d8:	e021      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	ee07 3a90 	vmov	s15, r3
 80049e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004a80 <HAL_RCC_GetSysClockFreq+0x254>
 80049e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 80049ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f4:	ee07 3a90 	vmov	s15, r3
 80049f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80049fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a00:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004a74 <HAL_RCC_GetSysClockFreq+0x248>
 8004a04:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a08:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a10:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a18:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004a1c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004a1e:	4b11      	ldr	r3, [pc, #68]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x238>)
 8004a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a22:	0a5b      	lsrs	r3, r3, #9
 8004a24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a28:	3301      	adds	r3, #1
 8004a2a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a36:	edd7 6a06 	vldr	s13, [r7, #24]
 8004a3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a42:	ee17 3a90 	vmov	r3, s15
 8004a46:	61fb      	str	r3, [r7, #28]
 8004a48:	e004      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61fb      	str	r3, [r7, #28]
 8004a4e:	e001      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004a50:	4b06      	ldr	r3, [pc, #24]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x240>)
 8004a52:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004a54:	69fb      	ldr	r3, [r7, #28]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3724      	adds	r7, #36	@ 0x24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	44020c00 	.word	0x44020c00
 8004a68:	003d0900 	.word	0x003d0900
 8004a6c:	03d09000 	.word	0x03d09000
 8004a70:	017d7840 	.word	0x017d7840
 8004a74:	46000000 	.word	0x46000000
 8004a78:	4c742400 	.word	0x4c742400
 8004a7c:	4bbebc20 	.word	0x4bbebc20
 8004a80:	4a742400 	.word	0x4a742400

08004a84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004a88:	f7ff fed0 	bl	800482c <HAL_RCC_GetSysClockFreq>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	4b08      	ldr	r3, [pc, #32]	@ (8004ab0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004a90:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004a92:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004a96:	4907      	ldr	r1, [pc, #28]	@ (8004ab4 <HAL_RCC_GetHCLKFreq+0x30>)
 8004a98:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004a9a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa2:	4a05      	ldr	r2, [pc, #20]	@ (8004ab8 <HAL_RCC_GetHCLKFreq+0x34>)
 8004aa4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004aa6:	4b04      	ldr	r3, [pc, #16]	@ (8004ab8 <HAL_RCC_GetHCLKFreq+0x34>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	44020c00 	.word	0x44020c00
 8004ab4:	0801463c 	.word	0x0801463c
 8004ab8:	20000000 	.word	0x20000000

08004abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004ac0:	f7ff ffe0 	bl	8004a84 <HAL_RCC_GetHCLKFreq>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	4b06      	ldr	r3, [pc, #24]	@ (8004ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	091b      	lsrs	r3, r3, #4
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	4904      	ldr	r1, [pc, #16]	@ (8004ae4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ad2:	5ccb      	ldrb	r3, [r1, r3]
 8004ad4:	f003 031f 	and.w	r3, r3, #31
 8004ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	44020c00 	.word	0x44020c00
 8004ae4:	0801464c 	.word	0x0801464c

08004ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004aec:	f7ff ffca 	bl	8004a84 <HAL_RCC_GetHCLKFreq>
 8004af0:	4602      	mov	r2, r0
 8004af2:	4b06      	ldr	r3, [pc, #24]	@ (8004b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	0a1b      	lsrs	r3, r3, #8
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	4904      	ldr	r1, [pc, #16]	@ (8004b10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004afe:	5ccb      	ldrb	r3, [r1, r3]
 8004b00:	f003 031f 	and.w	r3, r3, #31
 8004b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	44020c00 	.word	0x44020c00
 8004b10:	0801464c 	.word	0x0801464c

08004b14 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004b18:	f7ff ffb4 	bl	8004a84 <HAL_RCC_GetHCLKFreq>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	4b06      	ldr	r3, [pc, #24]	@ (8004b38 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	0b1b      	lsrs	r3, r3, #12
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	4904      	ldr	r1, [pc, #16]	@ (8004b3c <HAL_RCC_GetPCLK3Freq+0x28>)
 8004b2a:	5ccb      	ldrb	r3, [r1, r3]
 8004b2c:	f003 031f 	and.w	r3, r3, #31
 8004b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	44020c00 	.word	0x44020c00
 8004b3c:	0801464c 	.word	0x0801464c

08004b40 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b44:	b0d8      	sub	sp, #352	@ 0x160
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b52:	2300      	movs	r3, #0
 8004b54:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b60:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004b64:	2500      	movs	r5, #0
 8004b66:	ea54 0305 	orrs.w	r3, r4, r5
 8004b6a:	d00b      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004b6c:	4bcd      	ldr	r3, [pc, #820]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004b6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b72:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004b76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b7c:	4ac9      	ldr	r2, [pc, #804]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004b7e:	430b      	orrs	r3, r1
 8004b80:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8c:	f002 0801 	and.w	r8, r2, #1
 8004b90:	f04f 0900 	mov.w	r9, #0
 8004b94:	ea58 0309 	orrs.w	r3, r8, r9
 8004b98:	d042      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004b9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba0:	2b05      	cmp	r3, #5
 8004ba2:	d823      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bac <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004baa:	bf00      	nop
 8004bac:	08004bf5 	.word	0x08004bf5
 8004bb0:	08004bc5 	.word	0x08004bc5
 8004bb4:	08004bd9 	.word	0x08004bd9
 8004bb8:	08004bf5 	.word	0x08004bf5
 8004bbc:	08004bf5 	.word	0x08004bf5
 8004bc0:	08004bf5 	.word	0x08004bf5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bc8:	3308      	adds	r3, #8
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f004 fee0 	bl	8009990 <RCCEx_PLL2_Config>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004bd6:	e00e      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bdc:	3330      	adds	r3, #48	@ 0x30
 8004bde:	4618      	mov	r0, r3
 8004be0:	f004 ff6e 	bl	8009ac0 <RCCEx_PLL3_Config>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004bea:	e004      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004bf2:	e000      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8004bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bf6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10c      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004bfe:	4ba9      	ldr	r3, [pc, #676]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004c04:	f023 0107 	bic.w	r1, r3, #7
 8004c08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c0e:	4aa5      	ldr	r2, [pc, #660]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c10:	430b      	orrs	r3, r1
 8004c12:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004c16:	e003      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c18:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c1c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c28:	f002 0a02 	and.w	sl, r2, #2
 8004c2c:	f04f 0b00 	mov.w	fp, #0
 8004c30:	ea5a 030b 	orrs.w	r3, sl, fp
 8004c34:	f000 8088 	beq.w	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004c38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c3e:	2b28      	cmp	r3, #40	@ 0x28
 8004c40:	d868      	bhi.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004c42:	a201      	add	r2, pc, #4	@ (adr r2, 8004c48 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c48:	08004d1d 	.word	0x08004d1d
 8004c4c:	08004d15 	.word	0x08004d15
 8004c50:	08004d15 	.word	0x08004d15
 8004c54:	08004d15 	.word	0x08004d15
 8004c58:	08004d15 	.word	0x08004d15
 8004c5c:	08004d15 	.word	0x08004d15
 8004c60:	08004d15 	.word	0x08004d15
 8004c64:	08004d15 	.word	0x08004d15
 8004c68:	08004ced 	.word	0x08004ced
 8004c6c:	08004d15 	.word	0x08004d15
 8004c70:	08004d15 	.word	0x08004d15
 8004c74:	08004d15 	.word	0x08004d15
 8004c78:	08004d15 	.word	0x08004d15
 8004c7c:	08004d15 	.word	0x08004d15
 8004c80:	08004d15 	.word	0x08004d15
 8004c84:	08004d15 	.word	0x08004d15
 8004c88:	08004d01 	.word	0x08004d01
 8004c8c:	08004d15 	.word	0x08004d15
 8004c90:	08004d15 	.word	0x08004d15
 8004c94:	08004d15 	.word	0x08004d15
 8004c98:	08004d15 	.word	0x08004d15
 8004c9c:	08004d15 	.word	0x08004d15
 8004ca0:	08004d15 	.word	0x08004d15
 8004ca4:	08004d15 	.word	0x08004d15
 8004ca8:	08004d1d 	.word	0x08004d1d
 8004cac:	08004d15 	.word	0x08004d15
 8004cb0:	08004d15 	.word	0x08004d15
 8004cb4:	08004d15 	.word	0x08004d15
 8004cb8:	08004d15 	.word	0x08004d15
 8004cbc:	08004d15 	.word	0x08004d15
 8004cc0:	08004d15 	.word	0x08004d15
 8004cc4:	08004d15 	.word	0x08004d15
 8004cc8:	08004d1d 	.word	0x08004d1d
 8004ccc:	08004d15 	.word	0x08004d15
 8004cd0:	08004d15 	.word	0x08004d15
 8004cd4:	08004d15 	.word	0x08004d15
 8004cd8:	08004d15 	.word	0x08004d15
 8004cdc:	08004d15 	.word	0x08004d15
 8004ce0:	08004d15 	.word	0x08004d15
 8004ce4:	08004d15 	.word	0x08004d15
 8004ce8:	08004d1d 	.word	0x08004d1d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f004 fe4c 	bl	8009990 <RCCEx_PLL2_Config>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8004cfe:	e00e      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d04:	3330      	adds	r3, #48	@ 0x30
 8004d06:	4618      	mov	r0, r3
 8004d08:	f004 feda 	bl	8009ac0 <RCCEx_PLL3_Config>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8004d12:	e004      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004d1a:	e000      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10c      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004d26:	4b5f      	ldr	r3, [pc, #380]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004d28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004d2c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004d30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d36:	4a5b      	ldr	r2, [pc, #364]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004d38:	430b      	orrs	r3, r1
 8004d3a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004d3e:	e003      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d40:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d44:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d50:	f002 0304 	and.w	r3, r2, #4
 8004d54:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8004d5e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8004d62:	460b      	mov	r3, r1
 8004d64:	4313      	orrs	r3, r2
 8004d66:	d04e      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004d68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d6e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004d72:	d02c      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004d74:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004d78:	d825      	bhi.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004d7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d7e:	d028      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d84:	d81f      	bhi.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004d86:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d88:	d025      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004d8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d8c:	d81b      	bhi.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004d8e:	2b80      	cmp	r3, #128	@ 0x80
 8004d90:	d00f      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004d92:	2b80      	cmp	r3, #128	@ 0x80
 8004d94:	d817      	bhi.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d01f      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004d9a:	2b40      	cmp	r3, #64	@ 0x40
 8004d9c:	d113      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004da2:	3308      	adds	r3, #8
 8004da4:	4618      	mov	r0, r3
 8004da6:	f004 fdf3 	bl	8009990 <RCCEx_PLL2_Config>
 8004daa:	4603      	mov	r3, r0
 8004dac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004db0:	e014      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004db2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004db6:	3330      	adds	r3, #48	@ 0x30
 8004db8:	4618      	mov	r0, r3
 8004dba:	f004 fe81 	bl	8009ac0 <RCCEx_PLL3_Config>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004dc4:	e00a      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004dcc:	e006      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004dce:	bf00      	nop
 8004dd0:	e004      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004dd2:	bf00      	nop
 8004dd4:	e002      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004dd6:	bf00      	nop
 8004dd8:	e000      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ddc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10c      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004de4:	4b2f      	ldr	r3, [pc, #188]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004de6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004dea:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004dee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004df2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004df4:	4a2b      	ldr	r2, [pc, #172]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004df6:	430b      	orrs	r3, r1
 8004df8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004dfc:	e003      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dfe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e02:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0e:	f002 0308 	and.w	r3, r2, #8
 8004e12:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004e16:	2300      	movs	r3, #0
 8004e18:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8004e1c:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8004e20:	460b      	mov	r3, r1
 8004e22:	4313      	orrs	r3, r2
 8004e24:	d056      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8004e26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e2c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004e30:	d031      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004e32:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004e36:	d82a      	bhi.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004e38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e3c:	d02d      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004e3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e42:	d824      	bhi.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004e44:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004e48:	d029      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004e4a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004e4e:	d81e      	bhi.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004e50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e54:	d011      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e5a:	d818      	bhi.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d023      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e64:	d113      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e6a:	3308      	adds	r3, #8
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f004 fd8f 	bl	8009990 <RCCEx_PLL2_Config>
 8004e72:	4603      	mov	r3, r0
 8004e74:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004e78:	e017      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e7e:	3330      	adds	r3, #48	@ 0x30
 8004e80:	4618      	mov	r0, r3
 8004e82:	f004 fe1d 	bl	8009ac0 <RCCEx_PLL3_Config>
 8004e86:	4603      	mov	r3, r0
 8004e88:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004e8c:	e00d      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e94:	e009      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004e96:	bf00      	nop
 8004e98:	e007      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004e9a:	bf00      	nop
 8004e9c:	e005      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004e9e:	bf00      	nop
 8004ea0:	e003      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004ea2:	bf00      	nop
 8004ea4:	44020c00 	.word	0x44020c00
        break;
 8004ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eaa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10c      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004eb2:	4bbb      	ldr	r3, [pc, #748]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004eb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004eb8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004ebc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ec0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ec2:	4ab7      	ldr	r2, [pc, #732]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004eca:	e003      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ecc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ed0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ed4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	f002 0310 	and.w	r3, r2, #16
 8004ee0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8004eea:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	d053      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004ef4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ef8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004efa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004efe:	d031      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004f00:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004f04:	d82a      	bhi.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004f06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f0a:	d02d      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004f0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f10:	d824      	bhi.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004f12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f16:	d029      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004f18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f1c:	d81e      	bhi.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004f1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f22:	d011      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004f24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f28:	d818      	bhi.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d020      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004f2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f32:	d113      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f38:	3308      	adds	r3, #8
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f004 fd28 	bl	8009990 <RCCEx_PLL2_Config>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8004f46:	e014      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f4c:	3330      	adds	r3, #48	@ 0x30
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f004 fdb6 	bl	8009ac0 <RCCEx_PLL3_Config>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8004f5a:	e00a      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004f62:	e006      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004f64:	bf00      	nop
 8004f66:	e004      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004f68:	bf00      	nop
 8004f6a:	e002      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004f6c:	bf00      	nop
 8004f6e:	e000      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10c      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004f7a:	4b89      	ldr	r3, [pc, #548]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004f7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004f80:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004f84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f8a:	4a85      	ldr	r2, [pc, #532]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004f92:	e003      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f94:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f98:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa4:	f002 0320 	and.w	r3, r2, #32
 8004fa8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004fac:	2300      	movs	r3, #0
 8004fae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8004fb2:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	d053      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004fbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004fc6:	d031      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004fc8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004fcc:	d82a      	bhi.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004fce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fd2:	d02d      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004fd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fd8:	d824      	bhi.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004fda:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004fde:	d029      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004fe0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004fe4:	d81e      	bhi.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004fe6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fea:	d011      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ff0:	d818      	bhi.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d020      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004ff6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ffa:	d113      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ffc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005000:	3308      	adds	r3, #8
 8005002:	4618      	mov	r0, r3
 8005004:	f004 fcc4 	bl	8009990 <RCCEx_PLL2_Config>
 8005008:	4603      	mov	r3, r0
 800500a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800500e:	e014      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005010:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005014:	3330      	adds	r3, #48	@ 0x30
 8005016:	4618      	mov	r0, r3
 8005018:	f004 fd52 	bl	8009ac0 <RCCEx_PLL3_Config>
 800501c:	4603      	mov	r3, r0
 800501e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005022:	e00a      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800502a:	e006      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800502c:	bf00      	nop
 800502e:	e004      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005030:	bf00      	nop
 8005032:	e002      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005034:	bf00      	nop
 8005036:	e000      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800503a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10c      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005042:	4b57      	ldr	r3, [pc, #348]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005044:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005048:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 800504c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005052:	4a53      	ldr	r2, [pc, #332]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005054:	430b      	orrs	r3, r1
 8005056:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800505a:	e003      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005060:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005064:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005070:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005074:	2300      	movs	r3, #0
 8005076:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800507a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 800507e:	460b      	mov	r3, r1
 8005080:	4313      	orrs	r3, r2
 8005082:	d053      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8005084:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800508a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800508e:	d031      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005090:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005094:	d82a      	bhi.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005096:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800509a:	d02d      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800509c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050a0:	d824      	bhi.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80050a2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80050a6:	d029      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80050a8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80050ac:	d81e      	bhi.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80050ae:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80050b2:	d011      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80050b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80050b8:	d818      	bhi.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d020      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80050be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80050c2:	d113      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050c8:	3308      	adds	r3, #8
 80050ca:	4618      	mov	r0, r3
 80050cc:	f004 fc60 	bl	8009990 <RCCEx_PLL2_Config>
 80050d0:	4603      	mov	r3, r0
 80050d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80050d6:	e014      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050dc:	3330      	adds	r3, #48	@ 0x30
 80050de:	4618      	mov	r0, r3
 80050e0:	f004 fcee 	bl	8009ac0 <RCCEx_PLL3_Config>
 80050e4:	4603      	mov	r3, r0
 80050e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80050ea:	e00a      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80050f2:	e006      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80050f4:	bf00      	nop
 80050f6:	e004      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80050f8:	bf00      	nop
 80050fa:	e002      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80050fc:	bf00      	nop
 80050fe:	e000      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005102:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10c      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800510a:	4b25      	ldr	r3, [pc, #148]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800510c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005110:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8005114:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800511a:	4a21      	ldr	r2, [pc, #132]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800511c:	430b      	orrs	r3, r1
 800511e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005122:	e003      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005124:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005128:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800512c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005138:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800513c:	2300      	movs	r3, #0
 800513e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005142:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8005146:	460b      	mov	r3, r1
 8005148:	4313      	orrs	r3, r2
 800514a:	d055      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800514c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005150:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005152:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005156:	d033      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8005158:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800515c:	d82c      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800515e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005162:	d02f      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005164:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005168:	d826      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800516a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800516e:	d02b      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005170:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005174:	d820      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005176:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800517a:	d013      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800517c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005180:	d81a      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005182:	2b00      	cmp	r3, #0
 8005184:	d022      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8005186:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800518a:	d115      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800518c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005190:	3308      	adds	r3, #8
 8005192:	4618      	mov	r0, r3
 8005194:	f004 fbfc 	bl	8009990 <RCCEx_PLL2_Config>
 8005198:	4603      	mov	r3, r0
 800519a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800519e:	e016      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80051a0:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051a8:	3330      	adds	r3, #48	@ 0x30
 80051aa:	4618      	mov	r0, r3
 80051ac:	f004 fc88 	bl	8009ac0 <RCCEx_PLL3_Config>
 80051b0:	4603      	mov	r3, r0
 80051b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80051b6:	e00a      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80051be:	e006      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80051c0:	bf00      	nop
 80051c2:	e004      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80051c4:	bf00      	nop
 80051c6:	e002      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80051c8:	bf00      	nop
 80051ca:	e000      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80051cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10c      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80051d6:	4bbb      	ldr	r3, [pc, #748]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80051d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80051dc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80051e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051e6:	4ab7      	ldr	r2, [pc, #732]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80051e8:	430b      	orrs	r3, r1
 80051ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80051ee:	e003      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051f4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80051f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005200:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005204:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005208:	2300      	movs	r3, #0
 800520a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800520e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005212:	460b      	mov	r3, r1
 8005214:	4313      	orrs	r3, r2
 8005216:	d053      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8005218:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800521c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800521e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005222:	d031      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8005224:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005228:	d82a      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800522a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800522e:	d02d      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8005230:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005234:	d824      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005236:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800523a:	d029      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x750>
 800523c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005240:	d81e      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005242:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005246:	d011      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8005248:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800524c:	d818      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800524e:	2b00      	cmp	r3, #0
 8005250:	d020      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8005252:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005256:	d113      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005258:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800525c:	3308      	adds	r3, #8
 800525e:	4618      	mov	r0, r3
 8005260:	f004 fb96 	bl	8009990 <RCCEx_PLL2_Config>
 8005264:	4603      	mov	r3, r0
 8005266:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800526a:	e014      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800526c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005270:	3330      	adds	r3, #48	@ 0x30
 8005272:	4618      	mov	r0, r3
 8005274:	f004 fc24 	bl	8009ac0 <RCCEx_PLL3_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800527e:	e00a      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005286:	e006      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005288:	bf00      	nop
 800528a:	e004      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800528c:	bf00      	nop
 800528e:	e002      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005290:	bf00      	nop
 8005292:	e000      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005296:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10c      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800529e:	4b89      	ldr	r3, [pc, #548]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80052a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80052a4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80052a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052ae:	4a85      	ldr	r2, [pc, #532]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80052b0:	430b      	orrs	r3, r1
 80052b2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80052b6:	e003      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80052bc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80052c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c8:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80052cc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80052d0:	2300      	movs	r3, #0
 80052d2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80052d6:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80052da:	460b      	mov	r3, r1
 80052dc:	4313      	orrs	r3, r2
 80052de:	d055      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80052e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052e8:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80052ec:	d031      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x812>
 80052ee:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80052f2:	d82a      	bhi.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80052f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052f8:	d02d      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80052fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052fe:	d824      	bhi.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005300:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005304:	d029      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005306:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800530a:	d81e      	bhi.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800530c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005310:	d011      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8005312:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005316:	d818      	bhi.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005318:	2b00      	cmp	r3, #0
 800531a:	d020      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800531c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005320:	d113      	bne.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005322:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005326:	3308      	adds	r3, #8
 8005328:	4618      	mov	r0, r3
 800532a:	f004 fb31 	bl	8009990 <RCCEx_PLL2_Config>
 800532e:	4603      	mov	r3, r0
 8005330:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005334:	e014      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005336:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800533a:	3330      	adds	r3, #48	@ 0x30
 800533c:	4618      	mov	r0, r3
 800533e:	f004 fbbf 	bl	8009ac0 <RCCEx_PLL3_Config>
 8005342:	4603      	mov	r3, r0
 8005344:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005348:	e00a      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005350:	e006      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005352:	bf00      	nop
 8005354:	e004      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005356:	bf00      	nop
 8005358:	e002      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800535a:	bf00      	nop
 800535c:	e000      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800535e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005360:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10d      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8005368:	4b56      	ldr	r3, [pc, #344]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800536a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800536e:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8005372:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800537a:	4a52      	ldr	r2, [pc, #328]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800537c:	430b      	orrs	r3, r1
 800537e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005382:	e003      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005384:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005388:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800538c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005394:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005398:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800539c:	2300      	movs	r3, #0
 800539e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80053a2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80053a6:	460b      	mov	r3, r1
 80053a8:	4313      	orrs	r3, r2
 80053aa:	d044      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80053ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053b4:	2b05      	cmp	r3, #5
 80053b6:	d823      	bhi.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80053b8:	a201      	add	r2, pc, #4	@ (adr r2, 80053c0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80053ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053be:	bf00      	nop
 80053c0:	08005409 	.word	0x08005409
 80053c4:	080053d9 	.word	0x080053d9
 80053c8:	080053ed 	.word	0x080053ed
 80053cc:	08005409 	.word	0x08005409
 80053d0:	08005409 	.word	0x08005409
 80053d4:	08005409 	.word	0x08005409
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053dc:	3308      	adds	r3, #8
 80053de:	4618      	mov	r0, r3
 80053e0:	f004 fad6 	bl	8009990 <RCCEx_PLL2_Config>
 80053e4:	4603      	mov	r3, r0
 80053e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80053ea:	e00e      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053f0:	3330      	adds	r3, #48	@ 0x30
 80053f2:	4618      	mov	r0, r3
 80053f4:	f004 fb64 	bl	8009ac0 <RCCEx_PLL3_Config>
 80053f8:	4603      	mov	r3, r0
 80053fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80053fe:	e004      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005406:	e000      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8005408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800540a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10d      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8005412:	4b2c      	ldr	r3, [pc, #176]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005414:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005418:	f023 0107 	bic.w	r1, r3, #7
 800541c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005420:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005424:	4a27      	ldr	r2, [pc, #156]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005426:	430b      	orrs	r3, r1
 8005428:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800542c:	e003      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005432:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8005436:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005442:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005446:	2300      	movs	r3, #0
 8005448:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800544c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005450:	460b      	mov	r3, r1
 8005452:	4313      	orrs	r3, r2
 8005454:	d04f      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8005456:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800545a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800545e:	2b50      	cmp	r3, #80	@ 0x50
 8005460:	d029      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005462:	2b50      	cmp	r3, #80	@ 0x50
 8005464:	d823      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005466:	2b40      	cmp	r3, #64	@ 0x40
 8005468:	d027      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800546a:	2b40      	cmp	r3, #64	@ 0x40
 800546c:	d81f      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800546e:	2b30      	cmp	r3, #48	@ 0x30
 8005470:	d025      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8005472:	2b30      	cmp	r3, #48	@ 0x30
 8005474:	d81b      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005476:	2b20      	cmp	r3, #32
 8005478:	d00f      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800547a:	2b20      	cmp	r3, #32
 800547c:	d817      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800547e:	2b00      	cmp	r3, #0
 8005480:	d022      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005482:	2b10      	cmp	r3, #16
 8005484:	d113      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005486:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800548a:	3308      	adds	r3, #8
 800548c:	4618      	mov	r0, r3
 800548e:	f004 fa7f 	bl	8009990 <RCCEx_PLL2_Config>
 8005492:	4603      	mov	r3, r0
 8005494:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005498:	e017      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800549a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800549e:	3330      	adds	r3, #48	@ 0x30
 80054a0:	4618      	mov	r0, r3
 80054a2:	f004 fb0d 	bl	8009ac0 <RCCEx_PLL3_Config>
 80054a6:	4603      	mov	r3, r0
 80054a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80054ac:	e00d      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80054b4:	e009      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80054b6:	bf00      	nop
 80054b8:	e007      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80054ba:	bf00      	nop
 80054bc:	e005      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80054be:	bf00      	nop
 80054c0:	e003      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80054c2:	bf00      	nop
 80054c4:	44020c00 	.word	0x44020c00
        break;
 80054c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10d      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80054d2:	4baf      	ldr	r3, [pc, #700]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80054d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80054d8:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80054dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e4:	4aaa      	ldr	r2, [pc, #680]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80054e6:	430b      	orrs	r3, r1
 80054e8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80054ec:	e003      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054f2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005502:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005506:	2300      	movs	r3, #0
 8005508:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800550c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005510:	460b      	mov	r3, r1
 8005512:	4313      	orrs	r3, r2
 8005514:	d055      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8005516:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800551a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800551e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005522:	d031      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8005524:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005528:	d82a      	bhi.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800552a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800552e:	d02d      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005530:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005534:	d824      	bhi.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005536:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800553a:	d029      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800553c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005540:	d81e      	bhi.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005542:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005546:	d011      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8005548:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800554c:	d818      	bhi.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800554e:	2b00      	cmp	r3, #0
 8005550:	d020      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8005552:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005556:	d113      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005558:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800555c:	3308      	adds	r3, #8
 800555e:	4618      	mov	r0, r3
 8005560:	f004 fa16 	bl	8009990 <RCCEx_PLL2_Config>
 8005564:	4603      	mov	r3, r0
 8005566:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800556a:	e014      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800556c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005570:	3330      	adds	r3, #48	@ 0x30
 8005572:	4618      	mov	r0, r3
 8005574:	f004 faa4 	bl	8009ac0 <RCCEx_PLL3_Config>
 8005578:	4603      	mov	r3, r0
 800557a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800557e:	e00a      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005586:	e006      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005588:	bf00      	nop
 800558a:	e004      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800558c:	bf00      	nop
 800558e:	e002      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005590:	bf00      	nop
 8005592:	e000      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005596:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10d      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800559e:	4b7c      	ldr	r3, [pc, #496]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80055a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055a4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80055a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055b0:	4a77      	ldr	r2, [pc, #476]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80055b2:	430b      	orrs	r3, r1
 80055b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80055b8:	e003      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80055be:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ca:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80055ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055d2:	2300      	movs	r3, #0
 80055d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80055d8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80055dc:	460b      	mov	r3, r1
 80055de:	4313      	orrs	r3, r2
 80055e0:	d03d      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80055e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80055ee:	d01b      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 80055f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80055f4:	d814      	bhi.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80055f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055fa:	d017      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80055fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005600:	d80e      	bhi.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005602:	2b00      	cmp	r3, #0
 8005604:	d014      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8005606:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800560a:	d109      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800560c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005610:	3330      	adds	r3, #48	@ 0x30
 8005612:	4618      	mov	r0, r3
 8005614:	f004 fa54 	bl	8009ac0 <RCCEx_PLL3_Config>
 8005618:	4603      	mov	r3, r0
 800561a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800561e:	e008      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005626:	e004      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005628:	bf00      	nop
 800562a:	e002      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800562c:	bf00      	nop
 800562e:	e000      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005632:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10d      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800563a:	4b55      	ldr	r3, [pc, #340]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800563c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005640:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005644:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800564c:	4a50      	ldr	r2, [pc, #320]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800564e:	430b      	orrs	r3, r1
 8005650:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005654:	e003      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005656:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800565a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800565e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005666:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800566a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800566e:	2300      	movs	r3, #0
 8005670:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005674:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005678:	460b      	mov	r3, r1
 800567a:	4313      	orrs	r3, r2
 800567c:	d03d      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800567e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005682:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005686:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800568a:	d01b      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800568c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005690:	d814      	bhi.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005692:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005696:	d017      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8005698:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800569c:	d80e      	bhi.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d014      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80056a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80056a6:	d109      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056ac:	3330      	adds	r3, #48	@ 0x30
 80056ae:	4618      	mov	r0, r3
 80056b0:	f004 fa06 	bl	8009ac0 <RCCEx_PLL3_Config>
 80056b4:	4603      	mov	r3, r0
 80056b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80056ba:	e008      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80056c2:	e004      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80056c4:	bf00      	nop
 80056c6:	e002      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80056c8:	bf00      	nop
 80056ca:	e000      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80056cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10d      	bne.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80056d6:	4b2e      	ldr	r3, [pc, #184]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80056d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056dc:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80056e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056e8:	4a29      	ldr	r2, [pc, #164]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80056ea:	430b      	orrs	r3, r1
 80056ec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80056f0:	e003      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80056f6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005702:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005706:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800570a:	2300      	movs	r3, #0
 800570c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005710:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005714:	460b      	mov	r3, r1
 8005716:	4313      	orrs	r3, r2
 8005718:	d040      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800571a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800571e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005722:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005726:	d01b      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8005728:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800572c:	d814      	bhi.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800572e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005732:	d017      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005734:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005738:	d80e      	bhi.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d014      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800573e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005742:	d109      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005744:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005748:	3330      	adds	r3, #48	@ 0x30
 800574a:	4618      	mov	r0, r3
 800574c:	f004 f9b8 	bl	8009ac0 <RCCEx_PLL3_Config>
 8005750:	4603      	mov	r3, r0
 8005752:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8005756:	e008      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800575e:	e004      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005760:	bf00      	nop
 8005762:	e002      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005764:	bf00      	nop
 8005766:	e000      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800576a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800576e:	2b00      	cmp	r3, #0
 8005770:	d110      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005772:	4b07      	ldr	r3, [pc, #28]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005774:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005778:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800577c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005780:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005784:	4a02      	ldr	r2, [pc, #8]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005786:	430b      	orrs	r3, r1
 8005788:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800578c:	e006      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800578e:	bf00      	nop
 8005790:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005794:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005798:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800579c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a4:	2100      	movs	r1, #0
 80057a6:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80057aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80057b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4313      	orrs	r3, r2
 80057ba:	d03d      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80057bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057c4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80057c8:	d01b      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80057ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80057ce:	d814      	bhi.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80057d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057d4:	d017      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80057d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057da:	d80e      	bhi.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d014      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80057e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057e4:	d109      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057ea:	3330      	adds	r3, #48	@ 0x30
 80057ec:	4618      	mov	r0, r3
 80057ee:	f004 f967 	bl	8009ac0 <RCCEx_PLL3_Config>
 80057f2:	4603      	mov	r3, r0
 80057f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 80057f8:	e008      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005800:	e004      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005802:	bf00      	nop
 8005804:	e002      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005806:	bf00      	nop
 8005808:	e000      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800580a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800580c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10d      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005814:	4bbe      	ldr	r3, [pc, #760]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005816:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800581a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800581e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005822:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005826:	4aba      	ldr	r2, [pc, #744]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005828:	430b      	orrs	r3, r1
 800582a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800582e:	e003      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005830:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005834:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005838:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800583c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005840:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005844:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005848:	2300      	movs	r3, #0
 800584a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800584e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005852:	460b      	mov	r3, r1
 8005854:	4313      	orrs	r3, r2
 8005856:	d035      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005858:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800585c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005860:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005864:	d015      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8005866:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800586a:	d80e      	bhi.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800586c:	2b00      	cmp	r3, #0
 800586e:	d012      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8005870:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005874:	d109      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005876:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800587a:	3330      	adds	r3, #48	@ 0x30
 800587c:	4618      	mov	r0, r3
 800587e:	f004 f91f 	bl	8009ac0 <RCCEx_PLL3_Config>
 8005882:	4603      	mov	r3, r0
 8005884:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005888:	e006      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005890:	e002      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005892:	bf00      	nop
 8005894:	e000      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005898:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10d      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80058a0:	4b9b      	ldr	r3, [pc, #620]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80058a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058a6:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80058aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80058b2:	4a97      	ldr	r2, [pc, #604]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80058b4:	430b      	orrs	r3, r1
 80058b6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80058ba:	e003      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058bc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80058c0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80058c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058cc:	2100      	movs	r1, #0
 80058ce:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 80058d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058da:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058de:	460b      	mov	r3, r1
 80058e0:	4313      	orrs	r3, r2
 80058e2:	d00e      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80058e4:	4b8a      	ldr	r3, [pc, #552]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	4a89      	ldr	r2, [pc, #548]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80058ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80058ee:	61d3      	str	r3, [r2, #28]
 80058f0:	4b87      	ldr	r3, [pc, #540]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80058f2:	69d9      	ldr	r1, [r3, #28]
 80058f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058f8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80058fc:	4a84      	ldr	r2, [pc, #528]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80058fe:	430b      	orrs	r3, r1
 8005900:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005902:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800590e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005912:	2300      	movs	r3, #0
 8005914:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005918:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800591c:	460b      	mov	r3, r1
 800591e:	4313      	orrs	r3, r2
 8005920:	d055      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005922:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005926:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800592a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800592e:	d031      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8005930:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005934:	d82a      	bhi.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800593a:	d02d      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800593c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005940:	d824      	bhi.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005942:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005946:	d029      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005948:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800594c:	d81e      	bhi.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800594e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005952:	d011      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8005954:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005958:	d818      	bhi.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d020      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800595e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005962:	d113      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005964:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005968:	3308      	adds	r3, #8
 800596a:	4618      	mov	r0, r3
 800596c:	f004 f810 	bl	8009990 <RCCEx_PLL2_Config>
 8005970:	4603      	mov	r3, r0
 8005972:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005976:	e014      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005978:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800597c:	3330      	adds	r3, #48	@ 0x30
 800597e:	4618      	mov	r0, r3
 8005980:	f004 f89e 	bl	8009ac0 <RCCEx_PLL3_Config>
 8005984:	4603      	mov	r3, r0
 8005986:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800598a:	e00a      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005992:	e006      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005994:	bf00      	nop
 8005996:	e004      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005998:	bf00      	nop
 800599a:	e002      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800599c:	bf00      	nop
 800599e:	e000      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80059a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10d      	bne.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80059aa:	4b59      	ldr	r3, [pc, #356]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80059ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80059b0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80059b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059bc:	4a54      	ldr	r2, [pc, #336]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80059be:	430b      	orrs	r3, r1
 80059c0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80059c4:	e003      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059ca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80059ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80059da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059de:	2300      	movs	r3, #0
 80059e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059e4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80059e8:	460b      	mov	r3, r1
 80059ea:	4313      	orrs	r3, r2
 80059ec:	d055      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80059ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80059f6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80059fa:	d031      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80059fc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005a00:	d82a      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005a02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a06:	d02d      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8005a08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a0c:	d824      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005a0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a12:	d029      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8005a14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a18:	d81e      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005a1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a1e:	d011      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8005a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a24:	d818      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d020      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005a2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a2e:	d113      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a34:	3308      	adds	r3, #8
 8005a36:	4618      	mov	r0, r3
 8005a38:	f003 ffaa 	bl	8009990 <RCCEx_PLL2_Config>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005a42:	e014      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a48:	3330      	adds	r3, #48	@ 0x30
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f004 f838 	bl	8009ac0 <RCCEx_PLL3_Config>
 8005a50:	4603      	mov	r3, r0
 8005a52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005a56:	e00a      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005a5e:	e006      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005a60:	bf00      	nop
 8005a62:	e004      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005a64:	bf00      	nop
 8005a66:	e002      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005a68:	bf00      	nop
 8005a6a:	e000      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10d      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005a76:	4b26      	ldr	r3, [pc, #152]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005a78:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005a7c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005a80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005a88:	4a21      	ldr	r2, [pc, #132]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005a8a:	430b      	orrs	r3, r1
 8005a8c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005a90:	e003      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a96:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8005a9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ab0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	d057      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8005aba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005abe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005ac2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ac6:	d033      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8005ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005acc:	d82c      	bhi.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005ace:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ad2:	d02f      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8005ad4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ad8:	d826      	bhi.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005ada:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ade:	d02b      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8005ae0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ae4:	d820      	bhi.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005ae6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005aea:	d013      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005aec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005af0:	d81a      	bhi.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d022      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8005af6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005afa:	d115      	bne.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005afc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b00:	3308      	adds	r3, #8
 8005b02:	4618      	mov	r0, r3
 8005b04:	f003 ff44 	bl	8009990 <RCCEx_PLL2_Config>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005b0e:	e016      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8005b10:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b18:	3330      	adds	r3, #48	@ 0x30
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f003 ffd0 	bl	8009ac0 <RCCEx_PLL3_Config>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005b26:	e00a      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b2e:	e006      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005b30:	bf00      	nop
 8005b32:	e004      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005b34:	bf00      	nop
 8005b36:	e002      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005b38:	bf00      	nop
 8005b3a:	e000      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005b3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10d      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8005b46:	4bbb      	ldr	r3, [pc, #748]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005b48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005b4c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005b50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b58:	4ab6      	ldr	r2, [pc, #728]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005b5a:	430b      	orrs	r3, r1
 8005b5c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005b60:	e003      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b62:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b66:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8005b6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	2100      	movs	r1, #0
 8005b74:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8005b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005b80:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4313      	orrs	r3, r2
 8005b88:	d055      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8005b8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b92:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8005b96:	d031      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005b98:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8005b9c:	d82a      	bhi.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005b9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ba2:	d02d      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8005ba4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ba8:	d824      	bhi.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005baa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005bae:	d029      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8005bb0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005bb4:	d81e      	bhi.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005bb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bba:	d011      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8005bbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bc0:	d818      	bhi.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d020      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8005bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bca:	d113      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005bcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bd0:	3308      	adds	r3, #8
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f003 fedc 	bl	8009990 <RCCEx_PLL2_Config>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005bde:	e014      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005be0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005be4:	3330      	adds	r3, #48	@ 0x30
 8005be6:	4618      	mov	r0, r3
 8005be8:	f003 ff6a 	bl	8009ac0 <RCCEx_PLL3_Config>
 8005bec:	4603      	mov	r3, r0
 8005bee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005bf2:	e00a      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005bfa:	e006      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005bfc:	bf00      	nop
 8005bfe:	e004      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005c00:	bf00      	nop
 8005c02:	e002      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005c04:	bf00      	nop
 8005c06:	e000      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10d      	bne.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8005c12:	4b88      	ldr	r3, [pc, #544]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005c14:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005c18:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8005c1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c24:	4a83      	ldr	r2, [pc, #524]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005c26:	430b      	orrs	r3, r1
 8005c28:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005c2c:	e003      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c32:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8005c36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3e:	2100      	movs	r1, #0
 8005c40:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8005c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c4c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005c50:	460b      	mov	r3, r1
 8005c52:	4313      	orrs	r3, r2
 8005c54:	d055      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8005c56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c5e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005c62:	d031      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8005c64:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005c68:	d82a      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005c6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c6e:	d02d      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8005c70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c74:	d824      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005c76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c7a:	d029      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8005c7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c80:	d81e      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005c82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c86:	d011      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8005c88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c8c:	d818      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d020      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8005c92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c96:	d113      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f003 fe76 	bl	8009990 <RCCEx_PLL2_Config>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005caa:	e014      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005cac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cb0:	3330      	adds	r3, #48	@ 0x30
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f003 ff04 	bl	8009ac0 <RCCEx_PLL3_Config>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005cbe:	e00a      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005cc6:	e006      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005cc8:	bf00      	nop
 8005cca:	e004      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005ccc:	bf00      	nop
 8005cce:	e002      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005cd0:	bf00      	nop
 8005cd2:	e000      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005cd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cd6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10d      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8005cde:	4b55      	ldr	r3, [pc, #340]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005ce0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005ce4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005ce8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cf0:	4a50      	ldr	r2, [pc, #320]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005cf2:	430b      	orrs	r3, r1
 8005cf4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005cf8:	e003      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005cfe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8005d02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8005d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d18:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	d055      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8005d22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d26:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005d2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d2e:	d031      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8005d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d34:	d82a      	bhi.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d3a:	d02d      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8005d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d40:	d824      	bhi.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005d42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d46:	d029      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8005d48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d4c:	d81e      	bhi.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005d4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d52:	d011      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8005d54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d58:	d818      	bhi.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d020      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8005d5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d62:	d113      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d68:	3308      	adds	r3, #8
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f003 fe10 	bl	8009990 <RCCEx_PLL2_Config>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8005d76:	e014      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d7c:	3330      	adds	r3, #48	@ 0x30
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f003 fe9e 	bl	8009ac0 <RCCEx_PLL3_Config>
 8005d84:	4603      	mov	r3, r0
 8005d86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8005d8a:	e00a      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d92:	e006      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005d94:	bf00      	nop
 8005d96:	e004      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005d98:	bf00      	nop
 8005d9a:	e002      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005d9c:	bf00      	nop
 8005d9e:	e000      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005da2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10d      	bne.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8005daa:	4b22      	ldr	r3, [pc, #136]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005dac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005db0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005db4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005db8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005dbe:	430b      	orrs	r3, r1
 8005dc0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005dc4:	e003      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005dca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005dce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005dda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005dde:	2300      	movs	r3, #0
 8005de0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005de4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005de8:	460b      	mov	r3, r1
 8005dea:	4313      	orrs	r3, r2
 8005dec:	d055      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005dee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005df2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005df6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005dfa:	d035      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8005dfc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e00:	d82e      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005e02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e06:	d031      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8005e08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e0c:	d828      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005e0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e12:	d01b      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8005e14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e18:	d822      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8005e1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e22:	d009      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8005e24:	e01c      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e26:	4b03      	ldr	r3, [pc, #12]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2a:	4a02      	ldr	r2, [pc, #8]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e30:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005e32:	e01c      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8005e34:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f003 fda6 	bl	8009990 <RCCEx_PLL2_Config>
 8005e44:	4603      	mov	r3, r0
 8005e46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005e4a:	e010      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e50:	3330      	adds	r3, #48	@ 0x30
 8005e52:	4618      	mov	r0, r3
 8005e54:	f003 fe34 	bl	8009ac0 <RCCEx_PLL3_Config>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005e5e:	e006      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005e66:	e002      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005e68:	bf00      	nop
 8005e6a:	e000      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10d      	bne.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005e76:	4bc3      	ldr	r3, [pc, #780]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005e78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e7c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005e80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005e88:	4abe      	ldr	r2, [pc, #760]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005e8a:	430b      	orrs	r3, r1
 8005e8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005e90:	e003      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e96:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8005e9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea2:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005ea6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005eb0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	d051      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005eba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ebe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005ec2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ec6:	d033      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005ec8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ecc:	d82c      	bhi.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005ece:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005ed2:	d02d      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005ed4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005ed8:	d826      	bhi.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005eda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ede:	d019      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8005ee0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ee4:	d820      	bhi.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8005eea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005eee:	d007      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8005ef0:	e01a      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ef2:	4ba4      	ldr	r3, [pc, #656]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef6:	4aa3      	ldr	r2, [pc, #652]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005efc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005efe:	e018      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f04:	3308      	adds	r3, #8
 8005f06:	4618      	mov	r0, r3
 8005f08:	f003 fd42 	bl	8009990 <RCCEx_PLL2_Config>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005f12:	e00e      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f18:	3330      	adds	r3, #48	@ 0x30
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f003 fdd0 	bl	8009ac0 <RCCEx_PLL3_Config>
 8005f20:	4603      	mov	r3, r0
 8005f22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005f26:	e004      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005f2e:	e000      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8005f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f32:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10d      	bne.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005f3a:	4b92      	ldr	r3, [pc, #584]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005f3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f40:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8005f44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f48:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005f4c:	4a8d      	ldr	r2, [pc, #564]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005f4e:	430b      	orrs	r3, r1
 8005f50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005f54:	e003      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f5a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005f5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f66:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005f6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f70:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005f74:	460b      	mov	r3, r1
 8005f76:	4313      	orrs	r3, r2
 8005f78:	d032      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005f7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f7e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005f82:	2b05      	cmp	r3, #5
 8005f84:	d80f      	bhi.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d211      	bcs.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d911      	bls.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d109      	bne.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f96:	3308      	adds	r3, #8
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f003 fcf9 	bl	8009990 <RCCEx_PLL2_Config>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005fa4:	e006      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005fac:	e002      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005fae:	bf00      	nop
 8005fb0:	e000      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fb4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10d      	bne.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005fbc:	4b71      	ldr	r3, [pc, #452]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005fbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005fc2:	f023 0107 	bic.w	r1, r3, #7
 8005fc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005fce:	4a6d      	ldr	r2, [pc, #436]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005fd0:	430b      	orrs	r3, r1
 8005fd2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005fd6:	e003      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005fdc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005fe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe8:	2100      	movs	r1, #0
 8005fea:	6739      	str	r1, [r7, #112]	@ 0x70
 8005fec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ff0:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ff2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	d024      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005ffc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006000:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8006008:	2b08      	cmp	r3, #8
 800600a:	d005      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006012:	e002      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006014:	bf00      	nop
 8006016:	e000      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800601a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10d      	bne.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8006022:	4b58      	ldr	r3, [pc, #352]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006024:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006028:	f023 0108 	bic.w	r1, r3, #8
 800602c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006030:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006034:	4a53      	ldr	r2, [pc, #332]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006036:	430b      	orrs	r3, r1
 8006038:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800603c:	e003      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006042:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006046:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006052:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006054:	2300      	movs	r3, #0
 8006056:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006058:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800605c:	460b      	mov	r3, r1
 800605e:	4313      	orrs	r3, r2
 8006060:	f000 80b9 	beq.w	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006064:	4b48      	ldr	r3, [pc, #288]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006068:	4a47      	ldr	r2, [pc, #284]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800606a:	f043 0301 	orr.w	r3, r3, #1
 800606e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006070:	f7fd fa2a 	bl	80034c8 <HAL_GetTick>
 8006074:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006078:	e00b      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800607a:	f7fd fa25 	bl	80034c8 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d903      	bls.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006090:	e005      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006092:	4b3d      	ldr	r3, [pc, #244]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0ed      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800609e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f040 8093 	bne.w	80061ce <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060a8:	4b36      	ldr	r3, [pc, #216]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80060aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060b2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80060b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d023      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80060be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060c2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80060c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d01b      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060ce:	4b2d      	ldr	r3, [pc, #180]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80060d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060d8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060dc:	4b29      	ldr	r3, [pc, #164]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80060de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060e2:	4a28      	ldr	r2, [pc, #160]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80060e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060ec:	4b25      	ldr	r3, [pc, #148]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80060ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060f2:	4a24      	ldr	r2, [pc, #144]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80060f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060fc:	4a21      	ldr	r2, [pc, #132]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80060fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006102:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006106:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d019      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006112:	f7fd f9d9 	bl	80034c8 <HAL_GetTick>
 8006116:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800611a:	e00d      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800611c:	f7fd f9d4 	bl	80034c8 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006126:	1ad2      	subs	r2, r2, r3
 8006128:	f241 3388 	movw	r3, #5000	@ 0x1388
 800612c:	429a      	cmp	r2, r3
 800612e:	d903      	bls.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8006136:	e006      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006138:	4b12      	ldr	r3, [pc, #72]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800613a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d0ea      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8006146:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800614a:	2b00      	cmp	r3, #0
 800614c:	d13a      	bne.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800614e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006152:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800615a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800615e:	d115      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8006160:	4b08      	ldr	r3, [pc, #32]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006168:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800616c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006170:	091b      	lsrs	r3, r3, #4
 8006172:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006176:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800617a:	4a02      	ldr	r2, [pc, #8]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800617c:	430b      	orrs	r3, r1
 800617e:	61d3      	str	r3, [r2, #28]
 8006180:	e00a      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8006182:	bf00      	nop
 8006184:	44020c00 	.word	0x44020c00
 8006188:	44020800 	.word	0x44020800
 800618c:	4b9f      	ldr	r3, [pc, #636]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	4a9e      	ldr	r2, [pc, #632]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006192:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006196:	61d3      	str	r3, [r2, #28]
 8006198:	4b9c      	ldr	r3, [pc, #624]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800619a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800619e:	4a9b      	ldr	r2, [pc, #620]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80061a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80061a8:	4b98      	ldr	r3, [pc, #608]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80061aa:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80061ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061b2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80061b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ba:	4a94      	ldr	r2, [pc, #592]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80061bc:	430b      	orrs	r3, r1
 80061be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80061c2:	e008      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061c4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061c8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 80061cc:	e003      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061d2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80061d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061de:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80061e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80061e4:	2300      	movs	r3, #0
 80061e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80061e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80061ec:	460b      	mov	r3, r1
 80061ee:	4313      	orrs	r3, r2
 80061f0:	d035      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80061f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061f6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80061fa:	2b30      	cmp	r3, #48	@ 0x30
 80061fc:	d014      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80061fe:	2b30      	cmp	r3, #48	@ 0x30
 8006200:	d80e      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006202:	2b20      	cmp	r3, #32
 8006204:	d012      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8006206:	2b20      	cmp	r3, #32
 8006208:	d80a      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800620a:	2b00      	cmp	r3, #0
 800620c:	d010      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800620e:	2b10      	cmp	r3, #16
 8006210:	d106      	bne.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006212:	4b7e      	ldr	r3, [pc, #504]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006216:	4a7d      	ldr	r2, [pc, #500]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800621c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800621e:	e008      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006226:	e004      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006228:	bf00      	nop
 800622a:	e002      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800622c:	bf00      	nop
 800622e:	e000      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006232:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10d      	bne.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800623a:	4b74      	ldr	r3, [pc, #464]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800623c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006240:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006244:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006248:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800624c:	4a6f      	ldr	r2, [pc, #444]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800624e:	430b      	orrs	r3, r1
 8006250:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006254:	e003      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006256:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800625a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800625e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006266:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800626a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800626c:	2300      	movs	r3, #0
 800626e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006270:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006274:	460b      	mov	r3, r1
 8006276:	4313      	orrs	r3, r2
 8006278:	d033      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800627a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800627e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8006286:	2b40      	cmp	r3, #64	@ 0x40
 8006288:	d007      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800628a:	e010      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800628c:	4b5f      	ldr	r3, [pc, #380]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800628e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006290:	4a5e      	ldr	r2, [pc, #376]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006292:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006296:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006298:	e00d      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800629a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800629e:	3308      	adds	r3, #8
 80062a0:	4618      	mov	r0, r3
 80062a2:	f003 fb75 	bl	8009990 <RCCEx_PLL2_Config>
 80062a6:	4603      	mov	r3, r0
 80062a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80062ac:	e003      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80062b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10d      	bne.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80062be:	4b53      	ldr	r3, [pc, #332]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80062c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80062c4:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80062c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062cc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80062d0:	4a4e      	ldr	r2, [pc, #312]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80062d2:	430b      	orrs	r3, r1
 80062d4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80062d8:	e003      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062de:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80062e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80062ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80062f0:	2300      	movs	r3, #0
 80062f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80062f4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80062f8:	460b      	mov	r3, r1
 80062fa:	4313      	orrs	r3, r2
 80062fc:	d033      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80062fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006302:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800630a:	2b80      	cmp	r3, #128	@ 0x80
 800630c:	d007      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800630e:	e010      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006310:	4b3e      	ldr	r3, [pc, #248]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006314:	4a3d      	ldr	r2, [pc, #244]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006316:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800631a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800631c:	e00d      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800631e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006322:	3308      	adds	r3, #8
 8006324:	4618      	mov	r0, r3
 8006326:	f003 fb33 	bl	8009990 <RCCEx_PLL2_Config>
 800632a:	4603      	mov	r3, r0
 800632c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8006330:	e003      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800633a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10d      	bne.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8006342:	4b32      	ldr	r3, [pc, #200]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006344:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006348:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800634c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006350:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006354:	4a2d      	ldr	r2, [pc, #180]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006356:	430b      	orrs	r3, r1
 8006358:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800635c:	e003      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800635e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006362:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006366:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006372:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006374:	2300      	movs	r3, #0
 8006376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006378:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800637c:	460b      	mov	r3, r1
 800637e:	4313      	orrs	r3, r2
 8006380:	d04a      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8006382:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800638a:	2b04      	cmp	r3, #4
 800638c:	d827      	bhi.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800638e:	a201      	add	r2, pc, #4	@ (adr r2, 8006394 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8006390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006394:	080063a9 	.word	0x080063a9
 8006398:	080063b7 	.word	0x080063b7
 800639c:	080063cb 	.word	0x080063cb
 80063a0:	080063e7 	.word	0x080063e7
 80063a4:	080063e7 	.word	0x080063e7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063a8:	4b18      	ldr	r3, [pc, #96]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80063aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ac:	4a17      	ldr	r2, [pc, #92]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80063ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063b2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80063b4:	e018      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063ba:	3308      	adds	r3, #8
 80063bc:	4618      	mov	r0, r3
 80063be:	f003 fae7 	bl	8009990 <RCCEx_PLL2_Config>
 80063c2:	4603      	mov	r3, r0
 80063c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80063c8:	e00e      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80063ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063ce:	3330      	adds	r3, #48	@ 0x30
 80063d0:	4618      	mov	r0, r3
 80063d2:	f003 fb75 	bl	8009ac0 <RCCEx_PLL3_Config>
 80063d6:	4603      	mov	r3, r0
 80063d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80063dc:	e004      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80063e4:	e000      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80063e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10f      	bne.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80063f0:	4b06      	ldr	r3, [pc, #24]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80063f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063f6:	f023 0107 	bic.w	r1, r3, #7
 80063fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006402:	4a02      	ldr	r2, [pc, #8]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006404:	430b      	orrs	r3, r1
 8006406:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800640a:	e005      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800640c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006410:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006414:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006418:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006420:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006424:	643b      	str	r3, [r7, #64]	@ 0x40
 8006426:	2300      	movs	r3, #0
 8006428:	647b      	str	r3, [r7, #68]	@ 0x44
 800642a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800642e:	460b      	mov	r3, r1
 8006430:	4313      	orrs	r3, r2
 8006432:	f000 8081 	beq.w	8006538 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8006436:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800643a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800643e:	2b20      	cmp	r3, #32
 8006440:	d85f      	bhi.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8006442:	a201      	add	r2, pc, #4	@ (adr r2, 8006448 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8006444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006448:	080064cd 	.word	0x080064cd
 800644c:	08006503 	.word	0x08006503
 8006450:	08006503 	.word	0x08006503
 8006454:	08006503 	.word	0x08006503
 8006458:	08006503 	.word	0x08006503
 800645c:	08006503 	.word	0x08006503
 8006460:	08006503 	.word	0x08006503
 8006464:	08006503 	.word	0x08006503
 8006468:	080064db 	.word	0x080064db
 800646c:	08006503 	.word	0x08006503
 8006470:	08006503 	.word	0x08006503
 8006474:	08006503 	.word	0x08006503
 8006478:	08006503 	.word	0x08006503
 800647c:	08006503 	.word	0x08006503
 8006480:	08006503 	.word	0x08006503
 8006484:	08006503 	.word	0x08006503
 8006488:	080064ef 	.word	0x080064ef
 800648c:	08006503 	.word	0x08006503
 8006490:	08006503 	.word	0x08006503
 8006494:	08006503 	.word	0x08006503
 8006498:	08006503 	.word	0x08006503
 800649c:	08006503 	.word	0x08006503
 80064a0:	08006503 	.word	0x08006503
 80064a4:	08006503 	.word	0x08006503
 80064a8:	0800650b 	.word	0x0800650b
 80064ac:	08006503 	.word	0x08006503
 80064b0:	08006503 	.word	0x08006503
 80064b4:	08006503 	.word	0x08006503
 80064b8:	08006503 	.word	0x08006503
 80064bc:	08006503 	.word	0x08006503
 80064c0:	08006503 	.word	0x08006503
 80064c4:	08006503 	.word	0x08006503
 80064c8:	0800650b 	.word	0x0800650b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064cc:	4bab      	ldr	r3, [pc, #684]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80064ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d0:	4aaa      	ldr	r2, [pc, #680]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80064d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064d6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80064d8:	e018      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064de:	3308      	adds	r3, #8
 80064e0:	4618      	mov	r0, r3
 80064e2:	f003 fa55 	bl	8009990 <RCCEx_PLL2_Config>
 80064e6:	4603      	mov	r3, r0
 80064e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80064ec:	e00e      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064f2:	3330      	adds	r3, #48	@ 0x30
 80064f4:	4618      	mov	r0, r3
 80064f6:	f003 fae3 	bl	8009ac0 <RCCEx_PLL3_Config>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006500:	e004      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006508:	e000      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800650a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800650c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10d      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006514:	4b99      	ldr	r3, [pc, #612]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800651a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800651e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006522:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006526:	4a95      	ldr	r2, [pc, #596]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006528:	430b      	orrs	r3, r1
 800652a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800652e:	e003      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006530:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006534:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006538:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006540:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006544:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006546:	2300      	movs	r3, #0
 8006548:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800654a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800654e:	460b      	mov	r3, r1
 8006550:	4313      	orrs	r3, r2
 8006552:	d04e      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8006554:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800655c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006560:	d02e      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8006562:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006566:	d827      	bhi.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006568:	2bc0      	cmp	r3, #192	@ 0xc0
 800656a:	d02b      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800656c:	2bc0      	cmp	r3, #192	@ 0xc0
 800656e:	d823      	bhi.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006570:	2b80      	cmp	r3, #128	@ 0x80
 8006572:	d017      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8006574:	2b80      	cmp	r3, #128	@ 0x80
 8006576:	d81f      	bhi.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800657c:	2b40      	cmp	r3, #64	@ 0x40
 800657e:	d007      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8006580:	e01a      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006582:	4b7e      	ldr	r3, [pc, #504]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006586:	4a7d      	ldr	r2, [pc, #500]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800658c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800658e:	e01a      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006590:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006594:	3308      	adds	r3, #8
 8006596:	4618      	mov	r0, r3
 8006598:	f003 f9fa 	bl	8009990 <RCCEx_PLL2_Config>
 800659c:	4603      	mov	r3, r0
 800659e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80065a2:	e010      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80065a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065a8:	3330      	adds	r3, #48	@ 0x30
 80065aa:	4618      	mov	r0, r3
 80065ac:	f003 fa88 	bl	8009ac0 <RCCEx_PLL3_Config>
 80065b0:	4603      	mov	r3, r0
 80065b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80065b6:	e006      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80065be:	e002      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80065c0:	bf00      	nop
 80065c2:	e000      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80065c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10d      	bne.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80065ce:	4b6b      	ldr	r3, [pc, #428]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80065d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065d4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80065d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80065e0:	4a66      	ldr	r2, [pc, #408]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80065e2:	430b      	orrs	r3, r1
 80065e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80065e8:	e003      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065ee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80065f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80065fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8006600:	2300      	movs	r3, #0
 8006602:	637b      	str	r3, [r7, #52]	@ 0x34
 8006604:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006608:	460b      	mov	r3, r1
 800660a:	4313      	orrs	r3, r2
 800660c:	d055      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800660e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006612:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006616:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800661a:	d031      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800661c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006620:	d82a      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006622:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006626:	d02d      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8006628:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800662c:	d824      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800662e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006632:	d029      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8006634:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006638:	d81e      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800663a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800663e:	d011      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8006640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006644:	d818      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006646:	2b00      	cmp	r3, #0
 8006648:	d020      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800664a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800664e:	d113      	bne.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006650:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006654:	3308      	adds	r3, #8
 8006656:	4618      	mov	r0, r3
 8006658:	f003 f99a 	bl	8009990 <RCCEx_PLL2_Config>
 800665c:	4603      	mov	r3, r0
 800665e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006662:	e014      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006664:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006668:	3330      	adds	r3, #48	@ 0x30
 800666a:	4618      	mov	r0, r3
 800666c:	f003 fa28 	bl	8009ac0 <RCCEx_PLL3_Config>
 8006670:	4603      	mov	r3, r0
 8006672:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006676:	e00a      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800667e:	e006      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006680:	bf00      	nop
 8006682:	e004      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006684:	bf00      	nop
 8006686:	e002      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006688:	bf00      	nop
 800668a:	e000      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800668c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800668e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10d      	bne.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8006696:	4b39      	ldr	r3, [pc, #228]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800669c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80066a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066a4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80066a8:	4a34      	ldr	r2, [pc, #208]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80066aa:	430b      	orrs	r3, r1
 80066ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80066b0:	e003      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066b6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80066ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80066c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066c8:	2300      	movs	r3, #0
 80066ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066cc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80066d0:	460b      	mov	r3, r1
 80066d2:	4313      	orrs	r3, r2
 80066d4:	d058      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80066d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066de:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80066e2:	d031      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 80066e4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80066e8:	d82a      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80066ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066ee:	d02d      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 80066f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066f4:	d824      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80066f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066fa:	d029      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 80066fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006700:	d81e      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006702:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006706:	d011      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8006708:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800670c:	d818      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800670e:	2b00      	cmp	r3, #0
 8006710:	d020      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8006712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006716:	d113      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006718:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800671c:	3308      	adds	r3, #8
 800671e:	4618      	mov	r0, r3
 8006720:	f003 f936 	bl	8009990 <RCCEx_PLL2_Config>
 8006724:	4603      	mov	r3, r0
 8006726:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800672a:	e014      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800672c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006730:	3330      	adds	r3, #48	@ 0x30
 8006732:	4618      	mov	r0, r3
 8006734:	f003 f9c4 	bl	8009ac0 <RCCEx_PLL3_Config>
 8006738:	4603      	mov	r3, r0
 800673a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800673e:	e00a      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006746:	e006      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006748:	bf00      	nop
 800674a:	e004      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800674c:	bf00      	nop
 800674e:	e002      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006750:	bf00      	nop
 8006752:	e000      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006756:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800675a:	2b00      	cmp	r3, #0
 800675c:	d110      	bne.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800675e:	4b07      	ldr	r3, [pc, #28]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006764:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006768:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800676c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006770:	4902      	ldr	r1, [pc, #8]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006772:	4313      	orrs	r3, r2
 8006774:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006778:	e006      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800677a:	bf00      	nop
 800677c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006780:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006784:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006788:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800678c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006790:	2100      	movs	r1, #0
 8006792:	6239      	str	r1, [r7, #32]
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	627b      	str	r3, [r7, #36]	@ 0x24
 800679a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800679e:	460b      	mov	r3, r1
 80067a0:	4313      	orrs	r3, r2
 80067a2:	d055      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80067a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067ac:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80067b0:	d031      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 80067b2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80067b6:	d82a      	bhi.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80067b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067bc:	d02d      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 80067be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067c2:	d824      	bhi.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80067c4:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80067c8:	d029      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80067ca:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80067ce:	d81e      	bhi.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80067d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067d4:	d011      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80067d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067da:	d818      	bhi.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d020      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 80067e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067e4:	d113      	bne.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067ea:	3308      	adds	r3, #8
 80067ec:	4618      	mov	r0, r3
 80067ee:	f003 f8cf 	bl	8009990 <RCCEx_PLL2_Config>
 80067f2:	4603      	mov	r3, r0
 80067f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80067f8:	e014      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067fe:	3330      	adds	r3, #48	@ 0x30
 8006800:	4618      	mov	r0, r3
 8006802:	f003 f95d 	bl	8009ac0 <RCCEx_PLL3_Config>
 8006806:	4603      	mov	r3, r0
 8006808:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800680c:	e00a      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006814:	e006      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006816:	bf00      	nop
 8006818:	e004      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800681a:	bf00      	nop
 800681c:	e002      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800681e:	bf00      	nop
 8006820:	e000      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006822:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006824:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10d      	bne.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800682c:	4b88      	ldr	r3, [pc, #544]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800682e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006832:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8006836:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800683a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800683e:	4984      	ldr	r1, [pc, #528]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006840:	4313      	orrs	r3, r2
 8006842:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006846:	e003      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006848:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800684c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006850:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006858:	2100      	movs	r1, #0
 800685a:	61b9      	str	r1, [r7, #24]
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	61fb      	str	r3, [r7, #28]
 8006862:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006866:	460b      	mov	r3, r1
 8006868:	4313      	orrs	r3, r2
 800686a:	d03d      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800686c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006870:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006874:	2b03      	cmp	r3, #3
 8006876:	d81c      	bhi.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8006878:	a201      	add	r2, pc, #4	@ (adr r2, 8006880 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800687a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687e:	bf00      	nop
 8006880:	080068bb 	.word	0x080068bb
 8006884:	08006891 	.word	0x08006891
 8006888:	0800689f 	.word	0x0800689f
 800688c:	080068bb 	.word	0x080068bb
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006890:	4b6f      	ldr	r3, [pc, #444]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006894:	4a6e      	ldr	r2, [pc, #440]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006896:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800689a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800689c:	e00e      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800689e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068a2:	3308      	adds	r3, #8
 80068a4:	4618      	mov	r0, r3
 80068a6:	f003 f873 	bl	8009990 <RCCEx_PLL2_Config>
 80068aa:	4603      	mov	r3, r0
 80068ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80068b0:	e004      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80068b8:	e000      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 80068ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068bc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10d      	bne.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80068c4:	4b62      	ldr	r3, [pc, #392]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80068c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068ca:	f023 0203 	bic.w	r2, r3, #3
 80068ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068d2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80068d6:	495e      	ldr	r1, [pc, #376]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80068de:	e003      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068e4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80068e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	2100      	movs	r1, #0
 80068f2:	6139      	str	r1, [r7, #16]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	617b      	str	r3, [r7, #20]
 80068fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80068fe:	460b      	mov	r3, r1
 8006900:	4313      	orrs	r3, r2
 8006902:	d03a      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8006904:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006908:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800690c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006910:	d00e      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8006912:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006916:	d815      	bhi.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8006918:	2b00      	cmp	r3, #0
 800691a:	d017      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 800691c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006920:	d110      	bne.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006922:	4b4b      	ldr	r3, [pc, #300]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006926:	4a4a      	ldr	r2, [pc, #296]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800692c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800692e:	e00e      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006930:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006934:	3308      	adds	r3, #8
 8006936:	4618      	mov	r0, r3
 8006938:	f003 f82a 	bl	8009990 <RCCEx_PLL2_Config>
 800693c:	4603      	mov	r3, r0
 800693e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006942:	e004      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800694a:	e000      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800694c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800694e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10d      	bne.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8006956:	4b3e      	ldr	r3, [pc, #248]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006958:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800695c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006960:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006964:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006968:	4939      	ldr	r1, [pc, #228]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800696a:	4313      	orrs	r3, r2
 800696c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8006970:	e003      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006972:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006976:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800697a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006982:	2100      	movs	r1, #0
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	f003 0310 	and.w	r3, r3, #16
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006990:	460b      	mov	r3, r1
 8006992:	4313      	orrs	r3, r2
 8006994:	d038      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8006996:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800699a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800699e:	2b30      	cmp	r3, #48	@ 0x30
 80069a0:	d01b      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80069a2:	2b30      	cmp	r3, #48	@ 0x30
 80069a4:	d815      	bhi.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80069a6:	2b10      	cmp	r3, #16
 80069a8:	d002      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	d007      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 80069ae:	e010      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069b0:	4b27      	ldr	r3, [pc, #156]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80069b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b4:	4a26      	ldr	r2, [pc, #152]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80069b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069ba:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80069bc:	e00e      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80069be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069c2:	3330      	adds	r3, #48	@ 0x30
 80069c4:	4618      	mov	r0, r3
 80069c6:	f003 f87b 	bl	8009ac0 <RCCEx_PLL3_Config>
 80069ca:	4603      	mov	r3, r0
 80069cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80069d0:	e004      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80069d8:	e000      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 80069da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069dc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10d      	bne.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80069e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80069e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069ea:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80069ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80069f6:	4916      	ldr	r1, [pc, #88]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80069fe:	e003      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a00:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a04:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	2100      	movs	r1, #0
 8006a12:	6039      	str	r1, [r7, #0]
 8006a14:	f003 0308 	and.w	r3, r3, #8
 8006a18:	607b      	str	r3, [r7, #4]
 8006a1a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4313      	orrs	r3, r2
 8006a22:	d00c      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8006a24:	4b0a      	ldr	r3, [pc, #40]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006a26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006a2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a32:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8006a36:	4906      	ldr	r1, [pc, #24]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8006a3e:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a4e:	bf00      	nop
 8006a50:	44020c00 	.word	0x44020c00

08006a54 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b08b      	sub	sp, #44	@ 0x2c
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006a5c:	4bae      	ldr	r3, [pc, #696]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a64:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006a66:	4bac      	ldr	r3, [pc, #688]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a6a:	f003 0303 	and.w	r3, r3, #3
 8006a6e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006a70:	4ba9      	ldr	r3, [pc, #676]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a74:	0a1b      	lsrs	r3, r3, #8
 8006a76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a7a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006a7c:	4ba6      	ldr	r3, [pc, #664]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a80:	091b      	lsrs	r3, r3, #4
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006a88:	4ba3      	ldr	r3, [pc, #652]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a8c:	08db      	lsrs	r3, r3, #3
 8006a8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	fb02 f303 	mul.w	r3, r2, r3
 8006a98:	ee07 3a90 	vmov	s15, r3
 8006a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa0:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f000 8126 	beq.w	8006cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d053      	beq.n	8006b5a <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	2b03      	cmp	r3, #3
 8006ab6:	d86f      	bhi.n	8006b98 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d003      	beq.n	8006ac6 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d02b      	beq.n	8006b1c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006ac4:	e068      	b.n	8006b98 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ac6:	4b94      	ldr	r3, [pc, #592]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	08db      	lsrs	r3, r3, #3
 8006acc:	f003 0303 	and.w	r3, r3, #3
 8006ad0:	4a92      	ldr	r2, [pc, #584]	@ (8006d1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	ee07 3a90 	vmov	s15, r3
 8006ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	ee07 3a90 	vmov	s15, r3
 8006ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	ee07 3a90 	vmov	s15, r3
 8006af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006afa:	ed97 6a04 	vldr	s12, [r7, #16]
 8006afe:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b16:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006b1a:	e068      	b.n	8006bee <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	ee07 3a90 	vmov	s15, r3
 8006b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b26:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8006b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	ee07 3a90 	vmov	s15, r3
 8006b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b38:	ed97 6a04 	vldr	s12, [r7, #16]
 8006b3c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006b40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b54:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006b58:	e049      	b.n	8006bee <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	ee07 3a90 	vmov	s15, r3
 8006b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b64:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006d28 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8006b68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	ee07 3a90 	vmov	s15, r3
 8006b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b76:	ed97 6a04 	vldr	s12, [r7, #16]
 8006b7a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b92:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006b96:	e02a      	b.n	8006bee <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b98:	4b5f      	ldr	r3, [pc, #380]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	08db      	lsrs	r3, r3, #3
 8006b9e:	f003 0303 	and.w	r3, r3, #3
 8006ba2:	4a5e      	ldr	r2, [pc, #376]	@ (8006d1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba8:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	ee07 3a90 	vmov	s15, r3
 8006bb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	ee07 3a90 	vmov	s15, r3
 8006bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	ee07 3a90 	vmov	s15, r3
 8006bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bcc:	ed97 6a04 	vldr	s12, [r7, #16]
 8006bd0:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006bd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006be0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006bec:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bee:	4b4a      	ldr	r3, [pc, #296]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bfa:	d121      	bne.n	8006c40 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006bfc:	4b46      	ldr	r3, [pc, #280]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d017      	beq.n	8006c38 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c08:	4b43      	ldr	r3, [pc, #268]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c0c:	0a5b      	lsrs	r3, r3, #9
 8006c0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c12:	ee07 3a90 	vmov	s15, r3
 8006c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8006c1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c1e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006c22:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c2e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	e006      	b.n	8006c46 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	e002      	b.n	8006c46 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c46:	4b34      	ldr	r3, [pc, #208]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c52:	d121      	bne.n	8006c98 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006c54:	4b30      	ldr	r3, [pc, #192]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d017      	beq.n	8006c90 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c60:	4b2d      	ldr	r3, [pc, #180]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c64:	0c1b      	lsrs	r3, r3, #16
 8006c66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c6a:	ee07 3a90 	vmov	s15, r3
 8006c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006c72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c76:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006c7a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c86:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	605a      	str	r2, [r3, #4]
 8006c8e:	e006      	b.n	8006c9e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	605a      	str	r2, [r3, #4]
 8006c96:	e002      	b.n	8006c9e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ca6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006caa:	d121      	bne.n	8006cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006cac:	4b1a      	ldr	r3, [pc, #104]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d017      	beq.n	8006ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006cb8:	4b17      	ldr	r3, [pc, #92]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cbc:	0e1b      	lsrs	r3, r3, #24
 8006cbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cc2:	ee07 3a90 	vmov	s15, r3
 8006cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8006cca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cce:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006cd2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cde:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006ce6:	e010      	b.n	8006d0a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	609a      	str	r2, [r3, #8]
}
 8006cee:	e00c      	b.n	8006d0a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	609a      	str	r2, [r3, #8]
}
 8006cf6:	e008      	b.n	8006d0a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	609a      	str	r2, [r3, #8]
}
 8006d0a:	bf00      	nop
 8006d0c:	372c      	adds	r7, #44	@ 0x2c
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	44020c00 	.word	0x44020c00
 8006d1c:	03d09000 	.word	0x03d09000
 8006d20:	46000000 	.word	0x46000000
 8006d24:	4a742400 	.word	0x4a742400
 8006d28:	4bbebc20 	.word	0x4bbebc20

08006d2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b08b      	sub	sp, #44	@ 0x2c
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006d34:	4bae      	ldr	r3, [pc, #696]	@ (8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d3c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006d3e:	4bac      	ldr	r3, [pc, #688]	@ (8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d42:	f003 0303 	and.w	r3, r3, #3
 8006d46:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8006d48:	4ba9      	ldr	r3, [pc, #676]	@ (8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4c:	0a1b      	lsrs	r3, r3, #8
 8006d4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d52:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006d54:	4ba6      	ldr	r3, [pc, #664]	@ (8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d58:	091b      	lsrs	r3, r3, #4
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006d60:	4ba3      	ldr	r3, [pc, #652]	@ (8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d64:	08db      	lsrs	r3, r3, #3
 8006d66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	fb02 f303 	mul.w	r3, r2, r3
 8006d70:	ee07 3a90 	vmov	s15, r3
 8006d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d78:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f000 8126 	beq.w	8006fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	2b03      	cmp	r3, #3
 8006d88:	d053      	beq.n	8006e32 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d86f      	bhi.n	8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d003      	beq.n	8006d9e <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d02b      	beq.n	8006df4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006d9c:	e068      	b.n	8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d9e:	4b94      	ldr	r3, [pc, #592]	@ (8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	08db      	lsrs	r3, r3, #3
 8006da4:	f003 0303 	and.w	r3, r3, #3
 8006da8:	4a92      	ldr	r2, [pc, #584]	@ (8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006daa:	fa22 f303 	lsr.w	r3, r2, r3
 8006dae:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	ee07 3a90 	vmov	s15, r3
 8006db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	ee07 3a90 	vmov	s15, r3
 8006dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	ee07 3a90 	vmov	s15, r3
 8006dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dd2:	ed97 6a04 	vldr	s12, [r7, #16]
 8006dd6:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006df2:	e068      	b.n	8006ec6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	ee07 3a90 	vmov	s15, r3
 8006dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dfe:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8006ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8006e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	ee07 3a90 	vmov	s15, r3
 8006e0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e10:	ed97 6a04 	vldr	s12, [r7, #16]
 8006e14:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006e18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e2c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006e30:	e049      	b.n	8006ec6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	ee07 3a90 	vmov	s15, r3
 8006e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007000 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8006e40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	ee07 3a90 	vmov	s15, r3
 8006e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e4e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006e52:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e6a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006e6e:	e02a      	b.n	8006ec6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e70:	4b5f      	ldr	r3, [pc, #380]	@ (8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	08db      	lsrs	r3, r3, #3
 8006e76:	f003 0303 	and.w	r3, r3, #3
 8006e7a:	4a5e      	ldr	r2, [pc, #376]	@ (8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e80:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	ee07 3a90 	vmov	s15, r3
 8006e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	ee07 3a90 	vmov	s15, r3
 8006ea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea4:	ed97 6a04 	vldr	s12, [r7, #16]
 8006ea8:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006eac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ec0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006ec4:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ece:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ed2:	d121      	bne.n	8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006ed4:	4b46      	ldr	r3, [pc, #280]	@ (8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d017      	beq.n	8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006ee0:	4b43      	ldr	r3, [pc, #268]	@ (8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee4:	0a5b      	lsrs	r3, r3, #9
 8006ee6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eea:	ee07 3a90 	vmov	s15, r3
 8006eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8006ef2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ef6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006efa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f06:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	e006      	b.n	8006f1e <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	e002      	b.n	8006f1e <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f1e:	4b34      	ldr	r3, [pc, #208]	@ (8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f2a:	d121      	bne.n	8006f70 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006f2c:	4b30      	ldr	r3, [pc, #192]	@ (8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d017      	beq.n	8006f68 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f38:	4b2d      	ldr	r3, [pc, #180]	@ (8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f3c:	0c1b      	lsrs	r3, r3, #16
 8006f3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f42:	ee07 3a90 	vmov	s15, r3
 8006f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006f4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f4e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006f52:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f5e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	605a      	str	r2, [r3, #4]
 8006f66:	e006      	b.n	8006f76 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	605a      	str	r2, [r3, #4]
 8006f6e:	e002      	b.n	8006f76 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f76:	4b1e      	ldr	r3, [pc, #120]	@ (8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f82:	d121      	bne.n	8006fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006f84:	4b1a      	ldr	r3, [pc, #104]	@ (8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d017      	beq.n	8006fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f90:	4b17      	ldr	r3, [pc, #92]	@ (8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f94:	0e1b      	lsrs	r3, r3, #24
 8006f96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f9a:	ee07 3a90 	vmov	s15, r3
 8006f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8006fa2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fa6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006faa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fb6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006fbe:	e010      	b.n	8006fe2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	609a      	str	r2, [r3, #8]
}
 8006fc6:	e00c      	b.n	8006fe2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	609a      	str	r2, [r3, #8]
}
 8006fce:	e008      	b.n	8006fe2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	609a      	str	r2, [r3, #8]
}
 8006fe2:	bf00      	nop
 8006fe4:	372c      	adds	r7, #44	@ 0x2c
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	44020c00 	.word	0x44020c00
 8006ff4:	03d09000 	.word	0x03d09000
 8006ff8:	46000000 	.word	0x46000000
 8006ffc:	4a742400 	.word	0x4a742400
 8007000:	4bbebc20 	.word	0x4bbebc20

08007004 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8007004:	b480      	push	{r7}
 8007006:	b08b      	sub	sp, #44	@ 0x2c
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800700c:	4bae      	ldr	r3, [pc, #696]	@ (80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800700e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007014:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007016:	4bac      	ldr	r3, [pc, #688]	@ (80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800701a:	f003 0303 	and.w	r3, r3, #3
 800701e:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8007020:	4ba9      	ldr	r3, [pc, #676]	@ (80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007024:	0a1b      	lsrs	r3, r3, #8
 8007026:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800702a:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800702c:	4ba6      	ldr	r3, [pc, #664]	@ (80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800702e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007030:	091b      	lsrs	r3, r3, #4
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007038:	4ba3      	ldr	r3, [pc, #652]	@ (80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800703a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800703c:	08db      	lsrs	r3, r3, #3
 800703e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	fb02 f303 	mul.w	r3, r2, r3
 8007048:	ee07 3a90 	vmov	s15, r3
 800704c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007050:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	2b00      	cmp	r3, #0
 8007058:	f000 8126 	beq.w	80072a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	2b03      	cmp	r3, #3
 8007060:	d053      	beq.n	800710a <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	2b03      	cmp	r3, #3
 8007066:	d86f      	bhi.n	8007148 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d003      	beq.n	8007076 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	2b02      	cmp	r3, #2
 8007072:	d02b      	beq.n	80070cc <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007074:	e068      	b.n	8007148 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007076:	4b94      	ldr	r3, [pc, #592]	@ (80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	08db      	lsrs	r3, r3, #3
 800707c:	f003 0303 	and.w	r3, r3, #3
 8007080:	4a92      	ldr	r2, [pc, #584]	@ (80072cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007082:	fa22 f303 	lsr.w	r3, r2, r3
 8007086:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	ee07 3a90 	vmov	s15, r3
 8007098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a0:	6a3b      	ldr	r3, [r7, #32]
 80070a2:	ee07 3a90 	vmov	s15, r3
 80070a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070aa:	ed97 6a04 	vldr	s12, [r7, #16]
 80070ae:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80072d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80070b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070c6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80070ca:	e068      	b.n	800719e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80072d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80070da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	ee07 3a90 	vmov	s15, r3
 80070e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e8:	ed97 6a04 	vldr	s12, [r7, #16]
 80070ec:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80072d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80070f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007104:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007108:	e049      	b.n	800719e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	ee07 3a90 	vmov	s15, r3
 8007110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007114:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80072d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8007118:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	ee07 3a90 	vmov	s15, r3
 8007122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007126:	ed97 6a04 	vldr	s12, [r7, #16]
 800712a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80072d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800712e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800713a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800713e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007142:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007146:	e02a      	b.n	800719e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007148:	4b5f      	ldr	r3, [pc, #380]	@ (80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	08db      	lsrs	r3, r3, #3
 800714e:	f003 0303 	and.w	r3, r3, #3
 8007152:	4a5e      	ldr	r2, [pc, #376]	@ (80072cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007154:	fa22 f303 	lsr.w	r3, r2, r3
 8007158:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	ee07 3a90 	vmov	s15, r3
 8007160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	ee07 3a90 	vmov	s15, r3
 8007178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800717c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007180:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80072d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007184:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007188:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800718c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007190:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007198:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800719c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800719e:	4b4a      	ldr	r3, [pc, #296]	@ (80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071aa:	d121      	bne.n	80071f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80071ac:	4b46      	ldr	r3, [pc, #280]	@ (80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80071ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d017      	beq.n	80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80071b8:	4b43      	ldr	r3, [pc, #268]	@ (80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80071ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071bc:	0a5b      	lsrs	r3, r3, #9
 80071be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071c2:	ee07 3a90 	vmov	s15, r3
 80071c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80071ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071ce:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80071d2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80071d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071de:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	e006      	b.n	80071f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	e002      	b.n	80071f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071f6:	4b34      	ldr	r3, [pc, #208]	@ (80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007202:	d121      	bne.n	8007248 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007204:	4b30      	ldr	r3, [pc, #192]	@ (80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d017      	beq.n	8007240 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007210:	4b2d      	ldr	r3, [pc, #180]	@ (80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007214:	0c1b      	lsrs	r3, r3, #16
 8007216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007222:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007226:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800722a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800722e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007236:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	605a      	str	r2, [r3, #4]
 800723e:	e006      	b.n	800724e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	605a      	str	r2, [r3, #4]
 8007246:	e002      	b.n	800724e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800724e:	4b1e      	ldr	r3, [pc, #120]	@ (80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007256:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800725a:	d121      	bne.n	80072a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800725c:	4b1a      	ldr	r3, [pc, #104]	@ (80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800725e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007260:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d017      	beq.n	8007298 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007268:	4b17      	ldr	r3, [pc, #92]	@ (80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800726a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800726c:	0e1b      	lsrs	r3, r3, #24
 800726e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007272:	ee07 3a90 	vmov	s15, r3
 8007276:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800727a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800727e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007282:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800728a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800728e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007296:	e010      	b.n	80072ba <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	609a      	str	r2, [r3, #8]
}
 800729e:	e00c      	b.n	80072ba <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	609a      	str	r2, [r3, #8]
}
 80072a6:	e008      	b.n	80072ba <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	609a      	str	r2, [r3, #8]
}
 80072ba:	bf00      	nop
 80072bc:	372c      	adds	r7, #44	@ 0x2c
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	44020c00 	.word	0x44020c00
 80072cc:	03d09000 	.word	0x03d09000
 80072d0:	46000000 	.word	0x46000000
 80072d4:	4a742400 	.word	0x4a742400
 80072d8:	4bbebc20 	.word	0x4bbebc20

080072dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80072dc:	b590      	push	{r4, r7, lr}
 80072de:	b08f      	sub	sp, #60	@ 0x3c
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80072e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072ea:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80072ee:	4321      	orrs	r1, r4
 80072f0:	d150      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80072f2:	4b26      	ldr	r3, [pc, #152]	@ (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80072f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072fc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80072fe:	4b23      	ldr	r3, [pc, #140]	@ (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007300:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b02      	cmp	r3, #2
 800730a:	d108      	bne.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800730c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007312:	d104      	bne.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007314:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007318:	637b      	str	r3, [r7, #52]	@ 0x34
 800731a:	f002 bb2a 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800731e:	4b1b      	ldr	r3, [pc, #108]	@ (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007324:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007328:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800732c:	d108      	bne.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800732e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007334:	d104      	bne.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8007336:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800733a:	637b      	str	r3, [r7, #52]	@ 0x34
 800733c:	f002 bb19 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8007340:	4b12      	ldr	r3, [pc, #72]	@ (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007348:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800734c:	d119      	bne.n	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800734e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007350:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007354:	d115      	bne.n	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007356:	4b0d      	ldr	r3, [pc, #52]	@ (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800735e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007362:	d30a      	bcc.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8007364:	4b09      	ldr	r3, [pc, #36]	@ (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	0a1b      	lsrs	r3, r3, #8
 800736a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800736e:	4a08      	ldr	r2, [pc, #32]	@ (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007370:	fbb2 f3f3 	udiv	r3, r2, r3
 8007374:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007376:	f002 bafc 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800737a:	2300      	movs	r3, #0
 800737c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800737e:	f002 baf8 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007382:	2300      	movs	r3, #0
 8007384:	637b      	str	r3, [r7, #52]	@ 0x34
 8007386:	f002 baf4 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800738a:	bf00      	nop
 800738c:	44020c00 	.word	0x44020c00
 8007390:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8007394:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007398:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 800739c:	ea50 0104 	orrs.w	r1, r0, r4
 80073a0:	f001 8275 	beq.w	800888e <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80073a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073a8:	2801      	cmp	r0, #1
 80073aa:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 80073ae:	f082 82dd 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80073b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073b6:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 80073ba:	ea50 0104 	orrs.w	r1, r0, r4
 80073be:	f001 816c 	beq.w	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80073c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073c6:	2801      	cmp	r0, #1
 80073c8:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80073cc:	f082 82ce 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80073d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073d4:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 80073d8:	ea50 0104 	orrs.w	r1, r0, r4
 80073dc:	f001 8602 	beq.w	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80073e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073e4:	2801      	cmp	r0, #1
 80073e6:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 80073ea:	f082 82bf 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80073ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073f2:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 80073f6:	ea50 0104 	orrs.w	r1, r0, r4
 80073fa:	f001 854c 	beq.w	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80073fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007402:	2801      	cmp	r0, #1
 8007404:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8007408:	f082 82b0 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800740c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007410:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8007414:	ea50 0104 	orrs.w	r1, r0, r4
 8007418:	f001 849e 	beq.w	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 800741c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007420:	2801      	cmp	r0, #1
 8007422:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8007426:	f082 82a1 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800742a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800742e:	f1a1 0420 	sub.w	r4, r1, #32
 8007432:	ea50 0104 	orrs.w	r1, r0, r4
 8007436:	f001 83e8 	beq.w	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800743a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800743e:	2801      	cmp	r0, #1
 8007440:	f171 0120 	sbcs.w	r1, r1, #32
 8007444:	f082 8292 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007448:	e9d7 0100 	ldrd	r0, r1, [r7]
 800744c:	f1a1 0410 	sub.w	r4, r1, #16
 8007450:	ea50 0104 	orrs.w	r1, r0, r4
 8007454:	f002 8256 	beq.w	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007458:	e9d7 0100 	ldrd	r0, r1, [r7]
 800745c:	2801      	cmp	r0, #1
 800745e:	f171 0110 	sbcs.w	r1, r1, #16
 8007462:	f082 8283 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007466:	e9d7 0100 	ldrd	r0, r1, [r7]
 800746a:	f1a1 0408 	sub.w	r4, r1, #8
 800746e:	ea50 0104 	orrs.w	r1, r0, r4
 8007472:	f002 81cc 	beq.w	800980e <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8007476:	e9d7 0100 	ldrd	r0, r1, [r7]
 800747a:	2801      	cmp	r0, #1
 800747c:	f171 0108 	sbcs.w	r1, r1, #8
 8007480:	f082 8274 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007484:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007488:	1f0c      	subs	r4, r1, #4
 800748a:	ea50 0104 	orrs.w	r1, r0, r4
 800748e:	f001 8648 	beq.w	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8007492:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007496:	2801      	cmp	r0, #1
 8007498:	f171 0104 	sbcs.w	r1, r1, #4
 800749c:	f082 8266 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80074a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074a4:	1e8c      	subs	r4, r1, #2
 80074a6:	ea50 0104 	orrs.w	r1, r0, r4
 80074aa:	f002 8143 	beq.w	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80074ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074b2:	2801      	cmp	r0, #1
 80074b4:	f171 0102 	sbcs.w	r1, r1, #2
 80074b8:	f082 8258 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80074bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074c0:	1e4c      	subs	r4, r1, #1
 80074c2:	ea50 0104 	orrs.w	r1, r0, r4
 80074c6:	f002 80ce 	beq.w	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80074ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074ce:	2801      	cmp	r0, #1
 80074d0:	f171 0101 	sbcs.w	r1, r1, #1
 80074d4:	f082 824a 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80074d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074dc:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80074e0:	4321      	orrs	r1, r4
 80074e2:	f002 8059 	beq.w	8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80074e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074ea:	4cd9      	ldr	r4, [pc, #868]	@ (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80074ec:	42a0      	cmp	r0, r4
 80074ee:	f171 0100 	sbcs.w	r1, r1, #0
 80074f2:	f082 823b 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80074f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074fa:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80074fe:	4321      	orrs	r1, r4
 8007500:	f001 87d9 	beq.w	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8007504:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007508:	4cd2      	ldr	r4, [pc, #840]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800750a:	42a0      	cmp	r0, r4
 800750c:	f171 0100 	sbcs.w	r1, r1, #0
 8007510:	f082 822c 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007514:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007518:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 800751c:	4321      	orrs	r1, r4
 800751e:	f001 8751 	beq.w	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8007522:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007526:	4ccc      	ldr	r4, [pc, #816]	@ (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007528:	42a0      	cmp	r0, r4
 800752a:	f171 0100 	sbcs.w	r1, r1, #0
 800752e:	f082 821d 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007532:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007536:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800753a:	4321      	orrs	r1, r4
 800753c:	f001 869a 	beq.w	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8007540:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007544:	4cc5      	ldr	r4, [pc, #788]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8007546:	42a0      	cmp	r0, r4
 8007548:	f171 0100 	sbcs.w	r1, r1, #0
 800754c:	f082 820e 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007550:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007554:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8007558:	4321      	orrs	r1, r4
 800755a:	f001 8612 	beq.w	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800755e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007562:	4cbf      	ldr	r4, [pc, #764]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8007564:	42a0      	cmp	r0, r4
 8007566:	f171 0100 	sbcs.w	r1, r1, #0
 800756a:	f082 81ff 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800756e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007572:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8007576:	4321      	orrs	r1, r4
 8007578:	f002 817e 	beq.w	8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 800757c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007580:	4cb8      	ldr	r4, [pc, #736]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007582:	42a0      	cmp	r0, r4
 8007584:	f171 0100 	sbcs.w	r1, r1, #0
 8007588:	f082 81f0 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800758c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007590:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8007594:	4321      	orrs	r1, r4
 8007596:	f000 829e 	beq.w	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800759a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800759e:	4cb2      	ldr	r4, [pc, #712]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80075a0:	42a0      	cmp	r0, r4
 80075a2:	f171 0100 	sbcs.w	r1, r1, #0
 80075a6:	f082 81e1 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80075aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075ae:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 80075b2:	4321      	orrs	r1, r4
 80075b4:	f000 826d 	beq.w	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80075b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075bc:	4cab      	ldr	r4, [pc, #684]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80075be:	42a0      	cmp	r0, r4
 80075c0:	f171 0100 	sbcs.w	r1, r1, #0
 80075c4:	f082 81d2 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80075c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075cc:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80075d0:	4321      	orrs	r1, r4
 80075d2:	f001 800d 	beq.w	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 80075d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075da:	4ca5      	ldr	r4, [pc, #660]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80075dc:	42a0      	cmp	r0, r4
 80075de:	f171 0100 	sbcs.w	r1, r1, #0
 80075e2:	f082 81c3 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80075e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075ea:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 80075ee:	4321      	orrs	r1, r4
 80075f0:	f000 81d0 	beq.w	8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 80075f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075f8:	4c9e      	ldr	r4, [pc, #632]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80075fa:	42a0      	cmp	r0, r4
 80075fc:	f171 0100 	sbcs.w	r1, r1, #0
 8007600:	f082 81b4 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007604:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007608:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 800760c:	4321      	orrs	r1, r4
 800760e:	f000 8142 	beq.w	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8007612:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007616:	4c98      	ldr	r4, [pc, #608]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007618:	42a0      	cmp	r0, r4
 800761a:	f171 0100 	sbcs.w	r1, r1, #0
 800761e:	f082 81a5 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007622:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007626:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800762a:	4321      	orrs	r1, r4
 800762c:	f001 824e 	beq.w	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8007630:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007634:	4c91      	ldr	r4, [pc, #580]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007636:	42a0      	cmp	r0, r4
 8007638:	f171 0100 	sbcs.w	r1, r1, #0
 800763c:	f082 8196 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007640:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007644:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8007648:	4321      	orrs	r1, r4
 800764a:	f001 8197 	beq.w	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800764e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007652:	4c8b      	ldr	r4, [pc, #556]	@ (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007654:	42a0      	cmp	r0, r4
 8007656:	f171 0100 	sbcs.w	r1, r1, #0
 800765a:	f082 8187 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800765e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007662:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8007666:	4321      	orrs	r1, r4
 8007668:	f001 8154 	beq.w	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 800766c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007670:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8007674:	f171 0100 	sbcs.w	r1, r1, #0
 8007678:	f082 8178 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800767c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007680:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8007684:	4321      	orrs	r1, r4
 8007686:	f001 80b7 	beq.w	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800768a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800768e:	f248 0401 	movw	r4, #32769	@ 0x8001
 8007692:	42a0      	cmp	r0, r4
 8007694:	f171 0100 	sbcs.w	r1, r1, #0
 8007698:	f082 8168 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800769c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076a0:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 80076a4:	4321      	orrs	r1, r4
 80076a6:	f001 8064 	beq.w	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 80076aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076ae:	f244 0401 	movw	r4, #16385	@ 0x4001
 80076b2:	42a0      	cmp	r0, r4
 80076b4:	f171 0100 	sbcs.w	r1, r1, #0
 80076b8:	f082 8158 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80076bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076c0:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 80076c4:	4321      	orrs	r1, r4
 80076c6:	f001 8011 	beq.w	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 80076ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076ce:	f242 0401 	movw	r4, #8193	@ 0x2001
 80076d2:	42a0      	cmp	r0, r4
 80076d4:	f171 0100 	sbcs.w	r1, r1, #0
 80076d8:	f082 8148 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80076dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076e0:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 80076e4:	4321      	orrs	r1, r4
 80076e6:	f000 871e 	beq.w	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 80076ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076ee:	f241 0401 	movw	r4, #4097	@ 0x1001
 80076f2:	42a0      	cmp	r0, r4
 80076f4:	f171 0100 	sbcs.w	r1, r1, #0
 80076f8:	f082 8138 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80076fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007700:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8007704:	4321      	orrs	r1, r4
 8007706:	f000 86a8 	beq.w	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800770a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800770e:	f640 0401 	movw	r4, #2049	@ 0x801
 8007712:	42a0      	cmp	r0, r4
 8007714:	f171 0100 	sbcs.w	r1, r1, #0
 8007718:	f082 8128 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800771c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007720:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8007724:	4321      	orrs	r1, r4
 8007726:	f000 8632 	beq.w	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800772a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800772e:	f240 4401 	movw	r4, #1025	@ 0x401
 8007732:	42a0      	cmp	r0, r4
 8007734:	f171 0100 	sbcs.w	r1, r1, #0
 8007738:	f082 8118 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800773c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007740:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8007744:	4321      	orrs	r1, r4
 8007746:	f000 85b0 	beq.w	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800774a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800774e:	f240 2401 	movw	r4, #513	@ 0x201
 8007752:	42a0      	cmp	r0, r4
 8007754:	f171 0100 	sbcs.w	r1, r1, #0
 8007758:	f082 8108 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800775c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007760:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8007764:	4321      	orrs	r1, r4
 8007766:	f000 8535 	beq.w	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800776a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800776e:	f240 1401 	movw	r4, #257	@ 0x101
 8007772:	42a0      	cmp	r0, r4
 8007774:	f171 0100 	sbcs.w	r1, r1, #0
 8007778:	f082 80f8 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800777c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007780:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8007784:	4321      	orrs	r1, r4
 8007786:	f000 84ba 	beq.w	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800778a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800778e:	2881      	cmp	r0, #129	@ 0x81
 8007790:	f171 0100 	sbcs.w	r1, r1, #0
 8007794:	f082 80ea 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007798:	e9d7 0100 	ldrd	r0, r1, [r7]
 800779c:	2821      	cmp	r0, #33	@ 0x21
 800779e:	f171 0100 	sbcs.w	r1, r1, #0
 80077a2:	d26f      	bcs.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80077a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077a8:	4301      	orrs	r1, r0
 80077aa:	f002 80df 	beq.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80077ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077b2:	1e42      	subs	r2, r0, #1
 80077b4:	f141 33ff 	adc.w	r3, r1, #4294967295
 80077b8:	2a20      	cmp	r2, #32
 80077ba:	f173 0100 	sbcs.w	r1, r3, #0
 80077be:	f082 80d5 	bcs.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80077c2:	2a1f      	cmp	r2, #31
 80077c4:	f202 80d2 	bhi.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80077c8:	a101      	add	r1, pc, #4	@ (adr r1, 80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80077ca:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80077ce:	bf00      	nop
 80077d0:	08007b31 	.word	0x08007b31
 80077d4:	08007bfd 	.word	0x08007bfd
 80077d8:	0800996d 	.word	0x0800996d
 80077dc:	08007cbd 	.word	0x08007cbd
 80077e0:	0800996d 	.word	0x0800996d
 80077e4:	0800996d 	.word	0x0800996d
 80077e8:	0800996d 	.word	0x0800996d
 80077ec:	08007d8d 	.word	0x08007d8d
 80077f0:	0800996d 	.word	0x0800996d
 80077f4:	0800996d 	.word	0x0800996d
 80077f8:	0800996d 	.word	0x0800996d
 80077fc:	0800996d 	.word	0x0800996d
 8007800:	0800996d 	.word	0x0800996d
 8007804:	0800996d 	.word	0x0800996d
 8007808:	0800996d 	.word	0x0800996d
 800780c:	08007e6f 	.word	0x08007e6f
 8007810:	0800996d 	.word	0x0800996d
 8007814:	0800996d 	.word	0x0800996d
 8007818:	0800996d 	.word	0x0800996d
 800781c:	0800996d 	.word	0x0800996d
 8007820:	0800996d 	.word	0x0800996d
 8007824:	0800996d 	.word	0x0800996d
 8007828:	0800996d 	.word	0x0800996d
 800782c:	0800996d 	.word	0x0800996d
 8007830:	0800996d 	.word	0x0800996d
 8007834:	0800996d 	.word	0x0800996d
 8007838:	0800996d 	.word	0x0800996d
 800783c:	0800996d 	.word	0x0800996d
 8007840:	0800996d 	.word	0x0800996d
 8007844:	0800996d 	.word	0x0800996d
 8007848:	0800996d 	.word	0x0800996d
 800784c:	08007f45 	.word	0x08007f45
 8007850:	80000001 	.word	0x80000001
 8007854:	40000001 	.word	0x40000001
 8007858:	20000001 	.word	0x20000001
 800785c:	10000001 	.word	0x10000001
 8007860:	08000001 	.word	0x08000001
 8007864:	04000001 	.word	0x04000001
 8007868:	00800001 	.word	0x00800001
 800786c:	00400001 	.word	0x00400001
 8007870:	00200001 	.word	0x00200001
 8007874:	00100001 	.word	0x00100001
 8007878:	00080001 	.word	0x00080001
 800787c:	00040001 	.word	0x00040001
 8007880:	00020001 	.word	0x00020001
 8007884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007888:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800788c:	430b      	orrs	r3, r1
 800788e:	f000 83c4 	beq.w	800801a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007892:	f002 b86b 	b.w	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007896:	4ba1      	ldr	r3, [pc, #644]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007898:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800789c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80078a0:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80078a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80078a8:	d036      	beq.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80078aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80078b0:	d86b      	bhi.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80078b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80078b8:	d02b      	beq.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80078ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80078c0:	d863      	bhi.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80078c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078c8:	d01b      	beq.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80078ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078d0:	d85b      	bhi.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80078d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d004      	beq.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 80078d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078de:	d008      	beq.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 80078e0:	e053      	b.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078e2:	f107 0320 	add.w	r3, r7, #32
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7ff f8b4 	bl	8006a54 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80078ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078f0:	e04e      	b.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078f2:	f107 0314 	add.w	r3, r7, #20
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7ff fa18 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007900:	e046      	b.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007902:	f107 0308 	add.w	r3, r7, #8
 8007906:	4618      	mov	r0, r3
 8007908:	f7ff fb7c 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007910:	e03e      	b.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007912:	4b83      	ldr	r3, [pc, #524]	@ (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007914:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007916:	e03b      	b.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007918:	4b80      	ldr	r3, [pc, #512]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800791a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800791e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007922:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007924:	4b7d      	ldr	r3, [pc, #500]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0302 	and.w	r3, r3, #2
 800792c:	2b02      	cmp	r3, #2
 800792e:	d10c      	bne.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8007930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007932:	2b00      	cmp	r3, #0
 8007934:	d109      	bne.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007936:	4b79      	ldr	r3, [pc, #484]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	08db      	lsrs	r3, r3, #3
 800793c:	f003 0303 	and.w	r3, r3, #3
 8007940:	4a78      	ldr	r2, [pc, #480]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007942:	fa22 f303 	lsr.w	r3, r2, r3
 8007946:	637b      	str	r3, [r7, #52]	@ 0x34
 8007948:	e01e      	b.n	8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800794a:	4b74      	ldr	r3, [pc, #464]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007952:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007956:	d106      	bne.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800795a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800795e:	d102      	bne.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007960:	4b71      	ldr	r3, [pc, #452]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007962:	637b      	str	r3, [r7, #52]	@ 0x34
 8007964:	e010      	b.n	8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007966:	4b6d      	ldr	r3, [pc, #436]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800796e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007972:	d106      	bne.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8007974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007976:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800797a:	d102      	bne.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800797c:	4b6b      	ldr	r3, [pc, #428]	@ (8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800797e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007980:	e002      	b.n	8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007982:	2300      	movs	r3, #0
 8007984:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007986:	e003      	b.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8007988:	e002      	b.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800798a:	2300      	movs	r3, #0
 800798c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800798e:	bf00      	nop
          }
        }
        break;
 8007990:	f001 bfef 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007994:	4b61      	ldr	r3, [pc, #388]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007996:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800799a:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 800799e:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80079a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079a6:	d036      	beq.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 80079a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079ae:	d86b      	bhi.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80079b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80079b6:	d02b      	beq.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80079b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ba:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80079be:	d863      	bhi.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80079c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079c6:	d01b      	beq.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80079c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079ce:	d85b      	bhi.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80079d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d004      	beq.n	80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80079d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80079dc:	d008      	beq.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 80079de:	e053      	b.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079e0:	f107 0320 	add.w	r3, r7, #32
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7ff f835 	bl	8006a54 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80079ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079ee:	e04e      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079f0:	f107 0314 	add.w	r3, r7, #20
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7ff f999 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079fe:	e046      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a00:	f107 0308 	add.w	r3, r7, #8
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7ff fafd 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a0e:	e03e      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007a10:	4b43      	ldr	r3, [pc, #268]	@ (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007a12:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a14:	e03b      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a16:	4b41      	ldr	r3, [pc, #260]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a1c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007a20:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a22:	4b3e      	ldr	r3, [pc, #248]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d10c      	bne.n	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8007a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d109      	bne.n	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a34:	4b39      	ldr	r3, [pc, #228]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	08db      	lsrs	r3, r3, #3
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	4a39      	ldr	r2, [pc, #228]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007a40:	fa22 f303 	lsr.w	r3, r2, r3
 8007a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a46:	e01e      	b.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a48:	4b34      	ldr	r3, [pc, #208]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a54:	d106      	bne.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a5c:	d102      	bne.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007a5e:	4b32      	ldr	r3, [pc, #200]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a62:	e010      	b.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a64:	4b2d      	ldr	r3, [pc, #180]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a70:	d106      	bne.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8007a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a78:	d102      	bne.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007a7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a7e:	e002      	b.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007a80:	2300      	movs	r3, #0
 8007a82:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007a84:	e003      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8007a86:	e002      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a8c:	bf00      	nop
          }
        }
        break;
 8007a8e:	f001 bf70 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007a92:	4b22      	ldr	r3, [pc, #136]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a9c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d108      	bne.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007aa4:	f107 0320 	add.w	r3, r7, #32
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7fe ffd3 	bl	8006a54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007ab2:	f001 bf5e 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab8:	2b40      	cmp	r3, #64	@ 0x40
 8007aba:	d108      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007abc:	f107 0314 	add.w	r3, r7, #20
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7ff f933 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007aca:	f001 bf52 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ad2:	f001 bf4e 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8007ad6:	4b11      	ldr	r3, [pc, #68]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007ad8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007adc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ae0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d108      	bne.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ae8:	f107 0320 	add.w	r3, r7, #32
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7fe ffb1 	bl	8006a54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007af6:	f001 bf3c 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8007afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afc:	2b80      	cmp	r3, #128	@ 0x80
 8007afe:	d108      	bne.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b00:	f107 0314 	add.w	r3, r7, #20
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7ff f911 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b0e:	f001 bf30 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007b12:	2300      	movs	r3, #0
 8007b14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b16:	f001 bf2c 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007b1a:	bf00      	nop
 8007b1c:	44020c00 	.word	0x44020c00
 8007b20:	00bb8000 	.word	0x00bb8000
 8007b24:	03d09000 	.word	0x03d09000
 8007b28:	003d0900 	.word	0x003d0900
 8007b2c:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007b30:	4b9d      	ldr	r3, [pc, #628]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007b32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007b36:	f003 0307 	and.w	r3, r3, #7
 8007b3a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d104      	bne.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007b42:	f7fc ffd1 	bl	8004ae8 <HAL_RCC_GetPCLK2Freq>
 8007b46:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007b48:	f001 bf13 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8007b4c:	4b96      	ldr	r3, [pc, #600]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b58:	d10a      	bne.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8007b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d107      	bne.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b60:	f107 0314 	add.w	r3, r7, #20
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7ff f8e1 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b6e:	e043      	b.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8007b70:	4b8d      	ldr	r3, [pc, #564]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b7c:	d10a      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d107      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b84:	f107 0308 	add.w	r3, r7, #8
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7ff fa3b 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b92:	e031      	b.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007b94:	4b84      	ldr	r3, [pc, #528]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d10c      	bne.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	d109      	bne.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ba6:	4b80      	ldr	r3, [pc, #512]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	08db      	lsrs	r3, r3, #3
 8007bac:	f003 0303 	and.w	r3, r3, #3
 8007bb0:	4a7e      	ldr	r2, [pc, #504]	@ (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bb8:	e01e      	b.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8007bba:	4b7b      	ldr	r3, [pc, #492]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bc6:	d105      	bne.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bca:	2b04      	cmp	r3, #4
 8007bcc:	d102      	bne.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8007bce:	4b78      	ldr	r3, [pc, #480]	@ (8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007bd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bd2:	e011      	b.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007bd4:	4b74      	ldr	r3, [pc, #464]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007bd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d106      	bne.n	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8007be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be4:	2b05      	cmp	r3, #5
 8007be6:	d103      	bne.n	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8007be8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bee:	e003      	b.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bf4:	f001 bebd 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007bf8:	f001 bebb 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007bfc:	4b6a      	ldr	r3, [pc, #424]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007bfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007c02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c06:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d104      	bne.n	8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007c0e:	f7fc ff55 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8007c12:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007c14:	f001 bead 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8007c18:	4b63      	ldr	r3, [pc, #396]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c24:	d10a      	bne.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8007c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c28:	2b08      	cmp	r3, #8
 8007c2a:	d107      	bne.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c2c:	f107 0314 	add.w	r3, r7, #20
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7ff f87b 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c3a:	e03d      	b.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3e:	2b10      	cmp	r3, #16
 8007c40:	d108      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c42:	f107 0308 	add.w	r3, r7, #8
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7ff f9dc 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c50:	f001 be8f 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007c54:	4b54      	ldr	r3, [pc, #336]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d10c      	bne.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8007c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c62:	2b18      	cmp	r3, #24
 8007c64:	d109      	bne.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c66:	4b50      	ldr	r3, [pc, #320]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	08db      	lsrs	r3, r3, #3
 8007c6c:	f003 0303 	and.w	r3, r3, #3
 8007c70:	4a4e      	ldr	r2, [pc, #312]	@ (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007c72:	fa22 f303 	lsr.w	r3, r2, r3
 8007c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c78:	e01e      	b.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8007c7a:	4b4b      	ldr	r3, [pc, #300]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c86:	d105      	bne.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8a:	2b20      	cmp	r3, #32
 8007c8c:	d102      	bne.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8007c8e:	4b48      	ldr	r3, [pc, #288]	@ (8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c92:	e011      	b.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007c94:	4b44      	ldr	r3, [pc, #272]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c9a:	f003 0302 	and.w	r3, r3, #2
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d106      	bne.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca4:	2b28      	cmp	r3, #40	@ 0x28
 8007ca6:	d103      	bne.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8007ca8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cae:	e003      	b.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cb4:	f001 be5d 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007cb8:	f001 be5b 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007cbc:	4b3a      	ldr	r3, [pc, #232]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007cbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007cc2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007cc6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d104      	bne.n	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007cce:	f7fc fef5 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8007cd2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007cd4:	f001 be4d 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8007cd8:	4b33      	ldr	r3, [pc, #204]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ce0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ce4:	d10a      	bne.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce8:	2b40      	cmp	r3, #64	@ 0x40
 8007cea:	d107      	bne.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cec:	f107 0314 	add.w	r3, r7, #20
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7ff f81b 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cfa:	e045      	b.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8007cfc:	4b2a      	ldr	r3, [pc, #168]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d08:	d10a      	bne.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0c:	2b80      	cmp	r3, #128	@ 0x80
 8007d0e:	d107      	bne.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d10:	f107 0308 	add.w	r3, r7, #8
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7ff f975 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d1e:	e033      	b.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007d20:	4b21      	ldr	r3, [pc, #132]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0302 	and.w	r3, r3, #2
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d10c      	bne.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8007d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d30:	d109      	bne.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d32:	4b1d      	ldr	r3, [pc, #116]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	08db      	lsrs	r3, r3, #3
 8007d38:	f003 0303 	and.w	r3, r3, #3
 8007d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d44:	e020      	b.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8007d46:	4b18      	ldr	r3, [pc, #96]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d52:	d106      	bne.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8007d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d5a:	d102      	bne.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8007d5c:	4b14      	ldr	r3, [pc, #80]	@ (8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007d5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d60:	e012      	b.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007d62:	4b11      	ldr	r3, [pc, #68]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007d64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d68:	f003 0302 	and.w	r3, r3, #2
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d107      	bne.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8007d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d72:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007d76:	d103      	bne.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8007d78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d7e:	e003      	b.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8007d80:	2300      	movs	r3, #0
 8007d82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d84:	f001 bdf5 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d88:	f001 bdf3 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007d8c:	4b06      	ldr	r3, [pc, #24]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007d8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007d92:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007d96:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10a      	bne.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d9e:	f7fc fe8d 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8007da2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007da4:	f001 bde5 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007da8:	44020c00 	.word	0x44020c00
 8007dac:	03d09000 	.word	0x03d09000
 8007db0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8007db4:	4ba0      	ldr	r3, [pc, #640]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dc0:	d10b      	bne.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dc8:	d107      	bne.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dca:	f107 0314 	add.w	r3, r7, #20
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe ffac 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dd8:	e047      	b.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8007dda:	4b97      	ldr	r3, [pc, #604]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007de2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007de6:	d10b      	bne.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8007de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dee:	d107      	bne.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007df0:	f107 0308 	add.w	r3, r7, #8
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7ff f905 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dfe:	e034      	b.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007e00:	4b8d      	ldr	r3, [pc, #564]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 0302 	and.w	r3, r3, #2
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d10d      	bne.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e0e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007e12:	d109      	bne.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e14:	4b88      	ldr	r3, [pc, #544]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	08db      	lsrs	r3, r3, #3
 8007e1a:	f003 0303 	and.w	r3, r3, #3
 8007e1e:	4a87      	ldr	r2, [pc, #540]	@ (800803c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007e20:	fa22 f303 	lsr.w	r3, r2, r3
 8007e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e26:	e020      	b.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8007e28:	4b83      	ldr	r3, [pc, #524]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e34:	d106      	bne.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8007e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e3c:	d102      	bne.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8007e3e:	4b80      	ldr	r3, [pc, #512]	@ (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007e40:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e42:	e012      	b.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007e44:	4b7c      	ldr	r3, [pc, #496]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e4a:	f003 0302 	and.w	r3, r3, #2
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d107      	bne.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8007e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e54:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007e58:	d103      	bne.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8007e5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e60:	e003      	b.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e66:	f001 bd84 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e6a:	f001 bd82 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007e6e:	4b72      	ldr	r3, [pc, #456]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007e74:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007e78:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d104      	bne.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007e80:	f7fc fe1c 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8007e84:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8007e86:	f001 bd74 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8007e8a:	4b6b      	ldr	r3, [pc, #428]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e96:	d10b      	bne.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8007e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e9e:	d107      	bne.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ea0:	f107 0314 	add.w	r3, r7, #20
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7fe ff41 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eae:	e047      	b.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8007eb0:	4b61      	ldr	r3, [pc, #388]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007eb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ebc:	d10b      	bne.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ec4:	d107      	bne.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ec6:	f107 0308 	add.w	r3, r7, #8
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7ff f89a 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ed4:	e034      	b.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007ed6:	4b58      	ldr	r3, [pc, #352]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d10d      	bne.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ee8:	d109      	bne.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007eea:	4b53      	ldr	r3, [pc, #332]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	08db      	lsrs	r3, r3, #3
 8007ef0:	f003 0303 	and.w	r3, r3, #3
 8007ef4:	4a51      	ldr	r2, [pc, #324]	@ (800803c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8007efa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007efc:	e020      	b.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8007efe:	4b4e      	ldr	r3, [pc, #312]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f0a:	d106      	bne.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f12:	d102      	bne.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8007f14:	4b4a      	ldr	r3, [pc, #296]	@ (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007f16:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f18:	e012      	b.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007f1a:	4b47      	ldr	r3, [pc, #284]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d107      	bne.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8007f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007f2e:	d103      	bne.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8007f30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f36:	e003      	b.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f3c:	f001 bd19 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f40:	f001 bd17 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007f44:	4b3c      	ldr	r3, [pc, #240]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007f4a:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8007f4e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8007f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d104      	bne.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007f56:	f7fc fdb1 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8007f5a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8007f5c:	f001 bd09 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8007f60:	4b35      	ldr	r3, [pc, #212]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f6c:	d10b      	bne.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f74:	d107      	bne.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f76:	f107 0314 	add.w	r3, r7, #20
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fe fed6 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f84:	e047      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8007f86:	4b2c      	ldr	r3, [pc, #176]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f92:	d10b      	bne.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8007f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f9a:	d107      	bne.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f9c:	f107 0308 	add.w	r3, r7, #8
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7ff f82f 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007faa:	e034      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007fac:	4b22      	ldr	r3, [pc, #136]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f003 0302 	and.w	r3, r3, #2
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d10d      	bne.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fba:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007fbe:	d109      	bne.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	08db      	lsrs	r3, r3, #3
 8007fc6:	f003 0303 	and.w	r3, r3, #3
 8007fca:	4a1c      	ldr	r2, [pc, #112]	@ (800803c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8007fd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fd2:	e020      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007fd4:	4b18      	ldr	r3, [pc, #96]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fe0:	d106      	bne.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fe8:	d102      	bne.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8007fea:	4b15      	ldr	r3, [pc, #84]	@ (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007fec:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fee:	e012      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007ff0:	4b11      	ldr	r3, [pc, #68]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007ff2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ff6:	f003 0302 	and.w	r3, r3, #2
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d107      	bne.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008000:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008004:	d103      	bne.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8008006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800800a:	637b      	str	r3, [r7, #52]	@ 0x34
 800800c:	e003      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800800e:	2300      	movs	r3, #0
 8008010:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008012:	f001 bcae 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008016:	f001 bcac 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800801a:	4b07      	ldr	r3, [pc, #28]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800801c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008020:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8008024:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8008026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10b      	bne.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800802c:	f7fc fd46 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8008030:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8008032:	f001 bc9e 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008036:	bf00      	nop
 8008038:	44020c00 	.word	0x44020c00
 800803c:	03d09000 	.word	0x03d09000
 8008040:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8008044:	4ba0      	ldr	r3, [pc, #640]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800804c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008050:	d10b      	bne.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8008052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008054:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008058:	d107      	bne.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800805a:	f107 0314 	add.w	r3, r7, #20
 800805e:	4618      	mov	r0, r3
 8008060:	f7fe fe64 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	637b      	str	r3, [r7, #52]	@ 0x34
 8008068:	e047      	b.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800806a:	4b97      	ldr	r3, [pc, #604]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008072:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008076:	d10b      	bne.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8008078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800807e:	d107      	bne.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008080:	f107 0308 	add.w	r3, r7, #8
 8008084:	4618      	mov	r0, r3
 8008086:	f7fe ffbd 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	637b      	str	r3, [r7, #52]	@ 0x34
 800808e:	e034      	b.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8008090:	4b8d      	ldr	r3, [pc, #564]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 0302 	and.w	r3, r3, #2
 8008098:	2b02      	cmp	r3, #2
 800809a:	d10d      	bne.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800809c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80080a2:	d109      	bne.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80080a4:	4b88      	ldr	r3, [pc, #544]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	08db      	lsrs	r3, r3, #3
 80080aa:	f003 0303 	and.w	r3, r3, #3
 80080ae:	4a87      	ldr	r2, [pc, #540]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80080b0:	fa22 f303 	lsr.w	r3, r2, r3
 80080b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80080b6:	e020      	b.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80080b8:	4b83      	ldr	r3, [pc, #524]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080c4:	d106      	bne.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80080c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080cc:	d102      	bne.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80080ce:	4b80      	ldr	r3, [pc, #512]	@ (80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80080d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80080d2:	e012      	b.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80080d4:	4b7c      	ldr	r3, [pc, #496]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80080d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080da:	f003 0302 	and.w	r3, r3, #2
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d107      	bne.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80080e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80080e8:	d103      	bne.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 80080ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80080f0:	e003      	b.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 80080f2:	2300      	movs	r3, #0
 80080f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080f6:	f001 bc3c 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80080fa:	f001 bc3a 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 80080fe:	4b72      	ldr	r3, [pc, #456]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008100:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008104:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008108:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800810a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810c:	2b00      	cmp	r3, #0
 800810e:	d104      	bne.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008110:	f7fc fcd4 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8008114:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8008116:	f001 bc2c 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800811a:	4b6b      	ldr	r3, [pc, #428]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008122:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008126:	d10b      	bne.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800812e:	d107      	bne.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008130:	f107 0314 	add.w	r3, r7, #20
 8008134:	4618      	mov	r0, r3
 8008136:	f7fe fdf9 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	637b      	str	r3, [r7, #52]	@ 0x34
 800813e:	e047      	b.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8008140:	4b61      	ldr	r3, [pc, #388]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008148:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800814c:	d10b      	bne.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800814e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008150:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008154:	d107      	bne.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008156:	f107 0308 	add.w	r3, r7, #8
 800815a:	4618      	mov	r0, r3
 800815c:	f7fe ff52 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	637b      	str	r3, [r7, #52]	@ 0x34
 8008164:	e034      	b.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8008166:	4b58      	ldr	r3, [pc, #352]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0302 	and.w	r3, r3, #2
 800816e:	2b02      	cmp	r3, #2
 8008170:	d10d      	bne.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8008172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008174:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008178:	d109      	bne.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800817a:	4b53      	ldr	r3, [pc, #332]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	08db      	lsrs	r3, r3, #3
 8008180:	f003 0303 	and.w	r3, r3, #3
 8008184:	4a51      	ldr	r2, [pc, #324]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008186:	fa22 f303 	lsr.w	r3, r2, r3
 800818a:	637b      	str	r3, [r7, #52]	@ 0x34
 800818c:	e020      	b.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800818e:	4b4e      	ldr	r3, [pc, #312]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008196:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800819a:	d106      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800819c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800819e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80081a2:	d102      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80081a4:	4b4a      	ldr	r3, [pc, #296]	@ (80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80081a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80081a8:	e012      	b.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80081aa:	4b47      	ldr	r3, [pc, #284]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80081ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081b0:	f003 0302 	and.w	r3, r3, #2
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d107      	bne.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80081b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ba:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80081be:	d103      	bne.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80081c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80081c6:	e003      	b.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80081c8:	2300      	movs	r3, #0
 80081ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081cc:	f001 bbd1 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80081d0:	f001 bbcf 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80081d4:	4b3c      	ldr	r3, [pc, #240]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80081d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80081da:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80081de:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80081e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d104      	bne.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80081e6:	f7fc fc69 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 80081ea:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 80081ec:	f001 bbc1 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 80081f0:	4b35      	ldr	r3, [pc, #212]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081fc:	d10b      	bne.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80081fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008200:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008204:	d107      	bne.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008206:	f107 0314 	add.w	r3, r7, #20
 800820a:	4618      	mov	r0, r3
 800820c:	f7fe fd8e 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	637b      	str	r3, [r7, #52]	@ 0x34
 8008214:	e047      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8008216:	4b2c      	ldr	r3, [pc, #176]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800821e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008222:	d10b      	bne.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8008224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008226:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800822a:	d107      	bne.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800822c:	f107 0308 	add.w	r3, r7, #8
 8008230:	4618      	mov	r0, r3
 8008232:	f7fe fee7 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	637b      	str	r3, [r7, #52]	@ 0x34
 800823a:	e034      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800823c:	4b22      	ldr	r3, [pc, #136]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0302 	and.w	r3, r3, #2
 8008244:	2b02      	cmp	r3, #2
 8008246:	d10d      	bne.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8008248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800824e:	d109      	bne.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008250:	4b1d      	ldr	r3, [pc, #116]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	08db      	lsrs	r3, r3, #3
 8008256:	f003 0303 	and.w	r3, r3, #3
 800825a:	4a1c      	ldr	r2, [pc, #112]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800825c:	fa22 f303 	lsr.w	r3, r2, r3
 8008260:	637b      	str	r3, [r7, #52]	@ 0x34
 8008262:	e020      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8008264:	4b18      	ldr	r3, [pc, #96]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800826c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008270:	d106      	bne.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8008272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008274:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008278:	d102      	bne.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800827a:	4b15      	ldr	r3, [pc, #84]	@ (80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800827c:	637b      	str	r3, [r7, #52]	@ 0x34
 800827e:	e012      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8008280:	4b11      	ldr	r3, [pc, #68]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b02      	cmp	r3, #2
 800828c:	d107      	bne.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800828e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008290:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008294:	d103      	bne.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8008296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800829a:	637b      	str	r3, [r7, #52]	@ 0x34
 800829c:	e003      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800829e:	2300      	movs	r3, #0
 80082a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082a2:	f001 bb66 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80082a6:	f001 bb64 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80082aa:	4b07      	ldr	r3, [pc, #28]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80082ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80082b0:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 80082b4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80082b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10b      	bne.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80082bc:	f7fc fbfe 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 80082c0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80082c2:	f001 bb56 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80082c6:	bf00      	nop
 80082c8:	44020c00 	.word	0x44020c00
 80082cc:	03d09000 	.word	0x03d09000
 80082d0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80082d4:	4ba1      	ldr	r3, [pc, #644]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082e0:	d10b      	bne.n	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80082e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082e8:	d107      	bne.n	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082ea:	f107 0314 	add.w	r3, r7, #20
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fe fd1c 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80082f8:	e047      	b.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 80082fa:	4b98      	ldr	r3, [pc, #608]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008302:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008306:	d10b      	bne.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8008308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800830e:	d107      	bne.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008310:	f107 0308 	add.w	r3, r7, #8
 8008314:	4618      	mov	r0, r3
 8008316:	f7fe fe75 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	637b      	str	r3, [r7, #52]	@ 0x34
 800831e:	e034      	b.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8008320:	4b8e      	ldr	r3, [pc, #568]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 0302 	and.w	r3, r3, #2
 8008328:	2b02      	cmp	r3, #2
 800832a:	d10d      	bne.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800832c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8008332:	d109      	bne.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008334:	4b89      	ldr	r3, [pc, #548]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	08db      	lsrs	r3, r3, #3
 800833a:	f003 0303 	and.w	r3, r3, #3
 800833e:	4a88      	ldr	r2, [pc, #544]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008340:	fa22 f303 	lsr.w	r3, r2, r3
 8008344:	637b      	str	r3, [r7, #52]	@ 0x34
 8008346:	e020      	b.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8008348:	4b84      	ldr	r3, [pc, #528]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008350:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008354:	d106      	bne.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8008356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008358:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800835c:	d102      	bne.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800835e:	4b81      	ldr	r3, [pc, #516]	@ (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008360:	637b      	str	r3, [r7, #52]	@ 0x34
 8008362:	e012      	b.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8008364:	4b7d      	ldr	r3, [pc, #500]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008366:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800836a:	f003 0302 	and.w	r3, r3, #2
 800836e:	2b02      	cmp	r3, #2
 8008370:	d107      	bne.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8008372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008374:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8008378:	d103      	bne.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800837a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800837e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008380:	e003      	b.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8008382:	2300      	movs	r3, #0
 8008384:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008386:	f001 baf4 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800838a:	f001 baf2 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800838e:	4b73      	ldr	r3, [pc, #460]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008390:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008394:	f003 0307 	and.w	r3, r3, #7
 8008398:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800839a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839c:	2b00      	cmp	r3, #0
 800839e:	d104      	bne.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80083a0:	f7fc fb8c 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 80083a4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80083a6:	f001 bae4 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80083aa:	4b6c      	ldr	r3, [pc, #432]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083b6:	d10a      	bne.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80083b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d107      	bne.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083be:	f107 0314 	add.w	r3, r7, #20
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fe fcb2 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80083cc:	e043      	b.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80083ce:	4b63      	ldr	r3, [pc, #396]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083da:	d10a      	bne.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80083dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d107      	bne.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083e2:	f107 0308 	add.w	r3, r7, #8
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fe fe0c 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80083f0:	e031      	b.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 80083f2:	4b5a      	ldr	r3, [pc, #360]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0302 	and.w	r3, r3, #2
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d10c      	bne.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 80083fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008400:	2b03      	cmp	r3, #3
 8008402:	d109      	bne.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008404:	4b55      	ldr	r3, [pc, #340]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	08db      	lsrs	r3, r3, #3
 800840a:	f003 0303 	and.w	r3, r3, #3
 800840e:	4a54      	ldr	r2, [pc, #336]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008410:	fa22 f303 	lsr.w	r3, r2, r3
 8008414:	637b      	str	r3, [r7, #52]	@ 0x34
 8008416:	e01e      	b.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8008418:	4b50      	ldr	r3, [pc, #320]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008424:	d105      	bne.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8008426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008428:	2b04      	cmp	r3, #4
 800842a:	d102      	bne.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800842c:	4b4d      	ldr	r3, [pc, #308]	@ (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800842e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008430:	e011      	b.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8008432:	4b4a      	ldr	r3, [pc, #296]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008438:	f003 0302 	and.w	r3, r3, #2
 800843c:	2b02      	cmp	r3, #2
 800843e:	d106      	bne.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8008440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008442:	2b05      	cmp	r3, #5
 8008444:	d103      	bne.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8008446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800844a:	637b      	str	r3, [r7, #52]	@ 0x34
 800844c:	e003      	b.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800844e:	2300      	movs	r3, #0
 8008450:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008452:	f001 ba8e 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008456:	f001 ba8c 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800845a:	4b40      	ldr	r3, [pc, #256]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800845c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008460:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008464:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8008466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008468:	2b00      	cmp	r3, #0
 800846a:	d104      	bne.n	8008476 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800846c:	f7fc fb26 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8008470:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8008472:	f001 ba7e 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8008476:	4b39      	ldr	r3, [pc, #228]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800847e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008482:	d10a      	bne.n	800849a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8008484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008486:	2b10      	cmp	r3, #16
 8008488:	d107      	bne.n	800849a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800848a:	f107 0314 	add.w	r3, r7, #20
 800848e:	4618      	mov	r0, r3
 8008490:	f7fe fc4c 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	637b      	str	r3, [r7, #52]	@ 0x34
 8008498:	e043      	b.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800849a:	4b30      	ldr	r3, [pc, #192]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084a6:	d10a      	bne.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80084a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084aa:	2b20      	cmp	r3, #32
 80084ac:	d107      	bne.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084ae:	f107 0308 	add.w	r3, r7, #8
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fe fda6 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80084bc:	e031      	b.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80084be:	4b27      	ldr	r3, [pc, #156]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0302 	and.w	r3, r3, #2
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d10c      	bne.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80084ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084cc:	2b30      	cmp	r3, #48	@ 0x30
 80084ce:	d109      	bne.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084d0:	4b22      	ldr	r3, [pc, #136]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	08db      	lsrs	r3, r3, #3
 80084d6:	f003 0303 	and.w	r3, r3, #3
 80084da:	4a21      	ldr	r2, [pc, #132]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80084dc:	fa22 f303 	lsr.w	r3, r2, r3
 80084e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80084e2:	e01e      	b.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80084e4:	4b1d      	ldr	r3, [pc, #116]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084f0:	d105      	bne.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 80084f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f4:	2b40      	cmp	r3, #64	@ 0x40
 80084f6:	d102      	bne.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 80084f8:	4b1a      	ldr	r3, [pc, #104]	@ (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80084fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80084fc:	e011      	b.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80084fe:	4b17      	ldr	r3, [pc, #92]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008504:	f003 0302 	and.w	r3, r3, #2
 8008508:	2b02      	cmp	r3, #2
 800850a:	d106      	bne.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800850c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850e:	2b50      	cmp	r3, #80	@ 0x50
 8008510:	d103      	bne.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8008512:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008516:	637b      	str	r3, [r7, #52]	@ 0x34
 8008518:	e003      	b.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800851a:	2300      	movs	r3, #0
 800851c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800851e:	f001 ba28 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008522:	f001 ba26 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008526:	4b0d      	ldr	r3, [pc, #52]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800852c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008530:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008534:	2b00      	cmp	r3, #0
 8008536:	d104      	bne.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008538:	f7fc faec 	bl	8004b14 <HAL_RCC_GetPCLK3Freq>
 800853c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800853e:	f001 ba18 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8008542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008544:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008548:	d10e      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800854a:	f107 0314 	add.w	r3, r7, #20
 800854e:	4618      	mov	r0, r3
 8008550:	f7fe fbec 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008558:	f001 ba0b 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800855c:	44020c00 	.word	0x44020c00
 8008560:	03d09000 	.word	0x03d09000
 8008564:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8008568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800856e:	d108      	bne.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008570:	f107 0308 	add.w	r3, r7, #8
 8008574:	4618      	mov	r0, r3
 8008576:	f7fe fd45 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800857e:	f001 b9f8 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008582:	4ba4      	ldr	r3, [pc, #656]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b02      	cmp	r3, #2
 800858c:	d10d      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800858e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008590:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008594:	d109      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008596:	4b9f      	ldr	r3, [pc, #636]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	08db      	lsrs	r3, r3, #3
 800859c:	f003 0303 	and.w	r3, r3, #3
 80085a0:	4a9d      	ldr	r2, [pc, #628]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80085a2:	fa22 f303 	lsr.w	r3, r2, r3
 80085a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80085a8:	e020      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80085aa:	4b9a      	ldr	r3, [pc, #616]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085b6:	d106      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 80085b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80085be:	d102      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 80085c0:	4b96      	ldr	r3, [pc, #600]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80085c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80085c4:	e012      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80085c6:	4b93      	ldr	r3, [pc, #588]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80085c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085cc:	f003 0302 	and.w	r3, r3, #2
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d107      	bne.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 80085d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80085da:	d103      	bne.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 80085dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80085e2:	e003      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085e8:	f001 b9c3 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80085ec:	f001 b9c1 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80085f0:	4b88      	ldr	r3, [pc, #544]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80085f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80085f6:	f003 0307 	and.w	r3, r3, #7
 80085fa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80085fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d104      	bne.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8008602:	f7fc fa3f 	bl	8004a84 <HAL_RCC_GetHCLKFreq>
 8008606:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8008608:	f001 b9b3 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800860c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860e:	2b01      	cmp	r3, #1
 8008610:	d104      	bne.n	800861c <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8008612:	f7fc f90b 	bl	800482c <HAL_RCC_GetSysClockFreq>
 8008616:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008618:	f001 b9ab 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800861c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861e:	2b02      	cmp	r3, #2
 8008620:	d108      	bne.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008622:	f107 0314 	add.w	r3, r7, #20
 8008626:	4618      	mov	r0, r3
 8008628:	f7fe fb80 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008630:	f001 b99f 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008634:	4b77      	ldr	r3, [pc, #476]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800863c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008640:	d105      	bne.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8008642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008644:	2b03      	cmp	r3, #3
 8008646:	d102      	bne.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8008648:	4b75      	ldr	r3, [pc, #468]	@ (8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800864a:	637b      	str	r3, [r7, #52]	@ 0x34
 800864c:	e023      	b.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800864e:	4b71      	ldr	r3, [pc, #452]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 0302 	and.w	r3, r3, #2
 8008656:	2b02      	cmp	r3, #2
 8008658:	d10c      	bne.n	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800865a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865c:	2b04      	cmp	r3, #4
 800865e:	d109      	bne.n	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008660:	4b6c      	ldr	r3, [pc, #432]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	08db      	lsrs	r3, r3, #3
 8008666:	f003 0303 	and.w	r3, r3, #3
 800866a:	4a6b      	ldr	r2, [pc, #428]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800866c:	fa22 f303 	lsr.w	r3, r2, r3
 8008670:	637b      	str	r3, [r7, #52]	@ 0x34
 8008672:	e010      	b.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008674:	4b67      	ldr	r3, [pc, #412]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800867c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008680:	d105      	bne.n	800868e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8008682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008684:	2b05      	cmp	r3, #5
 8008686:	d102      	bne.n	800868e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8008688:	4b64      	ldr	r3, [pc, #400]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800868a:	637b      	str	r3, [r7, #52]	@ 0x34
 800868c:	e003      	b.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800868e:	2300      	movs	r3, #0
 8008690:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008692:	f001 b96e 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008696:	f001 b96c 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800869a:	4b5e      	ldr	r3, [pc, #376]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800869c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80086a0:	f003 0308 	and.w	r3, r3, #8
 80086a4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80086a6:	4b5b      	ldr	r3, [pc, #364]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80086a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086ac:	f003 0302 	and.w	r3, r3, #2
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d106      	bne.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 80086b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d103      	bne.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 80086ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086be:	637b      	str	r3, [r7, #52]	@ 0x34
 80086c0:	e012      	b.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80086c2:	4b54      	ldr	r3, [pc, #336]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80086c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086d0:	d106      	bne.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 80086d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d4:	2b08      	cmp	r3, #8
 80086d6:	d103      	bne.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 80086d8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80086dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80086de:	e003      	b.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80086e0:	2300      	movs	r3, #0
 80086e2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80086e4:	f001 b945 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80086e8:	f001 b943 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80086ec:	4b49      	ldr	r3, [pc, #292]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80086ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80086f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80086f6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80086f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d104      	bne.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80086fe:	f7fc f9dd 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8008702:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008704:	f001 b935 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8008708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800870e:	d108      	bne.n	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008710:	f107 0308 	add.w	r3, r7, #8
 8008714:	4618      	mov	r0, r3
 8008716:	f7fe fc75 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800871e:	f001 b928 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008722:	4b3c      	ldr	r3, [pc, #240]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0302 	and.w	r3, r3, #2
 800872a:	2b02      	cmp	r3, #2
 800872c:	d10d      	bne.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800872e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008730:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008734:	d109      	bne.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008736:	4b37      	ldr	r3, [pc, #220]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	08db      	lsrs	r3, r3, #3
 800873c:	f003 0303 	and.w	r3, r3, #3
 8008740:	4a35      	ldr	r2, [pc, #212]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008742:	fa22 f303 	lsr.w	r3, r2, r3
 8008746:	637b      	str	r3, [r7, #52]	@ 0x34
 8008748:	e011      	b.n	800876e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800874a:	4b32      	ldr	r3, [pc, #200]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008752:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008756:	d106      	bne.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8008758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800875e:	d102      	bne.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8008760:	4b2e      	ldr	r3, [pc, #184]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008762:	637b      	str	r3, [r7, #52]	@ 0x34
 8008764:	e003      	b.n	800876e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8008766:	2300      	movs	r3, #0
 8008768:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800876a:	f001 b902 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800876e:	f001 b900 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008772:	4b28      	ldr	r3, [pc, #160]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008774:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008778:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800877c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800877e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008780:	2b00      	cmp	r3, #0
 8008782:	d104      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008784:	f7fc f99a 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8008788:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800878a:	f001 b8f2 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800878e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008790:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008794:	d108      	bne.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008796:	f107 0308 	add.w	r3, r7, #8
 800879a:	4618      	mov	r0, r3
 800879c:	f7fe fc32 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087a4:	f001 b8e5 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80087a8:	4b1a      	ldr	r3, [pc, #104]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0302 	and.w	r3, r3, #2
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d10d      	bne.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 80087b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80087ba:	d109      	bne.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087bc:	4b15      	ldr	r3, [pc, #84]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	08db      	lsrs	r3, r3, #3
 80087c2:	f003 0303 	and.w	r3, r3, #3
 80087c6:	4a14      	ldr	r2, [pc, #80]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80087c8:	fa22 f303 	lsr.w	r3, r2, r3
 80087cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ce:	e011      	b.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80087d0:	4b10      	ldr	r3, [pc, #64]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087dc:	d106      	bne.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 80087de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80087e4:	d102      	bne.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 80087e6:	4b0d      	ldr	r3, [pc, #52]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80087e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ea:	e003      	b.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 80087ec:	2300      	movs	r3, #0
 80087ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087f0:	f001 b8bf 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80087f4:	f001 b8bd 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80087f8:	4b06      	ldr	r3, [pc, #24]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80087fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80087fe:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008802:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8008804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10c      	bne.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800880a:	f7fc f983 	bl	8004b14 <HAL_RCC_GetPCLK3Freq>
 800880e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008810:	f001 b8af 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008814:	44020c00 	.word	0x44020c00
 8008818:	03d09000 	.word	0x03d09000
 800881c:	003d0900 	.word	0x003d0900
 8008820:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8008824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008826:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800882a:	d108      	bne.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800882c:	f107 0308 	add.w	r3, r7, #8
 8008830:	4618      	mov	r0, r3
 8008832:	f7fe fbe7 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800883a:	f001 b89a 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800883e:	4b9f      	ldr	r3, [pc, #636]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 0302 	and.w	r3, r3, #2
 8008846:	2b02      	cmp	r3, #2
 8008848:	d10d      	bne.n	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800884a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008850:	d109      	bne.n	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008852:	4b9a      	ldr	r3, [pc, #616]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	08db      	lsrs	r3, r3, #3
 8008858:	f003 0303 	and.w	r3, r3, #3
 800885c:	4a98      	ldr	r2, [pc, #608]	@ (8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800885e:	fa22 f303 	lsr.w	r3, r2, r3
 8008862:	637b      	str	r3, [r7, #52]	@ 0x34
 8008864:	e011      	b.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8008866:	4b95      	ldr	r3, [pc, #596]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800886e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008872:	d106      	bne.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8008874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008876:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800887a:	d102      	bne.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800887c:	4b91      	ldr	r3, [pc, #580]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800887e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008880:	e003      	b.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8008882:	2300      	movs	r3, #0
 8008884:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008886:	f001 b874 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800888a:	f001 b872 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800888e:	4b8b      	ldr	r3, [pc, #556]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008890:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008894:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008898:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800889a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889c:	2b00      	cmp	r3, #0
 800889e:	d104      	bne.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80088a0:	f7fc f938 	bl	8004b14 <HAL_RCC_GetPCLK3Freq>
 80088a4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80088a6:	f001 b864 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80088aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088b0:	d108      	bne.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088b2:	f107 0308 	add.w	r3, r7, #8
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fe fba4 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088c0:	f001 b857 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80088c4:	4b7d      	ldr	r3, [pc, #500]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 0302 	and.w	r3, r3, #2
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d10d      	bne.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 80088d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80088d6:	d109      	bne.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088d8:	4b78      	ldr	r3, [pc, #480]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	08db      	lsrs	r3, r3, #3
 80088de:	f003 0303 	and.w	r3, r3, #3
 80088e2:	4a77      	ldr	r2, [pc, #476]	@ (8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80088e4:	fa22 f303 	lsr.w	r3, r2, r3
 80088e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80088ea:	e011      	b.n	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 80088ec:	4b73      	ldr	r3, [pc, #460]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088f8:	d106      	bne.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 80088fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008900:	d102      	bne.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8008902:	4b70      	ldr	r3, [pc, #448]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008904:	637b      	str	r3, [r7, #52]	@ 0x34
 8008906:	e003      	b.n	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8008908:	2300      	movs	r3, #0
 800890a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800890c:	f001 b831 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008910:	f001 b82f 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008914:	4b69      	ldr	r3, [pc, #420]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008916:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800891a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800891e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8008920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008922:	2b00      	cmp	r3, #0
 8008924:	d104      	bne.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008926:	f7fc f8c9 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 800892a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800892c:	f001 b821 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8008930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008932:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008936:	d108      	bne.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008938:	f107 0308 	add.w	r3, r7, #8
 800893c:	4618      	mov	r0, r3
 800893e:	f7fe fb61 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008946:	f001 b814 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800894a:	4b5c      	ldr	r3, [pc, #368]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 0302 	and.w	r3, r3, #2
 8008952:	2b02      	cmp	r3, #2
 8008954:	d10e      	bne.n	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8008956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008958:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800895c:	d10a      	bne.n	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800895e:	4b57      	ldr	r3, [pc, #348]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	08db      	lsrs	r3, r3, #3
 8008964:	f003 0303 	and.w	r3, r3, #3
 8008968:	4a55      	ldr	r2, [pc, #340]	@ (8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800896a:	fa22 f303 	lsr.w	r3, r2, r3
 800896e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008970:	f000 bfff 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008974:	2300      	movs	r3, #0
 8008976:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008978:	f000 bffb 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800897c:	4b4f      	ldr	r3, [pc, #316]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800897e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008982:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008986:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8008988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800898e:	d056      	beq.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8008990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008992:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008996:	f200 808b 	bhi.w	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800899a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089a0:	d03e      	beq.n	8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 80089a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089a8:	f200 8082 	bhi.w	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80089ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089b2:	d027      	beq.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 80089b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089ba:	d879      	bhi.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80089bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089c2:	d017      	beq.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 80089c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089ca:	d871      	bhi.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80089cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d004      	beq.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 80089d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089d8:	d004      	beq.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 80089da:	e069      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80089dc:	f7fc f89a 	bl	8004b14 <HAL_RCC_GetPCLK3Freq>
 80089e0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80089e2:	e068      	b.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089e4:	f107 0314 	add.w	r3, r7, #20
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7fe f99f 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80089f2:	e060      	b.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089f4:	f107 0308 	add.w	r3, r7, #8
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7fe fb03 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a02:	e058      	b.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008a04:	4b2d      	ldr	r3, [pc, #180]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a0a:	f003 0302 	and.w	r3, r3, #2
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d103      	bne.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8008a12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a16:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008a18:	e04d      	b.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a1e:	e04a      	b.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008a20:	4b26      	ldr	r3, [pc, #152]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a2e:	d103      	bne.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8008a30:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008a34:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008a36:	e03e      	b.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a3c:	e03b      	b.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a44:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008a48:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 0302 	and.w	r3, r3, #2
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d10c      	bne.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8008a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d109      	bne.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a5c:	4b17      	ldr	r3, [pc, #92]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	08db      	lsrs	r3, r3, #3
 8008a62:	f003 0303 	and.w	r3, r3, #3
 8008a66:	4a16      	ldr	r2, [pc, #88]	@ (8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008a68:	fa22 f303 	lsr.w	r3, r2, r3
 8008a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a6e:	e01e      	b.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a70:	4b12      	ldr	r3, [pc, #72]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a7c:	d106      	bne.n	8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8008a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a84:	d102      	bne.n	8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008a86:	4b0f      	ldr	r3, [pc, #60]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a8a:	e010      	b.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a98:	d106      	bne.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8008a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008aa0:	d102      	bne.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008aa2:	4b09      	ldr	r3, [pc, #36]	@ (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8008aa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aa6:	e002      	b.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008aac:	e003      	b.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8008aae:	e002      	b.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ab4:	bf00      	nop
          }
        }
        break;
 8008ab6:	f000 bf5c 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008aba:	bf00      	nop
 8008abc:	44020c00 	.word	0x44020c00
 8008ac0:	03d09000 	.word	0x03d09000
 8008ac4:	003d0900 	.word	0x003d0900
 8008ac8:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008acc:	4b9e      	ldr	r3, [pc, #632]	@ (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008ace:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008ad2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008ad6:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8008ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ada:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008ade:	d056      	beq.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008ae6:	f200 808b 	bhi.w	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008af0:	d03e      	beq.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8008af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008af8:	f200 8082 	bhi.w	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b02:	d027      	beq.n	8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8008b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b0a:	d879      	bhi.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b12:	d017      	beq.n	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8008b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b1a:	d871      	bhi.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d004      	beq.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8008b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b28:	d004      	beq.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8008b2a:	e069      	b.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8008b2c:	f7fb ffc6 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8008b30:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008b32:	e068      	b.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b34:	f107 0314 	add.w	r3, r7, #20
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7fe f8f7 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b42:	e060      	b.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b44:	f107 0308 	add.w	r3, r7, #8
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7fe fa5b 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b52:	e058      	b.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008b54:	4b7c      	ldr	r3, [pc, #496]	@ (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008b56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b5a:	f003 0302 	and.w	r3, r3, #2
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d103      	bne.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8008b62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b66:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008b68:	e04d      	b.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b6e:	e04a      	b.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008b70:	4b75      	ldr	r3, [pc, #468]	@ (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008b72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b7e:	d103      	bne.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8008b80:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008b84:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008b86:	e03e      	b.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b8c:	e03b      	b.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b8e:	4b6e      	ldr	r3, [pc, #440]	@ (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008b90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008b94:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008b98:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b9a:	4b6b      	ldr	r3, [pc, #428]	@ (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 0302 	and.w	r3, r3, #2
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d10c      	bne.n	8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8008ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d109      	bne.n	8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008bac:	4b66      	ldr	r3, [pc, #408]	@ (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	08db      	lsrs	r3, r3, #3
 8008bb2:	f003 0303 	and.w	r3, r3, #3
 8008bb6:	4a65      	ldr	r2, [pc, #404]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bbe:	e01e      	b.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bc0:	4b61      	ldr	r3, [pc, #388]	@ (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bcc:	d106      	bne.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8008bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bd4:	d102      	bne.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008bd6:	4b5e      	ldr	r3, [pc, #376]	@ (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008bd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bda:	e010      	b.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bdc:	4b5a      	ldr	r3, [pc, #360]	@ (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008be4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008be8:	d106      	bne.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8008bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008bf0:	d102      	bne.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008bf2:	4b58      	ldr	r3, [pc, #352]	@ (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008bf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bf6:	e002      	b.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008bfc:	e003      	b.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8008bfe:	e002      	b.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8008c00:	2300      	movs	r3, #0
 8008c02:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c04:	bf00      	nop
          }
        }
        break;
 8008c06:	f000 beb4 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8008c0a:	4b4f      	ldr	r3, [pc, #316]	@ (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008c0c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008c10:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008c14:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8008c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c1c:	d056      	beq.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8008c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c24:	f200 808b 	bhi.w	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c2e:	d03e      	beq.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8008c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c36:	f200 8082 	bhi.w	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c40:	d027      	beq.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8008c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c48:	d879      	bhi.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c50:	d017      	beq.n	8008c82 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8008c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c58:	d871      	bhi.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d004      	beq.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8008c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c66:	d004      	beq.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8008c68:	e069      	b.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008c6a:	f7fb ff53 	bl	8004b14 <HAL_RCC_GetPCLK3Freq>
 8008c6e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008c70:	e068      	b.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c72:	f107 0314 	add.w	r3, r7, #20
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fe f858 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c80:	e060      	b.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c82:	f107 0308 	add.w	r3, r7, #8
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7fe f9bc 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c90:	e058      	b.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008c92:	4b2d      	ldr	r3, [pc, #180]	@ (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008c94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c98:	f003 0302 	and.w	r3, r3, #2
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d103      	bne.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8008ca0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ca4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008ca6:	e04d      	b.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008cac:	e04a      	b.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008cae:	4b26      	ldr	r3, [pc, #152]	@ (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008cb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cbc:	d103      	bne.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8008cbe:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008cc2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008cc4:	e03e      	b.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008cca:	e03b      	b.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008cce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008cd2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0302 	and.w	r3, r3, #2
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d10c      	bne.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8008ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d109      	bne.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008cea:	4b17      	ldr	r3, [pc, #92]	@ (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	08db      	lsrs	r3, r3, #3
 8008cf0:	f003 0303 	and.w	r3, r3, #3
 8008cf4:	4a15      	ldr	r2, [pc, #84]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cfc:	e01e      	b.n	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cfe:	4b12      	ldr	r3, [pc, #72]	@ (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d0a:	d106      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8008d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d12:	d102      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008d14:	4b0e      	ldr	r3, [pc, #56]	@ (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d18:	e010      	b.n	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d26:	d106      	bne.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8008d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d2e:	d102      	bne.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008d30:	4b08      	ldr	r3, [pc, #32]	@ (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008d32:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d34:	e002      	b.n	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008d3a:	e003      	b.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8008d3c:	e002      	b.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d42:	bf00      	nop
          }
        }
        break;
 8008d44:	f000 be15 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d48:	44020c00 	.word	0x44020c00
 8008d4c:	03d09000 	.word	0x03d09000
 8008d50:	003d0900 	.word	0x003d0900
 8008d54:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8008d58:	4b9e      	ldr	r3, [pc, #632]	@ (8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008d5a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008d5e:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8008d62:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8008d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d66:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008d6a:	d056      	beq.n	8008e1a <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d6e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008d72:	f200 808b 	bhi.w	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d7c:	d03e      	beq.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d84:	f200 8082 	bhi.w	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d8e:	d027      	beq.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8008d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d96:	d879      	bhi.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d9e:	d017      	beq.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8008da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008da6:	d871      	bhi.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d004      	beq.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8008dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008db4:	d004      	beq.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8008db6:	e069      	b.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008db8:	f7fb feac 	bl	8004b14 <HAL_RCC_GetPCLK3Freq>
 8008dbc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008dbe:	e068      	b.n	8008e92 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dc0:	f107 0314 	add.w	r3, r7, #20
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7fd ffb1 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008dce:	e060      	b.n	8008e92 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dd0:	f107 0308 	add.w	r3, r7, #8
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7fe f915 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008dde:	e058      	b.n	8008e92 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008de0:	4b7c      	ldr	r3, [pc, #496]	@ (8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008de2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d103      	bne.n	8008df6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8008dee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008df2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008df4:	e04d      	b.n	8008e92 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008df6:	2300      	movs	r3, #0
 8008df8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008dfa:	e04a      	b.n	8008e92 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008dfc:	4b75      	ldr	r3, [pc, #468]	@ (8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008dfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e0a:	d103      	bne.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8008e0c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008e10:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008e12:	e03e      	b.n	8008e92 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008e14:	2300      	movs	r3, #0
 8008e16:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e18:	e03b      	b.n	8008e92 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e1a:	4b6e      	ldr	r3, [pc, #440]	@ (8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e20:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008e24:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e26:	4b6b      	ldr	r3, [pc, #428]	@ (8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 0302 	and.w	r3, r3, #2
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d10c      	bne.n	8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8008e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d109      	bne.n	8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e38:	4b66      	ldr	r3, [pc, #408]	@ (8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	08db      	lsrs	r3, r3, #3
 8008e3e:	f003 0303 	and.w	r3, r3, #3
 8008e42:	4a65      	ldr	r2, [pc, #404]	@ (8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008e44:	fa22 f303 	lsr.w	r3, r2, r3
 8008e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e4a:	e01e      	b.n	8008e8a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e4c:	4b61      	ldr	r3, [pc, #388]	@ (8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e58:	d106      	bne.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8008e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e60:	d102      	bne.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008e62:	4b5e      	ldr	r3, [pc, #376]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e66:	e010      	b.n	8008e8a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e68:	4b5a      	ldr	r3, [pc, #360]	@ (8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e74:	d106      	bne.n	8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8008e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e7c:	d102      	bne.n	8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008e7e:	4b58      	ldr	r3, [pc, #352]	@ (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8008e80:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e82:	e002      	b.n	8008e8a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008e84:	2300      	movs	r3, #0
 8008e86:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008e88:	e003      	b.n	8008e92 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8008e8a:	e002      	b.n	8008e92 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e90:	bf00      	nop
          }
        }
        break;
 8008e92:	f000 bd6e 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8008e96:	4b4f      	ldr	r3, [pc, #316]	@ (8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e98:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008e9c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008ea0:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008ea8:	d056      	beq.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eac:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008eb0:	f200 808b 	bhi.w	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008eba:	d03e      	beq.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ebe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ec2:	f200 8082 	bhi.w	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008ecc:	d027      	beq.n	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8008ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008ed4:	d879      	bhi.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008edc:	d017      	beq.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8008ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ee4:	d871      	bhi.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d004      	beq.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8008eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008ef2:	d004      	beq.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8008ef4:	e069      	b.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008ef6:	f7fb fe0d 	bl	8004b14 <HAL_RCC_GetPCLK3Freq>
 8008efa:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008efc:	e068      	b.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008efe:	f107 0314 	add.w	r3, r7, #20
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7fd ff12 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f0c:	e060      	b.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f0e:	f107 0308 	add.w	r3, r7, #8
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7fe f876 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f1c:	e058      	b.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f24:	f003 0302 	and.w	r3, r3, #2
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d103      	bne.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8008f2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f30:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008f32:	e04d      	b.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008f34:	2300      	movs	r3, #0
 8008f36:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f38:	e04a      	b.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008f3a:	4b26      	ldr	r3, [pc, #152]	@ (8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f48:	d103      	bne.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8008f4a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008f4e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008f50:	e03e      	b.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008f52:	2300      	movs	r3, #0
 8008f54:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f56:	e03b      	b.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f58:	4b1e      	ldr	r3, [pc, #120]	@ (8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f5e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008f62:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f64:	4b1b      	ldr	r3, [pc, #108]	@ (8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 0302 	and.w	r3, r3, #2
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d10c      	bne.n	8008f8a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8008f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d109      	bne.n	8008f8a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f76:	4b17      	ldr	r3, [pc, #92]	@ (8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	08db      	lsrs	r3, r3, #3
 8008f7c:	f003 0303 	and.w	r3, r3, #3
 8008f80:	4a15      	ldr	r2, [pc, #84]	@ (8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008f82:	fa22 f303 	lsr.w	r3, r2, r3
 8008f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f88:	e01e      	b.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f8a:	4b12      	ldr	r3, [pc, #72]	@ (8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f96:	d106      	bne.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8008f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f9e:	d102      	bne.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fa4:	e010      	b.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fb2:	d106      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8008fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fba:	d102      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008fbc:	4b08      	ldr	r3, [pc, #32]	@ (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8008fbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fc0:	e002      	b.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008fc6:	e003      	b.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8008fc8:	e002      	b.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008fce:	bf00      	nop
          }
        }
        break;
 8008fd0:	f000 bccf 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008fd4:	44020c00 	.word	0x44020c00
 8008fd8:	03d09000 	.word	0x03d09000
 8008fdc:	003d0900 	.word	0x003d0900
 8008fe0:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8008fe4:	4b9e      	ldr	r3, [pc, #632]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008fe6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008fea:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008fee:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8008ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ff6:	d056      	beq.n	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8008ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ffe:	f200 808b 	bhi.w	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009008:	d03e      	beq.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800900a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009010:	f200 8082 	bhi.w	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009016:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800901a:	d027      	beq.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800901c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009022:	d879      	bhi.n	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800902a:	d017      	beq.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800902c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009032:	d871      	bhi.n	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009036:	2b00      	cmp	r3, #0
 8009038:	d004      	beq.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800903a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800903c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009040:	d004      	beq.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8009042:	e069      	b.n	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009044:	f7fb fd66 	bl	8004b14 <HAL_RCC_GetPCLK3Freq>
 8009048:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800904a:	e068      	b.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800904c:	f107 0314 	add.w	r3, r7, #20
 8009050:	4618      	mov	r0, r3
 8009052:	f7fd fe6b 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800905a:	e060      	b.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800905c:	f107 0308 	add.w	r3, r7, #8
 8009060:	4618      	mov	r0, r3
 8009062:	f7fd ffcf 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800906a:	e058      	b.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800906c:	4b7c      	ldr	r3, [pc, #496]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800906e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009072:	f003 0302 	and.w	r3, r3, #2
 8009076:	2b02      	cmp	r3, #2
 8009078:	d103      	bne.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800907a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800907e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009080:	e04d      	b.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009082:	2300      	movs	r3, #0
 8009084:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009086:	e04a      	b.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009088:	4b75      	ldr	r3, [pc, #468]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800908a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800908e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009092:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009096:	d103      	bne.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8009098:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800909c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800909e:	e03e      	b.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80090a0:	2300      	movs	r3, #0
 80090a2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090a4:	e03b      	b.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090a6:	4b6e      	ldr	r3, [pc, #440]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80090a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090ac:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80090b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090b2:	4b6b      	ldr	r3, [pc, #428]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 0302 	and.w	r3, r3, #2
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d10c      	bne.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80090be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d109      	bne.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090c4:	4b66      	ldr	r3, [pc, #408]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	08db      	lsrs	r3, r3, #3
 80090ca:	f003 0303 	and.w	r3, r3, #3
 80090ce:	4a65      	ldr	r2, [pc, #404]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80090d0:	fa22 f303 	lsr.w	r3, r2, r3
 80090d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80090d6:	e01e      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090d8:	4b61      	ldr	r3, [pc, #388]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090e4:	d106      	bne.n	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 80090e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090ec:	d102      	bne.n	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80090ee:	4b5e      	ldr	r3, [pc, #376]	@ (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80090f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80090f2:	e010      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090f4:	4b5a      	ldr	r3, [pc, #360]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009100:	d106      	bne.n	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8009102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009104:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009108:	d102      	bne.n	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800910a:	4b58      	ldr	r3, [pc, #352]	@ (800926c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800910c:	637b      	str	r3, [r7, #52]	@ 0x34
 800910e:	e002      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009110:	2300      	movs	r3, #0
 8009112:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009114:	e003      	b.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8009116:	e002      	b.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8009118:	2300      	movs	r3, #0
 800911a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800911c:	bf00      	nop
          }
        }
        break;
 800911e:	f000 bc28 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009122:	4b4f      	ldr	r3, [pc, #316]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009128:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800912c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800912e:	4b4c      	ldr	r3, [pc, #304]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009136:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800913a:	d106      	bne.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800913c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913e:	2b00      	cmp	r3, #0
 8009140:	d103      	bne.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8009142:	4b4a      	ldr	r3, [pc, #296]	@ (800926c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009144:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8009146:	f000 bc14 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800914a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009150:	d108      	bne.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009152:	f107 0320 	add.w	r3, r7, #32
 8009156:	4618      	mov	r0, r3
 8009158:	f7fd fc7c 	bl	8006a54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800915c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009160:	f000 bc07 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009166:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800916a:	d107      	bne.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800916c:	f107 0314 	add.w	r3, r7, #20
 8009170:	4618      	mov	r0, r3
 8009172:	f7fd fddb 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800917a:	e3fa      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800917c:	2300      	movs	r3, #0
 800917e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009180:	e3f7      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009182:	4b37      	ldr	r3, [pc, #220]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009188:	f003 0307 	and.w	r3, r3, #7
 800918c:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800918e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009190:	2b04      	cmp	r3, #4
 8009192:	d861      	bhi.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8009194:	a201      	add	r2, pc, #4	@ (adr r2, 800919c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8009196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919a:	bf00      	nop
 800919c:	080091b1 	.word	0x080091b1
 80091a0:	080091c1 	.word	0x080091c1
 80091a4:	080091d1 	.word	0x080091d1
 80091a8:	080091e1 	.word	0x080091e1
 80091ac:	080091e7 	.word	0x080091e7
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091b0:	f107 0320 	add.w	r3, r7, #32
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fd fc4d 	bl	8006a54 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80091ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091bc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091be:	e04e      	b.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091c0:	f107 0314 	add.w	r3, r7, #20
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7fd fdb1 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091ce:	e046      	b.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091d0:	f107 0308 	add.w	r3, r7, #8
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fd ff15 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091de:	e03e      	b.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80091e0:	4b23      	ldr	r3, [pc, #140]	@ (8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 80091e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091e4:	e03b      	b.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091e6:	4b1e      	ldr	r3, [pc, #120]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80091e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80091ec:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80091f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091f2:	4b1b      	ldr	r3, [pc, #108]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 0302 	and.w	r3, r3, #2
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	d10c      	bne.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 80091fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009200:	2b00      	cmp	r3, #0
 8009202:	d109      	bne.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009204:	4b16      	ldr	r3, [pc, #88]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	08db      	lsrs	r3, r3, #3
 800920a:	f003 0303 	and.w	r3, r3, #3
 800920e:	4a15      	ldr	r2, [pc, #84]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009210:	fa22 f303 	lsr.w	r3, r2, r3
 8009214:	637b      	str	r3, [r7, #52]	@ 0x34
 8009216:	e01e      	b.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009218:	4b11      	ldr	r3, [pc, #68]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009224:	d106      	bne.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8009226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800922c:	d102      	bne.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800922e:	4b0e      	ldr	r3, [pc, #56]	@ (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009230:	637b      	str	r3, [r7, #52]	@ 0x34
 8009232:	e010      	b.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009234:	4b0a      	ldr	r3, [pc, #40]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800923c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009240:	d106      	bne.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8009242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009244:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009248:	d102      	bne.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800924a:	4b08      	ldr	r3, [pc, #32]	@ (800926c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800924c:	637b      	str	r3, [r7, #52]	@ 0x34
 800924e:	e002      	b.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009250:	2300      	movs	r3, #0
 8009252:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009254:	e003      	b.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8009256:	e002      	b.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8009258:	2300      	movs	r3, #0
 800925a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800925c:	bf00      	nop
          }
        }
        break;
 800925e:	e388      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009260:	44020c00 	.word	0x44020c00
 8009264:	03d09000 	.word	0x03d09000
 8009268:	003d0900 	.word	0x003d0900
 800926c:	017d7840 	.word	0x017d7840
 8009270:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009274:	4ba9      	ldr	r3, [pc, #676]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800927a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800927e:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8009280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009282:	2b20      	cmp	r3, #32
 8009284:	f200 809a 	bhi.w	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8009288:	a201      	add	r2, pc, #4	@ (adr r2, 8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800928a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928e:	bf00      	nop
 8009290:	08009315 	.word	0x08009315
 8009294:	080093bd 	.word	0x080093bd
 8009298:	080093bd 	.word	0x080093bd
 800929c:	080093bd 	.word	0x080093bd
 80092a0:	080093bd 	.word	0x080093bd
 80092a4:	080093bd 	.word	0x080093bd
 80092a8:	080093bd 	.word	0x080093bd
 80092ac:	080093bd 	.word	0x080093bd
 80092b0:	08009325 	.word	0x08009325
 80092b4:	080093bd 	.word	0x080093bd
 80092b8:	080093bd 	.word	0x080093bd
 80092bc:	080093bd 	.word	0x080093bd
 80092c0:	080093bd 	.word	0x080093bd
 80092c4:	080093bd 	.word	0x080093bd
 80092c8:	080093bd 	.word	0x080093bd
 80092cc:	080093bd 	.word	0x080093bd
 80092d0:	08009335 	.word	0x08009335
 80092d4:	080093bd 	.word	0x080093bd
 80092d8:	080093bd 	.word	0x080093bd
 80092dc:	080093bd 	.word	0x080093bd
 80092e0:	080093bd 	.word	0x080093bd
 80092e4:	080093bd 	.word	0x080093bd
 80092e8:	080093bd 	.word	0x080093bd
 80092ec:	080093bd 	.word	0x080093bd
 80092f0:	08009345 	.word	0x08009345
 80092f4:	080093bd 	.word	0x080093bd
 80092f8:	080093bd 	.word	0x080093bd
 80092fc:	080093bd 	.word	0x080093bd
 8009300:	080093bd 	.word	0x080093bd
 8009304:	080093bd 	.word	0x080093bd
 8009308:	080093bd 	.word	0x080093bd
 800930c:	080093bd 	.word	0x080093bd
 8009310:	0800934b 	.word	0x0800934b
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009314:	f107 0320 	add.w	r3, r7, #32
 8009318:	4618      	mov	r0, r3
 800931a:	f7fd fb9b 	bl	8006a54 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800931e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009320:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009322:	e04e      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009324:	f107 0314 	add.w	r3, r7, #20
 8009328:	4618      	mov	r0, r3
 800932a:	f7fd fcff 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009332:	e046      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009334:	f107 0308 	add.w	r3, r7, #8
 8009338:	4618      	mov	r0, r3
 800933a:	f7fd fe63 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009342:	e03e      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009344:	4b76      	ldr	r3, [pc, #472]	@ (8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8009346:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009348:	e03b      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800934a:	4b74      	ldr	r3, [pc, #464]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800934c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009350:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009354:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009356:	4b71      	ldr	r3, [pc, #452]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 0302 	and.w	r3, r3, #2
 800935e:	2b02      	cmp	r3, #2
 8009360:	d10c      	bne.n	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8009362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009364:	2b00      	cmp	r3, #0
 8009366:	d109      	bne.n	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009368:	4b6c      	ldr	r3, [pc, #432]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	08db      	lsrs	r3, r3, #3
 800936e:	f003 0303 	and.w	r3, r3, #3
 8009372:	4a6c      	ldr	r2, [pc, #432]	@ (8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009374:	fa22 f303 	lsr.w	r3, r2, r3
 8009378:	637b      	str	r3, [r7, #52]	@ 0x34
 800937a:	e01e      	b.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800937c:	4b67      	ldr	r3, [pc, #412]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009388:	d106      	bne.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800938a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800938c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009390:	d102      	bne.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009392:	4b65      	ldr	r3, [pc, #404]	@ (8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8009394:	637b      	str	r3, [r7, #52]	@ 0x34
 8009396:	e010      	b.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009398:	4b60      	ldr	r3, [pc, #384]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093a4:	d106      	bne.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 80093a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093ac:	d102      	bne.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80093ae:	4b5f      	ldr	r3, [pc, #380]	@ (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80093b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80093b2:	e002      	b.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80093b4:	2300      	movs	r3, #0
 80093b6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80093b8:	e003      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 80093ba:	e002      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 80093bc:	2300      	movs	r3, #0
 80093be:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093c0:	bf00      	nop
          }
        }
        break;
 80093c2:	e2d6      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80093c4:	4b55      	ldr	r3, [pc, #340]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80093c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093ca:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80093ce:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 80093d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093d6:	d031      	beq.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 80093d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093de:	d866      	bhi.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80093e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80093e4:	d027      	beq.n	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 80093e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e8:	2bc0      	cmp	r3, #192	@ 0xc0
 80093ea:	d860      	bhi.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80093ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ee:	2b80      	cmp	r3, #128	@ 0x80
 80093f0:	d019      	beq.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 80093f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f4:	2b80      	cmp	r3, #128	@ 0x80
 80093f6:	d85a      	bhi.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80093f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d003      	beq.n	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 80093fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009400:	2b40      	cmp	r3, #64	@ 0x40
 8009402:	d008      	beq.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8009404:	e053      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009406:	f107 0320 	add.w	r3, r7, #32
 800940a:	4618      	mov	r0, r3
 800940c:	f7fd fb22 	bl	8006a54 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009412:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009414:	e04e      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009416:	f107 0314 	add.w	r3, r7, #20
 800941a:	4618      	mov	r0, r3
 800941c:	f7fd fc86 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009424:	e046      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009426:	f107 0308 	add.w	r3, r7, #8
 800942a:	4618      	mov	r0, r3
 800942c:	f7fd fdea 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009434:	e03e      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009436:	4b3a      	ldr	r3, [pc, #232]	@ (8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8009438:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800943a:	e03b      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800943c:	4b37      	ldr	r3, [pc, #220]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800943e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009442:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009446:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009448:	4b34      	ldr	r3, [pc, #208]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 0302 	and.w	r3, r3, #2
 8009450:	2b02      	cmp	r3, #2
 8009452:	d10c      	bne.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8009454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009456:	2b00      	cmp	r3, #0
 8009458:	d109      	bne.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800945a:	4b30      	ldr	r3, [pc, #192]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	08db      	lsrs	r3, r3, #3
 8009460:	f003 0303 	and.w	r3, r3, #3
 8009464:	4a2f      	ldr	r2, [pc, #188]	@ (8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009466:	fa22 f303 	lsr.w	r3, r2, r3
 800946a:	637b      	str	r3, [r7, #52]	@ 0x34
 800946c:	e01e      	b.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800946e:	4b2b      	ldr	r3, [pc, #172]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009476:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800947a:	d106      	bne.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800947c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800947e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009482:	d102      	bne.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009484:	4b28      	ldr	r3, [pc, #160]	@ (8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8009486:	637b      	str	r3, [r7, #52]	@ 0x34
 8009488:	e010      	b.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800948a:	4b24      	ldr	r3, [pc, #144]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009492:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009496:	d106      	bne.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8009498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800949a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800949e:	d102      	bne.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80094a0:	4b22      	ldr	r3, [pc, #136]	@ (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80094a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80094a4:	e002      	b.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80094a6:	2300      	movs	r3, #0
 80094a8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80094aa:	e003      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 80094ac:	e002      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 80094ae:	2300      	movs	r3, #0
 80094b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80094b2:	bf00      	nop
          }
        }
        break;
 80094b4:	e25d      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80094b6:	4b19      	ldr	r3, [pc, #100]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80094b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80094bc:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80094c0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80094c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d103      	bne.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80094c8:	f7fb fb0e 	bl	8004ae8 <HAL_RCC_GetPCLK2Freq>
 80094cc:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80094ce:	e250      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80094d0:	4b12      	ldr	r3, [pc, #72]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094dc:	d10b      	bne.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 80094de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094e4:	d107      	bne.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094e6:	f107 0314 	add.w	r3, r7, #20
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fd fc1e 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80094f4:	e04f      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 80094f6:	4b09      	ldr	r3, [pc, #36]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009502:	d115      	bne.n	8009530 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8009504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800950a:	d111      	bne.n	8009530 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800950c:	f107 0308 	add.w	r3, r7, #8
 8009510:	4618      	mov	r0, r3
 8009512:	f7fd fd77 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	637b      	str	r3, [r7, #52]	@ 0x34
 800951a:	e03c      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800951c:	44020c00 	.word	0x44020c00
 8009520:	00bb8000 	.word	0x00bb8000
 8009524:	03d09000 	.word	0x03d09000
 8009528:	003d0900 	.word	0x003d0900
 800952c:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8009530:	4b94      	ldr	r3, [pc, #592]	@ (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f003 0302 	and.w	r3, r3, #2
 8009538:	2b02      	cmp	r3, #2
 800953a:	d10d      	bne.n	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800953c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800953e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009542:	d109      	bne.n	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009544:	4b8f      	ldr	r3, [pc, #572]	@ (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	08db      	lsrs	r3, r3, #3
 800954a:	f003 0303 	and.w	r3, r3, #3
 800954e:	4a8e      	ldr	r2, [pc, #568]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009550:	fa22 f303 	lsr.w	r3, r2, r3
 8009554:	637b      	str	r3, [r7, #52]	@ 0x34
 8009556:	e01e      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8009558:	4b8a      	ldr	r3, [pc, #552]	@ (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009564:	d106      	bne.n	8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8009566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009568:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800956c:	d102      	bne.n	8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800956e:	4b87      	ldr	r3, [pc, #540]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009570:	637b      	str	r3, [r7, #52]	@ 0x34
 8009572:	e010      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009574:	4b83      	ldr	r3, [pc, #524]	@ (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800957c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009580:	d106      	bne.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8009582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009584:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009588:	d102      	bne.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800958a:	4b81      	ldr	r3, [pc, #516]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800958c:	637b      	str	r3, [r7, #52]	@ 0x34
 800958e:	e002      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8009590:	2300      	movs	r3, #0
 8009592:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009594:	e1ed      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009596:	e1ec      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8009598:	4b7a      	ldr	r3, [pc, #488]	@ (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800959a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800959e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80095a2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 80095a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d103      	bne.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80095aa:	f7fb fab3 	bl	8004b14 <HAL_RCC_GetPCLK3Freq>
 80095ae:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80095b0:	e1df      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 80095b2:	4b74      	ldr	r3, [pc, #464]	@ (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095be:	d10b      	bne.n	80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 80095c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095c6:	d107      	bne.n	80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095c8:	f107 0314 	add.w	r3, r7, #20
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7fd fbad 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80095d6:	e045      	b.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80095d8:	4b6a      	ldr	r3, [pc, #424]	@ (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095e4:	d10b      	bne.n	80095fe <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 80095e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095ec:	d107      	bne.n	80095fe <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095ee:	f107 0308 	add.w	r3, r7, #8
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fd fd06 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80095fc:	e032      	b.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 80095fe:	4b61      	ldr	r3, [pc, #388]	@ (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 0302 	and.w	r3, r3, #2
 8009606:	2b02      	cmp	r3, #2
 8009608:	d10d      	bne.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800960a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800960c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009610:	d109      	bne.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009612:	4b5c      	ldr	r3, [pc, #368]	@ (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	08db      	lsrs	r3, r3, #3
 8009618:	f003 0303 	and.w	r3, r3, #3
 800961c:	4a5a      	ldr	r2, [pc, #360]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800961e:	fa22 f303 	lsr.w	r3, r2, r3
 8009622:	637b      	str	r3, [r7, #52]	@ 0x34
 8009624:	e01e      	b.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8009626:	4b57      	ldr	r3, [pc, #348]	@ (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800962e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009632:	d106      	bne.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8009634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009636:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800963a:	d102      	bne.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800963c:	4b53      	ldr	r3, [pc, #332]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800963e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009640:	e010      	b.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8009642:	4b50      	ldr	r3, [pc, #320]	@ (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800964a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800964e:	d106      	bne.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8009650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009652:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009656:	d102      	bne.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8009658:	4b4d      	ldr	r3, [pc, #308]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800965a:	637b      	str	r3, [r7, #52]	@ 0x34
 800965c:	e002      	b.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800965e:	2300      	movs	r3, #0
 8009660:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009662:	e186      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009664:	e185      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009666:	4b47      	ldr	r3, [pc, #284]	@ (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800966c:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8009670:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8009672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009674:	2b00      	cmp	r3, #0
 8009676:	d103      	bne.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009678:	f7fb fa36 	bl	8004ae8 <HAL_RCC_GetPCLK2Freq>
 800967c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800967e:	e178      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8009680:	4b40      	ldr	r3, [pc, #256]	@ (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009688:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800968c:	d10b      	bne.n	80096a6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800968e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009690:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009694:	d107      	bne.n	80096a6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009696:	f107 0314 	add.w	r3, r7, #20
 800969a:	4618      	mov	r0, r3
 800969c:	f7fd fb46 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80096a4:	e045      	b.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 80096a6:	4b37      	ldr	r3, [pc, #220]	@ (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096b2:	d10b      	bne.n	80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 80096b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096ba:	d107      	bne.n	80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096bc:	f107 0308 	add.w	r3, r7, #8
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7fd fc9f 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80096ca:	e032      	b.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 80096cc:	4b2d      	ldr	r3, [pc, #180]	@ (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 0302 	and.w	r3, r3, #2
 80096d4:	2b02      	cmp	r3, #2
 80096d6:	d10d      	bne.n	80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 80096d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096da:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80096de:	d109      	bne.n	80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096e0:	4b28      	ldr	r3, [pc, #160]	@ (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	08db      	lsrs	r3, r3, #3
 80096e6:	f003 0303 	and.w	r3, r3, #3
 80096ea:	4a27      	ldr	r2, [pc, #156]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80096ec:	fa22 f303 	lsr.w	r3, r2, r3
 80096f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80096f2:	e01e      	b.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 80096f4:	4b23      	ldr	r3, [pc, #140]	@ (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009700:	d106      	bne.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8009702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009704:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009708:	d102      	bne.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800970a:	4b20      	ldr	r3, [pc, #128]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800970c:	637b      	str	r3, [r7, #52]	@ 0x34
 800970e:	e010      	b.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8009710:	4b1c      	ldr	r3, [pc, #112]	@ (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009718:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800971c:	d106      	bne.n	800972c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800971e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009720:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009724:	d102      	bne.n	800972c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8009726:	4b1a      	ldr	r3, [pc, #104]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009728:	637b      	str	r3, [r7, #52]	@ 0x34
 800972a:	e002      	b.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800972c:	2300      	movs	r3, #0
 800972e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009730:	e11f      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009732:	e11e      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009734:	4b13      	ldr	r3, [pc, #76]	@ (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009736:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800973a:	f003 0303 	and.w	r3, r3, #3
 800973e:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8009740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009742:	2b03      	cmp	r3, #3
 8009744:	d85f      	bhi.n	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8009746:	a201      	add	r2, pc, #4	@ (adr r2, 800974c <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8009748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974c:	0800975d 	.word	0x0800975d
 8009750:	08009765 	.word	0x08009765
 8009754:	08009775 	.word	0x08009775
 8009758:	08009795 	.word	0x08009795
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800975c:	f7fb f992 	bl	8004a84 <HAL_RCC_GetHCLKFreq>
 8009760:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009762:	e053      	b.n	800980c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009764:	f107 0320 	add.w	r3, r7, #32
 8009768:	4618      	mov	r0, r3
 800976a:	f7fd f973 	bl	8006a54 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800976e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009770:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009772:	e04b      	b.n	800980c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009774:	f107 0314 	add.w	r3, r7, #20
 8009778:	4618      	mov	r0, r3
 800977a:	f7fd fad7 	bl	8006d2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009782:	e043      	b.n	800980c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009784:	44020c00 	.word	0x44020c00
 8009788:	03d09000 	.word	0x03d09000
 800978c:	003d0900 	.word	0x003d0900
 8009790:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009794:	4b79      	ldr	r3, [pc, #484]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009796:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800979a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800979e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097a0:	4b76      	ldr	r3, [pc, #472]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f003 0302 	and.w	r3, r3, #2
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d10c      	bne.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 80097ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d109      	bne.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80097b2:	4b72      	ldr	r3, [pc, #456]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	08db      	lsrs	r3, r3, #3
 80097b8:	f003 0303 	and.w	r3, r3, #3
 80097bc:	4a70      	ldr	r2, [pc, #448]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 80097be:	fa22 f303 	lsr.w	r3, r2, r3
 80097c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80097c4:	e01e      	b.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097c6:	4b6d      	ldr	r3, [pc, #436]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097d2:	d106      	bne.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 80097d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097da:	d102      	bne.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80097dc:	4b69      	ldr	r3, [pc, #420]	@ (8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 80097de:	637b      	str	r3, [r7, #52]	@ 0x34
 80097e0:	e010      	b.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097e2:	4b66      	ldr	r3, [pc, #408]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097ee:	d106      	bne.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 80097f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097f6:	d102      	bne.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80097f8:	4b63      	ldr	r3, [pc, #396]	@ (8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 80097fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80097fc:	e002      	b.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80097fe:	2300      	movs	r3, #0
 8009800:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009802:	e003      	b.n	800980c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009804:	e002      	b.n	800980c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8009806:	2300      	movs	r3, #0
 8009808:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800980a:	bf00      	nop
          }
        }
        break;
 800980c:	e0b1      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800980e:	4b5b      	ldr	r3, [pc, #364]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009810:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009814:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009818:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800981a:	4b58      	ldr	r3, [pc, #352]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800981c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009820:	f003 0302 	and.w	r3, r3, #2
 8009824:	2b02      	cmp	r3, #2
 8009826:	d106      	bne.n	8009836 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8009828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800982a:	2b00      	cmp	r3, #0
 800982c:	d103      	bne.n	8009836 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800982e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009832:	637b      	str	r3, [r7, #52]	@ 0x34
 8009834:	e01f      	b.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8009836:	4b51      	ldr	r3, [pc, #324]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009838:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800983c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009840:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009844:	d106      	bne.n	8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8009846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009848:	2b40      	cmp	r3, #64	@ 0x40
 800984a:	d103      	bne.n	8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800984c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009850:	637b      	str	r3, [r7, #52]	@ 0x34
 8009852:	e010      	b.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8009854:	4b49      	ldr	r3, [pc, #292]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800985c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009860:	d106      	bne.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8009862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009864:	2b80      	cmp	r3, #128	@ 0x80
 8009866:	d103      	bne.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8009868:	f248 0312 	movw	r3, #32786	@ 0x8012
 800986c:	637b      	str	r3, [r7, #52]	@ 0x34
 800986e:	e002      	b.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8009870:	2300      	movs	r3, #0
 8009872:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009874:	e07d      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009876:	e07c      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009878:	4b40      	ldr	r3, [pc, #256]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800987a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800987e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009882:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009884:	4b3d      	ldr	r3, [pc, #244]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800988c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009890:	d105      	bne.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8009892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009894:	2b00      	cmp	r3, #0
 8009896:	d102      	bne.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8009898:	4b3c      	ldr	r3, [pc, #240]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800989a:	637b      	str	r3, [r7, #52]	@ 0x34
 800989c:	e031      	b.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800989e:	4b37      	ldr	r3, [pc, #220]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098aa:	d10a      	bne.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 80098ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ae:	2b10      	cmp	r3, #16
 80098b0:	d107      	bne.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098b2:	f107 0320 	add.w	r3, r7, #32
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7fd f8cc 	bl	8006a54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098be:	637b      	str	r3, [r7, #52]	@ 0x34
 80098c0:	e01f      	b.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80098c2:	4b2e      	ldr	r3, [pc, #184]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80098c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098c8:	f003 0302 	and.w	r3, r3, #2
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	d106      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 80098d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d2:	2b20      	cmp	r3, #32
 80098d4:	d103      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 80098d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098da:	637b      	str	r3, [r7, #52]	@ 0x34
 80098dc:	e011      	b.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80098de:	4b27      	ldr	r3, [pc, #156]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80098e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098ec:	d106      	bne.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 80098ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f0:	2b30      	cmp	r3, #48	@ 0x30
 80098f2:	d103      	bne.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 80098f4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80098f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80098fa:	e002      	b.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80098fc:	2300      	movs	r3, #0
 80098fe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009900:	e037      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009902:	e036      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009904:	4b1d      	ldr	r3, [pc, #116]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009906:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800990a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800990e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8009910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009912:	2b10      	cmp	r3, #16
 8009914:	d107      	bne.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009916:	f107 0320 	add.w	r3, r7, #32
 800991a:	4618      	mov	r0, r3
 800991c:	f7fd f89a 	bl	8006a54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009922:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009924:	e025      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8009926:	4b15      	ldr	r3, [pc, #84]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800992e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009932:	d10a      	bne.n	800994a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8009934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009936:	2b20      	cmp	r3, #32
 8009938:	d107      	bne.n	800994a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800993a:	f107 0308 	add.w	r3, r7, #8
 800993e:	4618      	mov	r0, r3
 8009940:	f7fd fb60 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	637b      	str	r3, [r7, #52]	@ 0x34
 8009948:	e00f      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800994a:	4b0c      	ldr	r3, [pc, #48]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009952:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009956:	d105      	bne.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8009958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995a:	2b30      	cmp	r3, #48	@ 0x30
 800995c:	d102      	bne.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800995e:	4b0b      	ldr	r3, [pc, #44]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009960:	637b      	str	r3, [r7, #52]	@ 0x34
 8009962:	e002      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8009964:	2300      	movs	r3, #0
 8009966:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8009968:	e003      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800996a:	e002      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800996c:	2300      	movs	r3, #0
 800996e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009970:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8009972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009974:	4618      	mov	r0, r3
 8009976:	373c      	adds	r7, #60	@ 0x3c
 8009978:	46bd      	mov	sp, r7
 800997a:	bd90      	pop	{r4, r7, pc}
 800997c:	44020c00 	.word	0x44020c00
 8009980:	03d09000 	.word	0x03d09000
 8009984:	003d0900 	.word	0x003d0900
 8009988:	017d7840 	.word	0x017d7840
 800998c:	02dc6c00 	.word	0x02dc6c00

08009990 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8009998:	4b48      	ldr	r3, [pc, #288]	@ (8009abc <RCCEx_PLL2_Config+0x12c>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a47      	ldr	r2, [pc, #284]	@ (8009abc <RCCEx_PLL2_Config+0x12c>)
 800999e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80099a2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80099a4:	f7f9 fd90 	bl	80034c8 <HAL_GetTick>
 80099a8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80099aa:	e008      	b.n	80099be <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80099ac:	f7f9 fd8c 	bl	80034c8 <HAL_GetTick>
 80099b0:	4602      	mov	r2, r0
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d901      	bls.n	80099be <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e07a      	b.n	8009ab4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80099be:	4b3f      	ldr	r3, [pc, #252]	@ (8009abc <RCCEx_PLL2_Config+0x12c>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1f0      	bne.n	80099ac <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80099ca:	4b3c      	ldr	r3, [pc, #240]	@ (8009abc <RCCEx_PLL2_Config+0x12c>)
 80099cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ce:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80099d2:	f023 0303 	bic.w	r3, r3, #3
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	6811      	ldr	r1, [r2, #0]
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	6852      	ldr	r2, [r2, #4]
 80099de:	0212      	lsls	r2, r2, #8
 80099e0:	430a      	orrs	r2, r1
 80099e2:	4936      	ldr	r1, [pc, #216]	@ (8009abc <RCCEx_PLL2_Config+0x12c>)
 80099e4:	4313      	orrs	r3, r2
 80099e6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	3b01      	subs	r3, #1
 80099ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	3b01      	subs	r3, #1
 80099f8:	025b      	lsls	r3, r3, #9
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	431a      	orrs	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	3b01      	subs	r3, #1
 8009a04:	041b      	lsls	r3, r3, #16
 8009a06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009a0a:	431a      	orrs	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	695b      	ldr	r3, [r3, #20]
 8009a10:	3b01      	subs	r3, #1
 8009a12:	061b      	lsls	r3, r3, #24
 8009a14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009a18:	4928      	ldr	r1, [pc, #160]	@ (8009abc <RCCEx_PLL2_Config+0x12c>)
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009a1e:	4b27      	ldr	r3, [pc, #156]	@ (8009abc <RCCEx_PLL2_Config+0x12c>)
 8009a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a22:	f023 020c 	bic.w	r2, r3, #12
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	699b      	ldr	r3, [r3, #24]
 8009a2a:	4924      	ldr	r1, [pc, #144]	@ (8009abc <RCCEx_PLL2_Config+0x12c>)
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8009a30:	4b22      	ldr	r3, [pc, #136]	@ (8009abc <RCCEx_PLL2_Config+0x12c>)
 8009a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a34:	f023 0220 	bic.w	r2, r3, #32
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	69db      	ldr	r3, [r3, #28]
 8009a3c:	491f      	ldr	r1, [pc, #124]	@ (8009abc <RCCEx_PLL2_Config+0x12c>)
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009a42:	4b1e      	ldr	r3, [pc, #120]	@ (8009abc <RCCEx_PLL2_Config+0x12c>)
 8009a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a4a:	491c      	ldr	r1, [pc, #112]	@ (8009abc <RCCEx_PLL2_Config+0x12c>)
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8009a50:	4b1a      	ldr	r3, [pc, #104]	@ (8009abc <RCCEx_PLL2_Config+0x12c>)
 8009a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a54:	4a19      	ldr	r2, [pc, #100]	@ (8009abc <RCCEx_PLL2_Config+0x12c>)
 8009a56:	f023 0310 	bic.w	r3, r3, #16
 8009a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8009a5c:	4b17      	ldr	r3, [pc, #92]	@ (8009abc <RCCEx_PLL2_Config+0x12c>)
 8009a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a60:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a64:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	6a12      	ldr	r2, [r2, #32]
 8009a6c:	00d2      	lsls	r2, r2, #3
 8009a6e:	4913      	ldr	r1, [pc, #76]	@ (8009abc <RCCEx_PLL2_Config+0x12c>)
 8009a70:	4313      	orrs	r3, r2
 8009a72:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8009a74:	4b11      	ldr	r3, [pc, #68]	@ (8009abc <RCCEx_PLL2_Config+0x12c>)
 8009a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a78:	4a10      	ldr	r2, [pc, #64]	@ (8009abc <RCCEx_PLL2_Config+0x12c>)
 8009a7a:	f043 0310 	orr.w	r3, r3, #16
 8009a7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8009a80:	4b0e      	ldr	r3, [pc, #56]	@ (8009abc <RCCEx_PLL2_Config+0x12c>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a0d      	ldr	r2, [pc, #52]	@ (8009abc <RCCEx_PLL2_Config+0x12c>)
 8009a86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009a8a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009a8c:	f7f9 fd1c 	bl	80034c8 <HAL_GetTick>
 8009a90:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a92:	e008      	b.n	8009aa6 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a94:	f7f9 fd18 	bl	80034c8 <HAL_GetTick>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d901      	bls.n	8009aa6 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	e006      	b.n	8009ab4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009aa6:	4b05      	ldr	r3, [pc, #20]	@ (8009abc <RCCEx_PLL2_Config+0x12c>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d0f0      	beq.n	8009a94 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8009ab2:	2300      	movs	r3, #0

}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	44020c00 	.word	0x44020c00

08009ac0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009ac8:	4b48      	ldr	r3, [pc, #288]	@ (8009bec <RCCEx_PLL3_Config+0x12c>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a47      	ldr	r2, [pc, #284]	@ (8009bec <RCCEx_PLL3_Config+0x12c>)
 8009ace:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ad2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009ad4:	f7f9 fcf8 	bl	80034c8 <HAL_GetTick>
 8009ad8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ada:	e008      	b.n	8009aee <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009adc:	f7f9 fcf4 	bl	80034c8 <HAL_GetTick>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	1ad3      	subs	r3, r2, r3
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	d901      	bls.n	8009aee <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009aea:	2303      	movs	r3, #3
 8009aec:	e07a      	b.n	8009be4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009aee:	4b3f      	ldr	r3, [pc, #252]	@ (8009bec <RCCEx_PLL3_Config+0x12c>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1f0      	bne.n	8009adc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009afa:	4b3c      	ldr	r3, [pc, #240]	@ (8009bec <RCCEx_PLL3_Config+0x12c>)
 8009afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009afe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009b02:	f023 0303 	bic.w	r3, r3, #3
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	6811      	ldr	r1, [r2, #0]
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	6852      	ldr	r2, [r2, #4]
 8009b0e:	0212      	lsls	r2, r2, #8
 8009b10:	430a      	orrs	r2, r1
 8009b12:	4936      	ldr	r1, [pc, #216]	@ (8009bec <RCCEx_PLL3_Config+0x12c>)
 8009b14:	4313      	orrs	r3, r2
 8009b16:	630b      	str	r3, [r1, #48]	@ 0x30
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	3b01      	subs	r3, #1
 8009b28:	025b      	lsls	r3, r3, #9
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	431a      	orrs	r2, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	3b01      	subs	r3, #1
 8009b34:	041b      	lsls	r3, r3, #16
 8009b36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009b3a:	431a      	orrs	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	695b      	ldr	r3, [r3, #20]
 8009b40:	3b01      	subs	r3, #1
 8009b42:	061b      	lsls	r3, r3, #24
 8009b44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009b48:	4928      	ldr	r1, [pc, #160]	@ (8009bec <RCCEx_PLL3_Config+0x12c>)
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009b4e:	4b27      	ldr	r3, [pc, #156]	@ (8009bec <RCCEx_PLL3_Config+0x12c>)
 8009b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b52:	f023 020c 	bic.w	r2, r3, #12
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	4924      	ldr	r1, [pc, #144]	@ (8009bec <RCCEx_PLL3_Config+0x12c>)
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8009b60:	4b22      	ldr	r3, [pc, #136]	@ (8009bec <RCCEx_PLL3_Config+0x12c>)
 8009b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b64:	f023 0220 	bic.w	r2, r3, #32
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	69db      	ldr	r3, [r3, #28]
 8009b6c:	491f      	ldr	r1, [pc, #124]	@ (8009bec <RCCEx_PLL3_Config+0x12c>)
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009b72:	4b1e      	ldr	r3, [pc, #120]	@ (8009bec <RCCEx_PLL3_Config+0x12c>)
 8009b74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b7a:	491c      	ldr	r1, [pc, #112]	@ (8009bec <RCCEx_PLL3_Config+0x12c>)
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8009b80:	4b1a      	ldr	r3, [pc, #104]	@ (8009bec <RCCEx_PLL3_Config+0x12c>)
 8009b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b84:	4a19      	ldr	r2, [pc, #100]	@ (8009bec <RCCEx_PLL3_Config+0x12c>)
 8009b86:	f023 0310 	bic.w	r3, r3, #16
 8009b8a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8009b8c:	4b17      	ldr	r3, [pc, #92]	@ (8009bec <RCCEx_PLL3_Config+0x12c>)
 8009b8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b90:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b94:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	6a12      	ldr	r2, [r2, #32]
 8009b9c:	00d2      	lsls	r2, r2, #3
 8009b9e:	4913      	ldr	r1, [pc, #76]	@ (8009bec <RCCEx_PLL3_Config+0x12c>)
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8009ba4:	4b11      	ldr	r3, [pc, #68]	@ (8009bec <RCCEx_PLL3_Config+0x12c>)
 8009ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ba8:	4a10      	ldr	r2, [pc, #64]	@ (8009bec <RCCEx_PLL3_Config+0x12c>)
 8009baa:	f043 0310 	orr.w	r3, r3, #16
 8009bae:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8009bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8009bec <RCCEx_PLL3_Config+0x12c>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8009bec <RCCEx_PLL3_Config+0x12c>)
 8009bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bba:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009bbc:	f7f9 fc84 	bl	80034c8 <HAL_GetTick>
 8009bc0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bc2:	e008      	b.n	8009bd6 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009bc4:	f7f9 fc80 	bl	80034c8 <HAL_GetTick>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	1ad3      	subs	r3, r2, r3
 8009bce:	2b02      	cmp	r3, #2
 8009bd0:	d901      	bls.n	8009bd6 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	e006      	b.n	8009be4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bd6:	4b05      	ldr	r3, [pc, #20]	@ (8009bec <RCCEx_PLL3_Config+0x12c>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d0f0      	beq.n	8009bc4 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8009be2:	2300      	movs	r3, #0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	44020c00 	.word	0x44020c00

08009bf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d101      	bne.n	8009c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e042      	b.n	8009c88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d106      	bne.n	8009c1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f7f7 fc3d 	bl	8001494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2224      	movs	r2, #36	@ 0x24
 8009c1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f022 0201 	bic.w	r2, r2, #1
 8009c30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d002      	beq.n	8009c40 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 fab4 	bl	800a1a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 f8c3 	bl	8009dcc <UART_SetConfig>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d101      	bne.n	8009c50 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e01b      	b.n	8009c88 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009c5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	689a      	ldr	r2, [r3, #8]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009c6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f042 0201 	orr.w	r2, r2, #1
 8009c7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fb33 	bl	800a2ec <UART_CheckIdleState>
 8009c86:	4603      	mov	r3, r0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3708      	adds	r7, #8
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b08a      	sub	sp, #40	@ 0x28
 8009c94:	af02      	add	r7, sp, #8
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	603b      	str	r3, [r7, #0]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ca6:	2b20      	cmp	r3, #32
 8009ca8:	f040 808b 	bne.w	8009dc2 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d002      	beq.n	8009cb8 <HAL_UART_Transmit+0x28>
 8009cb2:	88fb      	ldrh	r3, [r7, #6]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d101      	bne.n	8009cbc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e083      	b.n	8009dc4 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cc6:	2b80      	cmp	r3, #128	@ 0x80
 8009cc8:	d107      	bne.n	8009cda <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	689a      	ldr	r2, [r3, #8]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009cd8:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2221      	movs	r2, #33	@ 0x21
 8009ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009cea:	f7f9 fbed 	bl	80034c8 <HAL_GetTick>
 8009cee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	88fa      	ldrh	r2, [r7, #6]
 8009cf4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	88fa      	ldrh	r2, [r7, #6]
 8009cfc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d08:	d108      	bne.n	8009d1c <HAL_UART_Transmit+0x8c>
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d104      	bne.n	8009d1c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8009d12:	2300      	movs	r3, #0
 8009d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	61bb      	str	r3, [r7, #24]
 8009d1a:	e003      	b.n	8009d24 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d20:	2300      	movs	r3, #0
 8009d22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009d24:	e030      	b.n	8009d88 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	2180      	movs	r1, #128	@ 0x80
 8009d30:	68f8      	ldr	r0, [r7, #12]
 8009d32:	f000 fb85 	bl	800a440 <UART_WaitOnFlagUntilTimeout>
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d005      	beq.n	8009d48 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2220      	movs	r2, #32
 8009d40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009d44:	2303      	movs	r3, #3
 8009d46:	e03d      	b.n	8009dc4 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d10b      	bne.n	8009d66 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	881b      	ldrh	r3, [r3, #0]
 8009d52:	461a      	mov	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d5c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	3302      	adds	r3, #2
 8009d62:	61bb      	str	r3, [r7, #24]
 8009d64:	e007      	b.n	8009d76 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	781a      	ldrb	r2, [r3, #0]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	3301      	adds	r3, #1
 8009d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1c8      	bne.n	8009d26 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	2140      	movs	r1, #64	@ 0x40
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f000 fb4e 	bl	800a440 <UART_WaitOnFlagUntilTimeout>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d005      	beq.n	8009db6 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2220      	movs	r2, #32
 8009dae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009db2:	2303      	movs	r3, #3
 8009db4:	e006      	b.n	8009dc4 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2220      	movs	r2, #32
 8009dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	e000      	b.n	8009dc4 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8009dc2:	2302      	movs	r3, #2
  }
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3720      	adds	r7, #32
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009dd0:	b094      	sub	sp, #80	@ 0x50
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	4b78      	ldr	r3, [pc, #480]	@ (8009fc4 <UART_SetConfig+0x1f8>)
 8009de2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009de6:	689a      	ldr	r2, [r3, #8]
 8009de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	431a      	orrs	r2, r3
 8009dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009df0:	695b      	ldr	r3, [r3, #20]
 8009df2:	431a      	orrs	r2, r3
 8009df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009df6:	69db      	ldr	r3, [r3, #28]
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4971      	ldr	r1, [pc, #452]	@ (8009fc8 <UART_SetConfig+0x1fc>)
 8009e04:	4019      	ands	r1, r3
 8009e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e0c:	430b      	orrs	r3, r1
 8009e0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e1c:	68d9      	ldr	r1, [r3, #12]
 8009e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	ea40 0301 	orr.w	r3, r0, r1
 8009e26:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e2a:	699b      	ldr	r3, [r3, #24]
 8009e2c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	4b64      	ldr	r3, [pc, #400]	@ (8009fc4 <UART_SetConfig+0x1f8>)
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d009      	beq.n	8009e4c <UART_SetConfig+0x80>
 8009e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	4b63      	ldr	r3, [pc, #396]	@ (8009fcc <UART_SetConfig+0x200>)
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d004      	beq.n	8009e4c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e44:	6a1a      	ldr	r2, [r3, #32]
 8009e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009e56:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8009e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e60:	430b      	orrs	r3, r1
 8009e62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e6a:	f023 000f 	bic.w	r0, r3, #15
 8009e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e70:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	ea40 0301 	orr.w	r3, r0, r1
 8009e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	4b53      	ldr	r3, [pc, #332]	@ (8009fd0 <UART_SetConfig+0x204>)
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d102      	bne.n	8009e8c <UART_SetConfig+0xc0>
 8009e86:	2301      	movs	r3, #1
 8009e88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e8a:	e066      	b.n	8009f5a <UART_SetConfig+0x18e>
 8009e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	4b50      	ldr	r3, [pc, #320]	@ (8009fd4 <UART_SetConfig+0x208>)
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d102      	bne.n	8009e9c <UART_SetConfig+0xd0>
 8009e96:	2302      	movs	r3, #2
 8009e98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e9a:	e05e      	b.n	8009f5a <UART_SetConfig+0x18e>
 8009e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	4b4d      	ldr	r3, [pc, #308]	@ (8009fd8 <UART_SetConfig+0x20c>)
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d102      	bne.n	8009eac <UART_SetConfig+0xe0>
 8009ea6:	2304      	movs	r3, #4
 8009ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009eaa:	e056      	b.n	8009f5a <UART_SetConfig+0x18e>
 8009eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	4b4a      	ldr	r3, [pc, #296]	@ (8009fdc <UART_SetConfig+0x210>)
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d102      	bne.n	8009ebc <UART_SetConfig+0xf0>
 8009eb6:	2308      	movs	r3, #8
 8009eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009eba:	e04e      	b.n	8009f5a <UART_SetConfig+0x18e>
 8009ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	4b47      	ldr	r3, [pc, #284]	@ (8009fe0 <UART_SetConfig+0x214>)
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d102      	bne.n	8009ecc <UART_SetConfig+0x100>
 8009ec6:	2310      	movs	r3, #16
 8009ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009eca:	e046      	b.n	8009f5a <UART_SetConfig+0x18e>
 8009ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	4b44      	ldr	r3, [pc, #272]	@ (8009fe4 <UART_SetConfig+0x218>)
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d102      	bne.n	8009edc <UART_SetConfig+0x110>
 8009ed6:	2320      	movs	r3, #32
 8009ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009eda:	e03e      	b.n	8009f5a <UART_SetConfig+0x18e>
 8009edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	4b41      	ldr	r3, [pc, #260]	@ (8009fe8 <UART_SetConfig+0x21c>)
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d102      	bne.n	8009eec <UART_SetConfig+0x120>
 8009ee6:	2340      	movs	r3, #64	@ 0x40
 8009ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009eea:	e036      	b.n	8009f5a <UART_SetConfig+0x18e>
 8009eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	4b3e      	ldr	r3, [pc, #248]	@ (8009fec <UART_SetConfig+0x220>)
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d102      	bne.n	8009efc <UART_SetConfig+0x130>
 8009ef6:	2380      	movs	r3, #128	@ 0x80
 8009ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009efa:	e02e      	b.n	8009f5a <UART_SetConfig+0x18e>
 8009efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	4b3b      	ldr	r3, [pc, #236]	@ (8009ff0 <UART_SetConfig+0x224>)
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d103      	bne.n	8009f0e <UART_SetConfig+0x142>
 8009f06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f0c:	e025      	b.n	8009f5a <UART_SetConfig+0x18e>
 8009f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	4b38      	ldr	r3, [pc, #224]	@ (8009ff4 <UART_SetConfig+0x228>)
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d103      	bne.n	8009f20 <UART_SetConfig+0x154>
 8009f18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f1e:	e01c      	b.n	8009f5a <UART_SetConfig+0x18e>
 8009f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	4b34      	ldr	r3, [pc, #208]	@ (8009ff8 <UART_SetConfig+0x22c>)
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d103      	bne.n	8009f32 <UART_SetConfig+0x166>
 8009f2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f30:	e013      	b.n	8009f5a <UART_SetConfig+0x18e>
 8009f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	4b31      	ldr	r3, [pc, #196]	@ (8009ffc <UART_SetConfig+0x230>)
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d103      	bne.n	8009f44 <UART_SetConfig+0x178>
 8009f3c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009f40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f42:	e00a      	b.n	8009f5a <UART_SetConfig+0x18e>
 8009f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	4b1e      	ldr	r3, [pc, #120]	@ (8009fc4 <UART_SetConfig+0x1f8>)
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d103      	bne.n	8009f56 <UART_SetConfig+0x18a>
 8009f4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009f52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f54:	e001      	b.n	8009f5a <UART_SetConfig+0x18e>
 8009f56:	2300      	movs	r3, #0
 8009f58:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	4b19      	ldr	r3, [pc, #100]	@ (8009fc4 <UART_SetConfig+0x1f8>)
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d005      	beq.n	8009f70 <UART_SetConfig+0x1a4>
 8009f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	4b18      	ldr	r3, [pc, #96]	@ (8009fcc <UART_SetConfig+0x200>)
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	f040 8094 	bne.w	800a098 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009f70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f72:	2200      	movs	r2, #0
 8009f74:	623b      	str	r3, [r7, #32]
 8009f76:	627a      	str	r2, [r7, #36]	@ 0x24
 8009f78:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009f7c:	f7fd f9ae 	bl	80072dc <HAL_RCCEx_GetPeriphCLKFreq>
 8009f80:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f000 80f7 	beq.w	800a178 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f8e:	4a1c      	ldr	r2, [pc, #112]	@ (800a000 <UART_SetConfig+0x234>)
 8009f90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f94:	461a      	mov	r2, r3
 8009f96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f98:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f9c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa0:	685a      	ldr	r2, [r3, #4]
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	005b      	lsls	r3, r3, #1
 8009fa6:	4413      	add	r3, r2
 8009fa8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d305      	bcc.n	8009fba <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d924      	bls.n	800a004 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009fc0:	e069      	b.n	800a096 <UART_SetConfig+0x2ca>
 8009fc2:	bf00      	nop
 8009fc4:	44002400 	.word	0x44002400
 8009fc8:	cfff69f3 	.word	0xcfff69f3
 8009fcc:	54002400 	.word	0x54002400
 8009fd0:	40013800 	.word	0x40013800
 8009fd4:	40004400 	.word	0x40004400
 8009fd8:	40004800 	.word	0x40004800
 8009fdc:	40004c00 	.word	0x40004c00
 8009fe0:	40005000 	.word	0x40005000
 8009fe4:	40006400 	.word	0x40006400
 8009fe8:	40007800 	.word	0x40007800
 8009fec:	40007c00 	.word	0x40007c00
 8009ff0:	40008000 	.word	0x40008000
 8009ff4:	40006800 	.word	0x40006800
 8009ff8:	40006c00 	.word	0x40006c00
 8009ffc:	40008400 	.word	0x40008400
 800a000:	08014654 	.word	0x08014654
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a004:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a006:	2200      	movs	r2, #0
 800a008:	61bb      	str	r3, [r7, #24]
 800a00a:	61fa      	str	r2, [r7, #28]
 800a00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a00e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a010:	4a64      	ldr	r2, [pc, #400]	@ (800a1a4 <UART_SetConfig+0x3d8>)
 800a012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a016:	b29b      	uxth	r3, r3
 800a018:	2200      	movs	r2, #0
 800a01a:	613b      	str	r3, [r7, #16]
 800a01c:	617a      	str	r2, [r7, #20]
 800a01e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a022:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a026:	f7f6 f939 	bl	800029c <__aeabi_uldivmod>
 800a02a:	4602      	mov	r2, r0
 800a02c:	460b      	mov	r3, r1
 800a02e:	4610      	mov	r0, r2
 800a030:	4619      	mov	r1, r3
 800a032:	f04f 0200 	mov.w	r2, #0
 800a036:	f04f 0300 	mov.w	r3, #0
 800a03a:	020b      	lsls	r3, r1, #8
 800a03c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a040:	0202      	lsls	r2, r0, #8
 800a042:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a044:	6849      	ldr	r1, [r1, #4]
 800a046:	0849      	lsrs	r1, r1, #1
 800a048:	2000      	movs	r0, #0
 800a04a:	460c      	mov	r4, r1
 800a04c:	4605      	mov	r5, r0
 800a04e:	eb12 0804 	adds.w	r8, r2, r4
 800a052:	eb43 0905 	adc.w	r9, r3, r5
 800a056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	2200      	movs	r2, #0
 800a05c:	60bb      	str	r3, [r7, #8]
 800a05e:	60fa      	str	r2, [r7, #12]
 800a060:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a064:	4640      	mov	r0, r8
 800a066:	4649      	mov	r1, r9
 800a068:	f7f6 f918 	bl	800029c <__aeabi_uldivmod>
 800a06c:	4602      	mov	r2, r0
 800a06e:	460b      	mov	r3, r1
 800a070:	4613      	mov	r3, r2
 800a072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a076:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a07a:	d308      	bcc.n	800a08e <UART_SetConfig+0x2c2>
 800a07c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a07e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a082:	d204      	bcs.n	800a08e <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800a084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a08a:	60da      	str	r2, [r3, #12]
 800a08c:	e003      	b.n	800a096 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800a094:	e070      	b.n	800a178 <UART_SetConfig+0x3ac>
 800a096:	e06f      	b.n	800a178 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a09a:	69db      	ldr	r3, [r3, #28]
 800a09c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0a0:	d13c      	bne.n	800a11c <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a0a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	603b      	str	r3, [r7, #0]
 800a0a8:	607a      	str	r2, [r7, #4]
 800a0aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0ae:	f7fd f915 	bl	80072dc <HAL_RCCEx_GetPeriphCLKFreq>
 800a0b2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a0b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d05e      	beq.n	800a178 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0be:	4a39      	ldr	r2, [pc, #228]	@ (800a1a4 <UART_SetConfig+0x3d8>)
 800a0c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0cc:	005a      	lsls	r2, r3, #1
 800a0ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	085b      	lsrs	r3, r3, #1
 800a0d4:	441a      	add	r2, r3
 800a0d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0e2:	2b0f      	cmp	r3, #15
 800a0e4:	d916      	bls.n	800a114 <UART_SetConfig+0x348>
 800a0e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0ec:	d212      	bcs.n	800a114 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a0ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	f023 030f 	bic.w	r3, r3, #15
 800a0f6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a0f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0fa:	085b      	lsrs	r3, r3, #1
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	f003 0307 	and.w	r3, r3, #7
 800a102:	b29a      	uxth	r2, r3
 800a104:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a106:	4313      	orrs	r3, r2
 800a108:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800a10a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a110:	60da      	str	r2, [r3, #12]
 800a112:	e031      	b.n	800a178 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a11a:	e02d      	b.n	800a178 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a11c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a11e:	2200      	movs	r2, #0
 800a120:	469a      	mov	sl, r3
 800a122:	4693      	mov	fp, r2
 800a124:	4650      	mov	r0, sl
 800a126:	4659      	mov	r1, fp
 800a128:	f7fd f8d8 	bl	80072dc <HAL_RCCEx_GetPeriphCLKFreq>
 800a12c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800a12e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a130:	2b00      	cmp	r3, #0
 800a132:	d021      	beq.n	800a178 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a138:	4a1a      	ldr	r2, [pc, #104]	@ (800a1a4 <UART_SetConfig+0x3d8>)
 800a13a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a13e:	461a      	mov	r2, r3
 800a140:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a142:	fbb3 f2f2 	udiv	r2, r3, r2
 800a146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	085b      	lsrs	r3, r3, #1
 800a14c:	441a      	add	r2, r3
 800a14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	fbb2 f3f3 	udiv	r3, r2, r3
 800a156:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a15a:	2b0f      	cmp	r3, #15
 800a15c:	d909      	bls.n	800a172 <UART_SetConfig+0x3a6>
 800a15e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a164:	d205      	bcs.n	800a172 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a168:	b29a      	uxth	r2, r3
 800a16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	60da      	str	r2, [r3, #12]
 800a170:	e002      	b.n	800a178 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a17a:	2201      	movs	r2, #1
 800a17c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a182:	2201      	movs	r2, #1
 800a184:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a18a:	2200      	movs	r2, #0
 800a18c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a18e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a190:	2200      	movs	r2, #0
 800a192:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a194:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3750      	adds	r7, #80	@ 0x50
 800a19c:	46bd      	mov	sp, r7
 800a19e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1a2:	bf00      	nop
 800a1a4:	08014654 	.word	0x08014654

0800a1a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1b4:	f003 0308 	and.w	r3, r3, #8
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d00a      	beq.n	800a1d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	430a      	orrs	r2, r1
 800a1d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1d6:	f003 0301 	and.w	r3, r3, #1
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00a      	beq.n	800a1f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	430a      	orrs	r2, r1
 800a1f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f8:	f003 0302 	and.w	r3, r3, #2
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d00a      	beq.n	800a216 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	430a      	orrs	r2, r1
 800a214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a21a:	f003 0304 	and.w	r3, r3, #4
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d00a      	beq.n	800a238 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	430a      	orrs	r2, r1
 800a236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a23c:	f003 0310 	and.w	r3, r3, #16
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00a      	beq.n	800a25a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	430a      	orrs	r2, r1
 800a258:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a25e:	f003 0320 	and.w	r3, r3, #32
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00a      	beq.n	800a27c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	430a      	orrs	r2, r1
 800a27a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a284:	2b00      	cmp	r3, #0
 800a286:	d01a      	beq.n	800a2be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	430a      	orrs	r2, r1
 800a29c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2a6:	d10a      	bne.n	800a2be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	430a      	orrs	r2, r1
 800a2bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00a      	beq.n	800a2e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	430a      	orrs	r2, r1
 800a2de:	605a      	str	r2, [r3, #4]
  }
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b098      	sub	sp, #96	@ 0x60
 800a2f0:	af02      	add	r7, sp, #8
 800a2f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2fc:	f7f9 f8e4 	bl	80034c8 <HAL_GetTick>
 800a300:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 0308 	and.w	r3, r3, #8
 800a30c:	2b08      	cmp	r3, #8
 800a30e:	d12f      	bne.n	800a370 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a310:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a314:	9300      	str	r3, [sp, #0]
 800a316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a318:	2200      	movs	r2, #0
 800a31a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 f88e 	bl	800a440 <UART_WaitOnFlagUntilTimeout>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d022      	beq.n	800a370 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a332:	e853 3f00 	ldrex	r3, [r3]
 800a336:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a33a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a33e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	461a      	mov	r2, r3
 800a346:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a348:	647b      	str	r3, [r7, #68]	@ 0x44
 800a34a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a34e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a350:	e841 2300 	strex	r3, r2, [r1]
 800a354:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1e6      	bne.n	800a32a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2220      	movs	r2, #32
 800a360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a36c:	2303      	movs	r3, #3
 800a36e:	e063      	b.n	800a438 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 0304 	and.w	r3, r3, #4
 800a37a:	2b04      	cmp	r3, #4
 800a37c:	d149      	bne.n	800a412 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a37e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a382:	9300      	str	r3, [sp, #0]
 800a384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a386:	2200      	movs	r2, #0
 800a388:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 f857 	bl	800a440 <UART_WaitOnFlagUntilTimeout>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d03c      	beq.n	800a412 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a0:	e853 3f00 	ldrex	r3, [r3]
 800a3a4:	623b      	str	r3, [r7, #32]
   return(result);
 800a3a6:	6a3b      	ldr	r3, [r7, #32]
 800a3a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a3bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3be:	e841 2300 	strex	r3, r2, [r1]
 800a3c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d1e6      	bne.n	800a398 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	3308      	adds	r3, #8
 800a3d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	e853 3f00 	ldrex	r3, [r3]
 800a3d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f023 0301 	bic.w	r3, r3, #1
 800a3e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	3308      	adds	r3, #8
 800a3e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3ea:	61fa      	str	r2, [r7, #28]
 800a3ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ee:	69b9      	ldr	r1, [r7, #24]
 800a3f0:	69fa      	ldr	r2, [r7, #28]
 800a3f2:	e841 2300 	strex	r3, r2, [r1]
 800a3f6:	617b      	str	r3, [r7, #20]
   return(result);
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d1e5      	bne.n	800a3ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2220      	movs	r2, #32
 800a402:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a40e:	2303      	movs	r3, #3
 800a410:	e012      	b.n	800a438 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2220      	movs	r2, #32
 800a416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2220      	movs	r2, #32
 800a41e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3758      	adds	r7, #88	@ 0x58
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	603b      	str	r3, [r7, #0]
 800a44c:	4613      	mov	r3, r2
 800a44e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a450:	e04f      	b.n	800a4f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a458:	d04b      	beq.n	800a4f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a45a:	f7f9 f835 	bl	80034c8 <HAL_GetTick>
 800a45e:	4602      	mov	r2, r0
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	1ad3      	subs	r3, r2, r3
 800a464:	69ba      	ldr	r2, [r7, #24]
 800a466:	429a      	cmp	r2, r3
 800a468:	d302      	bcc.n	800a470 <UART_WaitOnFlagUntilTimeout+0x30>
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d101      	bne.n	800a474 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a470:	2303      	movs	r3, #3
 800a472:	e04e      	b.n	800a512 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f003 0304 	and.w	r3, r3, #4
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d037      	beq.n	800a4f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	2b80      	cmp	r3, #128	@ 0x80
 800a486:	d034      	beq.n	800a4f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	2b40      	cmp	r3, #64	@ 0x40
 800a48c:	d031      	beq.n	800a4f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	69db      	ldr	r3, [r3, #28]
 800a494:	f003 0308 	and.w	r3, r3, #8
 800a498:	2b08      	cmp	r3, #8
 800a49a:	d110      	bne.n	800a4be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2208      	movs	r2, #8
 800a4a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f000 f838 	bl	800a51a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2208      	movs	r2, #8
 800a4ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	e029      	b.n	800a512 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	69db      	ldr	r3, [r3, #28]
 800a4c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a4c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4cc:	d111      	bne.n	800a4f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a4d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f000 f81e 	bl	800a51a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2220      	movs	r2, #32
 800a4e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a4ee:	2303      	movs	r3, #3
 800a4f0:	e00f      	b.n	800a512 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	69da      	ldr	r2, [r3, #28]
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	bf0c      	ite	eq
 800a502:	2301      	moveq	r3, #1
 800a504:	2300      	movne	r3, #0
 800a506:	b2db      	uxtb	r3, r3
 800a508:	461a      	mov	r2, r3
 800a50a:	79fb      	ldrb	r3, [r7, #7]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d0a0      	beq.n	800a452 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3710      	adds	r7, #16
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a51a:	b480      	push	{r7}
 800a51c:	b095      	sub	sp, #84	@ 0x54
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a52a:	e853 3f00 	ldrex	r3, [r3]
 800a52e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a532:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a536:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	461a      	mov	r2, r3
 800a53e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a540:	643b      	str	r3, [r7, #64]	@ 0x40
 800a542:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a544:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a546:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a548:	e841 2300 	strex	r3, r2, [r1]
 800a54c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a550:	2b00      	cmp	r3, #0
 800a552:	d1e6      	bne.n	800a522 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	3308      	adds	r3, #8
 800a55a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a55c:	6a3b      	ldr	r3, [r7, #32]
 800a55e:	e853 3f00 	ldrex	r3, [r3]
 800a562:	61fb      	str	r3, [r7, #28]
   return(result);
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a56a:	f023 0301 	bic.w	r3, r3, #1
 800a56e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	3308      	adds	r3, #8
 800a576:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a578:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a57a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a57e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a580:	e841 2300 	strex	r3, r2, [r1]
 800a584:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d1e3      	bne.n	800a554 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a590:	2b01      	cmp	r3, #1
 800a592:	d118      	bne.n	800a5c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	e853 3f00 	ldrex	r3, [r3]
 800a5a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	f023 0310 	bic.w	r3, r3, #16
 800a5a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5b2:	61bb      	str	r3, [r7, #24]
 800a5b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b6:	6979      	ldr	r1, [r7, #20]
 800a5b8:	69ba      	ldr	r2, [r7, #24]
 800a5ba:	e841 2300 	strex	r3, r2, [r1]
 800a5be:	613b      	str	r3, [r7, #16]
   return(result);
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d1e6      	bne.n	800a594 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2220      	movs	r2, #32
 800a5ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a5da:	bf00      	nop
 800a5dc:	3754      	adds	r7, #84	@ 0x54
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr

0800a5e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a5e6:	b480      	push	{r7}
 800a5e8:	b085      	sub	sp, #20
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d101      	bne.n	800a5fc <HAL_UARTEx_DisableFifoMode+0x16>
 800a5f8:	2302      	movs	r3, #2
 800a5fa:	e027      	b.n	800a64c <HAL_UARTEx_DisableFifoMode+0x66>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2224      	movs	r2, #36	@ 0x24
 800a608:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f022 0201 	bic.w	r2, r2, #1
 800a622:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a62a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	68fa      	ldr	r2, [r7, #12]
 800a638:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2220      	movs	r2, #32
 800a63e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3714      	adds	r7, #20
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d101      	bne.n	800a670 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a66c:	2302      	movs	r3, #2
 800a66e:	e02d      	b.n	800a6cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2224      	movs	r2, #36	@ 0x24
 800a67c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f022 0201 	bic.w	r2, r2, #1
 800a696:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	430a      	orrs	r2, r1
 800a6aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 f84f 	bl	800a750 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2220      	movs	r2, #32
 800a6be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a6ca:	2300      	movs	r3, #0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3710      	adds	r7, #16
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d101      	bne.n	800a6ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a6e8:	2302      	movs	r3, #2
 800a6ea:	e02d      	b.n	800a748 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2224      	movs	r2, #36	@ 0x24
 800a6f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f022 0201 	bic.w	r2, r2, #1
 800a712:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	683a      	ldr	r2, [r7, #0]
 800a724:	430a      	orrs	r2, r1
 800a726:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 f811 	bl	800a750 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2220      	movs	r2, #32
 800a73a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d108      	bne.n	800a772 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a770:	e031      	b.n	800a7d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a772:	2308      	movs	r3, #8
 800a774:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a776:	2308      	movs	r3, #8
 800a778:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	0e5b      	lsrs	r3, r3, #25
 800a782:	b2db      	uxtb	r3, r3
 800a784:	f003 0307 	and.w	r3, r3, #7
 800a788:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	0f5b      	lsrs	r3, r3, #29
 800a792:	b2db      	uxtb	r3, r3
 800a794:	f003 0307 	and.w	r3, r3, #7
 800a798:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a79a:	7bbb      	ldrb	r3, [r7, #14]
 800a79c:	7b3a      	ldrb	r2, [r7, #12]
 800a79e:	4911      	ldr	r1, [pc, #68]	@ (800a7e4 <UARTEx_SetNbDataToProcess+0x94>)
 800a7a0:	5c8a      	ldrb	r2, [r1, r2]
 800a7a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a7a6:	7b3a      	ldrb	r2, [r7, #12]
 800a7a8:	490f      	ldr	r1, [pc, #60]	@ (800a7e8 <UARTEx_SetNbDataToProcess+0x98>)
 800a7aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a7ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7b0:	b29a      	uxth	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a7b8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ba:	7b7a      	ldrb	r2, [r7, #13]
 800a7bc:	4909      	ldr	r1, [pc, #36]	@ (800a7e4 <UARTEx_SetNbDataToProcess+0x94>)
 800a7be:	5c8a      	ldrb	r2, [r1, r2]
 800a7c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a7c4:	7b7a      	ldrb	r2, [r7, #13]
 800a7c6:	4908      	ldr	r1, [pc, #32]	@ (800a7e8 <UARTEx_SetNbDataToProcess+0x98>)
 800a7c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a7ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7ce:	b29a      	uxth	r2, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a7d6:	bf00      	nop
 800a7d8:	3714      	adds	r7, #20
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr
 800a7e2:	bf00      	nop
 800a7e4:	0801466c 	.word	0x0801466c
 800a7e8:	08014674 	.word	0x08014674

0800a7ec <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f043 0201 	orr.w	r2, r3, #1
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	601a      	str	r2, [r3, #0]
}
 800a800:	bf00      	nop
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <LL_DLYB_Disable>:
  * @param  DLYBx DLYB Instance.
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Disable(DLYB_TypeDef *DLYBx)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(DLYBx->CR, DLYB_CR_DEN);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f023 0201 	bic.w	r2, r3, #1
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	601a      	str	r2, [r3, #0]
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b086      	sub	sp, #24
 800a830:	af02      	add	r7, sp, #8
 800a832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a834:	2300      	movs	r3, #0
 800a836:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800a838:	f7f8 fe46 	bl	80034c8 <HAL_GetTick>
 800a83c:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d102      	bne.n	800a84a <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800a844:	2301      	movs	r3, #1
 800a846:	73fb      	strb	r3, [r7, #15]
 800a848:	e0bc      	b.n	800a9c4 <HAL_XSPI_Init+0x198>
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a60      	ldr	r2, [pc, #384]	@ (800a9d0 <HAL_XSPI_Init+0x1a4>)
 800a850:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	f040 80b1 	bne.w	800a9c4 <HAL_XSPI_Init+0x198>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f7f6 fb18 	bl	8000e98 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 800a868:	f241 3188 	movw	r1, #5000	@ 0x1388
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fb6c 	bl	800af4a <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	689a      	ldr	r2, [r3, #8]
 800a878:	4b56      	ldr	r3, [pc, #344]	@ (800a9d4 <HAL_XSPI_Init+0x1a8>)
 800a87a:	4013      	ands	r3, r2
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	68d1      	ldr	r1, [r2, #12]
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	6912      	ldr	r2, [r2, #16]
 800a884:	0412      	lsls	r2, r2, #16
 800a886:	4311      	orrs	r1, r2
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	6952      	ldr	r2, [r2, #20]
 800a88c:	3a01      	subs	r2, #1
 800a88e:	0212      	lsls	r2, r2, #8
 800a890:	4311      	orrs	r1, r2
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	69d2      	ldr	r2, [r2, #28]
 800a896:	4311      	orrs	r1, r2
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	6812      	ldr	r2, [r2, #0]
 800a89c:	430b      	orrs	r3, r1
 800a89e:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a4a      	ldr	r2, [pc, #296]	@ (800a9d0 <HAL_XSPI_Init+0x1a4>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d004      	beq.n	800a8b4 <HAL_XSPI_Init+0x88>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a4a      	ldr	r2, [pc, #296]	@ (800a9d8 <HAL_XSPI_Init+0x1ac>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d10a      	bne.n	800a8ca <HAL_XSPI_Init+0x9e>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	f023 0108 	bic.w	r1, r3, #8
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	430a      	orrs	r2, r1
 800a8c8:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6a1a      	ldr	r2, [r3, #32]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	430a      	orrs	r2, r1
 800a8de:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	691b      	ldr	r3, [r3, #16]
 800a8e6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8ee:	041a      	lsls	r2, r3, #16
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	430a      	orrs	r2, r1
 800a8f6:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a900:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	3b01      	subs	r3, #1
 800a912:	021a      	lsls	r2, r3, #8
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	430a      	orrs	r2, r1
 800a91a:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a920:	9300      	str	r3, [sp, #0]
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	2200      	movs	r2, #0
 800a926:	2120      	movs	r1, #32
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 fb9b 	bl	800b064 <XSPI_WaitFlagStateUntilTimeout>
 800a92e:	4603      	mov	r3, r0
 800a930:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800a932:	7bfb      	ldrb	r3, [r7, #15]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d145      	bne.n	800a9c4 <HAL_XSPI_Init+0x198>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	430a      	orrs	r2, r1
 800a94c:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	689a      	ldr	r2, [r3, #8]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	430a      	orrs	r2, r1
 800a962:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a96c:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a978:	431a      	orrs	r2, r3
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	430a      	orrs	r2, r1
 800a980:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f042 0201 	orr.w	r2, r2, #1
 800a992:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	699b      	ldr	r3, [r3, #24]
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d107      	bne.n	800a9ac <HAL_XSPI_Init+0x180>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	689a      	ldr	r2, [r3, #8]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f042 0202 	orr.w	r2, r2, #2
 800a9aa:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a9b4:	d103      	bne.n	800a9be <HAL_XSPI_Init+0x192>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	651a      	str	r2, [r3, #80]	@ 0x50
 800a9bc:	e002      	b.n	800a9c4 <HAL_XSPI_Init+0x198>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
    }
  }
  return status;
 800a9c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	47001400 	.word	0x47001400
 800a9d4:	f8e0c0fc 	.word	0xf8e0c0fc
 800a9d8:	57001400 	.word	0x57001400

0800a9dc <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *const pCmd, uint32_t Timeout)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b08a      	sub	sp, #40	@ 0x28
 800a9e0:	af02      	add	r7, sp, #8
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800a9e8:	f7f8 fd6e 	bl	80034c8 <HAL_GetTick>
 800a9ec:	61b8      	str	r0, [r7, #24]
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  assert_param(IS_XSPI_DATA_MODE(pCmd->DataMode));

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9f2:	2b00      	cmp	r3, #0

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
  assert_param(IS_XSPI_SIOO_MODE(pCmd->SIOOMode));

  /* Check the state of the driver */
  state = hxspi->State;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9f8:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	d104      	bne.n	800aa0a <HAL_XSPI_Command+0x2e>
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aa08:	d115      	bne.n	800aa36 <HAL_XSPI_Command+0x5a>
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	2b14      	cmp	r3, #20
 800aa0e:	d107      	bne.n	800aa20 <HAL_XSPI_Command+0x44>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	d00e      	beq.n	800aa36 <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 800aa1c:	2b03      	cmp	r3, #3
 800aa1e:	d00a      	beq.n	800aa36 <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	2b24      	cmp	r3, #36	@ 0x24
 800aa24:	d15e      	bne.n	800aae4 <HAL_XSPI_Command+0x108>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d003      	beq.n	800aa36 <HAL_XSPI_Command+0x5a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 800aa32:	2b03      	cmp	r3, #3
 800aa34:	d156      	bne.n	800aae4 <HAL_XSPI_Command+0x108>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	9300      	str	r3, [sp, #0]
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	2120      	movs	r1, #32
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f000 fb0f 	bl	800b064 <XSPI_WaitFlagStateUntilTimeout>
 800aa46:	4603      	mov	r3, r0
 800aa48:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800aa4a:	7ffb      	ldrb	r3, [r7, #31]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d146      	bne.n	800aade <HAL_XSPI_Command+0x102>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2200      	movs	r2, #0
 800aa54:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
 800aa56:	68b9      	ldr	r1, [r7, #8]
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	f000 fb39 	bl	800b0d0 <XSPI_ConfigCmd>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800aa62:	7ffb      	ldrb	r3, [r7, #31]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d143      	bne.n	800aaf0 <HAL_XSPI_Command+0x114>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d10e      	bne.n	800aa8e <HAL_XSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until BUSY flag is reset to go back in idle state. */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	9300      	str	r3, [sp, #0]
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	2200      	movs	r2, #0
 800aa78:	2120      	movs	r1, #32
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	f000 faf2 	bl	800b064 <XSPI_WaitFlagStateUntilTimeout>
 800aa80:	4603      	mov	r3, r0
 800aa82:	77fb      	strb	r3, [r7, #31]

          /* Clear TC flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	2202      	movs	r2, #2
 800aa8a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 800aa8c:	e030      	b.n	800aaf0 <HAL_XSPI_Command+0x114>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d103      	bne.n	800aa9e <HAL_XSPI_Command+0xc2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2204      	movs	r2, #4
 800aa9a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800aa9c:	e028      	b.n	800aaf0 <HAL_XSPI_Command+0x114>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d10b      	bne.n	800aabe <HAL_XSPI_Command+0xe2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aaaa:	2b24      	cmp	r3, #36	@ 0x24
 800aaac:	d103      	bne.n	800aab6 <HAL_XSPI_Command+0xda>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2204      	movs	r2, #4
 800aab2:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800aab4:	e01c      	b.n	800aaf0 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2214      	movs	r2, #20
 800aaba:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800aabc:	e018      	b.n	800aaf0 <HAL_XSPI_Command+0x114>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d114      	bne.n	800aaf0 <HAL_XSPI_Command+0x114>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aaca:	2b14      	cmp	r3, #20
 800aacc:	d103      	bne.n	800aad6 <HAL_XSPI_Command+0xfa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2204      	movs	r2, #4
 800aad2:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800aad4:	e00c      	b.n	800aaf0 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2224      	movs	r2, #36	@ 0x24
 800aada:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800aadc:	e008      	b.n	800aaf0 <HAL_XSPI_Command+0x114>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
 800aade:	2302      	movs	r3, #2
 800aae0:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 800aae2:	e005      	b.n	800aaf0 <HAL_XSPI_Command+0x114>
    }
  }
  else
  {
    status = HAL_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2210      	movs	r2, #16
 800aaec:	655a      	str	r2, [r3, #84]	@ 0x54
 800aaee:	e000      	b.n	800aaf2 <HAL_XSPI_Command+0x116>
    if (status == HAL_OK)
 800aaf0:	bf00      	nop
  }

  return status;
 800aaf2:	7ffb      	ldrb	r3, [r7, #31]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3720      	adds	r7, #32
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, const uint8_t *pData, uint32_t Timeout)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b08a      	sub	sp, #40	@ 0x28
 800ab00:	af02      	add	r7, sp, #8
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ab08:	f7f8 fcde 	bl	80034c8 <HAL_GetTick>
 800ab0c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	3350      	adds	r3, #80	@ 0x50
 800ab14:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d105      	bne.n	800ab28 <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2208      	movs	r2, #8
 800ab24:	655a      	str	r2, [r3, #84]	@ 0x54
 800ab26:	e057      	b.n	800abd8 <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab2c:	2b04      	cmp	r3, #4
 800ab2e:	d14e      	bne.n	800abce <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab36:	1c5a      	adds	r2, r3, #1
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->XferSize  = hxspi->XferCount;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	641a      	str	r2, [r3, #64]	@ 0x40
      hxspi->pBuffPtr  = (uint8_t *)pData;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800ab58:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	9300      	str	r3, [sp, #0]
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	2201      	movs	r2, #1
 800ab62:	2104      	movs	r1, #4
 800ab64:	68f8      	ldr	r0, [r7, #12]
 800ab66:	f000 fa7d 	bl	800b064 <XSPI_WaitFlagStateUntilTimeout>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800ab6e:	7ffb      	ldrb	r3, [r7, #31]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d113      	bne.n	800ab9c <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab78:	781a      	ldrb	r2, [r3, #0]
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab82:	1c5a      	adds	r2, r3, #1
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	63da      	str	r2, [r3, #60]	@ 0x3c
        hxspi->XferCount--;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab8c:	1e5a      	subs	r2, r3, #1
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	645a      	str	r2, [r3, #68]	@ 0x44
      } while (hxspi->XferCount > 0U);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1df      	bne.n	800ab5a <HAL_XSPI_Transmit+0x5e>
 800ab9a:	e000      	b.n	800ab9e <HAL_XSPI_Transmit+0xa2>
          break;
 800ab9c:	bf00      	nop

      if (status == HAL_OK)
 800ab9e:	7ffb      	ldrb	r3, [r7, #31]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d119      	bne.n	800abd8 <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	9300      	str	r3, [sp, #0]
 800aba8:	69bb      	ldr	r3, [r7, #24]
 800abaa:	2201      	movs	r2, #1
 800abac:	2102      	movs	r1, #2
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	f000 fa58 	bl	800b064 <XSPI_WaitFlagStateUntilTimeout>
 800abb4:	4603      	mov	r3, r0
 800abb6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800abb8:	7ffb      	ldrb	r3, [r7, #31]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d10c      	bne.n	800abd8 <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	2202      	movs	r2, #2
 800abc4:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2202      	movs	r2, #2
 800abca:	651a      	str	r2, [r3, #80]	@ 0x50
 800abcc:	e004      	b.n	800abd8 <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2210      	movs	r2, #16
 800abd6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  return status;
 800abd8:	7ffb      	ldrb	r3, [r7, #31]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3720      	adds	r7, #32
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b08c      	sub	sp, #48	@ 0x30
 800abe6:	af02      	add	r7, sp, #8
 800abe8:	60f8      	str	r0, [r7, #12]
 800abea:	60b9      	str	r1, [r7, #8]
 800abec:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800abee:	f7f8 fc6b 	bl	80034c8 <HAL_GetTick>
 800abf2:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	3350      	adds	r3, #80	@ 0x50
 800abfa:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac02:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800ac0c:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d106      	bne.n	800ac22 <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800ac14:	2301      	movs	r3, #1
 800ac16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2208      	movs	r2, #8
 800ac1e:	655a      	str	r2, [r3, #84]	@ 0x54
 800ac20:	e07c      	b.n	800ad1c <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac26:	2b04      	cmp	r3, #4
 800ac28:	d172      	bne.n	800ad10 <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac30:	1c5a      	adds	r2, r3, #1
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->XferSize  = hxspi->XferCount;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	641a      	str	r2, [r3, #64]	@ 0x40
      hxspi->pBuffPtr  = pData;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	68ba      	ldr	r2, [r7, #8]
 800ac42:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800ac56:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	68db      	ldr	r3, [r3, #12]
 800ac5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ac60:	d104      	bne.n	800ac6c <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	69ba      	ldr	r2, [r7, #24]
 800ac68:	649a      	str	r2, [r3, #72]	@ 0x48
 800ac6a:	e011      	b.n	800ac90 <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800ac74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d004      	beq.n	800ac86 <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	69ba      	ldr	r2, [r7, #24]
 800ac82:	649a      	str	r2, [r3, #72]	@ 0x48
 800ac84:	e004      	b.n	800ac90 <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	697a      	ldr	r2, [r7, #20]
 800ac8c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	6a3b      	ldr	r3, [r7, #32]
 800ac96:	2201      	movs	r2, #1
 800ac98:	2106      	movs	r1, #6
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f000 f9e2 	bl	800b064 <XSPI_WaitFlagStateUntilTimeout>
 800aca0:	4603      	mov	r3, r0
 800aca2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 800aca6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d114      	bne.n	800acd8 <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acb2:	69fa      	ldr	r2, [r7, #28]
 800acb4:	7812      	ldrb	r2, [r2, #0]
 800acb6:	b2d2      	uxtb	r2, r2
 800acb8:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acbe:	1c5a      	adds	r2, r3, #1
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	63da      	str	r2, [r3, #60]	@ 0x3c
        hxspi->XferCount--;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acc8:	1e5a      	subs	r2, r3, #1
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	645a      	str	r2, [r3, #68]	@ 0x44
      } while (hxspi->XferCount > 0U);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1dc      	bne.n	800ac90 <HAL_XSPI_Receive+0xae>
 800acd6:	e000      	b.n	800acda <HAL_XSPI_Receive+0xf8>
          break;
 800acd8:	bf00      	nop

      if (status == HAL_OK)
 800acda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d11c      	bne.n	800ad1c <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	9300      	str	r3, [sp, #0]
 800ace6:	6a3b      	ldr	r3, [r7, #32]
 800ace8:	2201      	movs	r2, #1
 800acea:	2102      	movs	r1, #2
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	f000 f9b9 	bl	800b064 <XSPI_WaitFlagStateUntilTimeout>
 800acf2:	4603      	mov	r3, r0
 800acf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 800acf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d10d      	bne.n	800ad1c <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2202      	movs	r2, #2
 800ad06:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2202      	movs	r2, #2
 800ad0c:	651a      	str	r2, [r3, #80]	@ 0x50
 800ad0e:	e005      	b.n	800ad1c <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800ad10:	2301      	movs	r3, #1
 800ad12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2210      	movs	r2, #16
 800ad1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  return status;
 800ad1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3728      	adds	r7, #40	@ 0x28
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, XSPI_AutoPollingTypeDef *const pCfg,
                                       uint32_t Timeout)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b08a      	sub	sp, #40	@ 0x28
 800ad2c:	af02      	add	r7, sp, #8
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ad34:	f7f8 fbc8 	bl	80034c8 <HAL_GetTick>
 800ad38:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hxspi->Instance->AR;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad40:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hxspi->Instance->IR;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800ad4a:	613b      	str	r3, [r7, #16]
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad50:	2b04      	cmp	r3, #4
 800ad52:	d167      	bne.n	800ae24 <HAL_XSPI_AutoPolling+0xfc>
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad5c:	d162      	bne.n	800ae24 <HAL_XSPI_AutoPolling+0xfc>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	9300      	str	r3, [sp, #0]
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	2200      	movs	r2, #0
 800ad66:	2120      	movs	r1, #32
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f000 f97b 	bl	800b064 <XSPI_WaitFlagStateUntilTimeout>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800ad72:	7ffb      	ldrb	r3, [r7, #31]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d152      	bne.n	800ae1e <HAL_XSPI_AutoPolling+0xf6>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	68ba      	ldr	r2, [r7, #8]
 800ad7e:	6812      	ldr	r2, [r2, #0]
 800ad80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	68ba      	ldr	r2, [r7, #8]
 800ad8a:	6852      	ldr	r2, [r2, #4]
 800ad8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	6912      	ldr	r2, [r2, #16]
 800ad98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	6899      	ldr	r1, [r3, #8]
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	430b      	orrs	r3, r1
 800adb0:	431a      	orrs	r2, r3
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800adba:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800adc4:	d104      	bne.n	800add0 <HAL_XSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	649a      	str	r2, [r3, #72]	@ 0x48
 800adce:	e011      	b.n	800adf4 <HAL_XSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800add8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800addc:	2b00      	cmp	r3, #0
 800adde:	d004      	beq.n	800adea <HAL_XSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	697a      	ldr	r2, [r7, #20]
 800ade6:	649a      	str	r2, [r3, #72]	@ 0x48
 800ade8:	e004      	b.n	800adf4 <HAL_XSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	693a      	ldr	r2, [r7, #16]
 800adf0:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	9300      	str	r3, [sp, #0]
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	2201      	movs	r2, #1
 800adfc:	2108      	movs	r1, #8
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	f000 f930 	bl	800b064 <XSPI_WaitFlagStateUntilTimeout>
 800ae04:	4603      	mov	r3, r0
 800ae06:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800ae08:	7ffb      	ldrb	r3, [r7, #31]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d110      	bne.n	800ae30 <HAL_XSPI_AutoPolling+0x108>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2208      	movs	r2, #8
 800ae14:	625a      	str	r2, [r3, #36]	@ 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2202      	movs	r2, #2
 800ae1a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800ae1c:	e008      	b.n	800ae30 <HAL_XSPI_AutoPolling+0x108>
      }
    }
    else
    {
      status = HAL_BUSY;
 800ae1e:	2302      	movs	r3, #2
 800ae20:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 800ae22:	e005      	b.n	800ae30 <HAL_XSPI_AutoPolling+0x108>
    }
  }
  else
  {
    status = HAL_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2210      	movs	r2, #16
 800ae2c:	655a      	str	r2, [r3, #84]	@ 0x54
 800ae2e:	e000      	b.n	800ae32 <HAL_XSPI_AutoPolling+0x10a>
    if (status == HAL_OK)
 800ae30:	bf00      	nop
  }

  return status;
 800ae32:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3720      	adds	r7, #32
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <HAL_XSPI_Abort>:
  * @brief  Abort the current operation, return to the indirect mode.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Abort(XSPI_HandleTypeDef *hxspi)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af02      	add	r7, sp, #8
 800ae42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae44:	2300      	movs	r3, #0
 800ae46:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800ae48:	f7f8 fb3e 	bl	80034c8 <HAL_GetTick>
 800ae4c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is not in reset state */
  if (hxspi->State != HAL_XSPI_STATE_RESET)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d06f      	beq.n	800af36 <HAL_XSPI_Abort+0xfa>
  {
    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f003 0304 	and.w	r3, r3, #4
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d021      	beq.n	800aea8 <HAL_XSPI_Abort+0x6c>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f022 0204 	bic.w	r2, r2, #4
 800ae72:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmatx);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7f8 fcb9 	bl	80037f0 <HAL_DMA_Abort>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 800ae82:	7bfb      	ldrb	r3, [r7, #15]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d002      	beq.n	800ae8e <HAL_XSPI_Abort+0x52>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2204      	movs	r2, #4
 800ae8c:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Disable the DMA receive on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmarx);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7f8 fcac 	bl	80037f0 <HAL_DMA_Abort>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 800ae9c:	7bfb      	ldrb	r3, [r7, #15]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d002      	beq.n	800aea8 <HAL_XSPI_Abort+0x6c>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2204      	movs	r2, #4
 800aea6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	6a1b      	ldr	r3, [r3, #32]
 800aeae:	f003 0320 	and.w	r3, r3, #32
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d033      	beq.n	800af1e <HAL_XSPI_Abort+0xe2>
    {
      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f042 0202 	orr.w	r2, r2, #2
 800aec4:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, hxspi->Timeout);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	2201      	movs	r2, #1
 800aed0:	2102      	movs	r1, #2
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 f8c6 	bl	800b064 <XSPI_WaitFlagStateUntilTimeout>
 800aed8:	4603      	mov	r3, r0
 800aeda:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800aedc:	7bfb      	ldrb	r3, [r7, #15]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d12e      	bne.n	800af40 <HAL_XSPI_Abort+0x104>
      {
        /* Clear transfer complete flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	2202      	movs	r2, #2
 800aee8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aeee:	9300      	str	r3, [sp, #0]
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	2200      	movs	r2, #0
 800aef4:	2120      	movs	r1, #32
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 f8b4 	bl	800b064 <XSPI_WaitFlagStateUntilTimeout>
 800aefc:	4603      	mov	r3, r0
 800aefe:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
 800af00:	7bfb      	ldrb	r3, [r7, #15]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d11c      	bne.n	800af40 <HAL_XSPI_Abort+0x104>
        {
          /* Return to indirect mode */
          CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800af14:	601a      	str	r2, [r3, #0]

          hxspi->State = HAL_XSPI_STATE_READY;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2202      	movs	r2, #2
 800af1a:	651a      	str	r2, [r3, #80]	@ 0x50
 800af1c:	e010      	b.n	800af40 <HAL_XSPI_Abort+0x104>
      }
    }
    else
    {
      /* Return to indirect mode */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800af2c:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2202      	movs	r2, #2
 800af32:	651a      	str	r2, [r3, #80]	@ 0x50
 800af34:	e004      	b.n	800af40 <HAL_XSPI_Abort+0x104>
    }
  }
  else
  {
    status = HAL_ERROR;
 800af36:	2301      	movs	r3, #1
 800af38:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2210      	movs	r2, #16
 800af3e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  return status;
 800af40:	7bfb      	ldrb	r3, [r7, #15]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 800af4a:	b480      	push	{r7}
 800af4c:	b083      	sub	sp, #12
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
 800af52:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	683a      	ldr	r2, [r7, #0]
 800af58:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 800af5a:	2300      	movs	r3, #0
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <HAL_XSPI_DLYB_SetConfig>:
  * @param  hxspi   : XSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_XSPI_DLYB_SetConfig(XSPI_HandleTypeDef *hxspi, HAL_XSPI_DLYB_CfgTypeDef  *const pdlyb_cfg)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	73fb      	strb	r3, [r7, #15]

  /* Enable XSPI Free Running Clock (mandatory) */
  SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	689a      	ldr	r2, [r3, #8]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f042 0202 	orr.w	r2, r2, #2
 800af84:	609a      	str	r2, [r3, #8]

  /* Update XSPI state */
  hxspi->State = HAL_XSPI_STATE_BUSY_CMD;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2208      	movs	r2, #8
 800af8a:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hxspi->Instance == OCTOSPI1)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a11      	ldr	r2, [pc, #68]	@ (800afd8 <HAL_XSPI_DLYB_SetConfig+0x70>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d109      	bne.n	800afaa <HAL_XSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 800af96:	4811      	ldr	r0, [pc, #68]	@ (800afdc <HAL_XSPI_DLYB_SetConfig+0x74>)
 800af98:	f7ff fc28 	bl	800a7ec <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 800af9c:	6839      	ldr	r1, [r7, #0]
 800af9e:	480f      	ldr	r0, [pc, #60]	@ (800afdc <HAL_XSPI_DLYB_SetConfig+0x74>)
 800afa0:	f000 fa3e 	bl	800b420 <LL_DLYB_SetDelay>
    status = HAL_OK;
 800afa4:	2300      	movs	r3, #0
 800afa6:	73fb      	strb	r3, [r7, #15]
 800afa8:	e005      	b.n	800afb6 <HAL_XSPI_DLYB_SetConfig+0x4e>
  }
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afae:	f043 0208 	orr.w	r2, r3, #8
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Abort the current XSPI operation if exist */
  (void)HAL_XSPI_Abort(hxspi);
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f7ff ff40 	bl	800ae3c <HAL_XSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	689a      	ldr	r2, [r3, #8]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f022 0202 	bic.w	r2, r2, #2
 800afca:	609a      	str	r2, [r3, #8]

  return status;
 800afcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	47001400 	.word	0x47001400
 800afdc:	4600f000 	.word	0x4600f000

0800afe0 <HAL_XSPI_DLYB_GetClockPeriod>:
  * @param  hxspi   : XSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_XSPI_DLYB_GetClockPeriod(XSPI_HandleTypeDef *hxspi, HAL_XSPI_DLYB_CfgTypeDef  *const pdlyb_cfg)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800afea:	2301      	movs	r3, #1
 800afec:	73fb      	strb	r3, [r7, #15]

  /* Enable XSPI Free Running Clock (mandatory) */
  SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	689a      	ldr	r2, [r3, #8]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f042 0202 	orr.w	r2, r2, #2
 800affc:	609a      	str	r2, [r3, #8]

  /* Update XSPI state */
  hxspi->State = HAL_XSPI_STATE_BUSY_CMD;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2208      	movs	r2, #8
 800b002:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hxspi->Instance == OCTOSPI1)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a14      	ldr	r2, [pc, #80]	@ (800b05c <HAL_XSPI_DLYB_GetClockPeriod+0x7c>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d10f      	bne.n	800b02e <HAL_XSPI_DLYB_GetClockPeriod+0x4e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 800b00e:	4814      	ldr	r0, [pc, #80]	@ (800b060 <HAL_XSPI_DLYB_GetClockPeriod+0x80>)
 800b010:	f7ff fbec 	bl	800a7ec <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI1, pdlyb_cfg) == (uint32_t)SUCCESS)
 800b014:	6839      	ldr	r1, [r7, #0]
 800b016:	4812      	ldr	r0, [pc, #72]	@ (800b060 <HAL_XSPI_DLYB_GetClockPeriod+0x80>)
 800b018:	f000 fa22 	bl	800b460 <LL_DLYB_GetClockPeriod>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d101      	bne.n	800b026 <HAL_XSPI_DLYB_GetClockPeriod+0x46>
    {
      status = HAL_OK;
 800b022:	2300      	movs	r3, #0
 800b024:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI1);
 800b026:	480e      	ldr	r0, [pc, #56]	@ (800b060 <HAL_XSPI_DLYB_GetClockPeriod+0x80>)
 800b028:	f7ff fbf0 	bl	800a80c <LL_DLYB_Disable>
 800b02c:	e005      	b.n	800b03a <HAL_XSPI_DLYB_GetClockPeriod+0x5a>
  }
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b032:	f043 0208 	orr.w	r2, r3, #8
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Abort the current XSPI operation if exist */
  (void)HAL_XSPI_Abort(hxspi);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f7ff fefe 	bl	800ae3c <HAL_XSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	689a      	ldr	r2, [r3, #8]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f022 0202 	bic.w	r2, r2, #2
 800b04e:	609a      	str	r2, [r3, #8]

  return status;
 800b050:	7bfb      	ldrb	r3, [r7, #15]
}
 800b052:	4618      	mov	r0, r3
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	47001400 	.word	0x47001400
 800b060:	4600f000 	.word	0x4600f000

0800b064 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	603b      	str	r3, [r7, #0]
 800b070:	4613      	mov	r3, r2
 800b072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 800b074:	e019      	b.n	800b0aa <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b07c:	d015      	beq.n	800b0aa <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b07e:	f7f8 fa23 	bl	80034c8 <HAL_GetTick>
 800b082:	4602      	mov	r2, r0
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	1ad3      	subs	r3, r2, r3
 800b088:	69ba      	ldr	r2, [r7, #24]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d302      	bcc.n	800b094 <XSPI_WaitFlagStateUntilTimeout+0x30>
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10a      	bne.n	800b0aa <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2202      	movs	r2, #2
 800b098:	651a      	str	r2, [r3, #80]	@ 0x50
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b09e:	f043 0201 	orr.w	r2, r3, #1
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_TIMEOUT;
 800b0a6:	2303      	movs	r3, #3
 800b0a8:	e00e      	b.n	800b0c8 <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	6a1a      	ldr	r2, [r3, #32]
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	4013      	ands	r3, r2
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	bf14      	ite	ne
 800b0b8:	2301      	movne	r3, #1
 800b0ba:	2300      	moveq	r3, #0
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	461a      	mov	r2, r3
 800b0c0:	79fb      	ldrb	r3, [r7, #7]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d1d7      	bne.n	800b076 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *pCmd)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b089      	sub	sp, #36	@ 0x24
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800b0ec:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d10a      	bne.n	800b10c <XSPI_ConfigCmd+0x3c>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	685a      	ldr	r2, [r3, #4]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	430a      	orrs	r2, r1
 800b10a:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2b02      	cmp	r3, #2
 800b112:	d114      	bne.n	800b13e <XSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800b11c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800b126:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800b130:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800b13a:	60fb      	str	r3, [r7, #12]
 800b13c:	e02c      	b.n	800b198 <XSPI_ConfigCmd+0xc8>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2b03      	cmp	r3, #3
 800b144:	d114      	bne.n	800b170 <XSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800b14e:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800b158:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b162:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800b16c:	60fb      	str	r3, [r7, #12]
 800b16e:	e013      	b.n	800b198 <XSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800b178:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800b182:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800b18c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800b196:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (pCmd->DQSMode | pCmd->SIOOMode);
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1a0:	431a      	orrs	r2, r3
 800b1a2:	69bb      	ldr	r3, [r7, #24]
 800b1a4:	601a      	str	r2, [r3, #0]

  /* Workaround for Erratasheet: Memory-mapped write error response when DQS output is disabled */
  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2b02      	cmp	r3, #2
 800b1ac:	d105      	bne.n	800b1ba <XSPI_ConfigCmd+0xea>
  {
    /* When doing memory-mapped writes, set the DQSE bit of the OCTOSPI_WCCR register,
       even for memories that have no DQS pin. */
    SET_BIT((*ccr_reg), XSPI_CCR_DQSE);
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d012      	beq.n	800b1e8 <XSPI_ConfigCmd+0x118>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
 800b1ca:	69bb      	ldr	r3, [r7, #24]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1da:	4319      	orrs	r1, r3
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1e0:	430b      	orrs	r3, r1
 800b1e2:	431a      	orrs	r2, r3
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f023 021f 	bic.w	r2, r3, #31
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1f4:	431a      	orrs	r2, r3
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d009      	beq.n	800b216 <XSPI_ConfigCmd+0x146>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d105      	bne.n	800b216 <XSPI_ConfigCmd+0x146>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	3a01      	subs	r2, #1
 800b214:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d01e      	beq.n	800b25c <XSPI_ConfigCmd+0x18c>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b222:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b226:	d10a      	bne.n	800b23e <XSPI_ConfigCmd+0x16e>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800b238:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 800b23c:	e00e      	b.n	800b25c <XSPI_ConfigCmd+0x18c>
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b246:	d109      	bne.n	800b25c <XSPI_ConfigCmd+0x18c>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800b258:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	2b00      	cmp	r3, #0
 800b262:	f000 8099 	beq.w	800b398 <XSPI_ConfigCmd+0x2c8>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	69db      	ldr	r3, [r3, #28]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d055      	beq.n	800b31a <XSPI_ConfigCmd+0x24a>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b272:	2b00      	cmp	r3, #0
 800b274:	d01e      	beq.n	800b2b4 <XSPI_ConfigCmd+0x1e4>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 800b276:	69bb      	ldr	r3, [r7, #24]
 800b278:	681a      	ldr	r2, [r3, #0]
 800b27a:	4b68      	ldr	r3, [pc, #416]	@ (800b41c <XSPI_ConfigCmd+0x34c>)
 800b27c:	4013      	ands	r3, r2
 800b27e:	683a      	ldr	r2, [r7, #0]
 800b280:	68d1      	ldr	r1, [r2, #12]
 800b282:	683a      	ldr	r2, [r7, #0]
 800b284:	6952      	ldr	r2, [r2, #20]
 800b286:	4311      	orrs	r1, r2
 800b288:	683a      	ldr	r2, [r7, #0]
 800b28a:	6912      	ldr	r2, [r2, #16]
 800b28c:	4311      	orrs	r1, r2
 800b28e:	683a      	ldr	r2, [r7, #0]
 800b290:	69d2      	ldr	r2, [r2, #28]
 800b292:	4311      	orrs	r1, r2
 800b294:	683a      	ldr	r2, [r7, #0]
 800b296:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b298:	4311      	orrs	r1, r2
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	6a12      	ldr	r2, [r2, #32]
 800b29e:	4311      	orrs	r1, r2
 800b2a0:	683a      	ldr	r2, [r7, #0]
 800b2a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b2a4:	4311      	orrs	r1, r2
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b2aa:	430a      	orrs	r2, r1
 800b2ac:	431a      	orrs	r2, r3
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	601a      	str	r2, [r3, #0]
 800b2b2:	e028      	b.n	800b306 <XSPI_ConfigCmd+0x236>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b2bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b2c0:	683a      	ldr	r2, [r7, #0]
 800b2c2:	68d1      	ldr	r1, [r2, #12]
 800b2c4:	683a      	ldr	r2, [r7, #0]
 800b2c6:	6952      	ldr	r2, [r2, #20]
 800b2c8:	4311      	orrs	r1, r2
 800b2ca:	683a      	ldr	r2, [r7, #0]
 800b2cc:	6912      	ldr	r2, [r2, #16]
 800b2ce:	4311      	orrs	r1, r2
 800b2d0:	683a      	ldr	r2, [r7, #0]
 800b2d2:	69d2      	ldr	r2, [r2, #28]
 800b2d4:	4311      	orrs	r1, r2
 800b2d6:	683a      	ldr	r2, [r7, #0]
 800b2d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b2da:	4311      	orrs	r1, r2
 800b2dc:	683a      	ldr	r2, [r7, #0]
 800b2de:	6a12      	ldr	r2, [r2, #32]
 800b2e0:	430a      	orrs	r2, r1
 800b2e2:	431a      	orrs	r2, r3
 800b2e4:	69bb      	ldr	r3, [r7, #24]
 800b2e6:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b2f0:	d109      	bne.n	800b306 <XSPI_ConfigCmd+0x236>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 800b2f6:	2b08      	cmp	r3, #8
 800b2f8:	d105      	bne.n	800b306 <XSPI_ConfigCmd+0x236>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	689a      	ldr	r2, [r3, #8]
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	683a      	ldr	r2, [r7, #0]
 800b314:	6992      	ldr	r2, [r2, #24]
 800b316:	649a      	str	r2, [r3, #72]	@ 0x48
 800b318:	e078      	b.n	800b40c <XSPI_ConfigCmd+0x33c>
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d017      	beq.n	800b352 <XSPI_ConfigCmd+0x282>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
 800b322:	69bb      	ldr	r3, [r7, #24]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800b32a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b32e:	683a      	ldr	r2, [r7, #0]
 800b330:	68d1      	ldr	r1, [r2, #12]
 800b332:	683a      	ldr	r2, [r7, #0]
 800b334:	6952      	ldr	r2, [r2, #20]
 800b336:	4311      	orrs	r1, r2
 800b338:	683a      	ldr	r2, [r7, #0]
 800b33a:	6912      	ldr	r2, [r2, #16]
 800b33c:	4311      	orrs	r1, r2
 800b33e:	683a      	ldr	r2, [r7, #0]
 800b340:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b342:	4311      	orrs	r1, r2
 800b344:	683a      	ldr	r2, [r7, #0]
 800b346:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b348:	430a      	orrs	r2, r1
 800b34a:	431a      	orrs	r2, r3
 800b34c:	69bb      	ldr	r3, [r7, #24]
 800b34e:	601a      	str	r2, [r3, #0]
 800b350:	e01d      	b.n	800b38e <XSPI_ConfigCmd+0x2be>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	68d9      	ldr	r1, [r3, #12]
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	695b      	ldr	r3, [r3, #20]
 800b362:	4319      	orrs	r1, r3
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	691b      	ldr	r3, [r3, #16]
 800b368:	430b      	orrs	r3, r1
 800b36a:	431a      	orrs	r2, r3
 800b36c:	69bb      	ldr	r3, [r7, #24]
 800b36e:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b374:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b378:	d109      	bne.n	800b38e <XSPI_ConfigCmd+0x2be>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 800b37e:	2b08      	cmp	r3, #8
 800b380:	d105      	bne.n	800b38e <XSPI_ConfigCmd+0x2be>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	689a      	ldr	r2, [r3, #8]
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	601a      	str	r2, [r3, #0]
 800b396:	e039      	b.n	800b40c <XSPI_ConfigCmd+0x33c>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	69db      	ldr	r3, [r3, #28]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d030      	beq.n	800b402 <XSPI_ConfigCmd+0x332>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d017      	beq.n	800b3d8 <XSPI_ConfigCmd+0x308>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800b3b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	69d1      	ldr	r1, [r2, #28]
 800b3b8:	683a      	ldr	r2, [r7, #0]
 800b3ba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b3bc:	4311      	orrs	r1, r2
 800b3be:	683a      	ldr	r2, [r7, #0]
 800b3c0:	6a12      	ldr	r2, [r2, #32]
 800b3c2:	4311      	orrs	r1, r2
 800b3c4:	683a      	ldr	r2, [r7, #0]
 800b3c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b3c8:	4311      	orrs	r1, r2
 800b3ca:	683a      	ldr	r2, [r7, #0]
 800b3cc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b3ce:	430a      	orrs	r2, r1
 800b3d0:	431a      	orrs	r2, r3
 800b3d2:	69bb      	ldr	r3, [r7, #24]
 800b3d4:	601a      	str	r2, [r3, #0]
 800b3d6:	e00e      	b.n	800b3f6 <XSPI_ConfigCmd+0x326>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	69d9      	ldr	r1, [r3, #28]
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3e8:	4319      	orrs	r1, r3
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	6a1b      	ldr	r3, [r3, #32]
 800b3ee:	430b      	orrs	r3, r1
 800b3f0:	431a      	orrs	r2, r3
 800b3f2:	69bb      	ldr	r3, [r7, #24]
 800b3f4:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	683a      	ldr	r2, [r7, #0]
 800b3fc:	6992      	ldr	r2, [r2, #24]
 800b3fe:	649a      	str	r2, [r3, #72]	@ 0x48
 800b400:	e004      	b.n	800b40c <XSPI_ConfigCmd+0x33c>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800b402:	2301      	movs	r3, #1
 800b404:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2208      	movs	r2, #8
 800b40a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  return status;
 800b40c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3724      	adds	r7, #36	@ 0x24
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr
 800b41a:	bf00      	nop
 800b41c:	f0ffc0c0 	.word	0xf0ffc0c0

0800b420 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f043 0202 	orr.w	r2, r3, #2
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	685a      	ldr	r2, [r3, #4]
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	021b      	lsls	r3, r3, #8
 800b440:	431a      	orrs	r2, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f023 0202 	bic.w	r2, r3, #2
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	601a      	str	r2, [r3, #0]
}
 800b452:	bf00      	nop
 800b454:	370c      	adds	r7, #12
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr
	...

0800b460 <LL_DLYB_GetClockPeriod>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: there is a valid period detected and stored in pdlyb_cfg.
  *          - ERROR: there is no valid period detected.
  */
uint32_t LL_DLYB_GetClockPeriod(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b086      	sub	sp, #24
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b46a:	2300      	movs	r3, #0
 800b46c:	617b      	str	r3, [r7, #20]

  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f043 0202 	orr.w	r2, r3, #2
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	601a      	str	r2, [r3, #0]

  /* Delay line length detection */
  while (i < DLYB_MAX_UNIT)
 800b47a:	e02a      	b.n	800b4d2 <LL_DLYB_GetClockPeriod+0x72>
  {
    /* Set the Delay of the UNIT(s)*/
    DLYBx->CFGR = DLYB_MAX_SELECT | (i << DLYB_CFGR_UNIT_Pos);
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	021b      	lsls	r3, r3, #8
 800b480:	f043 020c 	orr.w	r2, r3, #12
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	605a      	str	r2, [r3, #4]

    /* Waiting for a LNG valid value */
    tickstart =  HAL_GetTick();
 800b488:	f7f8 f81e 	bl	80034c8 <HAL_GetTick>
 800b48c:	60f8      	str	r0, [r7, #12]
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 800b48e:	e00c      	b.n	800b4aa <LL_DLYB_GetClockPeriod+0x4a>
    {
      if ((HAL_GetTick() - tickstart) >=  DLYB_TIMEOUT)
 800b490:	f7f8 f81a 	bl	80034c8 <HAL_GetTick>
 800b494:	4602      	mov	r2, r0
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	1ad3      	subs	r3, r2, r3
 800b49a:	2bfe      	cmp	r3, #254	@ 0xfe
 800b49c:	d905      	bls.n	800b4aa <LL_DLYB_GetClockPeriod+0x4a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	db01      	blt.n	800b4aa <LL_DLYB_GetClockPeriod+0x4a>
        {
          return (uint32_t) HAL_TIMEOUT;
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	e042      	b.n	800b530 <LL_DLYB_GetClockPeriod+0xd0>
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	daee      	bge.n	800b490 <LL_DLYB_GetClockPeriod+0x30>
        }
      }
    }

    if ((DLYBx->CFGR & DLYB_LNG_10_0_MASK) != 0U)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	685a      	ldr	r2, [r3, #4]
 800b4b6:	4b20      	ldr	r3, [pc, #128]	@ (800b538 <LL_DLYB_GetClockPeriod+0xd8>)
 800b4b8:	4013      	ands	r3, r2
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d006      	beq.n	800b4cc <LL_DLYB_GetClockPeriod+0x6c>
    {
      if ((DLYBx->CFGR & (DLYB_CFGR_LNG_11 | DLYB_CFGR_LNG_10)) != DLYB_LNG_11_10_MASK)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800b4c6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b4ca:	d106      	bne.n	800b4da <LL_DLYB_GetClockPeriod+0x7a>
      {
        /* Delay line length is configured to one input clock period*/
        break;
      }
    }
    i++;
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	617b      	str	r3, [r7, #20]
  while (i < DLYB_MAX_UNIT)
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	2b7f      	cmp	r3, #127	@ 0x7f
 800b4d6:	d9d1      	bls.n	800b47c <LL_DLYB_GetClockPeriod+0x1c>
 800b4d8:	e000      	b.n	800b4dc <LL_DLYB_GetClockPeriod+0x7c>
        break;
 800b4da:	bf00      	nop
  }

  if (DLYB_MAX_UNIT != i)
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	2b80      	cmp	r3, #128	@ 0x80
 800b4e0:	d022      	beq.n	800b528 <LL_DLYB_GetClockPeriod+0xc8>
  {
    /* Determine how many unit delays (nb) span one input clock period */
    lng = (DLYBx->CFGR & DLYB_CFGR_LNG) >> 16U;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	0c1b      	lsrs	r3, r3, #16
 800b4e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b4ec:	60bb      	str	r3, [r7, #8]
    nb = 10U;
 800b4ee:	230a      	movs	r3, #10
 800b4f0:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 800b4f2:	e002      	b.n	800b4fa <LL_DLYB_GetClockPeriod+0x9a>
    {
      nb--;
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	3b01      	subs	r3, #1
 800b4f8:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d005      	beq.n	800b50c <LL_DLYB_GetClockPeriod+0xac>
 800b500:	68ba      	ldr	r2, [r7, #8]
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	fa22 f303 	lsr.w	r3, r2, r3
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d0f3      	beq.n	800b4f4 <LL_DLYB_GetClockPeriod+0x94>
    }
    if (nb != 0U)
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00a      	beq.n	800b528 <LL_DLYB_GetClockPeriod+0xc8>
    {
      pdlyb_cfg->PhaseSel = nb ;
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	693a      	ldr	r2, [r7, #16]
 800b516:	605a      	str	r2, [r3, #4]
      pdlyb_cfg->Units = i ;
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	601a      	str	r2, [r3, #0]

      /* Disable the length sampling */
      DLYBx->CR = DLYB_CR_SEN;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2202      	movs	r2, #2
 800b522:	601a      	str	r2, [r3, #0]

      return (uint32_t)SUCCESS;
 800b524:	2300      	movs	r3, #0
 800b526:	e003      	b.n	800b530 <LL_DLYB_GetClockPeriod+0xd0>
    }
  }

  /* Disable the length sampling */
  DLYBx->CR = DLYB_CR_SEN;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2202      	movs	r2, #2
 800b52c:	601a      	str	r2, [r3, #0]

  return (uint32_t)ERROR;
 800b52e:	2301      	movs	r3, #1

}
 800b530:	4618      	mov	r0, r3
 800b532:	3718      	adds	r7, #24
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	07ff0000 	.word	0x07ff0000

0800b53c <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 800b546:	683a      	ldr	r2, [r7, #0]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	4293      	cmp	r3, r2
 800b54c:	bf38      	it	cc
 800b54e:	4613      	movcc	r3, r2
}
 800b550:	4618      	mov	r0, r3
 800b552:	370c      	adds	r7, #12
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800b566:	683a      	ldr	r2, [r7, #0]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	4293      	cmp	r3, r2
 800b56c:	bf28      	it	cs
 800b56e:	4613      	movcs	r3, r2
}
 800b570:	4618      	mov	r0, r3
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr

0800b57c <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 800b57c:	b480      	push	{r7}
 800b57e:	b083      	sub	sp, #12
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	683a      	ldr	r2, [r7, #0]
 800b58a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b58e:	6839      	ldr	r1, [r7, #0]
 800b590:	fb01 f202 	mul.w	r2, r1, r2
 800b594:	1a9b      	subs	r3, r3, r2
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	1ad3      	subs	r3, r2, r3
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	370c      	adds	r7, #12
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr

0800b5a6 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b082      	sub	sp, #8
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
 800b5ae:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	6839      	ldr	r1, [r7, #0]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7ff ffde 	bl	800b57c <lfs_aligndown>
 800b5c0:	4603      	mov	r3, r0
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3708      	adds	r7, #8
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800b5ca:	b480      	push	{r7}
 800b5cc:	b083      	sub	sp, #12
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	3b01      	subs	r3, #1
 800b5d6:	fab3 f383 	clz	r3, r3
 800b5da:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	370c      	adds	r7, #12
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr

0800b5ea <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800b5ea:	b480      	push	{r7}
 800b5ec:	b083      	sub	sp, #12
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	fa93 f3a3 	rbit	r3, r3
 800b5f8:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f7f4 fe5b 	bl	80002cc <__popcountsi2>
 800b616:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3708      	adds	r7, #8
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}

0800b620 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	1ad3      	subs	r3, r2, r3
}
 800b630:	4618      	mov	r0, r3
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 800b644:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 800b646:	4618      	mov	r0, r3
 800b648:	370c      	adds	r7, #12
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr

0800b652 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 800b652:	b580      	push	{r7, lr}
 800b654:	b082      	sub	sp, #8
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7ff ffee 	bl	800b63c <lfs_fromle32>
 800b660:	4603      	mov	r3, r0
}
 800b662:	4618      	mov	r0, r3
 800b664:	3708      	adds	r7, #8
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 800b66a:	b480      	push	{r7}
 800b66c:	b083      	sub	sp, #12
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 800b676:	4618      	mov	r0, r3
 800b678:	370c      	adds	r7, #12
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr

0800b682 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 800b682:	b580      	push	{r7, lr}
 800b684:	b082      	sub	sp, #8
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f7ff ffed 	bl	800b66a <lfs_frombe32>
 800b690:	4603      	mov	r3, r0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3708      	adds	r7, #8
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b082      	sub	sp, #8
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f006 ffde 	bl	8012664 <malloc>
 800b6a8:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3708      	adds	r7, #8
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b082      	sub	sp, #8
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f006 ffda 	bl	8012674 <free>
#else
    (void)p;
#endif
}
 800b6c0:	bf00      	nop
 800b6c2:	3708      	adds	r7, #8
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d8:	601a      	str	r2, [r3, #0]
}
 800b6da:	bf00      	nop
 800b6dc:	370c      	adds	r7, #12
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr

0800b6e6 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 800b6e6:	b580      	push	{r7, lr}
 800b6e8:	b082      	sub	sp, #8
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
 800b6ee:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	68d8      	ldr	r0, [r3, #12]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b6f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	21ff      	movs	r1, #255	@ 0xff
 800b6fe:	f007 f9a8 	bl	8012a52 <memset>
    pcache->block = LFS_BLOCK_NULL;
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	f04f 32ff 	mov.w	r2, #4294967295
 800b708:	601a      	str	r2, [r3, #0]
}
 800b70a:	bf00      	nop
 800b70c:	3708      	adds	r7, #8
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
	...

0800b714 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 800b714:	b5b0      	push	{r4, r5, r7, lr}
 800b716:	b08a      	sub	sp, #40	@ 0x28
 800b718:	af02      	add	r7, sp, #8
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	60b9      	str	r1, [r7, #8]
 800b71e:	607a      	str	r2, [r7, #4]
 800b720:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800b722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b724:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 800b726:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b72a:	441a      	add	r2, r3
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b730:	69db      	ldr	r3, [r3, #28]
 800b732:	429a      	cmp	r2, r3
 800b734:	d80a      	bhi.n	800b74c <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f000 8124 	beq.w	800b988 <lfs_bd_read+0x274>
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b746:	429a      	cmp	r2, r3
 800b748:	f0c0 811e 	bcc.w	800b988 <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 800b74c:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800b750:	e11f      	b.n	800b992 <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800b752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b754:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d03f      	beq.n	800b7dc <lfs_bd_read+0xc8>
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b762:	429a      	cmp	r2, r3
 800b764:	d13a      	bne.n	800b7dc <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	685a      	ldr	r2, [r3, #4]
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 800b770:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b772:	429a      	cmp	r2, r3
 800b774:	d232      	bcs.n	800b7dc <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d324      	bcc.n	800b7ca <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	689a      	ldr	r2, [r3, #8]
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	6859      	ldr	r1, [r3, #4]
 800b788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b78a:	1acb      	subs	r3, r1, r3
 800b78c:	4413      	add	r3, r2
 800b78e:	4619      	mov	r1, r3
 800b790:	69b8      	ldr	r0, [r7, #24]
 800b792:	f7ff fee3 	bl	800b55c <lfs_min>
 800b796:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	68da      	ldr	r2, [r3, #12]
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b7a2:	1acb      	subs	r3, r1, r3
 800b7a4:	4413      	add	r3, r2
 800b7a6:	69ba      	ldr	r2, [r7, #24]
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	69f8      	ldr	r0, [r7, #28]
 800b7ac:	f007 f9fd 	bl	8012baa <memcpy>

                data += diff;
 800b7b0:	69fa      	ldr	r2, [r7, #28]
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	61fb      	str	r3, [r7, #28]
                off += diff;
 800b7b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b7ba:	69bb      	ldr	r3, [r7, #24]
 800b7bc:	4413      	add	r3, r2
 800b7be:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800b7c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	1ad3      	subs	r3, r2, r3
 800b7c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800b7c8:	e0de      	b.n	800b988 <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	685a      	ldr	r2, [r3, #4]
 800b7ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7d0:	1ad3      	subs	r3, r2, r3
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	69b8      	ldr	r0, [r7, #24]
 800b7d6:	f7ff fec1 	bl	800b55c <lfs_min>
 800b7da:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d13a      	bne.n	800b85c <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	685a      	ldr	r2, [r3, #4]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	689b      	ldr	r3, [r3, #8]
 800b7ee:	4413      	add	r3, r2
        if (block == rcache->block &&
 800b7f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d232      	bcs.n	800b85c <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d324      	bcc.n	800b84a <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	689a      	ldr	r2, [r3, #8]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6859      	ldr	r1, [r3, #4]
 800b808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b80a:	1acb      	subs	r3, r1, r3
 800b80c:	4413      	add	r3, r2
 800b80e:	4619      	mov	r1, r3
 800b810:	69b8      	ldr	r0, [r7, #24]
 800b812:	f7ff fea3 	bl	800b55c <lfs_min>
 800b816:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	68da      	ldr	r2, [r3, #12]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b822:	1acb      	subs	r3, r1, r3
 800b824:	4413      	add	r3, r2
 800b826:	69ba      	ldr	r2, [r7, #24]
 800b828:	4619      	mov	r1, r3
 800b82a:	69f8      	ldr	r0, [r7, #28]
 800b82c:	f007 f9bd 	bl	8012baa <memcpy>

                data += diff;
 800b830:	69fa      	ldr	r2, [r7, #28]
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	4413      	add	r3, r2
 800b836:	61fb      	str	r3, [r7, #28]
                off += diff;
 800b838:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	4413      	add	r3, r2
 800b83e:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800b840:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b842:	69bb      	ldr	r3, [r7, #24]
 800b844:	1ad3      	subs	r3, r2, r3
 800b846:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800b848:	e09e      	b.n	800b988 <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	685a      	ldr	r2, [r3, #4]
 800b84e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b850:	1ad3      	subs	r3, r2, r3
 800b852:	4619      	mov	r1, r3
 800b854:	69b8      	ldr	r0, [r7, #24]
 800b856:	f7ff fe81 	bl	800b55c <lfs_min>
 800b85a:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800b85c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	429a      	cmp	r2, r3
 800b862:	d336      	bcc.n	800b8d2 <lfs_bd_read+0x1be>
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b868:	695a      	ldr	r2, [r3, #20]
 800b86a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b86c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b870:	fb01 f202 	mul.w	r2, r1, r2
 800b874:	1a9b      	subs	r3, r3, r2
 800b876:	2b00      	cmp	r3, #0
 800b878:	d12b      	bne.n	800b8d2 <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b87e:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800b880:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b882:	429a      	cmp	r2, r3
 800b884:	d325      	bcc.n	800b8d2 <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b88a:	695b      	ldr	r3, [r3, #20]
 800b88c:	4619      	mov	r1, r3
 800b88e:	69b8      	ldr	r0, [r7, #24]
 800b890:	f7ff fe74 	bl	800b57c <lfs_aligndown>
 800b894:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b89a:	685c      	ldr	r4, [r3, #4]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800b8a0:	69bb      	ldr	r3, [r7, #24]
 800b8a2:	9300      	str	r3, [sp, #0]
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b8aa:	47a0      	blx	r4
 800b8ac:	6178      	str	r0, [r7, #20]
            if (err) {
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d001      	beq.n	800b8b8 <lfs_bd_read+0x1a4>
                return err;
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	e06c      	b.n	800b992 <lfs_bd_read+0x27e>
            }

            data += diff;
 800b8b8:	69fa      	ldr	r2, [r7, #28]
 800b8ba:	69bb      	ldr	r3, [r7, #24]
 800b8bc:	4413      	add	r3, r2
 800b8be:	61fb      	str	r3, [r7, #28]
            off += diff;
 800b8c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8c2:	69bb      	ldr	r3, [r7, #24]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	637b      	str	r3, [r7, #52]	@ 0x34
            size -= diff;
 800b8c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	1ad3      	subs	r3, r2, r3
 800b8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
            continue;
 800b8d0:	e05a      	b.n	800b988 <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d00a      	beq.n	800b8f0 <lfs_bd_read+0x1dc>
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d305      	bcc.n	800b8f0 <lfs_bd_read+0x1dc>
 800b8e4:	4b2d      	ldr	r3, [pc, #180]	@ (800b99c <lfs_bd_read+0x288>)
 800b8e6:	4a2e      	ldr	r2, [pc, #184]	@ (800b9a0 <lfs_bd_read+0x28c>)
 800b8e8:	216b      	movs	r1, #107	@ 0x6b
 800b8ea:	482e      	ldr	r0, [pc, #184]	@ (800b9a4 <lfs_bd_read+0x290>)
 800b8ec:	f006 fe9c 	bl	8012628 <__assert_func>
        rcache->block = block;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8f4:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b8fa:	695b      	ldr	r3, [r3, #20]
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b900:	f7ff fe3c 	bl	800b57c <lfs_aligndown>
 800b904:	4602      	mov	r2, r0
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 800b90a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b914:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 800b916:	4619      	mov	r1, r3
 800b918:	4610      	mov	r0, r2
 800b91a:	f7ff fe44 	bl	800b5a6 <lfs_alignup>
 800b91e:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b924:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 800b926:	4619      	mov	r1, r3
 800b928:	4610      	mov	r0, r2
 800b92a:	f7ff fe17 	bl	800b55c <lfs_min>
 800b92e:	4602      	mov	r2, r0
                - rcache->off,
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 800b934:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b93a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(
 800b93c:	4619      	mov	r1, r3
 800b93e:	4610      	mov	r0, r2
 800b940:	f7ff fe0c 	bl	800b55c <lfs_min>
 800b944:	4602      	mov	r2, r0
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b94e:	685c      	ldr	r4, [r3, #4]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6819      	ldr	r1, [r3, #0]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	9300      	str	r3, [sp, #0]
 800b966:	462b      	mov	r3, r5
 800b968:	47a0      	blx	r4
 800b96a:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	dd05      	ble.n	800b97e <lfs_bd_read+0x26a>
 800b972:	4b0d      	ldr	r3, [pc, #52]	@ (800b9a8 <lfs_bd_read+0x294>)
 800b974:	4a0a      	ldr	r2, [pc, #40]	@ (800b9a0 <lfs_bd_read+0x28c>)
 800b976:	2176      	movs	r1, #118	@ 0x76
 800b978:	480a      	ldr	r0, [pc, #40]	@ (800b9a4 <lfs_bd_read+0x290>)
 800b97a:	f006 fe55 	bl	8012628 <__assert_func>
        if (err) {
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d001      	beq.n	800b988 <lfs_bd_read+0x274>
            return err;
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	e004      	b.n	800b992 <lfs_bd_read+0x27e>
    while (size > 0) {
 800b988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	f47f aee1 	bne.w	800b752 <lfs_bd_read+0x3e>
        }
    }

    return 0;
 800b990:	2300      	movs	r3, #0
}
 800b992:	4618      	mov	r0, r3
 800b994:	3720      	adds	r7, #32
 800b996:	46bd      	mov	sp, r7
 800b998:	bdb0      	pop	{r4, r5, r7, pc}
 800b99a:	bf00      	nop
 800b99c:	08013854 	.word	0x08013854
 800b9a0:	0801467c 	.word	0x0801467c
 800b9a4:	08013884 	.word	0x08013884
 800b9a8:	080138a8 	.word	0x080138a8

0800b9ac <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b090      	sub	sp, #64	@ 0x40
 800b9b0:	af04      	add	r7, sp, #16
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	607a      	str	r2, [r7, #4]
 800b9b8:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800b9ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    lfs_size_t diff = 0;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	627b      	str	r3, [r7, #36]	@ 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b9c6:	e039      	b.n	800ba3c <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 800b9c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9cc:	1ad3      	subs	r3, r2, r3
 800b9ce:	2108      	movs	r1, #8
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7ff fdc3 	bl	800b55c <lfs_min>
 800b9d6:	6278      	str	r0, [r7, #36]	@ 0x24
        int err = lfs_bd_read(lfs,
 800b9d8:	683a      	ldr	r2, [r7, #0]
 800b9da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9dc:	1ad1      	subs	r1, r2, r3
 800b9de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b9e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9e2:	4413      	add	r3, r2
 800b9e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9e6:	9203      	str	r2, [sp, #12]
 800b9e8:	f107 0214 	add.w	r2, r7, #20
 800b9ec:	9202      	str	r2, [sp, #8]
 800b9ee:	9301      	str	r3, [sp, #4]
 800b9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9f2:	9300      	str	r3, [sp, #0]
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	68b9      	ldr	r1, [r7, #8]
 800b9fa:	68f8      	ldr	r0, [r7, #12]
 800b9fc:	f7ff fe8a 	bl	800b714 <lfs_bd_read>
 800ba00:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 800ba02:	6a3b      	ldr	r3, [r7, #32]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d001      	beq.n	800ba0c <lfs_bd_cmp+0x60>
            return err;
 800ba08:	6a3b      	ldr	r3, [r7, #32]
 800ba0a:	e01c      	b.n	800ba46 <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 800ba0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba10:	18d1      	adds	r1, r2, r3
 800ba12:	f107 0314 	add.w	r3, r7, #20
 800ba16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f007 f80a 	bl	8012a32 <memcmp>
 800ba1e:	61f8      	str	r0, [r7, #28]
        if (res) {
 800ba20:	69fb      	ldr	r3, [r7, #28]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d006      	beq.n	800ba34 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	da01      	bge.n	800ba30 <lfs_bd_cmp+0x84>
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	e00a      	b.n	800ba46 <lfs_bd_cmp+0x9a>
 800ba30:	2302      	movs	r3, #2
 800ba32:	e008      	b.n	800ba46 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 800ba34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba38:	4413      	add	r3, r2
 800ba3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d3c1      	bcc.n	800b9c8 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3730      	adds	r7, #48	@ 0x30
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b08e      	sub	sp, #56	@ 0x38
 800ba52:	af04      	add	r7, sp, #16
 800ba54:	60f8      	str	r0, [r7, #12]
 800ba56:	60b9      	str	r1, [r7, #8]
 800ba58:	607a      	str	r2, [r7, #4]
 800ba5a:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 800ba60:	2300      	movs	r3, #0
 800ba62:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba64:	e030      	b.n	800bac8 <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 800ba66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba6a:	1ad3      	subs	r3, r2, r3
 800ba6c:	2108      	movs	r1, #8
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7ff fd74 	bl	800b55c <lfs_min>
 800ba74:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 800ba76:	683a      	ldr	r2, [r7, #0]
 800ba78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba7a:	1ad1      	subs	r1, r2, r3
 800ba7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ba7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba80:	4413      	add	r3, r2
 800ba82:	6a3a      	ldr	r2, [r7, #32]
 800ba84:	9203      	str	r2, [sp, #12]
 800ba86:	f107 0214 	add.w	r2, r7, #20
 800ba8a:	9202      	str	r2, [sp, #8]
 800ba8c:	9301      	str	r3, [sp, #4]
 800ba8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba90:	9300      	str	r3, [sp, #0]
 800ba92:	460b      	mov	r3, r1
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	68b9      	ldr	r1, [r7, #8]
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f7ff fe3b 	bl	800b714 <lfs_bd_read>
 800ba9e:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 800baa0:	69fb      	ldr	r3, [r7, #28]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d001      	beq.n	800baaa <lfs_bd_crc+0x5c>
            return err;
 800baa6:	69fb      	ldr	r3, [r7, #28]
 800baa8:	e013      	b.n	800bad2 <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 800baaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f107 0114 	add.w	r1, r7, #20
 800bab2:	6a3a      	ldr	r2, [r7, #32]
 800bab4:	4618      	mov	r0, r3
 800bab6:	f006 fd79 	bl	80125ac <lfs_crc>
 800baba:	4602      	mov	r2, r0
 800babc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800babe:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 800bac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bac2:	6a3b      	ldr	r3, [r7, #32]
 800bac4:	4413      	add	r3, r2
 800bac6:	627b      	str	r3, [r7, #36]	@ 0x24
 800bac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800baca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bacc:	429a      	cmp	r2, r3
 800bace:	d3ca      	bcc.n	800ba66 <lfs_bd_crc+0x18>
    }

    return 0;
 800bad0:	2300      	movs	r3, #0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3728      	adds	r7, #40	@ 0x28
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
	...

0800badc <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800badc:	b5b0      	push	{r4, r5, r7, lr}
 800bade:	b08c      	sub	sp, #48	@ 0x30
 800bae0:	af04      	add	r7, sp, #16
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	607a      	str	r2, [r7, #4]
 800bae8:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baf2:	d060      	beq.n	800bbb6 <lfs_bd_flush+0xda>
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f113 0f02 	cmn.w	r3, #2
 800bafc:	d05b      	beq.n	800bbb6 <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	681a      	ldr	r2, [r3, #0]
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d305      	bcc.n	800bb16 <lfs_bd_flush+0x3a>
 800bb0a:	4b2d      	ldr	r3, [pc, #180]	@ (800bbc0 <lfs_bd_flush+0xe4>)
 800bb0c:	4a2d      	ldr	r2, [pc, #180]	@ (800bbc4 <lfs_bd_flush+0xe8>)
 800bb0e:	21b3      	movs	r1, #179	@ 0xb3
 800bb10:	482d      	ldr	r0, [pc, #180]	@ (800bbc8 <lfs_bd_flush+0xec>)
 800bb12:	f006 fd89 	bl	8012628 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	689a      	ldr	r2, [r3, #8]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb1e:	699b      	ldr	r3, [r3, #24]
 800bb20:	4619      	mov	r1, r3
 800bb22:	4610      	mov	r0, r2
 800bb24:	f7ff fd3f 	bl	800b5a6 <lfs_alignup>
 800bb28:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb2e:	689c      	ldr	r4, [r3, #8]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	6819      	ldr	r1, [r3, #0]
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	9300      	str	r3, [sp, #0]
 800bb44:	462b      	mov	r3, r5
 800bb46:	47a0      	blx	r4
 800bb48:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	dd05      	ble.n	800bb5c <lfs_bd_flush+0x80>
 800bb50:	4b1e      	ldr	r3, [pc, #120]	@ (800bbcc <lfs_bd_flush+0xf0>)
 800bb52:	4a1c      	ldr	r2, [pc, #112]	@ (800bbc4 <lfs_bd_flush+0xe8>)
 800bb54:	21b7      	movs	r1, #183	@ 0xb7
 800bb56:	481c      	ldr	r0, [pc, #112]	@ (800bbc8 <lfs_bd_flush+0xec>)
 800bb58:	f006 fd66 	bl	8012628 <__assert_func>
        if (err) {
 800bb5c:	69bb      	ldr	r3, [r7, #24]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d001      	beq.n	800bb66 <lfs_bd_flush+0x8a>
            return err;
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	e028      	b.n	800bbb8 <lfs_bd_flush+0xdc>
        }

        if (validate) {
 800bb66:	78fb      	ldrb	r3, [r7, #3]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d020      	beq.n	800bbae <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 800bb6c:	6879      	ldr	r1, [r7, #4]
 800bb6e:	68f8      	ldr	r0, [r7, #12]
 800bb70:	f7ff fdaa 	bl	800b6c8 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	68ba      	ldr	r2, [r7, #8]
 800bb7a:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 800bb7c:	68b9      	ldr	r1, [r7, #8]
 800bb7e:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 800bb80:	69f8      	ldr	r0, [r7, #28]
 800bb82:	9003      	str	r0, [sp, #12]
 800bb84:	9102      	str	r1, [sp, #8]
 800bb86:	9201      	str	r2, [sp, #4]
 800bb88:	9300      	str	r3, [sp, #0]
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	2100      	movs	r1, #0
 800bb90:	68f8      	ldr	r0, [r7, #12]
 800bb92:	f7ff ff0b 	bl	800b9ac <lfs_bd_cmp>
 800bb96:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	da01      	bge.n	800bba2 <lfs_bd_flush+0xc6>
                return res;
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	e00a      	b.n	800bbb8 <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d002      	beq.n	800bbae <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 800bba8:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800bbac:	e004      	b.n	800bbb8 <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 800bbae:	68b9      	ldr	r1, [r7, #8]
 800bbb0:	68f8      	ldr	r0, [r7, #12]
 800bbb2:	f7ff fd98 	bl	800b6e6 <lfs_cache_zero>
    }

    return 0;
 800bbb6:	2300      	movs	r3, #0
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3720      	adds	r7, #32
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bdb0      	pop	{r4, r5, r7, pc}
 800bbc0:	080138b4 	.word	0x080138b4
 800bbc4:	08014688 	.word	0x08014688
 800bbc8:	08013884 	.word	0x08013884
 800bbcc:	080138a8 	.word	0x080138a8

0800bbd0 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b086      	sub	sp, #24
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	607a      	str	r2, [r7, #4]
 800bbdc:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 800bbde:	6879      	ldr	r1, [r7, #4]
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	f7ff fd71 	bl	800b6c8 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800bbe6:	78fb      	ldrb	r3, [r7, #3]
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	68b9      	ldr	r1, [r7, #8]
 800bbec:	68f8      	ldr	r0, [r7, #12]
 800bbee:	f7ff ff75 	bl	800badc <lfs_bd_flush>
 800bbf2:	6178      	str	r0, [r7, #20]
    if (err) {
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d001      	beq.n	800bbfe <lfs_bd_sync+0x2e>
        return err;
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	e011      	b.n	800bc22 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bc02:	691b      	ldr	r3, [r3, #16]
 800bc04:	68fa      	ldr	r2, [r7, #12]
 800bc06:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800bc08:	4610      	mov	r0, r2
 800bc0a:	4798      	blx	r3
 800bc0c:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	dd05      	ble.n	800bc20 <lfs_bd_sync+0x50>
 800bc14:	4b05      	ldr	r3, [pc, #20]	@ (800bc2c <lfs_bd_sync+0x5c>)
 800bc16:	4a06      	ldr	r2, [pc, #24]	@ (800bc30 <lfs_bd_sync+0x60>)
 800bc18:	21dd      	movs	r1, #221	@ 0xdd
 800bc1a:	4806      	ldr	r0, [pc, #24]	@ (800bc34 <lfs_bd_sync+0x64>)
 800bc1c:	f006 fd04 	bl	8012628 <__assert_func>
    return err;
 800bc20:	697b      	ldr	r3, [r7, #20]
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3718      	adds	r7, #24
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	080138a8 	.word	0x080138a8
 800bc30:	08014698 	.word	0x08014698
 800bc34:	08013884 	.word	0x08013884

0800bc38 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b088      	sub	sp, #32
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]
 800bc44:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 800bc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc48:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 800bc4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc4c:	f113 0f02 	cmn.w	r3, #2
 800bc50:	d00a      	beq.n	800bc68 <lfs_bd_prog+0x30>
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d305      	bcc.n	800bc68 <lfs_bd_prog+0x30>
 800bc5c:	4b48      	ldr	r3, [pc, #288]	@ (800bd80 <lfs_bd_prog+0x148>)
 800bc5e:	4a49      	ldr	r2, [pc, #292]	@ (800bd84 <lfs_bd_prog+0x14c>)
 800bc60:	21e8      	movs	r1, #232	@ 0xe8
 800bc62:	4849      	ldr	r0, [pc, #292]	@ (800bd88 <lfs_bd_prog+0x150>)
 800bc64:	f006 fce0 	bl	8012628 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800bc68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc6c:	441a      	add	r2, r3
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bc72:	69db      	ldr	r3, [r3, #28]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d97a      	bls.n	800bd6e <lfs_bd_prog+0x136>
 800bc78:	4b44      	ldr	r3, [pc, #272]	@ (800bd8c <lfs_bd_prog+0x154>)
 800bc7a:	4a42      	ldr	r2, [pc, #264]	@ (800bd84 <lfs_bd_prog+0x14c>)
 800bc7c:	21e9      	movs	r1, #233	@ 0xe9
 800bc7e:	4842      	ldr	r0, [pc, #264]	@ (800bd88 <lfs_bd_prog+0x150>)
 800bc80:	f006 fcd2 	bl	8012628 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d151      	bne.n	800bd32 <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 800bc92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d34c      	bcc.n	800bd32 <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	685a      	ldr	r2, [r3, #4]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bca2:	4413      	add	r3, r2
                off >= pcache->off &&
 800bca4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d243      	bcs.n	800bd32 <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bcae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	6859      	ldr	r1, [r3, #4]
 800bcb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcb6:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 800bcb8:	4413      	add	r3, r2
 800bcba:	4619      	mov	r1, r3
 800bcbc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800bcbe:	f7ff fc4d 	bl	800b55c <lfs_min>
 800bcc2:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	68da      	ldr	r2, [r3, #12]
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bcce:	1acb      	subs	r3, r1, r3
 800bcd0:	4413      	add	r3, r2
 800bcd2:	69ba      	ldr	r2, [r7, #24]
 800bcd4:	69f9      	ldr	r1, [r7, #28]
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f006 ff67 	bl	8012baa <memcpy>

            data += diff;
 800bcdc:	69fa      	ldr	r2, [r7, #28]
 800bcde:	69bb      	ldr	r3, [r7, #24]
 800bce0:	4413      	add	r3, r2
 800bce2:	61fb      	str	r3, [r7, #28]
            off += diff;
 800bce4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bce6:	69bb      	ldr	r3, [r7, #24]
 800bce8:	4413      	add	r3, r2
 800bcea:	62fb      	str	r3, [r7, #44]	@ 0x2c
            size -= diff;
 800bcec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	1ad3      	subs	r3, r2, r3
 800bcf2:	637b      	str	r3, [r7, #52]	@ 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	6898      	ldr	r0, [r3, #8]
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcfe:	1ad3      	subs	r3, r2, r3
 800bd00:	4619      	mov	r1, r3
 800bd02:	f7ff fc1b 	bl	800b53c <lfs_max>
 800bd06:	4602      	mov	r2, r0
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	689a      	ldr	r2, [r3, #8]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d128      	bne.n	800bd6c <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800bd1a:	78fb      	ldrb	r3, [r7, #3]
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	68b9      	ldr	r1, [r7, #8]
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	f7ff fedb 	bl	800badc <lfs_bd_flush>
 800bd26:	6178      	str	r0, [r7, #20]
                if (err) {
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d01e      	beq.n	800bd6c <lfs_bd_prog+0x134>
                    return err;
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	e021      	b.n	800bd76 <lfs_bd_prog+0x13e>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd3a:	d006      	beq.n	800bd4a <lfs_bd_prog+0x112>
 800bd3c:	4b14      	ldr	r3, [pc, #80]	@ (800bd90 <lfs_bd_prog+0x158>)
 800bd3e:	4a11      	ldr	r2, [pc, #68]	@ (800bd84 <lfs_bd_prog+0x14c>)
 800bd40:	f44f 7183 	mov.w	r1, #262	@ 0x106
 800bd44:	4810      	ldr	r0, [pc, #64]	@ (800bd88 <lfs_bd_prog+0x150>)
 800bd46:	f006 fc6f 	bl	8012628 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd4e:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd54:	699b      	ldr	r3, [r3, #24]
 800bd56:	4619      	mov	r1, r3
 800bd58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bd5a:	f7ff fc0f 	bl	800b57c <lfs_aligndown>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	2200      	movs	r2, #0
 800bd68:	609a      	str	r2, [r3, #8]
 800bd6a:	e000      	b.n	800bd6e <lfs_bd_prog+0x136>
            continue;
 800bd6c:	bf00      	nop
    while (size > 0) {
 800bd6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d187      	bne.n	800bc84 <lfs_bd_prog+0x4c>
    }

    return 0;
 800bd74:	2300      	movs	r3, #0
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3720      	adds	r7, #32
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
 800bd7e:	bf00      	nop
 800bd80:	080138d8 	.word	0x080138d8
 800bd84:	080146a4 	.word	0x080146a4
 800bd88:	08013884 	.word	0x08013884
 800bd8c:	08013910 	.word	0x08013910
 800bd90:	08013934 	.word	0x08013934

0800bd94 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bda2:	683a      	ldr	r2, [r7, #0]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d306      	bcc.n	800bdb6 <lfs_bd_erase+0x22>
 800bda8:	4b0f      	ldr	r3, [pc, #60]	@ (800bde8 <lfs_bd_erase+0x54>)
 800bdaa:	4a10      	ldr	r2, [pc, #64]	@ (800bdec <lfs_bd_erase+0x58>)
 800bdac:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800bdb0:	480f      	ldr	r0, [pc, #60]	@ (800bdf0 <lfs_bd_erase+0x5c>)
 800bdb2:	f006 fc39 	bl	8012628 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800bdc0:	6839      	ldr	r1, [r7, #0]
 800bdc2:	4610      	mov	r0, r2
 800bdc4:	4798      	blx	r3
 800bdc6:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	dd06      	ble.n	800bddc <lfs_bd_erase+0x48>
 800bdce:	4b09      	ldr	r3, [pc, #36]	@ (800bdf4 <lfs_bd_erase+0x60>)
 800bdd0:	4a06      	ldr	r2, [pc, #24]	@ (800bdec <lfs_bd_erase+0x58>)
 800bdd2:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800bdd6:	4806      	ldr	r0, [pc, #24]	@ (800bdf0 <lfs_bd_erase+0x5c>)
 800bdd8:	f006 fc26 	bl	8012628 <__assert_func>
    return err;
 800bddc:	68fb      	ldr	r3, [r7, #12]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3710      	adds	r7, #16
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	bf00      	nop
 800bde8:	08013958 	.word	0x08013958
 800bdec:	080146b0 	.word	0x080146b0
 800bdf0:	08013884 	.word	0x08013884
 800bdf4:	080138a8 	.word	0x080138a8

0800bdf8 <lfs_path_namelen>:


/// Small type-level utilities ///

// some operations on paths
static inline lfs_size_t lfs_path_namelen(const char *path) {
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
    return strcspn(path, "/");
 800be00:	4904      	ldr	r1, [pc, #16]	@ (800be14 <lfs_path_namelen+0x1c>)
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f006 fe2d 	bl	8012a62 <strcspn>
 800be08:	4603      	mov	r3, r0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3708      	adds	r7, #8
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop
 800be14:	08013974 	.word	0x08013974

0800be18 <lfs_path_islast>:

static inline bool lfs_path_islast(const char *path) {
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
    lfs_size_t namelen = lfs_path_namelen(path);
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f7ff ffe9 	bl	800bdf8 <lfs_path_namelen>
 800be26:	60f8      	str	r0, [r7, #12]
    return path[namelen + strspn(path + namelen, "/")] == '\0';
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	4413      	add	r3, r2
 800be2e:	4909      	ldr	r1, [pc, #36]	@ (800be54 <lfs_path_islast+0x3c>)
 800be30:	4618      	mov	r0, r3
 800be32:	f006 fe27 	bl	8012a84 <strspn>
 800be36:	4602      	mov	r2, r0
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	4413      	add	r3, r2
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	4413      	add	r3, r2
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	bf0c      	ite	eq
 800be46:	2301      	moveq	r3, #1
 800be48:	2300      	movne	r3, #0
 800be4a:	b2db      	uxtb	r3, r3
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3710      	adds	r7, #16
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	08013974 	.word	0x08013974

0800be58 <lfs_path_isdir>:

static inline bool lfs_path_isdir(const char *path) {
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
    return path[lfs_path_namelen(path)] != '\0';
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f7ff ffc9 	bl	800bdf8 <lfs_path_namelen>
 800be66:	4602      	mov	r2, r0
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4413      	add	r3, r2
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	bf14      	ite	ne
 800be72:	2301      	movne	r3, #1
 800be74:	2300      	moveq	r3, #0
 800be76:	b2db      	uxtb	r3, r3
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3708      	adds	r7, #8
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <lfs_pair_swap>:

// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 800be80:	b480      	push	{r7}
 800be82:	b085      	sub	sp, #20
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	685a      	ldr	r2, [r3, #4]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	3304      	adds	r3, #4
 800be9a:	68fa      	ldr	r2, [r7, #12]
 800be9c:	601a      	str	r2, [r3, #0]
}
 800be9e:	bf00      	nop
 800bea0:	3714      	adds	r7, #20
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr

0800beaa <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 800beaa:	b480      	push	{r7}
 800beac:	b083      	sub	sp, #12
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beba:	d005      	beq.n	800bec8 <lfs_pair_isnull+0x1e>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	3304      	adds	r3, #4
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec6:	d101      	bne.n	800becc <lfs_pair_isnull+0x22>
 800bec8:	2301      	movs	r3, #1
 800beca:	e000      	b.n	800bece <lfs_pair_isnull+0x24>
 800becc:	2300      	movs	r3, #0
 800bece:	f003 0301 	and.w	r3, r3, #1
 800bed2:	b2db      	uxtb	r3, r3
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	370c      	adds	r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800bee0:	b480      	push	{r7}
 800bee2:	b083      	sub	sp, #12
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d017      	beq.n	800bf26 <lfs_pair_cmp+0x46>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	3304      	adds	r3, #4
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	3304      	adds	r3, #4
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d00f      	beq.n	800bf26 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	3304      	adds	r3, #4
 800bf0e:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d008      	beq.n	800bf26 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	3304      	adds	r3, #4
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d001      	beq.n	800bf26 <lfs_pair_cmp+0x46>
 800bf22:	2301      	movs	r3, #1
 800bf24:	e000      	b.n	800bf28 <lfs_pair_cmp+0x48>
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	370c      	adds	r7, #12
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d107      	bne.n	800bf5a <lfs_pair_issync+0x26>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	3304      	adds	r3, #4
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	3304      	adds	r3, #4
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d00d      	beq.n	800bf76 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681a      	ldr	r2, [r3, #0]
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	3304      	adds	r3, #4
 800bf62:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d108      	bne.n	800bf7a <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	3304      	adds	r3, #4
 800bf6c:	681a      	ldr	r2, [r3, #0]
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d101      	bne.n	800bf7a <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800bf76:	2301      	movs	r3, #1
 800bf78:	e000      	b.n	800bf7c <lfs_pair_issync+0x48>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	f003 0301 	and.w	r3, r3, #1
 800bf80:	b2db      	uxtb	r3, r3
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	370c      	adds	r7, #12
 800bf86:	46bd      	mov	sp, r7
 800bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8c:	4770      	bx	lr

0800bf8e <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 800bf8e:	b590      	push	{r4, r7, lr}
 800bf90:	b083      	sub	sp, #12
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7ff fb4e 	bl	800b63c <lfs_fromle32>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	3304      	adds	r3, #4
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	1d1c      	adds	r4, r3, #4
 800bfb0:	4610      	mov	r0, r2
 800bfb2:	f7ff fb43 	bl	800b63c <lfs_fromle32>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	6023      	str	r3, [r4, #0]
}
 800bfba:	bf00      	nop
 800bfbc:	370c      	adds	r7, #12
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd90      	pop	{r4, r7, pc}

0800bfc2 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 800bfc2:	b590      	push	{r4, r7, lr}
 800bfc4:	b083      	sub	sp, #12
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7ff fb3f 	bl	800b652 <lfs_tole32>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	3304      	adds	r3, #4
 800bfde:	681a      	ldr	r2, [r3, #0]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	1d1c      	adds	r4, r3, #4
 800bfe4:	4610      	mov	r0, r2
 800bfe6:	f7ff fb34 	bl	800b652 <lfs_tole32>
 800bfea:	4603      	mov	r3, r0
 800bfec:	6023      	str	r3, [r4, #0]
}
 800bfee:	bf00      	nop
 800bff0:	370c      	adds	r7, #12
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd90      	pop	{r4, r7, pc}

0800bff6 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 800bff6:	b480      	push	{r7}
 800bff8:	b083      	sub	sp, #12
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	43db      	mvns	r3, r3
 800c002:	0fdb      	lsrs	r3, r3, #31
 800c004:	b2db      	uxtb	r3, r3
}
 800c006:	4618      	mov	r0, r3
 800c008:	370c      	adds	r7, #12
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr

0800c012 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800c012:	b480      	push	{r7}
 800c014:	b083      	sub	sp, #12
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	059b      	lsls	r3, r3, #22
 800c01e:	159b      	asrs	r3, r3, #22
 800c020:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c024:	bf0c      	ite	eq
 800c026:	2301      	moveq	r3, #1
 800c028:	2300      	movne	r3, #0
 800c02a:	b2db      	uxtb	r3, r3
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	370c      	adds	r7, #12
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr

0800c038 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	0d1b      	lsrs	r3, r3, #20
 800c044:	b29b      	uxth	r3, r3
 800c046:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c04a:	b29b      	uxth	r3, r3
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	370c      	adds	r7, #12
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr

0800c058 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 800c058:	b480      	push	{r7}
 800c05a:	b083      	sub	sp, #12
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	0d1b      	lsrs	r3, r3, #20
 800c064:	b29b      	uxth	r3, r3
 800c066:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
 800c06a:	b29b      	uxth	r3, r3
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	370c      	adds	r7, #12
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	0d1b      	lsrs	r3, r3, #20
 800c084:	b29b      	uxth	r3, r3
 800c086:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c08a:	b29b      	uxth	r3, r3
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	370c      	adds	r7, #12
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 800c098:	b480      	push	{r7}
 800c09a:	b083      	sub	sp, #12
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	0d1b      	lsrs	r3, r3, #20
 800c0a4:	b2db      	uxtb	r3, r3
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	370c      	adds	r7, #12
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr

0800c0b2 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b082      	sub	sp, #8
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f7ff ffec 	bl	800c098 <lfs_tag_chunk>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	b25b      	sxtb	r3, r3
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3708      	adds	r7, #8
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	0a9b      	lsrs	r3, r3, #10
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c0de:	b29b      	uxth	r3, r3
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	370c      	adds	r7, #12
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr

0800c0ec <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	370c      	adds	r7, #12
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr

0800c106 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800c106:	b580      	push	{r7, lr}
 800c108:	b082      	sub	sp, #8
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7ff ff7f 	bl	800c012 <lfs_tag_isdelete>
 800c114:	4603      	mov	r3, r0
 800c116:	461a      	mov	r2, r3
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	4413      	add	r3, r2
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7ff ffe5 	bl	800c0ec <lfs_tag_size>
 800c122:	4603      	mov	r3, r0
 800c124:	3304      	adds	r3, #4
}
 800c126:	4618      	mov	r0, r3
 800c128:	3708      	adds	r7, #8
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800c12e:	b480      	push	{r7}
 800c130:	b083      	sub	sp, #12
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
 800c136:	6039      	str	r1, [r7, #0]
    a->tag ^= b->tag;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	405a      	eors	r2, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	601a      	str	r2, [r3, #0]
    a->pair[0] ^= b->pair[0];
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	685a      	ldr	r2, [r3, #4]
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	685b      	ldr	r3, [r3, #4]
 800c14e:	405a      	eors	r2, r3
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	605a      	str	r2, [r3, #4]
    a->pair[1] ^= b->pair[1];
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	689a      	ldr	r2, [r3, #8]
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	689b      	ldr	r3, [r3, #8]
 800c15c:	405a      	eors	r2, r3
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	609a      	str	r2, [r3, #8]
}
 800c162:	bf00      	nop
 800c164:	370c      	adds	r7, #12
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr

0800c16e <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 800c16e:	b480      	push	{r7}
 800c170:	b083      	sub	sp, #12
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
    return a->tag == 0
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
            && a->pair[0] == 0
            && a->pair[1] == 0;
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d109      	bne.n	800c192 <lfs_gstate_iszero+0x24>
            && a->pair[0] == 0
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d105      	bne.n	800c192 <lfs_gstate_iszero+0x24>
            && a->pair[1] == 0;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d101      	bne.n	800c192 <lfs_gstate_iszero+0x24>
 800c18e:	2301      	movs	r3, #1
 800c190:	e000      	b.n	800c194 <lfs_gstate_iszero+0x26>
 800c192:	2300      	movs	r3, #0
 800c194:	f003 0301 	and.w	r3, r3, #1
 800c198:	b2db      	uxtb	r3, r3
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	370c      	adds	r7, #12
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr

0800c1a6 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 800c1a6:	b580      	push	{r7, lr}
 800c1a8:	b082      	sub	sp, #8
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7ff ff9a 	bl	800c0ec <lfs_tag_size>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	bf14      	ite	ne
 800c1be:	2301      	movne	r3, #1
 800c1c0:	2300      	moveq	r3, #0
 800c1c2:	b2db      	uxtb	r3, r3
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3708      	adds	r7, #8
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7ff ff87 	bl	800c0ec <lfs_tag_size>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	b2db      	uxtb	r3, r3
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3708      	adds	r7, #8
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	b082      	sub	sp, #8
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7ff ff1e 	bl	800c038 <lfs_tag_type1>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	bf14      	ite	ne
 800c202:	2301      	movne	r3, #1
 800c204:	2300      	moveq	r3, #0
 800c206:	b2db      	uxtb	r3, r3
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3708      	adds	r7, #8
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4618      	mov	r0, r3
 800c21e:	f7ff ff65 	bl	800c0ec <lfs_tag_size>
 800c222:	4603      	mov	r3, r0
 800c224:	0a5b      	lsrs	r3, r3, #9
 800c226:	2b00      	cmp	r3, #0
 800c228:	bf14      	ite	ne
 800c22a:	2301      	movne	r3, #1
 800c22c:	2300      	moveq	r3, #0
 800c22e:	b2db      	uxtb	r3, r3
}
 800c230:	4618      	mov	r0, r3
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4618      	mov	r0, r3
 800c248:	f7ff fef6 	bl	800c038 <lfs_tag_type1>
 800c24c:	4603      	mov	r3, r0
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d00a      	beq.n	800c268 <lfs_gstate_hasmovehere+0x30>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	3304      	adds	r3, #4
 800c256:	6839      	ldr	r1, [r7, #0]
 800c258:	4618      	mov	r0, r3
 800c25a:	f7ff fe41 	bl	800bee0 <lfs_pair_cmp>
 800c25e:	4603      	mov	r3, r0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d101      	bne.n	800c268 <lfs_gstate_hasmovehere+0x30>
 800c264:	2301      	movs	r3, #1
 800c266:	e000      	b.n	800c26a <lfs_gstate_hasmovehere+0x32>
 800c268:	2300      	movs	r3, #0
 800c26a:	f003 0301 	and.w	r3, r3, #1
 800c26e:	b2db      	uxtb	r3, r3
}
 800c270:	4618      	mov	r0, r3
 800c272:	3708      	adds	r7, #8
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4618      	mov	r0, r3
 800c286:	f7ff f9d9 	bl	800b63c <lfs_fromle32>
 800c28a:	4602      	mov	r2, r0
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	4618      	mov	r0, r3
 800c296:	f7ff f9d1 	bl	800b63c <lfs_fromle32>
 800c29a:	4602      	mov	r2, r0
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	689b      	ldr	r3, [r3, #8]
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7ff f9c9 	bl	800b63c <lfs_fromle32>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	609a      	str	r2, [r3, #8]
}
 800c2b0:	bf00      	nop
 800c2b2:	3708      	adds	r7, #8
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f7ff f9c4 	bl	800b652 <lfs_tole32>
 800c2ca:	4602      	mov	r2, r0
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7ff f9bc 	bl	800b652 <lfs_tole32>
 800c2da:	4602      	mov	r2, r0
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	689b      	ldr	r3, [r3, #8]
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7ff f9b4 	bl	800b652 <lfs_tole32>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	609a      	str	r2, [r3, #8]
}
 800c2f0:	bf00      	nop
 800c2f2:	3708      	adds	r7, #8
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4618      	mov	r0, r3
 800c306:	f7ff f999 	bl	800b63c <lfs_fromle32>
 800c30a:	4602      	mov	r2, r0
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	4618      	mov	r0, r3
 800c316:	f7ff f991 	bl	800b63c <lfs_fromle32>
 800c31a:	4602      	mov	r2, r0
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	605a      	str	r2, [r3, #4]
}
 800c320:	bf00      	nop
 800c322:	3708      	adds	r7, #8
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4618      	mov	r0, r3
 800c336:	f7ff f98c 	bl	800b652 <lfs_tole32>
 800c33a:	4602      	mov	r2, r0
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	4618      	mov	r0, r3
 800c346:	f7ff f984 	bl	800b652 <lfs_tole32>
 800c34a:	4602      	mov	r2, r0
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	605a      	str	r2, [r3, #4]
}
 800c350:	bf00      	nop
 800c352:	3708      	adds	r7, #8
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4618      	mov	r0, r3
 800c366:	f7ff f969 	bl	800b63c <lfs_fromle32>
 800c36a:	4602      	mov	r2, r0
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	4618      	mov	r0, r3
 800c376:	f7ff f961 	bl	800b63c <lfs_fromle32>
 800c37a:	4602      	mov	r2, r0
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	605a      	str	r2, [r3, #4]
}
 800c380:	bf00      	nop
 800c382:	3708      	adds	r7, #8
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 800c388:	b580      	push	{r7, lr}
 800c38a:	b082      	sub	sp, #8
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4618      	mov	r0, r3
 800c396:	f7ff f95c 	bl	800b652 <lfs_tole32>
 800c39a:	4602      	mov	r2, r0
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7ff f954 	bl	800b652 <lfs_tole32>
 800c3aa:	4602      	mov	r2, r0
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	605a      	str	r2, [r3, #4]
}
 800c3b0:	bf00      	nop
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7ff f939 	bl	800b63c <lfs_fromle32>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7ff f931 	bl	800b63c <lfs_fromle32>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7ff f929 	bl	800b63c <lfs_fromle32>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	68db      	ldr	r3, [r3, #12]
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7ff f921 	bl	800b63c <lfs_fromle32>
 800c3fa:	4602      	mov	r2, r0
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	691b      	ldr	r3, [r3, #16]
 800c404:	4618      	mov	r0, r3
 800c406:	f7ff f919 	bl	800b63c <lfs_fromle32>
 800c40a:	4602      	mov	r2, r0
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	695b      	ldr	r3, [r3, #20]
 800c414:	4618      	mov	r0, r3
 800c416:	f7ff f911 	bl	800b63c <lfs_fromle32>
 800c41a:	4602      	mov	r2, r0
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	615a      	str	r2, [r3, #20]
}
 800c420:	bf00      	nop
 800c422:	3708      	adds	r7, #8
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 800c428:	b580      	push	{r7, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4618      	mov	r0, r3
 800c436:	f7ff f90c 	bl	800b652 <lfs_tole32>
 800c43a:	4602      	mov	r2, r0
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	4618      	mov	r0, r3
 800c446:	f7ff f904 	bl	800b652 <lfs_tole32>
 800c44a:	4602      	mov	r2, r0
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	4618      	mov	r0, r3
 800c456:	f7ff f8fc 	bl	800b652 <lfs_tole32>
 800c45a:	4602      	mov	r2, r0
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	4618      	mov	r0, r3
 800c466:	f7ff f8f4 	bl	800b652 <lfs_tole32>
 800c46a:	4602      	mov	r2, r0
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	691b      	ldr	r3, [r3, #16]
 800c474:	4618      	mov	r0, r3
 800c476:	f7ff f8ec 	bl	800b652 <lfs_tole32>
 800c47a:	4602      	mov	r2, r0
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	695b      	ldr	r3, [r3, #20]
 800c484:	4618      	mov	r0, r3
 800c486:	f7ff f8e4 	bl	800b652 <lfs_tole32>
 800c48a:	4602      	mov	r2, r0
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	615a      	str	r2, [r3, #20]
}
 800c490:	bf00      	nop
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 800c498:	b480      	push	{r7}
 800c49a:	b085      	sub	sp, #20
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800c4a2:	1d3b      	adds	r3, r7, #4
 800c4a4:	60fb      	str	r3, [r7, #12]
 800c4a6:	e009      	b.n	800c4bc <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	683a      	ldr	r2, [r7, #0]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d101      	bne.n	800c4b6 <lfs_mlist_isopen+0x1e>
            return true;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	e007      	b.n	800c4c6 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	60fb      	str	r3, [r7, #12]
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d1f1      	bne.n	800c4a8 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 800c4c4:	2300      	movs	r3, #0
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3714      	adds	r7, #20
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr

0800c4d2 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 800c4d2:	b480      	push	{r7}
 800c4d4:	b085      	sub	sp, #20
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
 800c4da:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	3328      	adds	r3, #40	@ 0x28
 800c4e0:	60fb      	str	r3, [r7, #12]
 800c4e2:	e00d      	b.n	800c500 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	683a      	ldr	r2, [r7, #0]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d105      	bne.n	800c4fa <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	681a      	ldr	r2, [r3, #0]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	601a      	str	r2, [r3, #0]
            break;
 800c4f8:	e007      	b.n	800c50a <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	60fb      	str	r3, [r7, #12]
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d1ed      	bne.n	800c4e4 <lfs_mlist_remove+0x12>
        }
    }
}
 800c508:	bf00      	nop
 800c50a:	bf00      	nop
 800c50c:	3714      	adds	r7, #20
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr

0800c516 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 800c516:	b480      	push	{r7}
 800c518:	b083      	sub	sp, #12
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
 800c51e:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	683a      	ldr	r2, [r7, #0]
 800c52c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800c52e:	bf00      	nop
 800c530:	370c      	adds	r7, #12
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr
	...

0800c53c <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 800c544:	4b03      	ldr	r3, [pc, #12]	@ (800c554 <lfs_fs_disk_version+0x18>)
    }
}
 800c546:	4618      	mov	r0, r3
 800c548:	370c      	adds	r7, #12
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr
 800c552:	bf00      	nop
 800c554:	00020001 	.word	0x00020001

0800c558 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f7ff ffeb 	bl	800c53c <lfs_fs_disk_version>
 800c566:	4603      	mov	r3, r0
 800c568:	0c1b      	lsrs	r3, r3, #16
 800c56a:	b29b      	uxth	r3, r3

}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3708      	adds	r7, #8
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7ff ffdd 	bl	800c53c <lfs_fs_disk_version>
 800c582:	4603      	mov	r3, r0
 800c584:	b29b      	uxth	r3, r3
}
 800c586:	4618      	mov	r0, r3
 800c588:	3708      	adds	r7, #8
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 800c58e:	b480      	push	{r7}
 800c590:	b083      	sub	sp, #12
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	661a      	str	r2, [r3, #96]	@ 0x60
}
 800c59e:	bf00      	nop
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 800c5aa:	b580      	push	{r7, lr}
 800c5ac:	b082      	sub	sp, #8
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	659a      	str	r2, [r3, #88]	@ 0x58
    lfs->lookahead.next = 0;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f7ff ffe5 	bl	800c58e <lfs_alloc_ckpoint>
}
 800c5c4:	bf00      	nop
 800c5c6:	3708      	adds	r7, #8
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 800c5cc:	b480      	push	{r7}
 800c5ce:	b085      	sub	sp, #20
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5de:	683a      	ldr	r2, [r7, #0]
 800c5e0:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5e6:	4413      	add	r3, r2
 800c5e8:	68fa      	ldr	r2, [r7, #12]
 800c5ea:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 800c5ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5f0:	fb01 f202 	mul.w	r2, r1, r2
 800c5f4:	1a9b      	subs	r3, r3, r2
 800c5f6:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5fc:	68ba      	ldr	r2, [r7, #8]
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d212      	bcs.n	800c628 <lfs_alloc_lookahead+0x5c>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	08db      	lsrs	r3, r3, #3
 800c60a:	441a      	add	r2, r3
 800c60c:	7811      	ldrb	r1, [r2, #0]
 800c60e:	68ba      	ldr	r2, [r7, #8]
 800c610:	f002 0207 	and.w	r2, r2, #7
 800c614:	2001      	movs	r0, #1
 800c616:	fa00 f202 	lsl.w	r2, r0, r2
 800c61a:	b2d2      	uxtb	r2, r2
 800c61c:	68f8      	ldr	r0, [r7, #12]
 800c61e:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 800c620:	4403      	add	r3, r0
 800c622:	430a      	orrs	r2, r1
 800c624:	b2d2      	uxtb	r2, r2
 800c626:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 800c628:	2300      	movs	r3, #0
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3714      	adds	r7, #20
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr
	...

0800c638 <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c648:	4413      	add	r3, r2
            % lfs->block_count;
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800c64e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c652:	fb01 f202 	mul.w	r2, r1, r2
 800c656:	1a9a      	subs	r2, r3, r2
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs->lookahead.next = 0;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2200      	movs	r2, #0
 800c660:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    lfs->lookahead.size = lfs_min(
 800c668:	00da      	lsls	r2, r3, #3
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c66e:	4619      	mov	r1, r3
 800c670:	4610      	mov	r0, r2
 800c672:	f7fe ff73 	bl	800b55c <lfs_min>
 800c676:	4602      	mov	r2, r0
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	659a      	str	r2, [r3, #88]	@ 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c686:	461a      	mov	r2, r3
 800c688:	2100      	movs	r1, #0
 800c68a:	f006 f9e2 	bl	8012a52 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 800c68e:	2301      	movs	r3, #1
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	4909      	ldr	r1, [pc, #36]	@ (800c6b8 <lfs_alloc_scan+0x80>)
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f005 f8df 	bl	8011858 <lfs_fs_traverse_>
 800c69a:	60f8      	str	r0, [r7, #12]
    if (err) {
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d004      	beq.n	800c6ac <lfs_alloc_scan+0x74>
        lfs_alloc_drop(lfs);
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f7ff ff81 	bl	800c5aa <lfs_alloc_drop>
        return err;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	e000      	b.n	800c6ae <lfs_alloc_scan+0x76>
    }

    return 0;
 800c6ac:	2300      	movs	r3, #0
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	0800c5cd 	.word	0x0800c5cd

0800c6bc <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b086      	sub	sp, #24
 800c6c0:	af02      	add	r7, sp, #8
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 800c6c6:	e04d      	b.n	800c764 <lfs_alloc+0xa8>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6d0:	08db      	lsrs	r3, r3, #3
 800c6d2:	4413      	add	r3, r2
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	461a      	mov	r2, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6dc:	f003 0307 	and.w	r3, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800c6e0:	fa22 f303 	lsr.w	r3, r2, r3
 800c6e4:	f003 0301 	and.w	r3, r3, #1
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d131      	bne.n	800c750 <lfs_alloc+0x94>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6f4:	4413      	add	r3, r2
                        % lfs->block_count;
 800c6f6:	687a      	ldr	r2, [r7, #4]
 800c6f8:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800c6fa:	fbb3 f1f2 	udiv	r1, r3, r2
 800c6fe:	fb01 f202 	mul.w	r2, r1, r2
 800c702:	1a9a      	subs	r2, r3, r2
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c70c:	1c5a      	adds	r2, r3, #1
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	65da      	str	r2, [r3, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c716:	1e5a      	subs	r2, r3, #1
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	661a      	str	r2, [r3, #96]	@ 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c724:	429a      	cmp	r2, r3
 800c726:	d211      	bcs.n	800c74c <lfs_alloc+0x90>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c730:	08db      	lsrs	r3, r3, #3
 800c732:	4413      	add	r3, r2
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	461a      	mov	r2, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c73c:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800c740:	fa22 f303 	lsr.w	r3, r2, r3
 800c744:	f003 0301 	and.w	r3, r3, #1
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d1dd      	bne.n	800c708 <lfs_alloc+0x4c>
                        return 0;
 800c74c:	2300      	movs	r3, #0
 800c74e:	e032      	b.n	800c7b6 <lfs_alloc+0xfa>
                    }
                }
            }

            lfs->lookahead.next += 1;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c754:	1c5a      	adds	r2, r3, #1
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	65da      	str	r2, [r3, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c75e:	1e5a      	subs	r2, r3, #1
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	661a      	str	r2, [r3, #96]	@ 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d3ab      	bcc.n	800c6c8 <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c774:	2b00      	cmp	r3, #0
 800c776:	d116      	bne.n	800c7a6 <lfs_alloc+0xea>
            LFS_ERROR("No more free space 0x%"PRIx32,
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c780:	4413      	add	r3, r2
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800c786:	fbb3 f1f2 	udiv	r1, r3, r2
 800c78a:	fb01 f202 	mul.w	r2, r1, r2
 800c78e:	1a9b      	subs	r3, r3, r2
 800c790:	4a0b      	ldr	r2, [pc, #44]	@ (800c7c0 <lfs_alloc+0x104>)
 800c792:	9200      	str	r2, [sp, #0]
 800c794:	f240 22bd 	movw	r2, #701	@ 0x2bd
 800c798:	490a      	ldr	r1, [pc, #40]	@ (800c7c4 <lfs_alloc+0x108>)
 800c79a:	480b      	ldr	r0, [pc, #44]	@ (800c7c8 <lfs_alloc+0x10c>)
 800c79c:	f006 f8f4 	bl	8012988 <iprintf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->block_count);
            return LFS_ERR_NOSPC;
 800c7a0:	f06f 031b 	mvn.w	r3, #27
 800c7a4:	e007      	b.n	800c7b6 <lfs_alloc+0xfa>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f7ff ff46 	bl	800c638 <lfs_alloc_scan>
 800c7ac:	60f8      	str	r0, [r7, #12]
        if(err) {
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d088      	beq.n	800c6c6 <lfs_alloc+0xa>
            return err;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3710      	adds	r7, #16
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	080139a4 	.word	0x080139a4
 800c7c4:	08013884 	.word	0x08013884
 800c7c8:	08013978 	.word	0x08013978

0800c7cc <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 800c7cc:	b590      	push	{r4, r7, lr}
 800c7ce:	b08f      	sub	sp, #60	@ 0x3c
 800c7d0:	af04      	add	r7, sp, #16
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	607a      	str	r2, [r7, #4]
 800c7d8:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_tag_t ntag = dir->etag;
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	691b      	ldr	r3, [r3, #16]
 800c7e4:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	623b      	str	r3, [r7, #32]

    // synthetic moves
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	333c      	adds	r3, #60	@ 0x3c
 800c7ee:	68ba      	ldr	r2, [r7, #8]
 800c7f0:	4611      	mov	r1, r2
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7ff fd20 	bl	800c238 <lfs_gstate_hasmovehere>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	f000 80ca 	beq.w	800c994 <lfs_dir_getslice+0x1c8>
            lfs_tag_id(gmask) != 0) {
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f7ff fc63 	bl	800c0cc <lfs_tag_id>
 800c806:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800c808:	2b00      	cmp	r3, #0
 800c80a:	f000 80c3 	beq.w	800c994 <lfs_dir_getslice+0x1c8>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c812:	4618      	mov	r0, r3
 800c814:	f7ff fc5a 	bl	800c0cc <lfs_tag_id>
 800c818:	4603      	mov	r3, r0
 800c81a:	461c      	mov	r4, r3
 800c81c:	6838      	ldr	r0, [r7, #0]
 800c81e:	f7ff fc55 	bl	800c0cc <lfs_tag_id>
 800c822:	4603      	mov	r3, r0
 800c824:	429c      	cmp	r4, r3
 800c826:	d102      	bne.n	800c82e <lfs_dir_getslice+0x62>
            return LFS_ERR_NOENT;
 800c828:	f06f 0301 	mvn.w	r3, #1
 800c82c:	e0be      	b.n	800c9ac <lfs_dir_getslice+0x1e0>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c832:	4618      	mov	r0, r3
 800c834:	f7ff fc4a 	bl	800c0cc <lfs_tag_id>
 800c838:	4603      	mov	r3, r0
 800c83a:	461c      	mov	r4, r3
 800c83c:	6838      	ldr	r0, [r7, #0]
 800c83e:	f7ff fc45 	bl	800c0cc <lfs_tag_id>
 800c842:	4603      	mov	r3, r0
 800c844:	429c      	cmp	r4, r3
 800c846:	f080 80a5 	bcs.w	800c994 <lfs_dir_getslice+0x1c8>
            gdiff -= LFS_MKTAG(0, 1, 0);
 800c84a:	6a3b      	ldr	r3, [r7, #32]
 800c84c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800c850:	623b      	str	r3, [r7, #32]
        }
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800c852:	e09f      	b.n	800c994 <lfs_dir_getslice+0x1c8>
        off -= lfs_tag_dsize(ntag);
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	4618      	mov	r0, r3
 800c858:	f7ff fc55 	bl	800c106 <lfs_tag_dsize>
 800c85c:	4602      	mov	r2, r0
 800c85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c860:	1a9b      	subs	r3, r3, r2
 800c862:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_tag_t tag = ntag;
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 800c868:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 800c86e:	2204      	movs	r2, #4
 800c870:	9203      	str	r2, [sp, #12]
 800c872:	f107 0210 	add.w	r2, r7, #16
 800c876:	9202      	str	r2, [sp, #8]
 800c878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c87a:	9201      	str	r2, [sp, #4]
 800c87c:	9300      	str	r3, [sp, #0]
 800c87e:	2304      	movs	r3, #4
 800c880:	460a      	mov	r2, r1
 800c882:	2100      	movs	r1, #0
 800c884:	68f8      	ldr	r0, [r7, #12]
 800c886:	f7fe ff45 	bl	800b714 <lfs_bd_read>
 800c88a:	61b8      	str	r0, [r7, #24]
        if (err) {
 800c88c:	69bb      	ldr	r3, [r7, #24]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d001      	beq.n	800c896 <lfs_dir_getslice+0xca>
            return err;
 800c892:	69bb      	ldr	r3, [r7, #24]
 800c894:	e08a      	b.n	800c9ac <lfs_dir_getslice+0x1e0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	4618      	mov	r0, r3
 800c89a:	f7fe fee6 	bl	800b66a <lfs_frombe32>
 800c89e:	4602      	mov	r2, r0
 800c8a0:	69fb      	ldr	r3, [r7, #28]
 800c8a2:	4053      	eors	r3, r2
 800c8a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c8a8:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f7ff fc0e 	bl	800c0cc <lfs_tag_id>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d02b      	beq.n	800c90e <lfs_dir_getslice+0x142>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800c8b6:	69f8      	ldr	r0, [r7, #28]
 800c8b8:	f7ff fbbe 	bl	800c038 <lfs_tag_type1>
 800c8bc:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 800c8be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c8c2:	d124      	bne.n	800c90e <lfs_dir_getslice+0x142>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 800c8c4:	69f8      	ldr	r0, [r7, #28]
 800c8c6:	f7ff fc01 	bl	800c0cc <lfs_tag_id>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	461c      	mov	r4, r3
 800c8ce:	6a3b      	ldr	r3, [r7, #32]
 800c8d0:	683a      	ldr	r2, [r7, #0]
 800c8d2:	1ad3      	subs	r3, r2, r3
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f7ff fbf9 	bl	800c0cc <lfs_tag_id>
 800c8da:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800c8dc:	429c      	cmp	r4, r3
 800c8de:	d816      	bhi.n	800c90e <lfs_dir_getslice+0x142>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 800c8e0:	6a3b      	ldr	r3, [r7, #32]
 800c8e2:	683a      	ldr	r2, [r7, #0]
 800c8e4:	1ad2      	subs	r2, r2, r3
 800c8e6:	4b33      	ldr	r3, [pc, #204]	@ (800c9b4 <lfs_dir_getslice+0x1e8>)
 800c8e8:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800c8ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c8ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c8f2:	69fa      	ldr	r2, [r7, #28]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d102      	bne.n	800c8fe <lfs_dir_getslice+0x132>
                // found where we were created
                return LFS_ERR_NOENT;
 800c8f8:	f06f 0301 	mvn.w	r3, #1
 800c8fc:	e056      	b.n	800c9ac <lfs_dir_getslice+0x1e0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800c8fe:	69f8      	ldr	r0, [r7, #28]
 800c900:	f7ff fbd7 	bl	800c0b2 <lfs_tag_splice>
 800c904:	4603      	mov	r3, r0
 800c906:	029a      	lsls	r2, r3, #10
 800c908:	6a3b      	ldr	r3, [r7, #32]
 800c90a:	4413      	add	r3, r2
 800c90c:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	401a      	ands	r2, r3
 800c914:	6a3b      	ldr	r3, [r7, #32]
 800c916:	6839      	ldr	r1, [r7, #0]
 800c918:	1ac9      	subs	r1, r1, r3
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	400b      	ands	r3, r1
 800c91e:	429a      	cmp	r2, r3
 800c920:	d138      	bne.n	800c994 <lfs_dir_getslice+0x1c8>
            if (lfs_tag_isdelete(tag)) {
 800c922:	69f8      	ldr	r0, [r7, #28]
 800c924:	f7ff fb75 	bl	800c012 <lfs_tag_isdelete>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d002      	beq.n	800c934 <lfs_dir_getslice+0x168>
                return LFS_ERR_NOENT;
 800c92e:	f06f 0301 	mvn.w	r3, #1
 800c932:	e03b      	b.n	800c9ac <lfs_dir_getslice+0x1e0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 800c934:	69f8      	ldr	r0, [r7, #28]
 800c936:	f7ff fbd9 	bl	800c0ec <lfs_tag_size>
 800c93a:	4603      	mov	r3, r0
 800c93c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c93e:	4618      	mov	r0, r3
 800c940:	f7fe fe0c 	bl	800b55c <lfs_min>
 800c944:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 800c946:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c94e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c950:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 800c952:	3204      	adds	r2, #4
 800c954:	6979      	ldr	r1, [r7, #20]
 800c956:	9103      	str	r1, [sp, #12]
 800c958:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c95a:	9102      	str	r1, [sp, #8]
 800c95c:	9201      	str	r2, [sp, #4]
 800c95e:	9300      	str	r3, [sp, #0]
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	4602      	mov	r2, r0
 800c964:	2100      	movs	r1, #0
 800c966:	68f8      	ldr	r0, [r7, #12]
 800c968:	f7fe fed4 	bl	800b714 <lfs_bd_read>
 800c96c:	61b8      	str	r0, [r7, #24]
            if (err) {
 800c96e:	69bb      	ldr	r3, [r7, #24]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d001      	beq.n	800c978 <lfs_dir_getslice+0x1ac>
                return err;
 800c974:	69bb      	ldr	r3, [r7, #24]
 800c976:	e019      	b.n	800c9ac <lfs_dir_getslice+0x1e0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 800c978:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	18d0      	adds	r0, r2, r3
 800c97e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	1ad3      	subs	r3, r2, r3
 800c984:	461a      	mov	r2, r3
 800c986:	2100      	movs	r1, #0
 800c988:	f006 f863 	bl	8012a52 <memset>

            return tag + gdiff;
 800c98c:	6a3a      	ldr	r2, [r7, #32]
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	4413      	add	r3, r2
 800c992:	e00b      	b.n	800c9ac <lfs_dir_getslice+0x1e0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	4618      	mov	r0, r3
 800c998:	f7ff fbb5 	bl	800c106 <lfs_tag_dsize>
 800c99c:	4603      	mov	r3, r0
 800c99e:	3304      	adds	r3, #4
 800c9a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	f4bf af56 	bcs.w	800c854 <lfs_dir_getslice+0x88>
        }
    }

    return LFS_ERR_NOENT;
 800c9a8:	f06f 0301 	mvn.w	r3, #1
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	372c      	adds	r7, #44	@ 0x2c
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd90      	pop	{r4, r7, pc}
 800c9b4:	000ffc00 	.word	0x000ffc00

0800c9b8 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b088      	sub	sp, #32
 800c9bc:	af04      	add	r7, sp, #16
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	607a      	str	r2, [r7, #4]
 800c9c4:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800c9c6:	6838      	ldr	r0, [r7, #0]
 800c9c8:	f7ff fb90 	bl	800c0ec <lfs_tag_size>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	9302      	str	r3, [sp, #8]
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	9301      	str	r3, [sp, #4]
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	9300      	str	r3, [sp, #0]
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	68b9      	ldr	r1, [r7, #8]
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f7ff fef4 	bl	800c7cc <lfs_dir_getslice>
 800c9e4:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b08c      	sub	sp, #48	@ 0x30
 800c9f2:	af04      	add	r7, sp, #16
 800c9f4:	60f8      	str	r0, [r7, #12]
 800c9f6:	60b9      	str	r1, [r7, #8]
 800c9f8:	607a      	str	r2, [r7, #4]
 800c9fa:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800c9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9fe:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 800ca00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca04:	441a      	add	r2, r3
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca0a:	69db      	ldr	r3, [r3, #28]
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	f240 80c0 	bls.w	800cb92 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 800ca12:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800ca16:	e0c1      	b.n	800cb9c <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800ca18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca1a:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d03f      	beq.n	800caa2 <lfs_dir_getread+0xb4>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f113 0f02 	cmn.w	r3, #2
 800ca2a:	d13a      	bne.n	800caa2 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	685a      	ldr	r2, [r3, #4]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800ca36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d232      	bcs.n	800caa2 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d324      	bcc.n	800ca90 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	689a      	ldr	r2, [r3, #8]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6859      	ldr	r1, [r3, #4]
 800ca4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca50:	1acb      	subs	r3, r1, r3
 800ca52:	4413      	add	r3, r2
 800ca54:	4619      	mov	r1, r3
 800ca56:	69b8      	ldr	r0, [r7, #24]
 800ca58:	f7fe fd80 	bl	800b55c <lfs_min>
 800ca5c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	68da      	ldr	r2, [r3, #12]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	685b      	ldr	r3, [r3, #4]
 800ca66:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ca68:	1acb      	subs	r3, r1, r3
 800ca6a:	4413      	add	r3, r2
 800ca6c:	69ba      	ldr	r2, [r7, #24]
 800ca6e:	4619      	mov	r1, r3
 800ca70:	69f8      	ldr	r0, [r7, #28]
 800ca72:	f006 f89a 	bl	8012baa <memcpy>

                data += diff;
 800ca76:	69fa      	ldr	r2, [r7, #28]
 800ca78:	69bb      	ldr	r3, [r7, #24]
 800ca7a:	4413      	add	r3, r2
 800ca7c:	61fb      	str	r3, [r7, #28]
                off += diff;
 800ca7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca80:	69bb      	ldr	r3, [r7, #24]
 800ca82:	4413      	add	r3, r2
 800ca84:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800ca86:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ca88:	69bb      	ldr	r3, [r7, #24]
 800ca8a:	1ad3      	subs	r3, r2, r3
 800ca8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800ca8e:	e080      	b.n	800cb92 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	685a      	ldr	r2, [r3, #4]
 800ca94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca96:	1ad3      	subs	r3, r2, r3
 800ca98:	4619      	mov	r1, r3
 800ca9a:	69b8      	ldr	r0, [r7, #24]
 800ca9c:	f7fe fd5e 	bl	800b55c <lfs_min>
 800caa0:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f113 0f02 	cmn.w	r3, #2
 800caaa:	d13a      	bne.n	800cb22 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	685a      	ldr	r2, [r3, #4]
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	689b      	ldr	r3, [r3, #8]
 800cab4:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 800cab6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cab8:	429a      	cmp	r2, r3
 800caba:	d232      	bcs.n	800cb22 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d324      	bcc.n	800cb10 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	689a      	ldr	r2, [r3, #8]
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	6859      	ldr	r1, [r3, #4]
 800cace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cad0:	1acb      	subs	r3, r1, r3
 800cad2:	4413      	add	r3, r2
 800cad4:	4619      	mov	r1, r3
 800cad6:	69b8      	ldr	r0, [r7, #24]
 800cad8:	f7fe fd40 	bl	800b55c <lfs_min>
 800cadc:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	68da      	ldr	r2, [r3, #12]
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cae8:	1acb      	subs	r3, r1, r3
 800caea:	4413      	add	r3, r2
 800caec:	69ba      	ldr	r2, [r7, #24]
 800caee:	4619      	mov	r1, r3
 800caf0:	69f8      	ldr	r0, [r7, #28]
 800caf2:	f006 f85a 	bl	8012baa <memcpy>

                data += diff;
 800caf6:	69fa      	ldr	r2, [r7, #28]
 800caf8:	69bb      	ldr	r3, [r7, #24]
 800cafa:	4413      	add	r3, r2
 800cafc:	61fb      	str	r3, [r7, #28]
                off += diff;
 800cafe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb00:	69bb      	ldr	r3, [r7, #24]
 800cb02:	4413      	add	r3, r2
 800cb04:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800cb06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cb08:	69bb      	ldr	r3, [r7, #24]
 800cb0a:	1ad3      	subs	r3, r2, r3
 800cb0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800cb0e:	e040      	b.n	800cb92 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	685a      	ldr	r2, [r3, #4]
 800cb14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb16:	1ad3      	subs	r3, r2, r3
 800cb18:	4619      	mov	r1, r3
 800cb1a:	69b8      	ldr	r0, [r7, #24]
 800cb1c:	f7fe fd1e 	bl	800b55c <lfs_min>
 800cb20:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	f06f 0201 	mvn.w	r2, #1
 800cb28:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb2e:	695b      	ldr	r3, [r3, #20]
 800cb30:	4619      	mov	r1, r3
 800cb32:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cb34:	f7fe fd22 	bl	800b57c <lfs_aligndown>
 800cb38:	4602      	mov	r2, r0
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800cb3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb42:	441a      	add	r2, r3
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb48:	695b      	ldr	r3, [r3, #20]
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	4610      	mov	r0, r2
 800cb4e:	f7fe fd2a 	bl	800b5a6 <lfs_alignup>
 800cb52:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	4610      	mov	r0, r2
 800cb5e:	f7fe fcfd 	bl	800b55c <lfs_min>
 800cb62:	4602      	mov	r2, r0
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800cb6c:	683a      	ldr	r2, [r7, #0]
 800cb6e:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800cb70:	6839      	ldr	r1, [r7, #0]
 800cb72:	6889      	ldr	r1, [r1, #8]
 800cb74:	9102      	str	r1, [sp, #8]
 800cb76:	9201      	str	r2, [sp, #4]
 800cb78:	9300      	str	r3, [sp, #0]
 800cb7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb7e:	68b9      	ldr	r1, [r7, #8]
 800cb80:	68f8      	ldr	r0, [r7, #12]
 800cb82:	f7ff fe23 	bl	800c7cc <lfs_dir_getslice>
 800cb86:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	da01      	bge.n	800cb92 <lfs_dir_getread+0x1a4>
            return err;
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	e004      	b.n	800cb9c <lfs_dir_getread+0x1ae>
    while (size > 0) {
 800cb92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	f47f af3f 	bne.w	800ca18 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 800cb9a:	2300      	movs	r3, #0
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3720      	adds	r7, #32
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 800cba4:	b590      	push	{r4, r7, lr}
 800cba6:	b087      	sub	sp, #28
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	60b9      	str	r1, [r7, #8]
 800cbae:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d001      	beq.n	800cbc2 <lfs_dir_traverse_filter+0x1e>
 800cbbe:	4b24      	ldr	r3, [pc, #144]	@ (800cc50 <lfs_dir_traverse_filter+0xac>)
 800cbc0:	e000      	b.n	800cbc4 <lfs_dir_traverse_filter+0x20>
 800cbc2:	4b24      	ldr	r3, [pc, #144]	@ (800cc54 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800cbc4:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	405a      	eors	r2, r3
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	4013      	ands	r3, r2
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d014      	beq.n	800cc00 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7ff fa19 	bl	800c012 <lfs_tag_isdelete>
 800cbe0:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d10c      	bne.n	800cc00 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	4a19      	ldr	r2, [pc, #100]	@ (800cc50 <lfs_dir_traverse_filter+0xac>)
 800cbea:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	6819      	ldr	r1, [r3, #0]
 800cbf0:	4b19      	ldr	r3, [pc, #100]	@ (800cc58 <lfs_dir_traverse_filter+0xb4>)
 800cbf2:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800cbf4:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800cbf8:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d104      	bne.n	800cc0a <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	2200      	movs	r2, #0
 800cc04:	601a      	str	r2, [r3, #0]
        return true;
 800cc06:	2301      	movs	r3, #1
 800cc08:	e01e      	b.n	800cc48 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800cc0a:	68b8      	ldr	r0, [r7, #8]
 800cc0c:	f7ff fa14 	bl	800c038 <lfs_tag_type1>
 800cc10:	4603      	mov	r3, r0
 800cc12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc16:	d116      	bne.n	800cc46 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 800cc18:	68b8      	ldr	r0, [r7, #8]
 800cc1a:	f7ff fa57 	bl	800c0cc <lfs_tag_id>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	461c      	mov	r4, r3
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7ff fa50 	bl	800c0cc <lfs_tag_id>
 800cc2c:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800cc2e:	429c      	cmp	r4, r3
 800cc30:	d809      	bhi.n	800cc46 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800cc32:	68b8      	ldr	r0, [r7, #8]
 800cc34:	f7ff fa3d 	bl	800c0b2 <lfs_tag_splice>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	029a      	lsls	r2, r3, #10
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	441a      	add	r2, r3
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	601a      	str	r2, [r3, #0]
    }

    return false;
 800cc46:	2300      	movs	r3, #0
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	371c      	adds	r7, #28
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd90      	pop	{r4, r7, pc}
 800cc50:	7ffffc00 	.word	0x7ffffc00
 800cc54:	700ffc00 	.word	0x700ffc00
 800cc58:	000ffc00 	.word	0x000ffc00

0800cc5c <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800cc5c:	b590      	push	{r4, r7, lr}
 800cc5e:	b0c1      	sub	sp, #260	@ 0x104
 800cc60:	af04      	add	r7, sp, #16
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	60b9      	str	r1, [r7, #8]
 800cc66:	607a      	str	r2, [r7, #4]
 800cc68:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 800cc70:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800cc74:	2200      	movs	r2, #0
 800cc76:	601a      	str	r2, [r3, #0]
 800cc78:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 800cc7a:	6838      	ldr	r0, [r7, #0]
 800cc7c:	f7ff fa43 	bl	800c106 <lfs_tag_dsize>
 800cc80:	4602      	mov	r2, r0
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	441a      	add	r2, r3
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	68db      	ldr	r3, [r3, #12]
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d237      	bcs.n	800ccfe <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 800cc8e:	6838      	ldr	r0, [r7, #0]
 800cc90:	f7ff fa39 	bl	800c106 <lfs_tag_dsize>
 800cc94:	4602      	mov	r2, r0
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	4413      	add	r3, r2
 800cc9a:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 800cc9c:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 800cca2:	2204      	movs	r2, #4
 800cca4:	9203      	str	r2, [sp, #12]
 800cca6:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800ccaa:	9202      	str	r2, [sp, #8]
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	9201      	str	r2, [sp, #4]
 800ccb0:	9300      	str	r3, [sp, #0]
 800ccb2:	2304      	movs	r3, #4
 800ccb4:	460a      	mov	r2, r1
 800ccb6:	2100      	movs	r1, #0
 800ccb8:	68f8      	ldr	r0, [r7, #12]
 800ccba:	f7fe fd2b 	bl	800b714 <lfs_bd_read>
 800ccbe:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                if (err) {
 800ccc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d002      	beq.n	800ccd0 <lfs_dir_traverse+0x74>
                    return err;
 800ccca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ccce:	e3a5      	b.n	800d41c <lfs_dir_traverse+0x7c0>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 800ccd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7fe fcc9 	bl	800b66a <lfs_frombe32>
 800ccd8:	4602      	mov	r2, r0
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	4053      	eors	r3, r2
 800ccde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cce2:	657b      	str	r3, [r7, #84]	@ 0x54
                disk.block = dir->pair[0];
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	3304      	adds	r3, #4
 800ccee:	653b      	str	r3, [r7, #80]	@ 0x50
                buffer = &disk;
 800ccf0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ccf4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                ptag = tag;
 800ccf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccfa:	603b      	str	r3, [r7, #0]
 800ccfc:	e01b      	b.n	800cd36 <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 800ccfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	dd13      	ble.n	800cd2e <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 800cd06:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	657b      	str	r3, [r7, #84]	@ 0x54
                buffer = attrs[0].buffer;
 800cd0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                attrs += 1;
 800cd18:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cd1c:	3308      	adds	r3, #8
 800cd1e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                attrcount -= 1;
 800cd22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd26:	3b01      	subs	r3, #1
 800cd28:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800cd2c:	e003      	b.n	800cd36 <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                break;
 800cd34:	e2a1      	b.n	800d27a <lfs_dir_traverse+0x61e>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800cd36:	4b7e      	ldr	r3, [pc, #504]	@ (800cf30 <lfs_dir_traverse+0x2d4>)
 800cd38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800cd3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cd3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cd42:	405a      	eors	r2, r3
 800cd44:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800cd48:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800cd4c:	400b      	ands	r3, r1
 800cd4e:	4013      	ands	r3, r2
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	f040 8284 	bne.w	800d25e <lfs_dir_traverse+0x602>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 800cd56:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800cd5a:	f7ff f9b7 	bl	800c0cc <lfs_tag_id>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f000 80ef 	beq.w	800cf44 <lfs_dir_traverse+0x2e8>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 800cd66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800cd6a:	2b02      	cmp	r3, #2
 800cd6c:	d906      	bls.n	800cd7c <lfs_dir_traverse+0x120>
 800cd6e:	4b71      	ldr	r3, [pc, #452]	@ (800cf34 <lfs_dir_traverse+0x2d8>)
 800cd70:	4a71      	ldr	r2, [pc, #452]	@ (800cf38 <lfs_dir_traverse+0x2dc>)
 800cd72:	f240 31c2 	movw	r1, #962	@ 0x3c2
 800cd76:	4871      	ldr	r0, [pc, #452]	@ (800cf3c <lfs_dir_traverse+0x2e0>)
 800cd78:	f005 fc56 	bl	8012628 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 800cd7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cd7e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800cd82:	4613      	mov	r3, r2
 800cd84:	011b      	lsls	r3, r3, #4
 800cd86:	1a9b      	subs	r3, r3, r2
 800cd88:	009b      	lsls	r3, r3, #2
 800cd8a:	33f0      	adds	r3, #240	@ 0xf0
 800cd8c:	443b      	add	r3, r7
 800cd8e:	3b98      	subs	r3, #152	@ 0x98
 800cd90:	68ba      	ldr	r2, [r7, #8]
 800cd92:	601a      	str	r2, [r3, #0]
 800cd94:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800cd98:	4613      	mov	r3, r2
 800cd9a:	011b      	lsls	r3, r3, #4
 800cd9c:	1a9b      	subs	r3, r3, r2
 800cd9e:	009b      	lsls	r3, r3, #2
 800cda0:	33f0      	adds	r3, #240	@ 0xf0
 800cda2:	443b      	add	r3, r7
 800cda4:	3b94      	subs	r3, #148	@ 0x94
 800cda6:	687a      	ldr	r2, [r7, #4]
 800cda8:	601a      	str	r2, [r3, #0]
 800cdaa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800cdae:	4613      	mov	r3, r2
 800cdb0:	011b      	lsls	r3, r3, #4
 800cdb2:	1a9b      	subs	r3, r3, r2
 800cdb4:	009b      	lsls	r3, r3, #2
 800cdb6:	33f0      	adds	r3, #240	@ 0xf0
 800cdb8:	443b      	add	r3, r7
 800cdba:	3b90      	subs	r3, #144	@ 0x90
 800cdbc:	683a      	ldr	r2, [r7, #0]
 800cdbe:	601a      	str	r2, [r3, #0]
 800cdc0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800cdc4:	4613      	mov	r3, r2
 800cdc6:	011b      	lsls	r3, r3, #4
 800cdc8:	1a9b      	subs	r3, r3, r2
 800cdca:	009b      	lsls	r3, r3, #2
 800cdcc:	33f0      	adds	r3, #240	@ 0xf0
 800cdce:	443b      	add	r3, r7
 800cdd0:	3b8c      	subs	r3, #140	@ 0x8c
 800cdd2:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800cdd6:	601a      	str	r2, [r3, #0]
 800cdd8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800cddc:	4613      	mov	r3, r2
 800cdde:	011b      	lsls	r3, r3, #4
 800cde0:	1a9b      	subs	r3, r3, r2
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	33f0      	adds	r3, #240	@ 0xf0
 800cde6:	443b      	add	r3, r7
 800cde8:	3b88      	subs	r3, #136	@ 0x88
 800cdea:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800cdee:	601a      	str	r2, [r3, #0]
 800cdf0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	011b      	lsls	r3, r3, #4
 800cdf8:	1a9b      	subs	r3, r3, r2
 800cdfa:	009b      	lsls	r3, r3, #2
 800cdfc:	33f0      	adds	r3, #240	@ 0xf0
 800cdfe:	443b      	add	r3, r7
 800ce00:	3b84      	subs	r3, #132	@ 0x84
 800ce02:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800ce06:	601a      	str	r2, [r3, #0]
 800ce08:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	011b      	lsls	r3, r3, #4
 800ce10:	1a9b      	subs	r3, r3, r2
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	33f0      	adds	r3, #240	@ 0xf0
 800ce16:	443b      	add	r3, r7
 800ce18:	3b80      	subs	r3, #128	@ 0x80
 800ce1a:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800ce1e:	601a      	str	r2, [r3, #0]
 800ce20:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800ce24:	4613      	mov	r3, r2
 800ce26:	011b      	lsls	r3, r3, #4
 800ce28:	1a9b      	subs	r3, r3, r2
 800ce2a:	009b      	lsls	r3, r3, #2
 800ce2c:	33f0      	adds	r3, #240	@ 0xf0
 800ce2e:	443b      	add	r3, r7
 800ce30:	3b7c      	subs	r3, #124	@ 0x7c
 800ce32:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 800ce36:	801a      	strh	r2, [r3, #0]
 800ce38:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800ce3c:	4613      	mov	r3, r2
 800ce3e:	011b      	lsls	r3, r3, #4
 800ce40:	1a9b      	subs	r3, r3, r2
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	33f0      	adds	r3, #240	@ 0xf0
 800ce46:	443b      	add	r3, r7
 800ce48:	3b7a      	subs	r3, #122	@ 0x7a
 800ce4a:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 800ce4e:	801a      	strh	r2, [r3, #0]
 800ce50:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800ce54:	4613      	mov	r3, r2
 800ce56:	011b      	lsls	r3, r3, #4
 800ce58:	1a9b      	subs	r3, r3, r2
 800ce5a:	009b      	lsls	r3, r3, #2
 800ce5c:	33f0      	adds	r3, #240	@ 0xf0
 800ce5e:	443b      	add	r3, r7
 800ce60:	3b78      	subs	r3, #120	@ 0x78
 800ce62:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 800ce66:	801a      	strh	r2, [r3, #0]
 800ce68:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	011b      	lsls	r3, r3, #4
 800ce70:	1a9b      	subs	r3, r3, r2
 800ce72:	009b      	lsls	r3, r3, #2
 800ce74:	33f0      	adds	r3, #240	@ 0xf0
 800ce76:	443b      	add	r3, r7
 800ce78:	3b74      	subs	r3, #116	@ 0x74
 800ce7a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800ce7e:	601a      	str	r2, [r3, #0]
 800ce80:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800ce84:	4613      	mov	r3, r2
 800ce86:	011b      	lsls	r3, r3, #4
 800ce88:	1a9b      	subs	r3, r3, r2
 800ce8a:	009b      	lsls	r3, r3, #2
 800ce8c:	33f0      	adds	r3, #240	@ 0xf0
 800ce8e:	443b      	add	r3, r7
 800ce90:	3b70      	subs	r3, #112	@ 0x70
 800ce92:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800ce96:	601a      	str	r2, [r3, #0]
 800ce98:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800ce9c:	4613      	mov	r3, r2
 800ce9e:	011b      	lsls	r3, r3, #4
 800cea0:	1a9b      	subs	r3, r3, r2
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	33f0      	adds	r3, #240	@ 0xf0
 800cea6:	443b      	add	r3, r7
 800cea8:	3b6c      	subs	r3, #108	@ 0x6c
 800ceaa:	6019      	str	r1, [r3, #0]
 800ceac:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800ceb0:	4613      	mov	r3, r2
 800ceb2:	011b      	lsls	r3, r3, #4
 800ceb4:	1a9b      	subs	r3, r3, r2
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	33f0      	adds	r3, #240	@ 0xf0
 800ceba:	443b      	add	r3, r7
 800cebc:	3b68      	subs	r3, #104	@ 0x68
 800cebe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800cec2:	601a      	str	r2, [r3, #0]
 800cec4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800cec8:	4613      	mov	r3, r2
 800ceca:	011b      	lsls	r3, r3, #4
 800cecc:	1a9b      	subs	r3, r3, r2
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	33f0      	adds	r3, #240	@ 0xf0
 800ced2:	443b      	add	r3, r7
 800ced4:	3b68      	subs	r3, #104	@ 0x68
 800ced6:	3304      	adds	r3, #4
 800ced8:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800cedc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cee0:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 800cee4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800cee8:	3301      	adds	r3, #1
 800ceea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

                tmask = 0;
 800ceee:	2300      	movs	r3, #0
 800cef0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                ttag = 0;
 800cef4:	2300      	movs	r3, #0
 800cef6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                begin = 0;
 800cefa:	2300      	movs	r3, #0
 800cefc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
                end = 0;
 800cf00:	2300      	movs	r3, #0
 800cf02:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
                diff = 0;
 800cf06:	2300      	movs	r3, #0
 800cf08:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
                cb = lfs_dir_traverse_filter;
 800cf0c:	4b0c      	ldr	r3, [pc, #48]	@ (800cf40 <lfs_dir_traverse+0x2e4>)
 800cf0e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                data = &stack[sp-1].tag;
 800cf12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800cf16:	1e5a      	subs	r2, r3, #1
 800cf18:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800cf1c:	4613      	mov	r3, r2
 800cf1e:	011b      	lsls	r3, r3, #4
 800cf20:	1a9b      	subs	r3, r3, r2
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	3328      	adds	r3, #40	@ 0x28
 800cf26:	440b      	add	r3, r1
 800cf28:	3304      	adds	r3, #4
 800cf2a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                continue;
 800cf2e:	e19d      	b.n	800d26c <lfs_dir_traverse+0x610>
 800cf30:	7ff00000 	.word	0x7ff00000
 800cf34:	080139a8 	.word	0x080139a8
 800cf38:	080146c0 	.word	0x080146c0
 800cf3c:	08013884 	.word	0x08013884
 800cf40:	0800cba5 	.word	0x0800cba5
            }
        }

popped:
 800cf44:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 800cf46:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800cf4a:	f7ff f8bf 	bl	800c0cc <lfs_tag_id>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d015      	beq.n	800cf80 <lfs_dir_traverse+0x324>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800cf54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7ff f8b8 	bl	800c0cc <lfs_tag_id>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 800cf60:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 800cf64:	4293      	cmp	r3, r2
 800cf66:	f200 817c 	bhi.w	800d262 <lfs_dir_traverse+0x606>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800cf6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7ff f8ad 	bl	800c0cc <lfs_tag_id>
 800cf72:	4603      	mov	r3, r0
 800cf74:	461a      	mov	r2, r3
 800cf76:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	f240 8171 	bls.w	800d262 <lfs_dir_traverse+0x606>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800cf80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7ff f878 	bl	800c078 <lfs_tag_type3>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	f43f ae75 	beq.w	800cc7a <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800cf90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7ff f870 	bl	800c078 <lfs_tag_type3>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	f240 1301 	movw	r3, #257	@ 0x101
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	f040 80e0 	bne.w	800d166 <lfs_dir_traverse+0x50a>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 800cfa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cfaa:	4ab1      	ldr	r2, [pc, #708]	@ (800d270 <lfs_dir_traverse+0x614>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	f000 815a 	beq.w	800d266 <lfs_dir_traverse+0x60a>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 800cfb2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	011b      	lsls	r3, r3, #4
 800cfba:	1a9b      	subs	r3, r3, r2
 800cfbc:	009b      	lsls	r3, r3, #2
 800cfbe:	33f0      	adds	r3, #240	@ 0xf0
 800cfc0:	443b      	add	r3, r7
 800cfc2:	3b98      	subs	r3, #152	@ 0x98
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	233c      	movs	r3, #60	@ 0x3c
 800cfc8:	461a      	mov	r2, r3
 800cfca:	2100      	movs	r1, #0
 800cfcc:	f005 fd41 	bl	8012a52 <memset>
 800cfd0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800cfd4:	4613      	mov	r3, r2
 800cfd6:	011b      	lsls	r3, r3, #4
 800cfd8:	1a9b      	subs	r3, r3, r2
 800cfda:	009b      	lsls	r3, r3, #2
 800cfdc:	33f0      	adds	r3, #240	@ 0xf0
 800cfde:	443b      	add	r3, r7
 800cfe0:	3b98      	subs	r3, #152	@ 0x98
 800cfe2:	68ba      	ldr	r2, [r7, #8]
 800cfe4:	601a      	str	r2, [r3, #0]
 800cfe6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800cfea:	4613      	mov	r3, r2
 800cfec:	011b      	lsls	r3, r3, #4
 800cfee:	1a9b      	subs	r3, r3, r2
 800cff0:	009b      	lsls	r3, r3, #2
 800cff2:	33f0      	adds	r3, #240	@ 0xf0
 800cff4:	443b      	add	r3, r7
 800cff6:	3b94      	subs	r3, #148	@ 0x94
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	601a      	str	r2, [r3, #0]
 800cffc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800d000:	4613      	mov	r3, r2
 800d002:	011b      	lsls	r3, r3, #4
 800d004:	1a9b      	subs	r3, r3, r2
 800d006:	009b      	lsls	r3, r3, #2
 800d008:	33f0      	adds	r3, #240	@ 0xf0
 800d00a:	443b      	add	r3, r7
 800d00c:	3b90      	subs	r3, #144	@ 0x90
 800d00e:	683a      	ldr	r2, [r7, #0]
 800d010:	601a      	str	r2, [r3, #0]
 800d012:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800d016:	4613      	mov	r3, r2
 800d018:	011b      	lsls	r3, r3, #4
 800d01a:	1a9b      	subs	r3, r3, r2
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	33f0      	adds	r3, #240	@ 0xf0
 800d020:	443b      	add	r3, r7
 800d022:	3b8c      	subs	r3, #140	@ 0x8c
 800d024:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800d028:	601a      	str	r2, [r3, #0]
 800d02a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800d02e:	4613      	mov	r3, r2
 800d030:	011b      	lsls	r3, r3, #4
 800d032:	1a9b      	subs	r3, r3, r2
 800d034:	009b      	lsls	r3, r3, #2
 800d036:	33f0      	adds	r3, #240	@ 0xf0
 800d038:	443b      	add	r3, r7
 800d03a:	3b88      	subs	r3, #136	@ 0x88
 800d03c:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800d040:	601a      	str	r2, [r3, #0]
 800d042:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800d046:	4613      	mov	r3, r2
 800d048:	011b      	lsls	r3, r3, #4
 800d04a:	1a9b      	subs	r3, r3, r2
 800d04c:	009b      	lsls	r3, r3, #2
 800d04e:	33f0      	adds	r3, #240	@ 0xf0
 800d050:	443b      	add	r3, r7
 800d052:	3b84      	subs	r3, #132	@ 0x84
 800d054:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800d058:	601a      	str	r2, [r3, #0]
 800d05a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800d05e:	4613      	mov	r3, r2
 800d060:	011b      	lsls	r3, r3, #4
 800d062:	1a9b      	subs	r3, r3, r2
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	33f0      	adds	r3, #240	@ 0xf0
 800d068:	443b      	add	r3, r7
 800d06a:	3b80      	subs	r3, #128	@ 0x80
 800d06c:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800d070:	601a      	str	r2, [r3, #0]
 800d072:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800d076:	4613      	mov	r3, r2
 800d078:	011b      	lsls	r3, r3, #4
 800d07a:	1a9b      	subs	r3, r3, r2
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	33f0      	adds	r3, #240	@ 0xf0
 800d080:	443b      	add	r3, r7
 800d082:	3b7c      	subs	r3, #124	@ 0x7c
 800d084:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 800d088:	801a      	strh	r2, [r3, #0]
 800d08a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800d08e:	4613      	mov	r3, r2
 800d090:	011b      	lsls	r3, r3, #4
 800d092:	1a9b      	subs	r3, r3, r2
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	33f0      	adds	r3, #240	@ 0xf0
 800d098:	443b      	add	r3, r7
 800d09a:	3b7a      	subs	r3, #122	@ 0x7a
 800d09c:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 800d0a0:	801a      	strh	r2, [r3, #0]
 800d0a2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800d0a6:	4613      	mov	r3, r2
 800d0a8:	011b      	lsls	r3, r3, #4
 800d0aa:	1a9b      	subs	r3, r3, r2
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	33f0      	adds	r3, #240	@ 0xf0
 800d0b0:	443b      	add	r3, r7
 800d0b2:	3b78      	subs	r3, #120	@ 0x78
 800d0b4:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 800d0b8:	801a      	strh	r2, [r3, #0]
 800d0ba:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800d0be:	4613      	mov	r3, r2
 800d0c0:	011b      	lsls	r3, r3, #4
 800d0c2:	1a9b      	subs	r3, r3, r2
 800d0c4:	009b      	lsls	r3, r3, #2
 800d0c6:	33f0      	adds	r3, #240	@ 0xf0
 800d0c8:	443b      	add	r3, r7
 800d0ca:	3b74      	subs	r3, #116	@ 0x74
 800d0cc:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800d0d0:	601a      	str	r2, [r3, #0]
 800d0d2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	011b      	lsls	r3, r3, #4
 800d0da:	1a9b      	subs	r3, r3, r2
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	33f0      	adds	r3, #240	@ 0xf0
 800d0e0:	443b      	add	r3, r7
 800d0e2:	3b70      	subs	r3, #112	@ 0x70
 800d0e4:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800d0e8:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 800d0ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d0ee:	3301      	adds	r3, #1
 800d0f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

            uint16_t fromid = lfs_tag_size(tag);
 800d0f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7fe fff8 	bl	800c0ec <lfs_tag_size>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
            uint16_t toid = lfs_tag_id(tag);
 800d102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d104:	4618      	mov	r0, r3
 800d106:	f7fe ffe1 	bl	800c0cc <lfs_tag_id>
 800d10a:	4603      	mov	r3, r0
 800d10c:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
            dir = buffer;
 800d110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d114:	60bb      	str	r3, [r7, #8]
            off = 0;
 800d116:	2300      	movs	r3, #0
 800d118:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 800d11a:	f04f 33ff 	mov.w	r3, #4294967295
 800d11e:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 800d120:	2300      	movs	r3, #0
 800d122:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            attrcount = 0;
 800d126:	2300      	movs	r3, #0
 800d128:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 800d12c:	4b51      	ldr	r3, [pc, #324]	@ (800d274 <lfs_dir_traverse+0x618>)
 800d12e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 800d132:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800d136:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            begin = fromid;
 800d13a:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800d13e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
            end = fromid+1;
 800d142:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800d146:	3301      	adds	r3, #1
 800d148:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
            diff = toid-fromid+diff;
 800d14c:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	@ 0xd0
 800d150:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800d154:	1ad3      	subs	r3, r2, r3
 800d156:	b29a      	uxth	r2, r3
 800d158:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 800d15c:	4413      	add	r3, r2
 800d15e:	b29b      	uxth	r3, r3
 800d160:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 800d164:	e589      	b.n	800cc7a <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800d166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d168:	4618      	mov	r0, r3
 800d16a:	f7fe ff85 	bl	800c078 <lfs_tag_type3>
 800d16e:	4603      	mov	r3, r0
 800d170:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800d174:	d159      	bne.n	800d22a <lfs_dir_traverse+0x5ce>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800d176:	2300      	movs	r3, #0
 800d178:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d17c:	e04b      	b.n	800d216 <lfs_dir_traverse+0x5ba>
                const struct lfs_attr *a = buffer;
 800d17e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d182:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800d186:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d18a:	4613      	mov	r3, r2
 800d18c:	005b      	lsls	r3, r3, #1
 800d18e:	4413      	add	r3, r2
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	461a      	mov	r2, r3
 800d194:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d198:	4413      	add	r3, r2
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800d1a0:	051c      	lsls	r4, r3, #20
 800d1a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7fe ff91 	bl	800c0cc <lfs_tag_id>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 800d1b2:	4413      	add	r3, r2
 800d1b4:	029b      	lsls	r3, r3, #10
 800d1b6:	ea44 0103 	orr.w	r1, r4, r3
 800d1ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d1be:	4613      	mov	r3, r2
 800d1c0:	005b      	lsls	r3, r3, #1
 800d1c2:	4413      	add	r3, r2
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d1cc:	4413      	add	r3, r2
 800d1ce:	689b      	ldr	r3, [r3, #8]
 800d1d0:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 800d1d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d1d6:	4613      	mov	r3, r2
 800d1d8:	005b      	lsls	r3, r3, #1
 800d1da:	4413      	add	r3, r2
 800d1dc:	009b      	lsls	r3, r3, #2
 800d1de:	461a      	mov	r2, r3
 800d1e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d1e4:	4413      	add	r3, r2
 800d1e6:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800d1e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d1ec:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800d1f0:	4798      	blx	r3
 800d1f2:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                if (res < 0) {
 800d1f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	da02      	bge.n	800d204 <lfs_dir_traverse+0x5a8>
                    return res;
 800d1fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d202:	e10b      	b.n	800d41c <lfs_dir_traverse+0x7c0>
                }

                if (res) {
 800d204:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d12e      	bne.n	800d26a <lfs_dir_traverse+0x60e>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800d20c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d210:	3301      	adds	r3, #1
 800d212:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d218:	4618      	mov	r0, r3
 800d21a:	f7fe ff67 	bl	800c0ec <lfs_tag_size>
 800d21e:	4602      	mov	r2, r0
 800d220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d224:	4293      	cmp	r3, r2
 800d226:	d3aa      	bcc.n	800d17e <lfs_dir_traverse+0x522>
 800d228:	e527      	b.n	800cc7a <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800d22a:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 800d22e:	029a      	lsls	r2, r3, #10
 800d230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d232:	18d1      	adds	r1, r2, r3
 800d234:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d238:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d23c:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800d240:	4798      	blx	r3
 800d242:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
            if (res < 0) {
 800d246:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	da02      	bge.n	800d254 <lfs_dir_traverse+0x5f8>
                return res;
 800d24e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d252:	e0e3      	b.n	800d41c <lfs_dir_traverse+0x7c0>
            }

            if (res) {
 800d254:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d10d      	bne.n	800d278 <lfs_dir_traverse+0x61c>
 800d25c:	e50d      	b.n	800cc7a <lfs_dir_traverse+0x1e>
                continue;
 800d25e:	bf00      	nop
 800d260:	e50b      	b.n	800cc7a <lfs_dir_traverse+0x1e>
            continue;
 800d262:	bf00      	nop
 800d264:	e509      	b.n	800cc7a <lfs_dir_traverse+0x1e>
                continue;
 800d266:	bf00      	nop
 800d268:	e507      	b.n	800cc7a <lfs_dir_traverse+0x1e>
                    break;
 800d26a:	bf00      	nop
        {
 800d26c:	e505      	b.n	800cc7a <lfs_dir_traverse+0x1e>
 800d26e:	bf00      	nop
 800d270:	0800cba5 	.word	0x0800cba5
 800d274:	600ffc00 	.word	0x600ffc00
                break;
 800d278:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 800d27a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d27e:	2b00      	cmp	r3, #0
 800d280:	f000 80ca 	beq.w	800d418 <lfs_dir_traverse+0x7bc>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 800d284:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d288:	1e5a      	subs	r2, r3, #1
 800d28a:	4613      	mov	r3, r2
 800d28c:	011b      	lsls	r3, r3, #4
 800d28e:	1a9b      	subs	r3, r3, r2
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	33f0      	adds	r3, #240	@ 0xf0
 800d294:	443b      	add	r3, r7
 800d296:	3b98      	subs	r3, #152	@ 0x98
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 800d29c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d2a0:	1e5a      	subs	r2, r3, #1
 800d2a2:	4613      	mov	r3, r2
 800d2a4:	011b      	lsls	r3, r3, #4
 800d2a6:	1a9b      	subs	r3, r3, r2
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	33f0      	adds	r3, #240	@ 0xf0
 800d2ac:	443b      	add	r3, r7
 800d2ae:	3b94      	subs	r3, #148	@ 0x94
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 800d2b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d2b8:	1e5a      	subs	r2, r3, #1
 800d2ba:	4613      	mov	r3, r2
 800d2bc:	011b      	lsls	r3, r3, #4
 800d2be:	1a9b      	subs	r3, r3, r2
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	33f0      	adds	r3, #240	@ 0xf0
 800d2c4:	443b      	add	r3, r7
 800d2c6:	3b90      	subs	r3, #144	@ 0x90
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 800d2cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d2d0:	1e5a      	subs	r2, r3, #1
 800d2d2:	4613      	mov	r3, r2
 800d2d4:	011b      	lsls	r3, r3, #4
 800d2d6:	1a9b      	subs	r3, r3, r2
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	33f0      	adds	r3, #240	@ 0xf0
 800d2dc:	443b      	add	r3, r7
 800d2de:	3b8c      	subs	r3, #140	@ 0x8c
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        attrcount   = stack[sp-1].attrcount;
 800d2e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d2ea:	1e5a      	subs	r2, r3, #1
 800d2ec:	4613      	mov	r3, r2
 800d2ee:	011b      	lsls	r3, r3, #4
 800d2f0:	1a9b      	subs	r3, r3, r2
 800d2f2:	009b      	lsls	r3, r3, #2
 800d2f4:	33f0      	adds	r3, #240	@ 0xf0
 800d2f6:	443b      	add	r3, r7
 800d2f8:	3b88      	subs	r3, #136	@ 0x88
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        tmask       = stack[sp-1].tmask;
 800d300:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d304:	1e5a      	subs	r2, r3, #1
 800d306:	4613      	mov	r3, r2
 800d308:	011b      	lsls	r3, r3, #4
 800d30a:	1a9b      	subs	r3, r3, r2
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	33f0      	adds	r3, #240	@ 0xf0
 800d310:	443b      	add	r3, r7
 800d312:	3b84      	subs	r3, #132	@ 0x84
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        ttag        = stack[sp-1].ttag;
 800d31a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d31e:	1e5a      	subs	r2, r3, #1
 800d320:	4613      	mov	r3, r2
 800d322:	011b      	lsls	r3, r3, #4
 800d324:	1a9b      	subs	r3, r3, r2
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	33f0      	adds	r3, #240	@ 0xf0
 800d32a:	443b      	add	r3, r7
 800d32c:	3b80      	subs	r3, #128	@ 0x80
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        begin       = stack[sp-1].begin;
 800d334:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d338:	1e5a      	subs	r2, r3, #1
 800d33a:	4613      	mov	r3, r2
 800d33c:	011b      	lsls	r3, r3, #4
 800d33e:	1a9b      	subs	r3, r3, r2
 800d340:	009b      	lsls	r3, r3, #2
 800d342:	33f0      	adds	r3, #240	@ 0xf0
 800d344:	443b      	add	r3, r7
 800d346:	3b7c      	subs	r3, #124	@ 0x7c
 800d348:	881b      	ldrh	r3, [r3, #0]
 800d34a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        end         = stack[sp-1].end;
 800d34e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d352:	1e5a      	subs	r2, r3, #1
 800d354:	4613      	mov	r3, r2
 800d356:	011b      	lsls	r3, r3, #4
 800d358:	1a9b      	subs	r3, r3, r2
 800d35a:	009b      	lsls	r3, r3, #2
 800d35c:	33f0      	adds	r3, #240	@ 0xf0
 800d35e:	443b      	add	r3, r7
 800d360:	3b7a      	subs	r3, #122	@ 0x7a
 800d362:	881b      	ldrh	r3, [r3, #0]
 800d364:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
        diff        = stack[sp-1].diff;
 800d368:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d36c:	1e5a      	subs	r2, r3, #1
 800d36e:	4613      	mov	r3, r2
 800d370:	011b      	lsls	r3, r3, #4
 800d372:	1a9b      	subs	r3, r3, r2
 800d374:	009b      	lsls	r3, r3, #2
 800d376:	33f0      	adds	r3, #240	@ 0xf0
 800d378:	443b      	add	r3, r7
 800d37a:	3b78      	subs	r3, #120	@ 0x78
 800d37c:	881b      	ldrh	r3, [r3, #0]
 800d37e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        cb          = stack[sp-1].cb;
 800d382:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d386:	1e5a      	subs	r2, r3, #1
 800d388:	4613      	mov	r3, r2
 800d38a:	011b      	lsls	r3, r3, #4
 800d38c:	1a9b      	subs	r3, r3, r2
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	33f0      	adds	r3, #240	@ 0xf0
 800d392:	443b      	add	r3, r7
 800d394:	3b74      	subs	r3, #116	@ 0x74
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        data        = stack[sp-1].data;
 800d39c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d3a0:	1e5a      	subs	r2, r3, #1
 800d3a2:	4613      	mov	r3, r2
 800d3a4:	011b      	lsls	r3, r3, #4
 800d3a6:	1a9b      	subs	r3, r3, r2
 800d3a8:	009b      	lsls	r3, r3, #2
 800d3aa:	33f0      	adds	r3, #240	@ 0xf0
 800d3ac:	443b      	add	r3, r7
 800d3ae:	3b70      	subs	r3, #112	@ 0x70
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        tag         = stack[sp-1].tag;
 800d3b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d3ba:	1e5a      	subs	r2, r3, #1
 800d3bc:	4613      	mov	r3, r2
 800d3be:	011b      	lsls	r3, r3, #4
 800d3c0:	1a9b      	subs	r3, r3, r2
 800d3c2:	009b      	lsls	r3, r3, #2
 800d3c4:	33f0      	adds	r3, #240	@ 0xf0
 800d3c6:	443b      	add	r3, r7
 800d3c8:	3b6c      	subs	r3, #108	@ 0x6c
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	657b      	str	r3, [r7, #84]	@ 0x54
        buffer      = stack[sp-1].buffer;
 800d3ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d3d2:	1e5a      	subs	r2, r3, #1
 800d3d4:	4613      	mov	r3, r2
 800d3d6:	011b      	lsls	r3, r3, #4
 800d3d8:	1a9b      	subs	r3, r3, r2
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	33f0      	adds	r3, #240	@ 0xf0
 800d3de:	443b      	add	r3, r7
 800d3e0:	3b68      	subs	r3, #104	@ 0x68
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        disk        = stack[sp-1].disk;
 800d3e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d3ec:	1e5a      	subs	r2, r3, #1
 800d3ee:	4613      	mov	r3, r2
 800d3f0:	011b      	lsls	r3, r3, #4
 800d3f2:	1a9b      	subs	r3, r3, r2
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	33f0      	adds	r3, #240	@ 0xf0
 800d3f8:	443b      	add	r3, r7
 800d3fa:	f1a3 0268 	sub.w	r2, r3, #104	@ 0x68
 800d3fe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d402:	3204      	adds	r2, #4
 800d404:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d408:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 800d40c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d410:	3b01      	subs	r3, #1
 800d412:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        goto popped;
 800d416:	e596      	b.n	800cf46 <lfs_dir_traverse+0x2ea>
    } else {
        return res;
 800d418:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
    }
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	37f4      	adds	r7, #244	@ 0xf4
 800d420:	46bd      	mov	sp, r7
 800d422:	bd90      	pop	{r4, r7, pc}

0800d424 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800d424:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d426:	b0a5      	sub	sp, #148	@ 0x94
 800d428:	af04      	add	r7, sp, #16
 800d42a:	6178      	str	r0, [r7, #20]
 800d42c:	6139      	str	r1, [r7, #16]
 800d42e:	60fa      	str	r2, [r7, #12]
 800d430:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 800d432:	f04f 33ff 	mov.w	r3, #4294967295
 800d436:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count 
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00f      	beq.n	800d460 <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d448:	429a      	cmp	r2, r3
 800d44a:	d206      	bcs.n	800d45a <lfs_dir_fetchmatch+0x36>
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	3304      	adds	r3, #4
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d456:	429a      	cmp	r2, r3
 800d458:	d302      	bcc.n	800d460 <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 800d45a:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800d45e:	e3a4      	b.n	800dbaa <lfs_dir_fetchmatch+0x786>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 800d460:	2300      	movs	r3, #0
 800d462:	647b      	str	r3, [r7, #68]	@ 0x44
 800d464:	2300      	movs	r3, #0
 800d466:	64bb      	str	r3, [r7, #72]	@ 0x48
    int r = 0;
 800d468:	2300      	movs	r3, #0
 800d46a:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 800d46c:	2300      	movs	r3, #0
 800d46e:	677b      	str	r3, [r7, #116]	@ 0x74
 800d470:	e05a      	b.n	800d528 <lfs_dir_fetchmatch+0x104>
        int err = lfs_bd_read(lfs,
 800d472:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800d474:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d476:	009b      	lsls	r3, r3, #2
 800d478:	68fa      	ldr	r2, [r7, #12]
 800d47a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800d47c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800d47e:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800d482:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800d484:	0092      	lsls	r2, r2, #2
 800d486:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 800d488:	2104      	movs	r1, #4
 800d48a:	9103      	str	r1, [sp, #12]
 800d48c:	9202      	str	r2, [sp, #8]
 800d48e:	2200      	movs	r2, #0
 800d490:	9201      	str	r2, [sp, #4]
 800d492:	9300      	str	r3, [sp, #0]
 800d494:	2304      	movs	r3, #4
 800d496:	4602      	mov	r2, r0
 800d498:	2100      	movs	r1, #0
 800d49a:	6978      	ldr	r0, [r7, #20]
 800d49c:	f7fe f93a 	bl	800b714 <lfs_bd_read>
 800d4a0:	64f8      	str	r0, [r7, #76]	@ 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 800d4a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d4a4:	009b      	lsls	r3, r3, #2
 800d4a6:	3378      	adds	r3, #120	@ 0x78
 800d4a8:	f107 0208 	add.w	r2, r7, #8
 800d4ac:	4413      	add	r3, r2
 800d4ae:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7fe f8c2 	bl	800b63c <lfs_fromle32>
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d4bc:	009b      	lsls	r3, r3, #2
 800d4be:	3378      	adds	r3, #120	@ 0x78
 800d4c0:	f107 0108 	add.w	r1, r7, #8
 800d4c4:	440b      	add	r3, r1
 800d4c6:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 800d4ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d005      	beq.n	800d4dc <lfs_dir_fetchmatch+0xb8>
 800d4d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4d2:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800d4d6:	d001      	beq.n	800d4dc <lfs_dir_fetchmatch+0xb8>
            return err;
 800d4d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4da:	e366      	b.n	800dbaa <lfs_dir_fetchmatch+0x786>
        }

        if (err != LFS_ERR_CORRUPT &&
 800d4dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4de:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800d4e2:	d01e      	beq.n	800d522 <lfs_dir_fetchmatch+0xfe>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 800d4e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d4e6:	009b      	lsls	r3, r3, #2
 800d4e8:	3378      	adds	r3, #120	@ 0x78
 800d4ea:	f107 0208 	add.w	r2, r7, #8
 800d4ee:	4413      	add	r3, r2
 800d4f0:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800d4f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	f003 0301 	and.w	r3, r3, #1
 800d4fe:	bfb8      	it	lt
 800d500:	425b      	neglt	r3, r3
 800d502:	009b      	lsls	r3, r3, #2
 800d504:	3378      	adds	r3, #120	@ 0x78
 800d506:	f107 0108 	add.w	r1, r7, #8
 800d50a:	440b      	add	r3, r1
 800d50c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800d510:	4619      	mov	r1, r3
 800d512:	4610      	mov	r0, r2
 800d514:	f7fe f884 	bl	800b620 <lfs_scmp>
 800d518:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	dd01      	ble.n	800d522 <lfs_dir_fetchmatch+0xfe>
            r = i;
 800d51e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d520:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 800d522:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d524:	3301      	adds	r3, #1
 800d526:	677b      	str	r3, [r7, #116]	@ 0x74
 800d528:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d52a:	2b01      	cmp	r3, #1
 800d52c:	dda1      	ble.n	800d472 <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800d52e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d530:	2b00      	cmp	r3, #0
 800d532:	f003 0301 	and.w	r3, r3, #1
 800d536:	bfb8      	it	lt
 800d538:	425b      	neglt	r3, r3
 800d53a:	009b      	lsls	r3, r3, #2
 800d53c:	68fa      	ldr	r2, [r7, #12]
 800d53e:	4413      	add	r3, r2
 800d540:	681a      	ldr	r2, [r3, #0]
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800d546:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d548:	3301      	adds	r3, #1
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	f003 0301 	and.w	r3, r3, #1
 800d550:	bfb8      	it	lt
 800d552:	425b      	neglt	r3, r3
 800d554:	009b      	lsls	r3, r3, #2
 800d556:	68fa      	ldr	r2, [r7, #12]
 800d558:	4413      	add	r3, r2
 800d55a:	681a      	ldr	r2, [r3, #0]
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 800d560:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d562:	2b00      	cmp	r3, #0
 800d564:	f003 0301 	and.w	r3, r3, #1
 800d568:	bfb8      	it	lt
 800d56a:	425b      	neglt	r3, r3
 800d56c:	009b      	lsls	r3, r3, #2
 800d56e:	3378      	adds	r3, #120	@ 0x78
 800d570:	f107 0208 	add.w	r2, r7, #8
 800d574:	4413      	add	r3, r2
 800d576:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	2200      	movs	r2, #0
 800d582:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 800d584:	2300      	movs	r3, #0
 800d586:	673b      	str	r3, [r7, #112]	@ 0x70
 800d588:	e2fb      	b.n	800db82 <lfs_dir_fetchmatch+0x75e>
        lfs_off_t off = 0;
 800d58a:	2300      	movs	r3, #0
 800d58c:	66fb      	str	r3, [r7, #108]	@ 0x6c
        lfs_tag_t ptag = 0xffffffff;
 800d58e:	f04f 33ff 	mov.w	r3, #4294967295
 800d592:	66bb      	str	r3, [r7, #104]	@ 0x68

        uint16_t tempcount = 0;
 800d594:	2300      	movs	r3, #0
 800d596:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800d59a:	4aa9      	ldr	r2, [pc, #676]	@ (800d840 <lfs_dir_fetchmatch+0x41c>)
 800d59c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d5a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d5a4:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
        lfs_stag_t tempbesttag = besttag;
 800d5ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d5b0:	663b      	str	r3, [r7, #96]	@ 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        bool hasfcrc = false;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	689b      	ldr	r3, [r3, #8]
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7fe f845 	bl	800b652 <lfs_tole32>
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	3308      	adds	r3, #8
 800d5d2:	2204      	movs	r2, #4
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d5da:	f004 ffe7 	bl	80125ac <lfs_crc>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	633b      	str	r3, [r7, #48]	@ 0x30
        dir->rev = lfs_fromle32(dir->rev);
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	689b      	ldr	r3, [r3, #8]
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7fe f828 	bl	800b63c <lfs_fromle32>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 800d5f2:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800d5f4:	f7fe fd87 	bl	800c106 <lfs_tag_dsize>
 800d5f8:	4602      	mov	r2, r0
 800d5fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5fc:	4413      	add	r3, r2
 800d5fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
            int err = lfs_bd_read(lfs,
 800d600:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d606:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	2204      	movs	r2, #4
 800d60e:	9203      	str	r2, [sp, #12]
 800d610:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800d614:	9202      	str	r2, [sp, #8]
 800d616:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d618:	9201      	str	r2, [sp, #4]
 800d61a:	9300      	str	r3, [sp, #0]
 800d61c:	4603      	mov	r3, r0
 800d61e:	460a      	mov	r2, r1
 800d620:	2100      	movs	r1, #0
 800d622:	6978      	ldr	r0, [r7, #20]
 800d624:	f7fe f876 	bl	800b714 <lfs_bd_read>
 800d628:	65b8      	str	r0, [r7, #88]	@ 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800d62a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d006      	beq.n	800d63e <lfs_dir_fetchmatch+0x21a>
                if (err == LFS_ERR_CORRUPT) {
 800d630:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d632:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800d636:	f000 81d6 	beq.w	800d9e6 <lfs_dir_fetchmatch+0x5c2>
                    // can't continue?
                    break;
                }
                return err;
 800d63a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d63c:	e2b5      	b.n	800dbaa <lfs_dir_fetchmatch+0x786>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 800d63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d640:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800d644:	2204      	movs	r2, #4
 800d646:	4618      	mov	r0, r3
 800d648:	f004 ffb0 	bl	80125ac <lfs_crc>
 800d64c:	4603      	mov	r3, r0
 800d64e:	633b      	str	r3, [r7, #48]	@ 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 800d650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d652:	4618      	mov	r0, r3
 800d654:	f7fe f809 	bl	800b66a <lfs_frombe32>
 800d658:	4602      	mov	r2, r0
 800d65a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d65c:	4053      	eors	r3, r2
 800d65e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 800d660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d662:	4618      	mov	r0, r3
 800d664:	f7fe fcc7 	bl	800bff6 <lfs_tag_isvalid>
 800d668:	4603      	mov	r3, r0
 800d66a:	f083 0301 	eor.w	r3, r3, #1
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	2b00      	cmp	r3, #0
 800d672:	d00b      	beq.n	800d68c <lfs_dir_fetchmatch+0x268>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 800d674:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800d676:	f7fe fcef 	bl	800c058 <lfs_tag_type2>
 800d67a:	4603      	mov	r3, r0
 800d67c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800d680:	bf0c      	ite	eq
 800d682:	2301      	moveq	r3, #1
 800d684:	2300      	movne	r3, #0
 800d686:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                break;
 800d68a:	e1bb      	b.n	800da04 <lfs_dir_fetchmatch+0x5e0>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800d68c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d68e:	4618      	mov	r0, r3
 800d690:	f7fe fd39 	bl	800c106 <lfs_tag_dsize>
 800d694:	4602      	mov	r2, r0
 800d696:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d698:	441a      	add	r2, r3
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d69e:	69db      	ldr	r3, [r3, #28]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	f200 81a2 	bhi.w	800d9ea <lfs_dir_fetchmatch+0x5c6>
                break;
            }

            ptag = tag;
 800d6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6a8:	66bb      	str	r3, [r7, #104]	@ 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 800d6aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7fe fcd3 	bl	800c058 <lfs_tag_type2>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800d6b8:	d15e      	bne.n	800d778 <lfs_dir_fetchmatch+0x354>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800d6ba:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d6c0:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d6c8:	3204      	adds	r2, #4
 800d6ca:	2104      	movs	r1, #4
 800d6cc:	9103      	str	r1, [sp, #12]
 800d6ce:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800d6d2:	9102      	str	r1, [sp, #8]
 800d6d4:	9201      	str	r2, [sp, #4]
 800d6d6:	9300      	str	r3, [sp, #0]
 800d6d8:	4623      	mov	r3, r4
 800d6da:	4602      	mov	r2, r0
 800d6dc:	2100      	movs	r1, #0
 800d6de:	6978      	ldr	r0, [r7, #20]
 800d6e0:	f7fe f818 	bl	800b714 <lfs_bd_read>
 800d6e4:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 800d6e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d006      	beq.n	800d6fa <lfs_dir_fetchmatch+0x2d6>
                    if (err == LFS_ERR_CORRUPT) {
 800d6ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d6ee:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800d6f2:	f000 817c 	beq.w	800d9ee <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 800d6f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                return err;
 800d6f8:	e257      	b.n	800dbaa <lfs_dir_fetchmatch+0x786>
                }
                dcrc = lfs_fromle32(dcrc);
 800d6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7fd ff9d 	bl	800b63c <lfs_fromle32>
 800d702:	4603      	mov	r3, r0
 800d704:	62bb      	str	r3, [r7, #40]	@ 0x28

                if (crc != dcrc) {
 800d706:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d70a:	429a      	cmp	r2, r3
 800d70c:	f040 8171 	bne.w	800d9f2 <lfs_dir_fetchmatch+0x5ce>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 800d710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d712:	4618      	mov	r0, r3
 800d714:	f7fe fcc0 	bl	800c098 <lfs_tag_chunk>
 800d718:	4603      	mov	r3, r0
 800d71a:	07db      	lsls	r3, r3, #31
 800d71c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d71e:	4053      	eors	r3, r2
 800d720:	66bb      	str	r3, [r7, #104]	@ 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d726:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800d72a:	2204      	movs	r2, #4
 800d72c:	4618      	mov	r0, r3
 800d72e:	f004 ff3d 	bl	80125ac <lfs_crc>
 800d732:	4602      	mov	r2, r0
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	62da      	str	r2, [r3, #44]	@ 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 800d738:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d73a:	67fb      	str	r3, [r7, #124]	@ 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 800d73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d73e:	4618      	mov	r0, r3
 800d740:	f7fe fce1 	bl	800c106 <lfs_tag_dsize>
 800d744:	4602      	mov	r2, r0
 800d746:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d748:	441a      	add	r2, r3
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d752:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 800d75a:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 800d75c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 800d762:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 800d76e:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 800d770:	f04f 33ff 	mov.w	r3, #4294967295
 800d774:	633b      	str	r3, [r7, #48]	@ 0x30
 800d776:	e73c      	b.n	800d5f2 <lfs_dir_fetchmatch+0x1ce>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 800d778:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d77e:	69db      	ldr	r3, [r3, #28]
 800d780:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	681c      	ldr	r4, [r3, #0]
 800d786:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d788:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 800d78a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7fe fcba 	bl	800c106 <lfs_tag_dsize>
 800d792:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 800d794:	3b04      	subs	r3, #4
 800d796:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d79a:	9203      	str	r2, [sp, #12]
 800d79c:	9302      	str	r3, [sp, #8]
 800d79e:	9501      	str	r5, [sp, #4]
 800d7a0:	9400      	str	r4, [sp, #0]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	4632      	mov	r2, r6
 800d7a6:	2100      	movs	r1, #0
 800d7a8:	6978      	ldr	r0, [r7, #20]
 800d7aa:	f7fe f950 	bl	800ba4e <lfs_bd_crc>
 800d7ae:	65b8      	str	r0, [r7, #88]	@ 0x58
            if (err) {
 800d7b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d006      	beq.n	800d7c4 <lfs_dir_fetchmatch+0x3a0>
                if (err == LFS_ERR_CORRUPT) {
 800d7b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d7b8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800d7bc:	f000 811b 	beq.w	800d9f6 <lfs_dir_fetchmatch+0x5d2>
                    break;
                }
                return err;
 800d7c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d7c2:	e1f2      	b.n	800dbaa <lfs_dir_fetchmatch+0x786>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800d7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7fe fc36 	bl	800c038 <lfs_tag_type1>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d113      	bne.n	800d7fa <lfs_dir_fetchmatch+0x3d6>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 800d7d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f7fe fc79 	bl	800c0cc <lfs_tag_id>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	461a      	mov	r2, r3
 800d7de:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	f200 80b6 	bhi.w	800d954 <lfs_dir_fetchmatch+0x530>
                    tempcount = lfs_tag_id(tag) + 1;
 800d7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7fe fc6e 	bl	800c0cc <lfs_tag_id>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800d7f8:	e0ac      	b.n	800d954 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800d7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7fe fc1b 	bl	800c038 <lfs_tag_type1>
 800d802:	4603      	mov	r3, r0
 800d804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d808:	d13a      	bne.n	800d880 <lfs_dir_fetchmatch+0x45c>
                tempcount += lfs_tag_splice(tag);
 800d80a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d80c:	4618      	mov	r0, r3
 800d80e:	f7fe fc50 	bl	800c0b2 <lfs_tag_splice>
 800d812:	4603      	mov	r3, r0
 800d814:	b29a      	uxth	r2, r3
 800d816:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800d81a:	4413      	add	r3, r2
 800d81c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 800d820:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d822:	4b08      	ldr	r3, [pc, #32]	@ (800d844 <lfs_dir_fetchmatch+0x420>)
 800d824:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800d826:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800d82a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800d82e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d830:	4293      	cmp	r3, r2
 800d832:	d109      	bne.n	800d848 <lfs_dir_fetchmatch+0x424>
                    tempbesttag |= 0x80000000;
 800d834:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d836:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d83a:	663b      	str	r3, [r7, #96]	@ 0x60
 800d83c:	e08a      	b.n	800d954 <lfs_dir_fetchmatch+0x530>
 800d83e:	bf00      	nop
 800d840:	080139e8 	.word	0x080139e8
 800d844:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 800d848:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d84e:	f000 8081 	beq.w	800d954 <lfs_dir_fetchmatch+0x530>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800d852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d854:	4618      	mov	r0, r3
 800d856:	f7fe fc39 	bl	800c0cc <lfs_tag_id>
 800d85a:	4603      	mov	r3, r0
 800d85c:	461c      	mov	r4, r3
 800d85e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d860:	4618      	mov	r0, r3
 800d862:	f7fe fc33 	bl	800c0cc <lfs_tag_id>
 800d866:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 800d868:	429c      	cmp	r4, r3
 800d86a:	d873      	bhi.n	800d954 <lfs_dir_fetchmatch+0x530>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800d86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d86e:	4618      	mov	r0, r3
 800d870:	f7fe fc1f 	bl	800c0b2 <lfs_tag_splice>
 800d874:	4603      	mov	r3, r0
 800d876:	029a      	lsls	r2, r3, #10
 800d878:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d87a:	4413      	add	r3, r2
 800d87c:	663b      	str	r3, [r7, #96]	@ 0x60
 800d87e:	e069      	b.n	800d954 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 800d880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d882:	4618      	mov	r0, r3
 800d884:	f7fe fbd8 	bl	800c038 <lfs_tag_type1>
 800d888:	4603      	mov	r3, r0
 800d88a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800d88e:	d132      	bne.n	800d8f6 <lfs_dir_fetchmatch+0x4d2>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 800d890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d892:	4618      	mov	r0, r3
 800d894:	f7fe fc00 	bl	800c098 <lfs_tag_chunk>
 800d898:	4603      	mov	r3, r0
 800d89a:	f003 0301 	and.w	r3, r3, #1
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	bf14      	ite	ne
 800d8a2:	2301      	movne	r3, #1
 800d8a4:	2300      	moveq	r3, #0
 800d8a6:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

                err = lfs_bd_read(lfs,
 800d8aa:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d8b0:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d8b8:	3204      	adds	r2, #4
 800d8ba:	2108      	movs	r1, #8
 800d8bc:	9103      	str	r1, [sp, #12]
 800d8be:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800d8c2:	9102      	str	r1, [sp, #8]
 800d8c4:	9201      	str	r2, [sp, #4]
 800d8c6:	9300      	str	r3, [sp, #0]
 800d8c8:	4623      	mov	r3, r4
 800d8ca:	4602      	mov	r2, r0
 800d8cc:	2100      	movs	r1, #0
 800d8ce:	6978      	ldr	r0, [r7, #20]
 800d8d0:	f7fd ff20 	bl	800b714 <lfs_bd_read>
 800d8d4:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 800d8d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d006      	beq.n	800d8ea <lfs_dir_fetchmatch+0x4c6>
                    if (err == LFS_ERR_CORRUPT) {
 800d8dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8de:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800d8e2:	f000 808a 	beq.w	800d9fa <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                    return err;
 800d8e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8e8:	e15f      	b.n	800dbaa <lfs_dir_fetchmatch+0x786>
                }
                lfs_pair_fromle32(temptail);
 800d8ea:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7fe fb4d 	bl	800bf8e <lfs_pair_fromle32>
 800d8f4:	e02e      	b.n	800d954 <lfs_dir_fetchmatch+0x530>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 800d8f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7fe fbbd 	bl	800c078 <lfs_tag_type3>
 800d8fe:	4603      	mov	r3, r0
 800d900:	461a      	mov	r2, r3
 800d902:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 800d906:	429a      	cmp	r2, r3
 800d908:	d124      	bne.n	800d954 <lfs_dir_fetchmatch+0x530>
                err = lfs_bd_read(lfs,
 800d90a:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d910:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d918:	3204      	adds	r2, #4
 800d91a:	2108      	movs	r1, #8
 800d91c:	9103      	str	r1, [sp, #12]
 800d91e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800d922:	9102      	str	r1, [sp, #8]
 800d924:	9201      	str	r2, [sp, #4]
 800d926:	9300      	str	r3, [sp, #0]
 800d928:	4623      	mov	r3, r4
 800d92a:	4602      	mov	r2, r0
 800d92c:	2100      	movs	r1, #0
 800d92e:	6978      	ldr	r0, [r7, #20]
 800d930:	f7fd fef0 	bl	800b714 <lfs_bd_read>
 800d934:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 800d936:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d003      	beq.n	800d944 <lfs_dir_fetchmatch+0x520>
                    if (err == LFS_ERR_CORRUPT) {
 800d93c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d93e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800d942:	d05c      	beq.n	800d9fe <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 800d944:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d948:	4618      	mov	r0, r3
 800d94a:	f7fe fcd5 	bl	800c2f8 <lfs_fcrc_fromle32>
                hasfcrc = true;
 800d94e:	2301      	movs	r3, #1
 800d950:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 800d954:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d956:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d95a:	405a      	eors	r2, r3
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	4013      	ands	r3, r2
 800d960:	2b00      	cmp	r3, #0
 800d962:	f47f ae46 	bne.w	800d5f2 <lfs_dir_fetchmatch+0x1ce>
                int res = cb(data, tag, &(struct lfs_diskoff){
 800d966:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
                        dir->pair[0], off+sizeof(tag)});
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 800d96c:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 800d96e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d970:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 800d972:	627b      	str	r3, [r7, #36]	@ 0x24
 800d974:	f107 0220 	add.w	r2, r7, #32
 800d978:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d97c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800d980:	4798      	blx	r3
 800d982:	6578      	str	r0, [r7, #84]	@ 0x54
                if (res < 0) {
 800d984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d986:	2b00      	cmp	r3, #0
 800d988:	da05      	bge.n	800d996 <lfs_dir_fetchmatch+0x572>
                    if (res == LFS_ERR_CORRUPT) {
 800d98a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d98c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800d990:	d037      	beq.n	800da02 <lfs_dir_fetchmatch+0x5de>
                        break;
                    }
                    return res;
 800d992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                return err;
 800d994:	e109      	b.n	800dbaa <lfs_dir_fetchmatch+0x786>
                }

                if (res == LFS_CMP_EQ) {
 800d996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d102      	bne.n	800d9a2 <lfs_dir_fetchmatch+0x57e>
                    // found a match
                    tempbesttag = tag;
 800d99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d99e:	663b      	str	r3, [r7, #96]	@ 0x60
 800d9a0:	e627      	b.n	800d5f2 <lfs_dir_fetchmatch+0x1ce>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 800d9a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d9a6:	405a      	eors	r2, r3
 800d9a8:	4b82      	ldr	r3, [pc, #520]	@ (800dbb4 <lfs_dir_fetchmatch+0x790>)
 800d9aa:	4013      	ands	r3, r2
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d103      	bne.n	800d9b8 <lfs_dir_fetchmatch+0x594>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 800d9b0:	f04f 33ff 	mov.w	r3, #4294967295
 800d9b4:	663b      	str	r3, [r7, #96]	@ 0x60
 800d9b6:	e61c      	b.n	800d5f2 <lfs_dir_fetchmatch+0x1ce>
                } else if (res == LFS_CMP_GT &&
 800d9b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9ba:	2b02      	cmp	r3, #2
 800d9bc:	f47f ae19 	bne.w	800d5f2 <lfs_dir_fetchmatch+0x1ce>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800d9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7fe fb82 	bl	800c0cc <lfs_tag_id>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	461c      	mov	r4, r3
 800d9cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7fe fb7c 	bl	800c0cc <lfs_tag_id>
 800d9d4:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 800d9d6:	429c      	cmp	r4, r3
 800d9d8:	f63f ae0b 	bhi.w	800d5f2 <lfs_dir_fetchmatch+0x1ce>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 800d9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d9e2:	663b      	str	r3, [r7, #96]	@ 0x60
 800d9e4:	e605      	b.n	800d5f2 <lfs_dir_fetchmatch+0x1ce>
                    break;
 800d9e6:	bf00      	nop
 800d9e8:	e00c      	b.n	800da04 <lfs_dir_fetchmatch+0x5e0>
                break;
 800d9ea:	bf00      	nop
 800d9ec:	e00a      	b.n	800da04 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800d9ee:	bf00      	nop
 800d9f0:	e008      	b.n	800da04 <lfs_dir_fetchmatch+0x5e0>
                    break;
 800d9f2:	bf00      	nop
 800d9f4:	e006      	b.n	800da04 <lfs_dir_fetchmatch+0x5e0>
                    break;
 800d9f6:	bf00      	nop
 800d9f8:	e004      	b.n	800da04 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800d9fa:	bf00      	nop
 800d9fc:	e002      	b.n	800da04 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800d9fe:	bf00      	nop
 800da00:	e000      	b.n	800da04 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800da02:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	68db      	ldr	r3, [r3, #12]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d000      	beq.n	800da0e <lfs_dir_fetchmatch+0x5ea>
 800da0c:	e017      	b.n	800da3e <lfs_dir_fetchmatch+0x61a>
            // try the other block?
            lfs_pair_swap(dir->pair);
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	4618      	mov	r0, r3
 800da12:	f7fe fa35 	bl	800be80 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 800da16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800da18:	3301      	adds	r3, #1
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	f003 0301 	and.w	r3, r3, #1
 800da20:	bfb8      	it	lt
 800da22:	425b      	neglt	r3, r3
 800da24:	009b      	lsls	r3, r3, #2
 800da26:	3378      	adds	r3, #120	@ 0x78
 800da28:	f107 0208 	add.w	r2, r7, #8
 800da2c:	4413      	add	r3, r2
 800da2e:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 800da36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800da38:	3301      	adds	r3, #1
 800da3a:	673b      	str	r3, [r7, #112]	@ 0x70
 800da3c:	e0a1      	b.n	800db82 <lfs_dir_fetchmatch+0x75e>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	2200      	movs	r2, #0
 800da42:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 800da44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d03a      	beq.n	800dac2 <lfs_dir_fetchmatch+0x69e>
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	68db      	ldr	r3, [r3, #12]
 800da50:	697a      	ldr	r2, [r7, #20]
 800da52:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800da54:	6992      	ldr	r2, [r2, #24]
 800da56:	fbb3 f1f2 	udiv	r1, r3, r2
 800da5a:	fb01 f202 	mul.w	r2, r1, r2
 800da5e:	1a9b      	subs	r3, r3, r2
 800da60:	2b00      	cmp	r3, #0
 800da62:	d12e      	bne.n	800dac2 <lfs_dir_fetchmatch+0x69e>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 800da64:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d02a      	beq.n	800dac2 <lfs_dir_fetchmatch+0x69e>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 800da6c:	f04f 33ff 	mov.w	r3, #4294967295
 800da70:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 800da72:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800da78:	69dd      	ldr	r5, [r3, #28]
                int err = lfs_bd_crc(lfs,
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	693a      	ldr	r2, [r7, #16]
 800da80:	68d2      	ldr	r2, [r2, #12]
 800da82:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800da84:	f107 001c 	add.w	r0, r7, #28
 800da88:	9003      	str	r0, [sp, #12]
 800da8a:	9102      	str	r1, [sp, #8]
 800da8c:	9201      	str	r2, [sp, #4]
 800da8e:	9300      	str	r3, [sp, #0]
 800da90:	462b      	mov	r3, r5
 800da92:	4622      	mov	r2, r4
 800da94:	2100      	movs	r1, #0
 800da96:	6978      	ldr	r0, [r7, #20]
 800da98:	f7fd ffd9 	bl	800ba4e <lfs_bd_crc>
 800da9c:	6538      	str	r0, [r7, #80]	@ 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 800da9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d005      	beq.n	800dab0 <lfs_dir_fetchmatch+0x68c>
 800daa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800daa6:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800daaa:	d001      	beq.n	800dab0 <lfs_dir_fetchmatch+0x68c>
                    return err;
 800daac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800daae:	e07c      	b.n	800dbaa <lfs_dir_fetchmatch+0x786>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 800dab0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dab2:	69fb      	ldr	r3, [r7, #28]
 800dab4:	429a      	cmp	r2, r3
 800dab6:	bf0c      	ite	eq
 800dab8:	2301      	moveq	r3, #1
 800daba:	2300      	movne	r3, #0
 800dabc:	b2da      	uxtb	r2, r3
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	333c      	adds	r3, #60	@ 0x3c
 800dac6:	693a      	ldr	r2, [r7, #16]
 800dac8:	4611      	mov	r1, r2
 800daca:	4618      	mov	r0, r3
 800dacc:	f7fe fbb4 	bl	800c238 <lfs_gstate_hasmovehere>
 800dad0:	4603      	mov	r3, r0
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d028      	beq.n	800db28 <lfs_dir_fetchmatch+0x704>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dada:	4618      	mov	r0, r3
 800dadc:	f7fe faf6 	bl	800c0cc <lfs_tag_id>
 800dae0:	4603      	mov	r3, r0
 800dae2:	461c      	mov	r4, r3
 800dae4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7fe faf0 	bl	800c0cc <lfs_tag_id>
 800daec:	4603      	mov	r3, r0
 800daee:	429c      	cmp	r4, r3
 800daf0:	d104      	bne.n	800dafc <lfs_dir_fetchmatch+0x6d8>
                besttag |= 0x80000000;
 800daf2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800daf4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800daf8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dafa:	e015      	b.n	800db28 <lfs_dir_fetchmatch+0x704>
            } else if (besttag != -1 &&
 800dafc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db02:	d011      	beq.n	800db28 <lfs_dir_fetchmatch+0x704>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db08:	4618      	mov	r0, r3
 800db0a:	f7fe fadf 	bl	800c0cc <lfs_tag_id>
 800db0e:	4603      	mov	r3, r0
 800db10:	461c      	mov	r4, r3
 800db12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db14:	4618      	mov	r0, r3
 800db16:	f7fe fad9 	bl	800c0cc <lfs_tag_id>
 800db1a:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 800db1c:	429c      	cmp	r4, r3
 800db1e:	d203      	bcs.n	800db28 <lfs_dir_fetchmatch+0x704>
                besttag -= LFS_MKTAG(0, 1, 0);
 800db20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db22:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800db26:	67fb      	str	r3, [r7, #124]	@ 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 800db28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d010      	beq.n	800db52 <lfs_dir_fetchmatch+0x72e>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 800db30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db32:	4618      	mov	r0, r3
 800db34:	f7fe faca 	bl	800c0cc <lfs_tag_id>
 800db38:	4603      	mov	r3, r0
 800db3a:	461a      	mov	r2, r3
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	8a9b      	ldrh	r3, [r3, #20]
 800db40:	4619      	mov	r1, r3
 800db42:	4610      	mov	r0, r2
 800db44:	f7fd fd0a 	bl	800b55c <lfs_min>
 800db48:	4603      	mov	r3, r0
 800db4a:	b29a      	uxth	r2, r3
 800db4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800db50:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 800db52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db54:	4618      	mov	r0, r3
 800db56:	f7fe fa4e 	bl	800bff6 <lfs_tag_isvalid>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d001      	beq.n	800db64 <lfs_dir_fetchmatch+0x740>
            return besttag;
 800db60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db62:	e022      	b.n	800dbaa <lfs_dir_fetchmatch+0x786>
        } else if (lfs_tag_id(besttag) < dir->count) {
 800db64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db66:	4618      	mov	r0, r3
 800db68:	f7fe fab0 	bl	800c0cc <lfs_tag_id>
 800db6c:	4603      	mov	r3, r0
 800db6e:	461a      	mov	r2, r3
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	8a9b      	ldrh	r3, [r3, #20]
 800db74:	429a      	cmp	r2, r3
 800db76:	d202      	bcs.n	800db7e <lfs_dir_fetchmatch+0x75a>
            return LFS_ERR_NOENT;
 800db78:	f06f 0301 	mvn.w	r3, #1
 800db7c:	e015      	b.n	800dbaa <lfs_dir_fetchmatch+0x786>
        } else {
            return 0;
 800db7e:	2300      	movs	r3, #0
 800db80:	e013      	b.n	800dbaa <lfs_dir_fetchmatch+0x786>
    for (int i = 0; i < 2; i++) {
 800db82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800db84:	2b01      	cmp	r3, #1
 800db86:	f77f ad00 	ble.w	800d58a <lfs_dir_fetchmatch+0x166>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	4909      	ldr	r1, [pc, #36]	@ (800dbb8 <lfs_dir_fetchmatch+0x794>)
 800db94:	9101      	str	r1, [sp, #4]
 800db96:	9300      	str	r3, [sp, #0]
 800db98:	4613      	mov	r3, r2
 800db9a:	f240 5265 	movw	r2, #1381	@ 0x565
 800db9e:	4907      	ldr	r1, [pc, #28]	@ (800dbbc <lfs_dir_fetchmatch+0x798>)
 800dba0:	4807      	ldr	r0, [pc, #28]	@ (800dbc0 <lfs_dir_fetchmatch+0x79c>)
 800dba2:	f004 fef1 	bl	8012988 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 800dba6:	f06f 0353 	mvn.w	r3, #83	@ 0x53
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3784      	adds	r7, #132	@ 0x84
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbb2:	bf00      	nop
 800dbb4:	7ffffc00 	.word	0x7ffffc00
 800dbb8:	080139a4 	.word	0x080139a4
 800dbbc:	08013884 	.word	0x08013884
 800dbc0:	080139b0 	.word	0x080139b0

0800dbc4 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b088      	sub	sp, #32
 800dbc8:	af04      	add	r7, sp, #16
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	60b9      	str	r1, [r7, #8]
 800dbce:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	9303      	str	r3, [sp, #12]
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	9302      	str	r3, [sp, #8]
 800dbd8:	2300      	movs	r3, #0
 800dbda:	9301      	str	r3, [sp, #4]
 800dbdc:	f04f 33ff 	mov.w	r3, #4294967295
 800dbe0:	9300      	str	r3, [sp, #0]
 800dbe2:	f04f 33ff 	mov.w	r3, #4294967295
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	68b9      	ldr	r1, [r7, #8]
 800dbea:	68f8      	ldr	r0, [r7, #12]
 800dbec:	f7ff fc1a 	bl	800d424 <lfs_dir_fetchmatch>
 800dbf0:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
	...

0800dbfc <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b08a      	sub	sp, #40	@ 0x28
 800dc00:	af02      	add	r7, sp, #8
 800dc02:	60f8      	str	r0, [r7, #12]
 800dc04:	60b9      	str	r1, [r7, #8]
 800dc06:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 800dc08:	f107 0310 	add.w	r3, r7, #16
 800dc0c:	9300      	str	r3, [sp, #0]
 800dc0e:	4b12      	ldr	r3, [pc, #72]	@ (800dc58 <lfs_dir_getgstate+0x5c>)
 800dc10:	4a12      	ldr	r2, [pc, #72]	@ (800dc5c <lfs_dir_getgstate+0x60>)
 800dc12:	68b9      	ldr	r1, [r7, #8]
 800dc14:	68f8      	ldr	r0, [r7, #12]
 800dc16:	f7fe fecf 	bl	800c9b8 <lfs_dir_get>
 800dc1a:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	da05      	bge.n	800dc2e <lfs_dir_getgstate+0x32>
 800dc22:	69fb      	ldr	r3, [r7, #28]
 800dc24:	f113 0f02 	cmn.w	r3, #2
 800dc28:	d001      	beq.n	800dc2e <lfs_dir_getgstate+0x32>
        return res;
 800dc2a:	69fb      	ldr	r3, [r7, #28]
 800dc2c:	e00f      	b.n	800dc4e <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 800dc2e:	69fb      	ldr	r3, [r7, #28]
 800dc30:	f113 0f02 	cmn.w	r3, #2
 800dc34:	d00a      	beq.n	800dc4c <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 800dc36:	f107 0310 	add.w	r3, r7, #16
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7fe fb1c 	bl	800c278 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 800dc40:	f107 0310 	add.w	r3, r7, #16
 800dc44:	4619      	mov	r1, r3
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f7fe fa71 	bl	800c12e <lfs_gstate_xor>
    }

    return 0;
 800dc4c:	2300      	movs	r3, #0
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3720      	adds	r7, #32
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	7ff0000c 	.word	0x7ff0000c
 800dc5c:	7ff00000 	.word	0x7ff00000

0800dc60 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800dc60:	b590      	push	{r4, r7, lr}
 800dc62:	b08f      	sub	sp, #60	@ 0x3c
 800dc64:	af04      	add	r7, sp, #16
 800dc66:	60f8      	str	r0, [r7, #12]
 800dc68:	60b9      	str	r1, [r7, #8]
 800dc6a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = name->lfs;
 800dc70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800dc7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc7c:	689c      	ldr	r4, [r3, #8]
 800dc7e:	68b8      	ldr	r0, [r7, #8]
 800dc80:	f7fe fa34 	bl	800c0ec <lfs_tag_size>
 800dc84:	4603      	mov	r3, r0
 800dc86:	4619      	mov	r1, r3
 800dc88:	4620      	mov	r0, r4
 800dc8a:	f7fd fc67 	bl	800b55c <lfs_min>
 800dc8e:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 800dc90:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 800dc92:	69fb      	ldr	r3, [r7, #28]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	69fa      	ldr	r2, [r7, #28]
 800dc98:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 800dc9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dc9c:	6849      	ldr	r1, [r1, #4]
 800dc9e:	69b8      	ldr	r0, [r7, #24]
 800dca0:	9003      	str	r0, [sp, #12]
 800dca2:	9102      	str	r1, [sp, #8]
 800dca4:	9201      	str	r2, [sp, #4]
 800dca6:	9300      	str	r3, [sp, #0]
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	4622      	mov	r2, r4
 800dcac:	2100      	movs	r1, #0
 800dcae:	6a38      	ldr	r0, [r7, #32]
 800dcb0:	f7fd fe7c 	bl	800b9ac <lfs_bd_cmp>
 800dcb4:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d001      	beq.n	800dcc0 <lfs_dir_find_match+0x60>
        return res;
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	e014      	b.n	800dcea <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 800dcc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcc2:	689c      	ldr	r4, [r3, #8]
 800dcc4:	68b8      	ldr	r0, [r7, #8]
 800dcc6:	f7fe fa11 	bl	800c0ec <lfs_tag_size>
 800dcca:	4603      	mov	r3, r0
 800dccc:	429c      	cmp	r4, r3
 800dcce:	d00b      	beq.n	800dce8 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800dcd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcd2:	689c      	ldr	r4, [r3, #8]
 800dcd4:	68b8      	ldr	r0, [r7, #8]
 800dcd6:	f7fe fa09 	bl	800c0ec <lfs_tag_size>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	429c      	cmp	r4, r3
 800dcde:	d201      	bcs.n	800dce4 <lfs_dir_find_match+0x84>
 800dce0:	2301      	movs	r3, #1
 800dce2:	e002      	b.n	800dcea <lfs_dir_find_match+0x8a>
 800dce4:	2302      	movs	r3, #2
 800dce6:	e000      	b.n	800dcea <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 800dce8:	2300      	movs	r3, #0
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	372c      	adds	r7, #44	@ 0x2c
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd90      	pop	{r4, r7, pc}
	...

0800dcf4 <lfs_dir_find>:
// returns:
// - 0                  if file is found
// - LFS_ERR_NOENT      if file or parent is not found
// - LFS_ERR_NOTDIR     if parent is not a dir
static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b092      	sub	sp, #72	@ 0x48
 800dcf8:	af04      	add	r7, sp, #16
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	607a      	str	r2, [r7, #4]
 800dd00:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	637b      	str	r3, [r7, #52]	@ 0x34

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800dd08:	4b76      	ldr	r3, [pc, #472]	@ (800dee4 <lfs_dir_find+0x1f0>)
 800dd0a:	633b      	str	r3, [r7, #48]	@ 0x30
    dir->tail[0] = lfs->root[0];
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	6a1a      	ldr	r2, [r3, #32]
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	61da      	str	r2, [r3, #28]

    // empty paths are not allowed
    if (*name == '\0') {
 800dd1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d001      	beq.n	800dd28 <lfs_dir_find+0x34>
        return LFS_ERR_INVAL;
    }

    while (true) {
nextname:
 800dd24:	bf00      	nop
 800dd26:	e002      	b.n	800dd2e <lfs_dir_find+0x3a>
        return LFS_ERR_INVAL;
 800dd28:	f06f 0315 	mvn.w	r3, #21
 800dd2c:	e0d6      	b.n	800dedc <lfs_dir_find+0x1e8>
        // skip slashes if we're a directory
        if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 800dd2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7fe f9a1 	bl	800c078 <lfs_tag_type3>
 800dd36:	4603      	mov	r3, r0
 800dd38:	2b02      	cmp	r3, #2
 800dd3a:	d107      	bne.n	800dd4c <lfs_dir_find+0x58>
            name += strspn(name, "/");
 800dd3c:	496a      	ldr	r1, [pc, #424]	@ (800dee8 <lfs_dir_find+0x1f4>)
 800dd3e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800dd40:	f004 fea0 	bl	8012a84 <strspn>
 800dd44:	4602      	mov	r2, r0
 800dd46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd48:	4413      	add	r3, r2
 800dd4a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        lfs_size_t namelen = strcspn(name, "/");
 800dd4c:	4966      	ldr	r1, [pc, #408]	@ (800dee8 <lfs_dir_find+0x1f4>)
 800dd4e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800dd50:	f004 fe87 	bl	8012a62 <strcspn>
 800dd54:	6278      	str	r0, [r7, #36]	@ 0x24

        // skip '.'
        if (namelen == 1 && memcmp(name, ".", 1) == 0) {
 800dd56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d10a      	bne.n	800dd72 <lfs_dir_find+0x7e>
 800dd5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd5e:	781a      	ldrb	r2, [r3, #0]
 800dd60:	4b62      	ldr	r3, [pc, #392]	@ (800deec <lfs_dir_find+0x1f8>)
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d104      	bne.n	800dd72 <lfs_dir_find+0x7e>
            name += namelen;
 800dd68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd6c:	4413      	add	r3, r2
 800dd6e:	637b      	str	r3, [r7, #52]	@ 0x34
            goto nextname;
 800dd70:	e7dd      	b.n	800dd2e <lfs_dir_find+0x3a>
        }

        // error on unmatched '..', trying to go above root?
        if (namelen == 2 && memcmp(name, "..", 2) == 0) {
 800dd72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd74:	2b02      	cmp	r3, #2
 800dd76:	d10a      	bne.n	800dd8e <lfs_dir_find+0x9a>
 800dd78:	2202      	movs	r2, #2
 800dd7a:	495d      	ldr	r1, [pc, #372]	@ (800def0 <lfs_dir_find+0x1fc>)
 800dd7c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800dd7e:	f004 fe58 	bl	8012a32 <memcmp>
 800dd82:	4603      	mov	r3, r0
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d102      	bne.n	800dd8e <lfs_dir_find+0x9a>
            return LFS_ERR_INVAL;
 800dd88:	f06f 0315 	mvn.w	r3, #21
 800dd8c:	e0a6      	b.n	800dedc <lfs_dir_find+0x1e8>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 800dd8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd92:	4413      	add	r3, r2
 800dd94:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 800dd96:	2301      	movs	r3, #1
 800dd98:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 800dd9a:	4953      	ldr	r1, [pc, #332]	@ (800dee8 <lfs_dir_find+0x1f4>)
 800dd9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd9e:	f004 fe71 	bl	8012a84 <strspn>
 800dda2:	4602      	mov	r2, r0
 800dda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dda6:	4413      	add	r3, r2
 800dda8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            sufflen = strcspn(suffix, "/");
 800ddaa:	494f      	ldr	r1, [pc, #316]	@ (800dee8 <lfs_dir_find+0x1f4>)
 800ddac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ddae:	f004 fe58 	bl	8012a62 <strcspn>
 800ddb2:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 800ddb4:	6a3b      	ldr	r3, [r7, #32]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d026      	beq.n	800de08 <lfs_dir_find+0x114>
                break;
            }

            if (sufflen == 1 && memcmp(suffix, ".", 1) == 0) {
 800ddba:	6a3b      	ldr	r3, [r7, #32]
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d105      	bne.n	800ddcc <lfs_dir_find+0xd8>
 800ddc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddc2:	781a      	ldrb	r2, [r3, #0]
 800ddc4:	4b49      	ldr	r3, [pc, #292]	@ (800deec <lfs_dir_find+0x1f8>)
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d018      	beq.n	800ddfe <lfs_dir_find+0x10a>
                // noop
            } else if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800ddcc:	6a3b      	ldr	r3, [r7, #32]
 800ddce:	2b02      	cmp	r3, #2
 800ddd0:	d112      	bne.n	800ddf8 <lfs_dir_find+0x104>
 800ddd2:	2202      	movs	r2, #2
 800ddd4:	4946      	ldr	r1, [pc, #280]	@ (800def0 <lfs_dir_find+0x1fc>)
 800ddd6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ddd8:	f004 fe2b 	bl	8012a32 <memcmp>
 800dddc:	4603      	mov	r3, r0
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d10a      	bne.n	800ddf8 <lfs_dir_find+0x104>
                depth -= 1;
 800dde2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dde4:	3b01      	subs	r3, #1
 800dde6:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (depth == 0) {
 800dde8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d107      	bne.n	800ddfe <lfs_dir_find+0x10a>
                    name = suffix + sufflen;
 800ddee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ddf0:	6a3b      	ldr	r3, [r7, #32]
 800ddf2:	4413      	add	r3, r2
 800ddf4:	637b      	str	r3, [r7, #52]	@ 0x34
                    goto nextname;
 800ddf6:	e79a      	b.n	800dd2e <lfs_dir_find+0x3a>
                }
            } else {
                depth += 1;
 800ddf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            suffix += sufflen;
 800ddfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de00:	6a3b      	ldr	r3, [r7, #32]
 800de02:	4413      	add	r3, r2
 800de04:	62fb      	str	r3, [r7, #44]	@ 0x2c
            suffix += strspn(suffix, "/");
 800de06:	e7c8      	b.n	800dd9a <lfs_dir_find+0xa6>
                break;
 800de08:	bf00      	nop
        }

        // found path
        if (*name == '\0') {
 800de0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d101      	bne.n	800de16 <lfs_dir_find+0x122>
            return tag;
 800de12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de14:	e062      	b.n	800dedc <lfs_dir_find+0x1e8>
        }

        // update what we've found so far
        *path = name;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de1a:	601a      	str	r2, [r3, #0]

        // only continue if we're a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800de1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de1e:	4618      	mov	r0, r3
 800de20:	f7fe f92a 	bl	800c078 <lfs_tag_type3>
 800de24:	4603      	mov	r3, r0
 800de26:	2b02      	cmp	r3, #2
 800de28:	d002      	beq.n	800de30 <lfs_dir_find+0x13c>
            return LFS_ERR_NOTDIR;
 800de2a:	f06f 0313 	mvn.w	r3, #19
 800de2e:	e055      	b.n	800dedc <lfs_dir_find+0x1e8>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 800de30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de32:	4618      	mov	r0, r3
 800de34:	f7fe f94a 	bl	800c0cc <lfs_tag_id>
 800de38:	4603      	mov	r3, r0
 800de3a:	461a      	mov	r2, r3
 800de3c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800de40:	429a      	cmp	r2, r3
 800de42:	d01c      	beq.n	800de7e <lfs_dir_find+0x18a>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800de44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de46:	4618      	mov	r0, r3
 800de48:	f7fe f940 	bl	800c0cc <lfs_tag_id>
 800de4c:	4603      	mov	r3, r0
 800de4e:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800de50:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800de54:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800de58:	68ba      	ldr	r2, [r7, #8]
 800de5a:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800de5c:	9200      	str	r2, [sp, #0]
 800de5e:	4a25      	ldr	r2, [pc, #148]	@ (800def4 <lfs_dir_find+0x200>)
 800de60:	68b9      	ldr	r1, [r7, #8]
 800de62:	68f8      	ldr	r0, [r7, #12]
 800de64:	f7fe fda8 	bl	800c9b8 <lfs_dir_get>
 800de68:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800de6a:	69fb      	ldr	r3, [r7, #28]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	da01      	bge.n	800de74 <lfs_dir_find+0x180>
                return res;
 800de70:	69fb      	ldr	r3, [r7, #28]
 800de72:	e033      	b.n	800dedc <lfs_dir_find+0x1e8>
            }
            lfs_pair_fromle32(dir->tail);
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	3318      	adds	r3, #24
 800de78:	4618      	mov	r0, r3
 800de7a:	f7fe f888 	bl	800bf8e <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	f103 0218 	add.w	r2, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                    id,
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	613b      	str	r3, [r7, #16]
 800de88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de8a:	617b      	str	r3, [r7, #20]
 800de8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de8e:	61bb      	str	r3, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800de90:	f107 0310 	add.w	r3, r7, #16
 800de94:	9303      	str	r3, [sp, #12]
 800de96:	4b18      	ldr	r3, [pc, #96]	@ (800def8 <lfs_dir_find+0x204>)
 800de98:	9302      	str	r3, [sp, #8]
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	9301      	str	r3, [sp, #4]
 800de9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea0:	9300      	str	r3, [sp, #0]
 800dea2:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 800dea6:	68b9      	ldr	r1, [r7, #8]
 800dea8:	68f8      	ldr	r0, [r7, #12]
 800deaa:	f7ff fabb 	bl	800d424 <lfs_dir_fetchmatch>
 800deae:	6338      	str	r0, [r7, #48]	@ 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800deb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	da01      	bge.n	800deba <lfs_dir_find+0x1c6>
                return tag;
 800deb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deb8:	e010      	b.n	800dedc <lfs_dir_find+0x1e8>
            }

            if (tag) {
 800deba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800debc:	2b00      	cmp	r3, #0
 800debe:	d004      	beq.n	800deca <lfs_dir_find+0x1d6>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800dec0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dec4:	4413      	add	r3, r2
 800dec6:	637b      	str	r3, [r7, #52]	@ 0x34
    while (true) {
 800dec8:	e731      	b.n	800dd2e <lfs_dir_find+0x3a>
            if (!dir->split) {
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	7ddb      	ldrb	r3, [r3, #23]
 800dece:	f083 0301 	eor.w	r3, r3, #1
 800ded2:	b2db      	uxtb	r3, r3
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d0d2      	beq.n	800de7e <lfs_dir_find+0x18a>
                return LFS_ERR_NOENT;
 800ded8:	f06f 0301 	mvn.w	r3, #1
    }
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3738      	adds	r7, #56	@ 0x38
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	002ffc00 	.word	0x002ffc00
 800dee8:	08013974 	.word	0x08013974
 800deec:	080139f0 	.word	0x080139f0
 800def0:	080139f4 	.word	0x080139f4
 800def4:	700ffc00 	.word	0x700ffc00
 800def8:	0800dc61 	.word	0x0800dc61

0800defc <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 800defc:	b590      	push	{r4, r7, lr}
 800defe:	b08b      	sub	sp, #44	@ 0x2c
 800df00:	af04      	add	r7, sp, #16
 800df02:	60f8      	str	r0, [r7, #12]
 800df04:	60b9      	str	r1, [r7, #8]
 800df06:	607a      	str	r2, [r7, #4]
 800df08:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	f103 0010 	add.w	r0, r3, #16
 800df10:	68fc      	ldr	r4, [r7, #12]
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	68ba      	ldr	r2, [r7, #8]
 800df18:	6852      	ldr	r2, [r2, #4]
 800df1a:	6839      	ldr	r1, [r7, #0]
 800df1c:	9103      	str	r1, [sp, #12]
 800df1e:	6879      	ldr	r1, [r7, #4]
 800df20:	9102      	str	r1, [sp, #8]
 800df22:	9201      	str	r2, [sp, #4]
 800df24:	9300      	str	r3, [sp, #0]
 800df26:	2300      	movs	r3, #0
 800df28:	4622      	mov	r2, r4
 800df2a:	4601      	mov	r1, r0
 800df2c:	68f8      	ldr	r0, [r7, #12]
 800df2e:	f7fd fe83 	bl	800bc38 <lfs_bd_prog>
 800df32:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d001      	beq.n	800df3e <lfs_dir_commitprog+0x42>
        return err;
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	e010      	b.n	800df60 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	68db      	ldr	r3, [r3, #12]
 800df42:	683a      	ldr	r2, [r7, #0]
 800df44:	6879      	ldr	r1, [r7, #4]
 800df46:	4618      	mov	r0, r3
 800df48:	f004 fb30 	bl	80125ac <lfs_crc>
 800df4c:	4602      	mov	r2, r0
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	685a      	ldr	r2, [r3, #4]
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	441a      	add	r2, r3
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	605a      	str	r2, [r3, #4]
    return 0;
 800df5e:	2300      	movs	r3, #0
}
 800df60:	4618      	mov	r0, r3
 800df62:	371c      	adds	r7, #28
 800df64:	46bd      	mov	sp, r7
 800df66:	bd90      	pop	{r4, r7, pc}

0800df68 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 800df68:	b590      	push	{r4, r7, lr}
 800df6a:	b08f      	sub	sp, #60	@ 0x3c
 800df6c:	af04      	add	r7, sp, #16
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	60b9      	str	r1, [r7, #8]
 800df72:	607a      	str	r2, [r7, #4]
 800df74:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f7fe f8c5 	bl	800c106 <lfs_tag_dsize>
 800df7c:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	685a      	ldr	r2, [r3, #4]
 800df82:	6a3b      	ldr	r3, [r7, #32]
 800df84:	441a      	add	r2, r3
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	695b      	ldr	r3, [r3, #20]
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d902      	bls.n	800df94 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800df8e:	f06f 031b 	mvn.w	r3, #27
 800df92:	e065      	b.n	800e060 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	689b      	ldr	r3, [r3, #8]
 800df9e:	4053      	eors	r3, r2
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7fd fb6e 	bl	800b682 <lfs_tobe32>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800dfaa:	f107 0214 	add.w	r2, r7, #20
 800dfae:	2304      	movs	r3, #4
 800dfb0:	68b9      	ldr	r1, [r7, #8]
 800dfb2:	68f8      	ldr	r0, [r7, #12]
 800dfb4:	f7ff ffa2 	bl	800defc <lfs_dir_commitprog>
 800dfb8:	61f8      	str	r0, [r7, #28]
    if (err) {
 800dfba:	69fb      	ldr	r3, [r7, #28]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d001      	beq.n	800dfc4 <lfs_dir_commitattr+0x5c>
        return err;
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	e04d      	b.n	800e060 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	db0c      	blt.n	800dfe4 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800dfca:	6a3b      	ldr	r3, [r7, #32]
 800dfcc:	3b04      	subs	r3, #4
 800dfce:	683a      	ldr	r2, [r7, #0]
 800dfd0:	68b9      	ldr	r1, [r7, #8]
 800dfd2:	68f8      	ldr	r0, [r7, #12]
 800dfd4:	f7ff ff92 	bl	800defc <lfs_dir_commitprog>
 800dfd8:	61f8      	str	r0, [r7, #28]
        if (err) {
 800dfda:	69fb      	ldr	r3, [r7, #28]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d039      	beq.n	800e054 <lfs_dir_commitattr+0xec>
            return err;
 800dfe0:	69fb      	ldr	r3, [r7, #28]
 800dfe2:	e03d      	b.n	800e060 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800dfe8:	2300      	movs	r3, #0
 800dfea:	627b      	str	r3, [r7, #36]	@ 0x24
 800dfec:	e02d      	b.n	800e04a <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800dfee:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800dff0:	6a3a      	ldr	r2, [r7, #32]
 800dff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dff4:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800dff6:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 800dff8:	69bb      	ldr	r3, [r7, #24]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	69ba      	ldr	r2, [r7, #24]
 800dffe:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 800e000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e002:	440a      	add	r2, r1
 800e004:	2101      	movs	r1, #1
 800e006:	9103      	str	r1, [sp, #12]
 800e008:	f107 0113 	add.w	r1, r7, #19
 800e00c:	9102      	str	r1, [sp, #8]
 800e00e:	9201      	str	r2, [sp, #4]
 800e010:	9300      	str	r3, [sp, #0]
 800e012:	4623      	mov	r3, r4
 800e014:	4602      	mov	r2, r0
 800e016:	2100      	movs	r1, #0
 800e018:	68f8      	ldr	r0, [r7, #12]
 800e01a:	f7fd fb7b 	bl	800b714 <lfs_bd_read>
 800e01e:	61f8      	str	r0, [r7, #28]
            if (err) {
 800e020:	69fb      	ldr	r3, [r7, #28]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d001      	beq.n	800e02a <lfs_dir_commitattr+0xc2>
                return err;
 800e026:	69fb      	ldr	r3, [r7, #28]
 800e028:	e01a      	b.n	800e060 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800e02a:	f107 0213 	add.w	r2, r7, #19
 800e02e:	2301      	movs	r3, #1
 800e030:	68b9      	ldr	r1, [r7, #8]
 800e032:	68f8      	ldr	r0, [r7, #12]
 800e034:	f7ff ff62 	bl	800defc <lfs_dir_commitprog>
 800e038:	61f8      	str	r0, [r7, #28]
            if (err) {
 800e03a:	69fb      	ldr	r3, [r7, #28]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d001      	beq.n	800e044 <lfs_dir_commitattr+0xdc>
                return err;
 800e040:	69fb      	ldr	r3, [r7, #28]
 800e042:	e00d      	b.n	800e060 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800e044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e046:	3301      	adds	r3, #1
 800e048:	627b      	str	r3, [r7, #36]	@ 0x24
 800e04a:	6a3b      	ldr	r3, [r7, #32]
 800e04c:	3b04      	subs	r3, #4
 800e04e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e050:	429a      	cmp	r2, r3
 800e052:	d3cc      	bcc.n	800dfee <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	609a      	str	r2, [r3, #8]
    return 0;
 800e05e:	2300      	movs	r3, #0
}
 800e060:	4618      	mov	r0, r3
 800e062:	372c      	adds	r7, #44	@ 0x2c
 800e064:	46bd      	mov	sp, r7
 800e066:	bd90      	pop	{r4, r7, pc}

0800e068 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800e068:	b590      	push	{r4, r7, lr}
 800e06a:	b097      	sub	sp, #92	@ 0x5c
 800e06c:	af04      	add	r7, sp, #16
 800e06e:	6078      	str	r0, [r7, #4]
 800e070:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 800e076:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e07e:	69db      	ldr	r3, [r3, #28]
    const lfs_off_t end = lfs_alignup(
 800e080:	4619      	mov	r1, r3
 800e082:	4610      	mov	r0, r2
 800e084:	f7fd fa6a 	bl	800b55c <lfs_min>
 800e088:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e08e:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(
 800e090:	4619      	mov	r1, r3
 800e092:	4610      	mov	r0, r2
 800e094:	f7fd fa87 	bl	800b5a6 <lfs_alignup>
 800e098:	63b8      	str	r0, [r7, #56]	@ 0x38

    lfs_off_t off1 = 0;
 800e09a:	2300      	movs	r3, #0
 800e09c:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t crc1 = 0;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	643b      	str	r3, [r7, #64]	@ 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800e0a2:	e0fe      	b.n	800e2a2 <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	685b      	ldr	r3, [r3, #4]
 800e0a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e0aa:	1ad3      	subs	r3, r2, r3
 800e0ac:	3b04      	subs	r3, #4
 800e0ae:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f7fd fa52 	bl	800b55c <lfs_min>
 800e0b8:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	685b      	ldr	r3, [r3, #4]
 800e0be:	4413      	add	r3, r2
        lfs_off_t noff = (
 800e0c0:	3304      	adds	r3, #4
 800e0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 800e0c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d206      	bcs.n	800e0da <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 800e0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ce:	3b14      	subs	r3, #20
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e0d4:	f7fd fa42 	bl	800b55c <lfs_min>
 800e0d8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 800e0da:	23ff      	movs	r3, #255	@ 0xff
 800e0dc:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 800e0de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d35f      	bcc.n	800e1a6 <lfs_dir_commitcrc+0x13e>
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e0ea:	69da      	ldr	r2, [r3, #28]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e0f0:	699b      	ldr	r3, [r3, #24]
 800e0f2:	1ad3      	subs	r3, r2, r3
 800e0f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d855      	bhi.n	800e1a6 <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 800e0fa:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e100:	6998      	ldr	r0, [r3, #24]
            int err = lfs_bd_read(lfs,
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	2201      	movs	r2, #1
 800e108:	9203      	str	r2, [sp, #12]
 800e10a:	f107 021b 	add.w	r2, r7, #27
 800e10e:	9202      	str	r2, [sp, #8]
 800e110:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e112:	9201      	str	r2, [sp, #4]
 800e114:	9300      	str	r3, [sp, #0]
 800e116:	4603      	mov	r3, r0
 800e118:	460a      	mov	r2, r1
 800e11a:	2100      	movs	r1, #0
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f7fd faf9 	bl	800b714 <lfs_bd_read>
 800e122:	62f8      	str	r0, [r7, #44]	@ 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 800e124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e126:	2b00      	cmp	r3, #0
 800e128:	d005      	beq.n	800e136 <lfs_dir_commitcrc+0xce>
 800e12a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e12c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e130:	d001      	beq.n	800e136 <lfs_dir_commitcrc+0xce>
                return err;
 800e132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e134:	e101      	b.n	800e33a <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e13a:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 800e13c:	60bb      	str	r3, [r7, #8]
 800e13e:	f04f 33ff 	mov.w	r3, #4294967295
 800e142:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 800e144:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e14a:	699c      	ldr	r4, [r3, #24]
                err = lfs_bd_crc(lfs,
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	68ba      	ldr	r2, [r7, #8]
 800e152:	f107 0108 	add.w	r1, r7, #8
 800e156:	3104      	adds	r1, #4
 800e158:	9103      	str	r1, [sp, #12]
 800e15a:	9202      	str	r2, [sp, #8]
 800e15c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e15e:	9201      	str	r2, [sp, #4]
 800e160:	9300      	str	r3, [sp, #0]
 800e162:	4623      	mov	r3, r4
 800e164:	4602      	mov	r2, r0
 800e166:	2100      	movs	r1, #0
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f7fd fc70 	bl	800ba4e <lfs_bd_crc>
 800e16e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 800e170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e172:	2b00      	cmp	r3, #0
 800e174:	d005      	beq.n	800e182 <lfs_dir_commitcrc+0x11a>
 800e176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e178:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e17c:	d001      	beq.n	800e182 <lfs_dir_commitcrc+0x11a>
                    return err;
 800e17e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e180:	e010      	b.n	800e1a4 <lfs_dir_commitcrc+0x13c>
                }

                lfs_fcrc_tole32(&fcrc);
 800e182:	f107 0308 	add.w	r3, r7, #8
 800e186:	4618      	mov	r0, r3
 800e188:	f7fe f8ce 	bl	800c328 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 800e18c:	f107 0308 	add.w	r3, r7, #8
 800e190:	4a6c      	ldr	r2, [pc, #432]	@ (800e344 <lfs_dir_commitcrc+0x2dc>)
 800e192:	6839      	ldr	r1, [r7, #0]
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f7ff fee7 	bl	800df68 <lfs_dir_commitattr>
 800e19a:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 800e19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d001      	beq.n	800e1a6 <lfs_dir_commitcrc+0x13e>
                    return err;
 800e1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                return err;
 800e1a4:	e0c9      	b.n	800e33a <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 800e1a6:	7efb      	ldrb	r3, [r7, #27]
 800e1a8:	43db      	mvns	r3, r3
 800e1aa:	b2db      	uxtb	r3, r3
 800e1ac:	09db      	lsrs	r3, r3, #7
 800e1ae:	b2db      	uxtb	r3, r3
 800e1b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1b4:	051a      	lsls	r2, r3, #20
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e1bc:	1acb      	subs	r3, r1, r3
 800e1be:	3b04      	subs	r3, #4
 800e1c0:	4313      	orrs	r3, r2
 800e1c2:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 800e1c6:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 800e1ca:	62bb      	str	r3, [r7, #40]	@ 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	689a      	ldr	r2, [r3, #8]
 800e1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1d2:	4053      	eors	r3, r2
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7fd fa54 	bl	800b682 <lfs_tobe32>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	68db      	ldr	r3, [r3, #12]
 800e1e2:	f107 0110 	add.w	r1, r7, #16
 800e1e6:	2204      	movs	r2, #4
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f004 f9df 	bl	80125ac <lfs_crc>
 800e1ee:	4602      	mov	r2, r0
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	68db      	ldr	r3, [r3, #12]
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7fd fa2a 	bl	800b652 <lfs_tole32>
 800e1fe:	4603      	mov	r3, r0
 800e200:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f103 0010 	add.w	r0, r3, #16
 800e208:	687c      	ldr	r4, [r7, #4]
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	683a      	ldr	r2, [r7, #0]
 800e210:	6852      	ldr	r2, [r2, #4]
 800e212:	2108      	movs	r1, #8
 800e214:	9103      	str	r1, [sp, #12]
 800e216:	f107 0110 	add.w	r1, r7, #16
 800e21a:	9102      	str	r1, [sp, #8]
 800e21c:	9201      	str	r2, [sp, #4]
 800e21e:	9300      	str	r3, [sp, #0]
 800e220:	2300      	movs	r3, #0
 800e222:	4622      	mov	r2, r4
 800e224:	4601      	mov	r1, r0
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f7fd fd06 	bl	800bc38 <lfs_bd_prog>
 800e22c:	6278      	str	r0, [r7, #36]	@ 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 800e22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e230:	2b00      	cmp	r3, #0
 800e232:	d001      	beq.n	800e238 <lfs_dir_commitcrc+0x1d0>
            return err;
 800e234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e236:	e080      	b.n	800e33a <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 800e238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d106      	bne.n	800e24c <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	3304      	adds	r3, #4
 800e244:	647b      	str	r3, [r7, #68]	@ 0x44
            crc1 = commit->crc;
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	68db      	ldr	r3, [r3, #12]
 800e24a:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        commit->off = noff;
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e250:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 800e252:	7efb      	ldrb	r3, [r7, #27]
 800e254:	43db      	mvns	r3, r3
 800e256:	061b      	lsls	r3, r3, #24
 800e258:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800e25c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e25e:	405a      	eors	r2, r3
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	f04f 32ff 	mov.w	r2, #4294967295
 800e26a:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 800e26c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e270:	429a      	cmp	r2, r3
 800e272:	d208      	bcs.n	800e286 <lfs_dir_commitcrc+0x21e>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	695a      	ldr	r2, [r3, #20]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e27c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e27e:	4413      	add	r3, r2
 800e280:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e282:	429a      	cmp	r2, r3
 800e284:	d30d      	bcc.n	800e2a2 <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f103 0110 	add.w	r1, r3, #16
 800e28c:	687a      	ldr	r2, [r7, #4]
 800e28e:	2300      	movs	r3, #0
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f7fd fc9d 	bl	800bbd0 <lfs_bd_sync>
 800e296:	6238      	str	r0, [r7, #32]
            if (err) {
 800e298:	6a3b      	ldr	r3, [r7, #32]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d001      	beq.n	800e2a2 <lfs_dir_commitcrc+0x23a>
                return err;
 800e29e:	6a3b      	ldr	r3, [r7, #32]
 800e2a0:	e04b      	b.n	800e33a <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	685b      	ldr	r3, [r3, #4]
 800e2a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	f63f aefb 	bhi.w	800e0a4 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	691b      	ldr	r3, [r3, #16]
 800e2b2:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t crc = 0xffffffff;
 800e2b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2b8:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2be:	1d1c      	adds	r4, r3, #4
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e2c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e2c8:	1a8a      	subs	r2, r1, r2
 800e2ca:	f107 011c 	add.w	r1, r7, #28
 800e2ce:	9103      	str	r1, [sp, #12]
 800e2d0:	9202      	str	r2, [sp, #8]
 800e2d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e2d4:	9201      	str	r2, [sp, #4]
 800e2d6:	9300      	str	r3, [sp, #0]
 800e2d8:	4623      	mov	r3, r4
 800e2da:	4602      	mov	r2, r0
 800e2dc:	2100      	movs	r1, #0
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f7fd fbb5 	bl	800ba4e <lfs_bd_crc>
 800e2e4:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 800e2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d001      	beq.n	800e2f0 <lfs_dir_commitcrc+0x288>
        return err;
 800e2ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ee:	e024      	b.n	800e33a <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 800e2f0:	69fb      	ldr	r3, [r7, #28]
 800e2f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d002      	beq.n	800e2fe <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 800e2f8:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800e2fc:	e01d      	b.n	800e33a <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 800e2fe:	6879      	ldr	r1, [r7, #4]
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	f107 021c 	add.w	r2, r7, #28
 800e308:	9203      	str	r2, [sp, #12]
 800e30a:	2204      	movs	r2, #4
 800e30c:	9202      	str	r2, [sp, #8]
 800e30e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e310:	9201      	str	r2, [sp, #4]
 800e312:	9300      	str	r3, [sp, #0]
 800e314:	2304      	movs	r3, #4
 800e316:	460a      	mov	r2, r1
 800e318:	2100      	movs	r1, #0
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f7fd fb97 	bl	800ba4e <lfs_bd_crc>
 800e320:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 800e322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e324:	2b00      	cmp	r3, #0
 800e326:	d001      	beq.n	800e32c <lfs_dir_commitcrc+0x2c4>
        return err;
 800e328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e32a:	e006      	b.n	800e33a <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d002      	beq.n	800e338 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 800e332:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800e336:	e000      	b.n	800e33a <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 800e338:	2300      	movs	r3, #0
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	374c      	adds	r7, #76	@ 0x4c
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd90      	pop	{r4, r7, pc}
 800e342:	bf00      	nop
 800e344:	5ffffc08 	.word	0x5ffffc08

0800e348 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800e348:	b580      	push	{r7, lr}
 800e34a:	b08a      	sub	sp, #40	@ 0x28
 800e34c:	af04      	add	r7, sp, #16
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 800e352:	2300      	movs	r3, #0
 800e354:	617b      	str	r3, [r7, #20]
 800e356:	e016      	b.n	800e386 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	3301      	adds	r3, #1
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	f003 0301 	and.w	r3, r3, #1
 800e362:	bfb8      	it	lt
 800e364:	425b      	neglt	r3, r3
 800e366:	009b      	lsls	r3, r3, #2
 800e368:	683a      	ldr	r2, [r7, #0]
 800e36a:	4413      	add	r3, r2
 800e36c:	4619      	mov	r1, r3
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f7fe f9a4 	bl	800c6bc <lfs_alloc>
 800e374:	60f8      	str	r0, [r7, #12]
        if (err) {
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d001      	beq.n	800e380 <lfs_dir_alloc+0x38>
            return err;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	e058      	b.n	800e432 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	3301      	adds	r3, #1
 800e384:	617b      	str	r3, [r7, #20]
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	2b01      	cmp	r3, #1
 800e38a:	dde5      	ble.n	800e358 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	2200      	movs	r2, #0
 800e390:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800e392:	6879      	ldr	r1, [r7, #4]
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 800e398:	683a      	ldr	r2, [r7, #0]
 800e39a:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 800e39c:	2004      	movs	r0, #4
 800e39e:	9003      	str	r0, [sp, #12]
 800e3a0:	9202      	str	r2, [sp, #8]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	9201      	str	r2, [sp, #4]
 800e3a6:	9300      	str	r3, [sp, #0]
 800e3a8:	2304      	movs	r3, #4
 800e3aa:	460a      	mov	r2, r1
 800e3ac:	2100      	movs	r1, #0
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f7fd f9b0 	bl	800b714 <lfs_bd_read>
 800e3b4:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	689b      	ldr	r3, [r3, #8]
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f7fd f93e 	bl	800b63c <lfs_fromle32>
 800e3c0:	4602      	mov	r2, r0
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d005      	beq.n	800e3d8 <lfs_dir_alloc+0x90>
 800e3cc:	693b      	ldr	r3, [r7, #16]
 800e3ce:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e3d2:	d001      	beq.n	800e3d8 <lfs_dir_alloc+0x90>
        return err;
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	e02c      	b.n	800e432 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e3dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	dd0e      	ble.n	800e400 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	689a      	ldr	r2, [r3, #8]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e3ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3ec:	3301      	adds	r3, #1
 800e3ee:	f043 0301 	orr.w	r3, r3, #1
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	4610      	mov	r0, r2
 800e3f6:	f7fd f8d6 	bl	800b5a6 <lfs_alignup>
 800e3fa:	4602      	mov	r2, r0
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	2204      	movs	r2, #4
 800e404:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	f04f 32ff 	mov.w	r2, #4294967295
 800e40c:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	2200      	movs	r2, #0
 800e412:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	f04f 32ff 	mov.w	r2, #4294967295
 800e41a:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	f04f 32ff 	mov.w	r2, #4294967295
 800e422:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	2200      	movs	r2, #0
 800e428:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	2200      	movs	r2, #0
 800e42e:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 800e430:	2300      	movs	r3, #0
}
 800e432:	4618      	mov	r0, r3
 800e434:	3718      	adds	r7, #24
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
	...

0800e43c <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b08a      	sub	sp, #40	@ 0x28
 800e440:	af00      	add	r7, sp, #0
 800e442:	60f8      	str	r0, [r7, #12]
 800e444:	60b9      	str	r1, [r7, #8]
 800e446:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	3348      	adds	r3, #72	@ 0x48
 800e44c:	461a      	mov	r2, r3
 800e44e:	6879      	ldr	r1, [r7, #4]
 800e450:	68f8      	ldr	r0, [r7, #12]
 800e452:	f7ff fbd3 	bl	800dbfc <lfs_dir_getgstate>
 800e456:	6278      	str	r0, [r7, #36]	@ 0x24
    if (err) {
 800e458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d001      	beq.n	800e462 <lfs_dir_drop+0x26>
        return err;
 800e45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e460:	e022      	b.n	800e4a8 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	3318      	adds	r3, #24
 800e466:	4618      	mov	r0, r3
 800e468:	f7fd fdab 	bl	800bfc2 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	7ddb      	ldrb	r3, [r3, #23]
 800e470:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800e474:	051a      	lsls	r2, r3, #20
 800e476:	4b0e      	ldr	r3, [pc, #56]	@ (800e4b0 <lfs_dir_drop+0x74>)
 800e478:	4313      	orrs	r3, r2
 800e47a:	61fb      	str	r3, [r7, #28]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	3318      	adds	r3, #24
 800e480:	623b      	str	r3, [r7, #32]
 800e482:	f107 021c 	add.w	r2, r7, #28
 800e486:	2301      	movs	r3, #1
 800e488:	68b9      	ldr	r1, [r7, #8]
 800e48a:	68f8      	ldr	r0, [r7, #12]
 800e48c:	f001 f988 	bl	800f7a0 <lfs_dir_commit>
 800e490:	6278      	str	r0, [r7, #36]	@ 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	3318      	adds	r3, #24
 800e496:	4618      	mov	r0, r3
 800e498:	f7fd fd79 	bl	800bf8e <lfs_pair_fromle32>
    if (err) {
 800e49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d001      	beq.n	800e4a6 <lfs_dir_drop+0x6a>
        return err;
 800e4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4a4:	e000      	b.n	800e4a8 <lfs_dir_drop+0x6c>
    }

    return 0;
 800e4a6:	2300      	movs	r3, #0
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3728      	adds	r7, #40	@ 0x28
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}
 800e4b0:	000ffc08 	.word	0x000ffc08

0800e4b4 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b092      	sub	sp, #72	@ 0x48
 800e4b8:	af04      	add	r7, sp, #16
 800e4ba:	60f8      	str	r0, [r7, #12]
 800e4bc:	60b9      	str	r1, [r7, #8]
 800e4be:	607a      	str	r2, [r7, #4]
 800e4c0:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 800e4c2:	f107 0310 	add.w	r3, r7, #16
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	68f8      	ldr	r0, [r7, #12]
 800e4ca:	f7ff ff3d 	bl	800e348 <lfs_dir_alloc>
 800e4ce:	6378      	str	r0, [r7, #52]	@ 0x34
    if (err) {
 800e4d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d001      	beq.n	800e4da <lfs_dir_split+0x26>
        return err;
 800e4d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4d8:	e03c      	b.n	800e554 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	7ddb      	ldrb	r3, [r3, #23]
 800e4de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	699b      	ldr	r3, [r3, #24]
 800e4e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	69db      	ldr	r3, [r3, #28]
 800e4ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 800e4ee:	f107 0110 	add.w	r1, r7, #16
 800e4f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800e4f6:	9302      	str	r3, [sp, #8]
 800e4f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e4fc:	9301      	str	r3, [sp, #4]
 800e4fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e500:	9300      	str	r3, [sp, #0]
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	687a      	ldr	r2, [r7, #4]
 800e506:	68f8      	ldr	r0, [r7, #12]
 800e508:	f000 f87a 	bl	800e600 <lfs_dir_compact>
 800e50c:	6338      	str	r0, [r7, #48]	@ 0x30
    if (res < 0) {
 800e50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e510:	2b00      	cmp	r3, #0
 800e512:	da01      	bge.n	800e518 <lfs_dir_split+0x64>
        return res;
 800e514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e516:	e01d      	b.n	800e554 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 800e518:	693a      	ldr	r2, [r7, #16]
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 800e51e:	697a      	ldr	r2, [r7, #20]
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	61da      	str	r2, [r3, #28]
    dir->split = true;
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	2201      	movs	r2, #1
 800e528:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800e52a:	68ba      	ldr	r2, [r7, #8]
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	3320      	adds	r3, #32
 800e530:	4619      	mov	r1, r3
 800e532:	4610      	mov	r0, r2
 800e534:	f7fd fcd4 	bl	800bee0 <lfs_pair_cmp>
 800e538:	4603      	mov	r3, r0
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d109      	bne.n	800e552 <lfs_dir_split+0x9e>
 800e53e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e542:	2b00      	cmp	r3, #0
 800e544:	d105      	bne.n	800e552 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 800e546:	693a      	ldr	r2, [r7, #16]
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800e54c:	697a      	ldr	r2, [r7, #20]
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return 0;
 800e552:	2300      	movs	r3, #0
}
 800e554:	4618      	mov	r0, r3
 800e556:	3738      	adds	r7, #56	@ 0x38
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b086      	sub	sp, #24
 800e560:	af00      	add	r7, sp, #0
 800e562:	60f8      	str	r0, [r7, #12]
 800e564:	60b9      	str	r1, [r7, #8]
 800e566:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800e56c:	68b8      	ldr	r0, [r7, #8]
 800e56e:	f7fd fdca 	bl	800c106 <lfs_tag_dsize>
 800e572:	4602      	mov	r2, r0
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	441a      	add	r2, r3
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	601a      	str	r2, [r3, #0]
    return 0;
 800e57e:	2300      	movs	r3, #0
}
 800e580:	4618      	mov	r0, r3
 800e582:	3718      	adds	r7, #24
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}

0800e588 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800e588:	b580      	push	{r7, lr}
 800e58a:	b086      	sub	sp, #24
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	60f8      	str	r0, [r7, #12]
 800e590:	60b9      	str	r1, [r7, #8]
 800e592:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	6818      	ldr	r0, [r3, #0]
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	6859      	ldr	r1, [r3, #4]
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	68ba      	ldr	r2, [r7, #8]
 800e5a4:	f7ff fce0 	bl	800df68 <lfs_dir_commitattr>
 800e5a8:	4603      	mov	r3, r0
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	3718      	adds	r7, #24
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}

0800e5b2 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 800e5b2:	b480      	push	{r7}
 800e5b4:	b083      	sub	sp, #12
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	6078      	str	r0, [r7, #4]
 800e5ba:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e5c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	dd11      	ble.n	800e5ea <lfs_dir_needsrelocation+0x38>
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	689b      	ldr	r3, [r3, #8]
 800e5ca:	3301      	adds	r3, #1
 800e5cc:	687a      	ldr	r2, [r7, #4]
 800e5ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800e5d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e5d2:	3201      	adds	r2, #1
 800e5d4:	f042 0201 	orr.w	r2, r2, #1
 800e5d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800e5dc:	fb01 f202 	mul.w	r2, r1, r2
 800e5e0:	1a9b      	subs	r3, r3, r2
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d101      	bne.n	800e5ea <lfs_dir_needsrelocation+0x38>
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	e000      	b.n	800e5ec <lfs_dir_needsrelocation+0x3a>
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	f003 0301 	and.w	r3, r3, #1
 800e5f0:	b2db      	uxtb	r3, r3
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	370c      	adds	r7, #12
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr
	...

0800e600 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800e600:	b580      	push	{r7, lr}
 800e602:	b0a4      	sub	sp, #144	@ 0x90
 800e604:	af0a      	add	r7, sp, #40	@ 0x28
 800e606:	60f8      	str	r0, [r7, #12]
 800e608:	60b9      	str	r1, [r7, #8]
 800e60a:	607a      	str	r2, [r7, #4]
 800e60c:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 800e60e:	2300      	movs	r3, #0
 800e610:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 800e614:	68b9      	ldr	r1, [r7, #8]
 800e616:	68f8      	ldr	r0, [r7, #12]
 800e618:	f7ff ffcb 	bl	800e5b2 <lfs_dir_needsrelocation>
 800e61c:	4603      	mov	r3, r0
 800e61e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // increment revision count
    dir->rev += 1;
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	689b      	ldr	r3, [r3, #8]
 800e626:	1c5a      	adds	r2, r3, #1
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 800e62c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800e630:	2b00      	cmp	r3, #0
 800e632:	d00e      	beq.n	800e652 <lfs_dir_compact+0x52>
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	2200      	movs	r2, #0
 800e638:	657a      	str	r2, [r7, #84]	@ 0x54
 800e63a:	2201      	movs	r2, #1
 800e63c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e63e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800e642:	4611      	mov	r1, r2
 800e644:	4618      	mov	r0, r3
 800e646:	f7fd fc4b 	bl	800bee0 <lfs_pair_cmp>
 800e64a:	4603      	mov	r3, r0
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	f040 8155 	bne.w	800e8fc <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 800e656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e658:	2300      	movs	r3, #0
 800e65a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e65c:	f04f 33ff 	mov.w	r3, #4294967295
 800e660:	647b      	str	r3, [r7, #68]	@ 0x44
 800e662:	f04f 33ff 	mov.w	r3, #4294967295
 800e666:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e668:	2300      	movs	r3, #0
 800e66a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800e672:	2b00      	cmp	r3, #0
 800e674:	d004      	beq.n	800e680 <lfs_dir_compact+0x80>
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e67a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e67c:	3b08      	subs	r3, #8
 800e67e:	e003      	b.n	800e688 <lfs_dir_compact+0x88>
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e684:	69db      	ldr	r3, [r3, #28]
 800e686:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800e688:	653b      	str	r3, [r7, #80]	@ 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	685b      	ldr	r3, [r3, #4]
 800e68e:	4619      	mov	r1, r3
 800e690:	68f8      	ldr	r0, [r7, #12]
 800e692:	f7fd fb7f 	bl	800bd94 <lfs_bd_erase>
 800e696:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800e698:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d006      	beq.n	800e6ac <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 800e69e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e6a0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e6a4:	f000 812c 	beq.w	800e900 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 800e6a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e6aa:	e188      	b.n	800e9be <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	689b      	ldr	r3, [r3, #8]
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f7fc ffce 	bl	800b652 <lfs_tole32>
 800e6b6:	4602      	mov	r2, r0
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800e6c2:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800e6c6:	2304      	movs	r3, #4
 800e6c8:	68f8      	ldr	r0, [r7, #12]
 800e6ca:	f7ff fc17 	bl	800defc <lfs_dir_commitprog>
 800e6ce:	65f8      	str	r0, [r7, #92]	@ 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	689b      	ldr	r3, [r3, #8]
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7fc ffb1 	bl	800b63c <lfs_fromle32>
 800e6da:	4602      	mov	r2, r0
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	609a      	str	r2, [r3, #8]
            if (err) {
 800e6e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d006      	beq.n	800e6f4 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 800e6e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e6e8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e6ec:	f000 810a 	beq.w	800e904 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 800e6f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e6f2:	e164      	b.n	800e9be <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 800e6f4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800e6f8:	425b      	negs	r3, r3
 800e6fa:	b29b      	uxth	r3, r3
 800e6fc:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800e6fe:	68fa      	ldr	r2, [r7, #12]
 800e700:	637a      	str	r2, [r7, #52]	@ 0x34
 800e702:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800e706:	63ba      	str	r2, [r7, #56]	@ 0x38
            err = lfs_dir_traverse(lfs,
 800e708:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e70c:	9208      	str	r2, [sp, #32]
 800e70e:	4aae      	ldr	r2, [pc, #696]	@ (800e9c8 <lfs_dir_compact+0x3c8>)
 800e710:	9207      	str	r2, [sp, #28]
 800e712:	9306      	str	r3, [sp, #24]
 800e714:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800e718:	9305      	str	r3, [sp, #20]
 800e71a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800e71e:	9304      	str	r3, [sp, #16]
 800e720:	2300      	movs	r3, #0
 800e722:	9303      	str	r3, [sp, #12]
 800e724:	4ba9      	ldr	r3, [pc, #676]	@ (800e9cc <lfs_dir_compact+0x3cc>)
 800e726:	9302      	str	r3, [sp, #8]
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	9301      	str	r3, [sp, #4]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	9300      	str	r3, [sp, #0]
 800e730:	f04f 33ff 	mov.w	r3, #4294967295
 800e734:	2200      	movs	r2, #0
 800e736:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800e738:	68f8      	ldr	r0, [r7, #12]
 800e73a:	f7fe fa8f 	bl	800cc5c <lfs_dir_traverse>
 800e73e:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        lfs, &commit});
            if (err) {
 800e740:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e742:	2b00      	cmp	r3, #0
 800e744:	d006      	beq.n	800e754 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 800e746:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e748:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e74c:	f000 80dc 	beq.w	800e908 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 800e750:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e752:	e134      	b.n	800e9be <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	3318      	adds	r3, #24
 800e758:	4618      	mov	r0, r3
 800e75a:	f7fd fba6 	bl	800beaa <lfs_pair_isnull>
 800e75e:	4603      	mov	r3, r0
 800e760:	f083 0301 	eor.w	r3, r3, #1
 800e764:	b2db      	uxtb	r3, r3
 800e766:	2b00      	cmp	r3, #0
 800e768:	d022      	beq.n	800e7b0 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	3318      	adds	r3, #24
 800e76e:	4618      	mov	r0, r3
 800e770:	f7fd fc27 	bl	800bfc2 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	7ddb      	ldrb	r3, [r3, #23]
 800e778:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800e77c:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800e77e:	4a94      	ldr	r2, [pc, #592]	@ (800e9d0 <lfs_dir_compact+0x3d0>)
 800e780:	431a      	orrs	r2, r3
                        dir->tail);
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 800e786:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800e78a:	68f8      	ldr	r0, [r7, #12]
 800e78c:	f7ff fbec 	bl	800df68 <lfs_dir_commitattr>
 800e790:	65f8      	str	r0, [r7, #92]	@ 0x5c
                lfs_pair_fromle32(dir->tail);
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	3318      	adds	r3, #24
 800e796:	4618      	mov	r0, r3
 800e798:	f7fd fbf9 	bl	800bf8e <lfs_pair_fromle32>
                if (err) {
 800e79c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d006      	beq.n	800e7b0 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 800e7a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e7a4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e7a8:	f000 80b0 	beq.w	800e90c <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 800e7ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e7ae:	e106      	b.n	800e9be <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 800e7b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	601a      	str	r2, [r3, #0]
 800e7b8:	605a      	str	r2, [r3, #4]
 800e7ba:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800e7bc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e7c0:	f083 0301 	eor.w	r3, r3, #1
 800e7c4:	b2db      	uxtb	r3, r3
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d011      	beq.n	800e7ee <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800e7d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e7d4:	4611      	mov	r1, r2
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f7fd fca9 	bl	800c12e <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e7e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e7e6:	4611      	mov	r1, r2
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7fd fca0 	bl	800c12e <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800e7f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e7f8:	4611      	mov	r1, r2
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f7fd fc97 	bl	800c12e <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800e800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e802:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800e806:	f023 0303 	bic.w	r3, r3, #3
 800e80a:	62bb      	str	r3, [r7, #40]	@ 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 800e80c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e810:	461a      	mov	r2, r3
 800e812:	68b9      	ldr	r1, [r7, #8]
 800e814:	68f8      	ldr	r0, [r7, #12]
 800e816:	f7ff f9f1 	bl	800dbfc <lfs_dir_getgstate>
 800e81a:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800e81c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d001      	beq.n	800e826 <lfs_dir_compact+0x226>
                return err;
 800e822:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e824:	e0cb      	b.n	800e9be <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 800e826:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e82a:	4618      	mov	r0, r3
 800e82c:	f7fd fc9f 	bl	800c16e <lfs_gstate_iszero>
 800e830:	4603      	mov	r3, r0
 800e832:	f083 0301 	eor.w	r3, r3, #1
 800e836:	b2db      	uxtb	r3, r3
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d016      	beq.n	800e86a <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 800e83c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e840:	4618      	mov	r0, r3
 800e842:	f7fd fd39 	bl	800c2b8 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 800e846:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e84a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800e84e:	4a61      	ldr	r2, [pc, #388]	@ (800e9d4 <lfs_dir_compact+0x3d4>)
 800e850:	68f8      	ldr	r0, [r7, #12]
 800e852:	f7ff fb89 	bl	800df68 <lfs_dir_commitattr>
 800e856:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 800e858:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d005      	beq.n	800e86a <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 800e85e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e860:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e864:	d054      	beq.n	800e910 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 800e866:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e868:	e0a9      	b.n	800e9be <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 800e86a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e86e:	4619      	mov	r1, r3
 800e870:	68f8      	ldr	r0, [r7, #12]
 800e872:	f7ff fbf9 	bl	800e068 <lfs_dir_commitcrc>
 800e876:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800e878:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d005      	beq.n	800e88a <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 800e87e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e880:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e884:	d046      	beq.n	800e914 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 800e886:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e888:	e099      	b.n	800e9be <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800e88a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e88c:	68fa      	ldr	r2, [r7, #12]
 800e88e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800e890:	6992      	ldr	r2, [r2, #24]
 800e892:	fbb3 f1f2 	udiv	r1, r3, r2
 800e896:	fb01 f202 	mul.w	r2, r1, r2
 800e89a:	1a9b      	subs	r3, r3, r2
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d006      	beq.n	800e8ae <lfs_dir_compact+0x2ae>
 800e8a0:	4b4d      	ldr	r3, [pc, #308]	@ (800e9d8 <lfs_dir_compact+0x3d8>)
 800e8a2:	4a4e      	ldr	r2, [pc, #312]	@ (800e9dc <lfs_dir_compact+0x3dc>)
 800e8a4:	f640 0121 	movw	r1, #2081	@ 0x821
 800e8a8:	484d      	ldr	r0, [pc, #308]	@ (800e9e0 <lfs_dir_compact+0x3e0>)
 800e8aa:	f003 febd 	bl	8012628 <__assert_func>
            lfs_pair_swap(dir->pair);
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f7fd fae5 	bl	800be80 <lfs_pair_swap>
            dir->count = end - begin;
 800e8b6:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 800e8ba:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800e8be:	1ad3      	subs	r3, r2, r3
 800e8c0:	b29a      	uxth	r2, r3
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 800e8c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 800e8cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	3348      	adds	r3, #72	@ 0x48
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	601a      	str	r2, [r3, #0]
 800e8da:	605a      	str	r2, [r3, #4]
 800e8dc:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800e8de:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e8e2:	f083 0301 	eor.w	r3, r3, #1
 800e8e6:	b2db      	uxtb	r3, r3
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d065      	beq.n	800e9b8 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	68fa      	ldr	r2, [r7, #12]
 800e8f0:	333c      	adds	r3, #60	@ 0x3c
 800e8f2:	3230      	adds	r2, #48	@ 0x30
 800e8f4:	ca07      	ldmia	r2, {r0, r1, r2}
 800e8f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 800e8fa:	e05d      	b.n	800e9b8 <lfs_dir_compact+0x3b8>
        goto relocate;
 800e8fc:	bf00      	nop
 800e8fe:	e00a      	b.n	800e916 <lfs_dir_compact+0x316>
                    goto relocate;
 800e900:	bf00      	nop
 800e902:	e008      	b.n	800e916 <lfs_dir_compact+0x316>
                    goto relocate;
 800e904:	bf00      	nop
 800e906:	e006      	b.n	800e916 <lfs_dir_compact+0x316>
                    goto relocate;
 800e908:	bf00      	nop
 800e90a:	e004      	b.n	800e916 <lfs_dir_compact+0x316>
                        goto relocate;
 800e90c:	bf00      	nop
 800e90e:	e002      	b.n	800e916 <lfs_dir_compact+0x316>
                        goto relocate;
 800e910:	bf00      	nop
 800e912:	e000      	b.n	800e916 <lfs_dir_compact+0x316>
                    goto relocate;
 800e914:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 800e916:	2301      	movs	r3, #1
 800e918:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	3310      	adds	r3, #16
 800e920:	4619      	mov	r1, r3
 800e922:	68f8      	ldr	r0, [r7, #12]
 800e924:	f7fc fed0 	bl	800b6c8 <lfs_cache_drop>
        if (!tired) {
 800e928:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800e92c:	f083 0301 	eor.w	r3, r3, #1
 800e930:	b2db      	uxtb	r3, r3
 800e932:	2b00      	cmp	r3, #0
 800e934:	d009      	beq.n	800e94a <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	685b      	ldr	r3, [r3, #4]
 800e93a:	4a2a      	ldr	r2, [pc, #168]	@ (800e9e4 <lfs_dir_compact+0x3e4>)
 800e93c:	9200      	str	r2, [sp, #0]
 800e93e:	f640 0233 	movw	r2, #2099	@ 0x833
 800e942:	4927      	ldr	r1, [pc, #156]	@ (800e9e0 <lfs_dir_compact+0x3e0>)
 800e944:	4828      	ldr	r0, [pc, #160]	@ (800e9e8 <lfs_dir_compact+0x3e8>)
 800e946:	f004 f81f 	bl	8012988 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	2200      	movs	r2, #0
 800e94e:	617a      	str	r2, [r7, #20]
 800e950:	2201      	movs	r2, #1
 800e952:	61ba      	str	r2, [r7, #24]
 800e954:	f107 0214 	add.w	r2, r7, #20
 800e958:	4611      	mov	r1, r2
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7fd fac0 	bl	800bee0 <lfs_pair_cmp>
 800e960:	4603      	mov	r3, r0
 800e962:	2b00      	cmp	r3, #0
 800e964:	d10c      	bne.n	800e980 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	4a1e      	ldr	r2, [pc, #120]	@ (800e9e4 <lfs_dir_compact+0x3e4>)
 800e96c:	9200      	str	r2, [sp, #0]
 800e96e:	f640 0238 	movw	r2, #2104	@ 0x838
 800e972:	491b      	ldr	r1, [pc, #108]	@ (800e9e0 <lfs_dir_compact+0x3e0>)
 800e974:	481d      	ldr	r0, [pc, #116]	@ (800e9ec <lfs_dir_compact+0x3ec>)
 800e976:	f004 f807 	bl	8012988 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 800e97a:	f06f 031b 	mvn.w	r3, #27
 800e97e:	e01e      	b.n	800e9be <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	3304      	adds	r3, #4
 800e984:	4619      	mov	r1, r3
 800e986:	68f8      	ldr	r0, [r7, #12]
 800e988:	f7fd fe98 	bl	800c6bc <lfs_alloc>
 800e98c:	6638      	str	r0, [r7, #96]	@ 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800e98e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e990:	2b00      	cmp	r3, #0
 800e992:	d00c      	beq.n	800e9ae <lfs_dir_compact+0x3ae>
 800e994:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e996:	f113 0f1c 	cmn.w	r3, #28
 800e99a:	d106      	bne.n	800e9aa <lfs_dir_compact+0x3aa>
 800e99c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800e9a0:	f083 0301 	eor.w	r3, r3, #1
 800e9a4:	b2db      	uxtb	r3, r3
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d001      	beq.n	800e9ae <lfs_dir_compact+0x3ae>
            return err;
 800e9aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e9ac:	e007      	b.n	800e9be <lfs_dir_compact+0x3be>
        }

        tired = false;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        continue;
 800e9b4:	bf00      	nop
    while (true) {
 800e9b6:	e64c      	b.n	800e652 <lfs_dir_compact+0x52>
        break;
 800e9b8:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 800e9ba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3768      	adds	r7, #104	@ 0x68
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}
 800e9c6:	bf00      	nop
 800e9c8:	0800e589 	.word	0x0800e589
 800e9cc:	400ffc00 	.word	0x400ffc00
 800e9d0:	000ffc08 	.word	0x000ffc08
 800e9d4:	7ffffc0c 	.word	0x7ffffc0c
 800e9d8:	080139f8 	.word	0x080139f8
 800e9dc:	080146d4 	.word	0x080146d4
 800e9e0:	08013884 	.word	0x08013884
 800e9e4:	080139a4 	.word	0x080139a4
 800e9e8:	08013a20 	.word	0x08013a20
 800e9ec:	08013a44 	.word	0x08013a44

0800e9f0 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800e9f0:	b590      	push	{r4, r7, lr}
 800e9f2:	b099      	sub	sp, #100	@ 0x64
 800e9f4:	af0a      	add	r7, sp, #40	@ 0x28
 800e9f6:	60f8      	str	r0, [r7, #12]
 800e9f8:	60b9      	str	r1, [r7, #8]
 800e9fa:	607a      	str	r2, [r7, #4]
 800e9fc:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 800e9fe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800ea02:	637b      	str	r3, [r7, #52]	@ 0x34
        while (end - split > 1) {
 800ea04:	e057      	b.n	800eab6 <lfs_dir_splittingcompact+0xc6>
            lfs_size_t size = 0;
 800ea06:	2300      	movs	r3, #0
 800ea08:	61fb      	str	r3, [r7, #28]
            int err = lfs_dir_traverse(lfs,
 800ea0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea0c:	b29b      	uxth	r3, r3
 800ea0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ea10:	b292      	uxth	r2, r2
 800ea12:	4252      	negs	r2, r2
 800ea14:	b292      	uxth	r2, r2
 800ea16:	b212      	sxth	r2, r2
 800ea18:	f107 011c 	add.w	r1, r7, #28
 800ea1c:	9108      	str	r1, [sp, #32]
 800ea1e:	4979      	ldr	r1, [pc, #484]	@ (800ec04 <lfs_dir_splittingcompact+0x214>)
 800ea20:	9107      	str	r1, [sp, #28]
 800ea22:	9206      	str	r2, [sp, #24]
 800ea24:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800ea28:	9205      	str	r2, [sp, #20]
 800ea2a:	9304      	str	r3, [sp, #16]
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	9303      	str	r3, [sp, #12]
 800ea30:	4b75      	ldr	r3, [pc, #468]	@ (800ec08 <lfs_dir_splittingcompact+0x218>)
 800ea32:	9302      	str	r3, [sp, #8]
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	9301      	str	r3, [sp, #4]
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	9300      	str	r3, [sp, #0]
 800ea3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea40:	2200      	movs	r2, #0
 800ea42:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ea44:	68f8      	ldr	r0, [r7, #12]
 800ea46:	f7fe f909 	bl	800cc5c <lfs_dir_traverse>
 800ea4a:	6338      	str	r0, [r7, #48]	@ 0x30
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 800ea4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d001      	beq.n	800ea56 <lfs_dir_splittingcompact+0x66>
                return err;
 800ea52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea54:	e0d1      	b.n	800ebfa <lfs_dir_splittingcompact+0x20a>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            lfs_size_t metadata_max = (lfs->cfg->metadata_max)
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ea5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    ? lfs->cfg->metadata_max
                    : lfs->cfg->block_size;
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d003      	beq.n	800ea68 <lfs_dir_splittingcompact+0x78>
                    ? lfs->cfg->metadata_max
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                    : lfs->cfg->block_size;
 800ea64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea66:	e002      	b.n	800ea6e <lfs_dir_splittingcompact+0x7e>
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ea6c:	69db      	ldr	r3, [r3, #28]
            lfs_size_t metadata_max = (lfs->cfg->metadata_max)
 800ea6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (end - split < 0xff
 800ea70:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800ea74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea76:	1ad3      	subs	r3, r2, r3
 800ea78:	2bfe      	cmp	r3, #254	@ 0xfe
 800ea7a:	d814      	bhi.n	800eaa6 <lfs_dir_splittingcompact+0xb6>
                    && size <= lfs_min(
 800ea7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea7e:	f1a3 0428 	sub.w	r4, r3, #40	@ 0x28
 800ea82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea84:	085a      	lsrs	r2, r3, #1
                        metadata_max - 40,
                        lfs_alignup(
                            metadata_max/2,
                            lfs->cfg->prog_size))) {
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ea8a:	699b      	ldr	r3, [r3, #24]
                    && size <= lfs_min(
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	4610      	mov	r0, r2
 800ea90:	f7fc fd89 	bl	800b5a6 <lfs_alignup>
 800ea94:	4603      	mov	r3, r0
 800ea96:	4619      	mov	r1, r3
 800ea98:	4620      	mov	r0, r4
 800ea9a:	f7fc fd5f 	bl	800b55c <lfs_min>
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	69fb      	ldr	r3, [r7, #28]
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d20e      	bcs.n	800eac4 <lfs_dir_splittingcompact+0xd4>
                break;
            }

            split = split + ((end - split) / 2);
 800eaa6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800eaaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eaac:	1ad3      	subs	r3, r2, r3
 800eaae:	085b      	lsrs	r3, r3, #1
 800eab0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eab2:	4413      	add	r3, r2
 800eab4:	637b      	str	r3, [r7, #52]	@ 0x34
        while (end - split > 1) {
 800eab6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800eaba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eabc:	1ad3      	subs	r3, r2, r3
 800eabe:	2b01      	cmp	r3, #1
 800eac0:	d8a1      	bhi.n	800ea06 <lfs_dir_splittingcompact+0x16>
 800eac2:	e000      	b.n	800eac6 <lfs_dir_splittingcompact+0xd6>
                break;
 800eac4:	bf00      	nop
        }

        if (split == begin) {
 800eac6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800eaca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eacc:	429a      	cmp	r2, r3
 800eace:	d02d      	beq.n	800eb2c <lfs_dir_splittingcompact+0x13c>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800ead0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ead2:	b29b      	uxth	r3, r3
 800ead4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800ead8:	9202      	str	r2, [sp, #8]
 800eada:	9301      	str	r3, [sp, #4]
 800eadc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eade:	9300      	str	r3, [sp, #0]
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	687a      	ldr	r2, [r7, #4]
 800eae4:	68b9      	ldr	r1, [r7, #8]
 800eae6:	68f8      	ldr	r0, [r7, #12]
 800eae8:	f7ff fce4 	bl	800e4b4 <lfs_dir_split>
 800eaec:	62b8      	str	r0, [r7, #40]	@ 0x28
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 800eaee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d005      	beq.n	800eb00 <lfs_dir_splittingcompact+0x110>
 800eaf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaf6:	f113 0f1c 	cmn.w	r3, #28
 800eafa:	d001      	beq.n	800eb00 <lfs_dir_splittingcompact+0x110>
            return err;
 800eafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eafe:	e07c      	b.n	800ebfa <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 800eb00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d00e      	beq.n	800eb24 <lfs_dir_splittingcompact+0x134>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	681a      	ldr	r2, [r3, #0]
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	493f      	ldr	r1, [pc, #252]	@ (800ec0c <lfs_dir_splittingcompact+0x21c>)
 800eb10:	9101      	str	r1, [sp, #4]
 800eb12:	9300      	str	r3, [sp, #0]
 800eb14:	4613      	mov	r3, r2
 800eb16:	f640 028c 	movw	r2, #2188	@ 0x88c
 800eb1a:	493d      	ldr	r1, [pc, #244]	@ (800ec10 <lfs_dir_splittingcompact+0x220>)
 800eb1c:	483d      	ldr	r0, [pc, #244]	@ (800ec14 <lfs_dir_splittingcompact+0x224>)
 800eb1e:	f003 ff33 	bl	8012988 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 800eb22:	e004      	b.n	800eb2e <lfs_dir_splittingcompact+0x13e>
        } else {
            end = split;
 800eb24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb26:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
    while (true) {
 800eb2a:	e768      	b.n	800e9fe <lfs_dir_splittingcompact+0xe>
            break;
 800eb2c:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 800eb2e:	68b9      	ldr	r1, [r7, #8]
 800eb30:	68f8      	ldr	r0, [r7, #12]
 800eb32:	f7ff fd3e 	bl	800e5b2 <lfs_dir_needsrelocation>
 800eb36:	4603      	mov	r3, r0
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d04f      	beq.n	800ebdc <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	617a      	str	r2, [r7, #20]
 800eb42:	2201      	movs	r2, #1
 800eb44:	61ba      	str	r2, [r7, #24]
 800eb46:	f107 0214 	add.w	r2, r7, #20
 800eb4a:	4611      	mov	r1, r2
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7fd f9c7 	bl	800bee0 <lfs_pair_cmp>
 800eb52:	4603      	mov	r3, r0
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d141      	bne.n	800ebdc <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 800eb58:	68f8      	ldr	r0, [r7, #12]
 800eb5a:	f003 fc0b 	bl	8012374 <lfs_fs_size_>
 800eb5e:	6278      	str	r0, [r7, #36]	@ 0x24
        if (size < 0) {
 800eb60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	da01      	bge.n	800eb6a <lfs_dir_splittingcompact+0x17a>
            return size;
 800eb66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb68:	e047      	b.n	800ebfa <lfs_dir_splittingcompact+0x20a>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800eb6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb70:	1ad2      	subs	r2, r2, r3
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb76:	08db      	lsrs	r3, r3, #3
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d92f      	bls.n	800ebdc <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	689b      	ldr	r3, [r3, #8]
 800eb80:	4a22      	ldr	r2, [pc, #136]	@ (800ec0c <lfs_dir_splittingcompact+0x21c>)
 800eb82:	9200      	str	r2, [sp, #0]
 800eb84:	f640 02a2 	movw	r2, #2210	@ 0x8a2
 800eb88:	4921      	ldr	r1, [pc, #132]	@ (800ec10 <lfs_dir_splittingcompact+0x220>)
 800eb8a:	4823      	ldr	r0, [pc, #140]	@ (800ec18 <lfs_dir_splittingcompact+0x228>)
 800eb8c:	f003 fefc 	bl	8012988 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800eb90:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800eb94:	9302      	str	r3, [sp, #8]
 800eb96:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800eb9a:	9301      	str	r3, [sp, #4]
 800eb9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb9e:	9300      	str	r3, [sp, #0]
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	687a      	ldr	r2, [r7, #4]
 800eba4:	68b9      	ldr	r1, [r7, #8]
 800eba6:	68f8      	ldr	r0, [r7, #12]
 800eba8:	f7ff fc84 	bl	800e4b4 <lfs_dir_split>
 800ebac:	6238      	str	r0, [r7, #32]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 800ebae:	6a3b      	ldr	r3, [r7, #32]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d005      	beq.n	800ebc0 <lfs_dir_splittingcompact+0x1d0>
 800ebb4:	6a3b      	ldr	r3, [r7, #32]
 800ebb6:	f113 0f1c 	cmn.w	r3, #28
 800ebba:	d001      	beq.n	800ebc0 <lfs_dir_splittingcompact+0x1d0>
                return err;
 800ebbc:	6a3b      	ldr	r3, [r7, #32]
 800ebbe:	e01c      	b.n	800ebfa <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 800ebc0:	6a3b      	ldr	r3, [r7, #32]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d007      	beq.n	800ebd6 <lfs_dir_splittingcompact+0x1e6>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 800ebc6:	4b11      	ldr	r3, [pc, #68]	@ (800ec0c <lfs_dir_splittingcompact+0x21c>)
 800ebc8:	f640 02ac 	movw	r2, #2220	@ 0x8ac
 800ebcc:	4910      	ldr	r1, [pc, #64]	@ (800ec10 <lfs_dir_splittingcompact+0x220>)
 800ebce:	4813      	ldr	r0, [pc, #76]	@ (800ec1c <lfs_dir_splittingcompact+0x22c>)
 800ebd0:	f003 feda 	bl	8012988 <iprintf>
 800ebd4:	e002      	b.n	800ebdc <lfs_dir_splittingcompact+0x1ec>
            } else {
                // duplicate the superblock entry into the new superblock
                end = 1;
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 800ebdc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800ebe0:	9302      	str	r3, [sp, #8]
 800ebe2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800ebe6:	9301      	str	r3, [sp, #4]
 800ebe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ebea:	9300      	str	r3, [sp, #0]
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	687a      	ldr	r2, [r7, #4]
 800ebf0:	68b9      	ldr	r1, [r7, #8]
 800ebf2:	68f8      	ldr	r0, [r7, #12]
 800ebf4:	f7ff fd04 	bl	800e600 <lfs_dir_compact>
 800ebf8:	4603      	mov	r3, r0
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	373c      	adds	r7, #60	@ 0x3c
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd90      	pop	{r4, r7, pc}
 800ec02:	bf00      	nop
 800ec04:	0800e55d 	.word	0x0800e55d
 800ec08:	400ffc00 	.word	0x400ffc00
 800ec0c:	080139a4 	.word	0x080139a4
 800ec10:	08013884 	.word	0x08013884
 800ec14:	08013a7c 	.word	0x08013a7c
 800ec18:	08013aac 	.word	0x08013aac
 800ec1c:	08013adc 	.word	0x08013adc

0800ec20 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 800ec20:	b5b0      	push	{r4, r5, r7, lr}
 800ec22:	b0a6      	sub	sp, #152	@ 0x98
 800ec24:	af0a      	add	r7, sp, #40	@ 0x28
 800ec26:	60f8      	str	r0, [r7, #12]
 800ec28:	60b9      	str	r1, [r7, #8]
 800ec2a:	607a      	str	r2, [r7, #4]
 800ec2c:	603b      	str	r3, [r7, #0]
    int state = 0;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 800ec32:	2300      	movs	r3, #0
 800ec34:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    for (int i = 0; i < attrcount; i++) {
 800ec38:	2300      	movs	r3, #0
 800ec3a:	667b      	str	r3, [r7, #100]	@ 0x64
 800ec3c:	e06d      	b.n	800ed1a <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800ec3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ec40:	00db      	lsls	r3, r3, #3
 800ec42:	683a      	ldr	r2, [r7, #0]
 800ec44:	4413      	add	r3, r2
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7fd fa15 	bl	800c078 <lfs_tag_type3>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	461a      	mov	r2, r3
 800ec52:	f240 4301 	movw	r3, #1025	@ 0x401
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d106      	bne.n	800ec68 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	8a9b      	ldrh	r3, [r3, #20]
 800ec5e:	3301      	adds	r3, #1
 800ec60:	b29a      	uxth	r2, r3
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	829a      	strh	r2, [r3, #20]
 800ec66:	e055      	b.n	800ed14 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 800ec68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ec6a:	00db      	lsls	r3, r3, #3
 800ec6c:	683a      	ldr	r2, [r7, #0]
 800ec6e:	4413      	add	r3, r2
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7fd fa00 	bl	800c078 <lfs_tag_type3>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d114      	bne.n	800ecae <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	8a9b      	ldrh	r3, [r3, #20]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d106      	bne.n	800ec9a <lfs_dir_relocatingcommit+0x7a>
 800ec8c:	4ba4      	ldr	r3, [pc, #656]	@ (800ef20 <lfs_dir_relocatingcommit+0x300>)
 800ec8e:	4aa5      	ldr	r2, [pc, #660]	@ (800ef24 <lfs_dir_relocatingcommit+0x304>)
 800ec90:	f640 01c5 	movw	r1, #2245	@ 0x8c5
 800ec94:	48a4      	ldr	r0, [pc, #656]	@ (800ef28 <lfs_dir_relocatingcommit+0x308>)
 800ec96:	f003 fcc7 	bl	8012628 <__assert_func>
            dir->count -= 1;
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	8a9b      	ldrh	r3, [r3, #20]
 800ec9e:	3b01      	subs	r3, #1
 800eca0:	b29a      	uxth	r2, r3
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 800eca6:	2301      	movs	r3, #1
 800eca8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 800ecac:	e032      	b.n	800ed14 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 800ecae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ecb0:	00db      	lsls	r3, r3, #3
 800ecb2:	683a      	ldr	r2, [r7, #0]
 800ecb4:	4413      	add	r3, r2
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f7fd f9bd 	bl	800c038 <lfs_tag_type1>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ecc4:	d126      	bne.n	800ed14 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 800ecc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ecc8:	00db      	lsls	r3, r3, #3
 800ecca:	683a      	ldr	r2, [r7, #0]
 800eccc:	4413      	add	r3, r2
 800ecce:	685b      	ldr	r3, [r3, #4]
 800ecd0:	681a      	ldr	r2, [r3, #0]
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 800ecd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ecd8:	00db      	lsls	r3, r3, #3
 800ecda:	683a      	ldr	r2, [r7, #0]
 800ecdc:	4413      	add	r3, r2
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	685a      	ldr	r2, [r3, #4]
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 800ece6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ece8:	00db      	lsls	r3, r3, #3
 800ecea:	683a      	ldr	r2, [r7, #0]
 800ecec:	4413      	add	r3, r2
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f7fd f9d1 	bl	800c098 <lfs_tag_chunk>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	f003 0301 	and.w	r3, r3, #1
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	bf14      	ite	ne
 800ed00:	2301      	movne	r3, #1
 800ed02:	2300      	moveq	r3, #0
 800ed04:	b2da      	uxtb	r2, r3
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	3318      	adds	r3, #24
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f7fd f93d 	bl	800bf8e <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 800ed14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ed16:	3301      	adds	r3, #1
 800ed18:	667b      	str	r3, [r7, #100]	@ 0x64
 800ed1a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ed1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ed20:	429a      	cmp	r2, r3
 800ed22:	db8c      	blt.n	800ec3e <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 800ed24:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d02b      	beq.n	800ed84 <lfs_dir_relocatingcommit+0x164>
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	8a9b      	ldrh	r3, [r3, #20]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d127      	bne.n	800ed84 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 800ed34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d106      	bne.n	800ed4a <lfs_dir_relocatingcommit+0x12a>
 800ed3c:	4b7b      	ldr	r3, [pc, #492]	@ (800ef2c <lfs_dir_relocatingcommit+0x30c>)
 800ed3e:	4a79      	ldr	r2, [pc, #484]	@ (800ef24 <lfs_dir_relocatingcommit+0x304>)
 800ed40:	f640 01d2 	movw	r1, #2258	@ 0x8d2
 800ed44:	4878      	ldr	r0, [pc, #480]	@ (800ef28 <lfs_dir_relocatingcommit+0x308>)
 800ed46:	f003 fc6f 	bl	8012628 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ed50:	4619      	mov	r1, r3
 800ed52:	68f8      	ldr	r0, [r7, #12]
 800ed54:	f002 feb0 	bl	8011ab8 <lfs_fs_pred>
 800ed58:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (err && err != LFS_ERR_NOENT) {
 800ed5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d005      	beq.n	800ed6c <lfs_dir_relocatingcommit+0x14c>
 800ed60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ed62:	f113 0f02 	cmn.w	r3, #2
 800ed66:	d001      	beq.n	800ed6c <lfs_dir_relocatingcommit+0x14c>
            return err;
 800ed68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ed6a:	e214      	b.n	800f196 <lfs_dir_relocatingcommit+0x576>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 800ed6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ed6e:	f113 0f02 	cmn.w	r3, #2
 800ed72:	d007      	beq.n	800ed84 <lfs_dir_relocatingcommit+0x164>
 800ed74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ed78:	7ddb      	ldrb	r3, [r3, #23]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d002      	beq.n	800ed84 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 800ed7e:	2302      	movs	r3, #2
 800ed80:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto fixmlist;
 800ed82:	e121      	b.n	800efc8 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	7d9b      	ldrb	r3, [r3, #22]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	f000 80fb 	beq.w	800ef84 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 800ed92:	633b      	str	r3, [r7, #48]	@ 0x30
            .off = dir->off,
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800ed98:	637b      	str	r3, [r7, #52]	@ 0x34
            .ptag = dir->etag,
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 800ed9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800eda0:	f04f 33ff 	mov.w	r3, #4294967295
 800eda4:	63fb      	str	r3, [r7, #60]	@ 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800edaa:	643b      	str	r3, [r7, #64]	@ 0x40
            .end = (lfs->cfg->metadata_max ?
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800edb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d004      	beq.n	800edc0 <lfs_dir_relocatingcommit+0x1a0>
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800edba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800edbc:	3b08      	subs	r3, #8
 800edbe:	e003      	b.n	800edc8 <lfs_dir_relocatingcommit+0x1a8>
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800edc4:	69db      	ldr	r3, [r3, #28]
 800edc6:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 800edc8:	647b      	str	r3, [r7, #68]	@ 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	3318      	adds	r3, #24
 800edce:	4618      	mov	r0, r3
 800edd0:	f7fd f8f7 	bl	800bfc2 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	68da      	ldr	r2, [r3, #12]
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ede0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ede4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int err = lfs_dir_traverse(lfs,
 800ede6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800edea:	9308      	str	r3, [sp, #32]
 800edec:	4b50      	ldr	r3, [pc, #320]	@ (800ef30 <lfs_dir_relocatingcommit+0x310>)
 800edee:	9307      	str	r3, [sp, #28]
 800edf0:	2300      	movs	r3, #0
 800edf2:	9306      	str	r3, [sp, #24]
 800edf4:	2300      	movs	r3, #0
 800edf6:	9305      	str	r3, [sp, #20]
 800edf8:	2300      	movs	r3, #0
 800edfa:	9304      	str	r3, [sp, #16]
 800edfc:	2300      	movs	r3, #0
 800edfe:	9303      	str	r3, [sp, #12]
 800ee00:	2300      	movs	r3, #0
 800ee02:	9302      	str	r3, [sp, #8]
 800ee04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ee08:	9301      	str	r3, [sp, #4]
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	9300      	str	r3, [sp, #0]
 800ee0e:	460b      	mov	r3, r1
 800ee10:	68b9      	ldr	r1, [r7, #8]
 800ee12:	68f8      	ldr	r0, [r7, #12]
 800ee14:	f7fd ff22 	bl	800cc5c <lfs_dir_traverse>
 800ee18:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	3318      	adds	r3, #24
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7fd f8b5 	bl	800bf8e <lfs_pair_fromle32>
        if (err) {
 800ee24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d00b      	beq.n	800ee42 <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800ee2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee2c:	f113 0f1c 	cmn.w	r3, #28
 800ee30:	f000 80aa 	beq.w	800ef88 <lfs_dir_relocatingcommit+0x368>
 800ee34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee36:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800ee3a:	f000 80a5 	beq.w	800ef88 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 800ee3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee40:	e1a9      	b.n	800f196 <lfs_dir_relocatingcommit+0x576>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 800ee42:	f107 031c 	add.w	r3, r7, #28
 800ee46:	2200      	movs	r2, #0
 800ee48:	601a      	str	r2, [r3, #0]
 800ee4a:	605a      	str	r2, [r3, #4]
 800ee4c:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ee54:	f107 031c 	add.w	r3, r7, #28
 800ee58:	4611      	mov	r1, r2
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7fd f967 	bl	800c12e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800ee66:	f107 031c 	add.w	r3, r7, #28
 800ee6a:	4611      	mov	r1, r2
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7fd f95e 	bl	800c12e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800ee78:	f107 031c 	add.w	r3, r7, #28
 800ee7c:	4611      	mov	r1, r2
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7fd f955 	bl	800c12e <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800ee8a:	f023 0303 	bic.w	r3, r3, #3
 800ee8e:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 800ee90:	f107 031c 	add.w	r3, r7, #28
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7fd f96a 	bl	800c16e <lfs_gstate_iszero>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	f083 0301 	eor.w	r3, r3, #1
 800eea0:	b2db      	uxtb	r3, r3
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d027      	beq.n	800eef6 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 800eea6:	f107 031c 	add.w	r3, r7, #28
 800eeaa:	461a      	mov	r2, r3
 800eeac:	68b9      	ldr	r1, [r7, #8]
 800eeae:	68f8      	ldr	r0, [r7, #12]
 800eeb0:	f7fe fea4 	bl	800dbfc <lfs_dir_getgstate>
 800eeb4:	6578      	str	r0, [r7, #84]	@ 0x54
            if (err) {
 800eeb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d001      	beq.n	800eec0 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 800eebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eebe:	e16a      	b.n	800f196 <lfs_dir_relocatingcommit+0x576>
            }

            lfs_gstate_tole32(&delta);
 800eec0:	f107 031c 	add.w	r3, r7, #28
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7fd f9f7 	bl	800c2b8 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 800eeca:	f107 031c 	add.w	r3, r7, #28
 800eece:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800eed2:	4a18      	ldr	r2, [pc, #96]	@ (800ef34 <lfs_dir_relocatingcommit+0x314>)
 800eed4:	68f8      	ldr	r0, [r7, #12]
 800eed6:	f7ff f847 	bl	800df68 <lfs_dir_commitattr>
 800eeda:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 800eedc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d009      	beq.n	800eef6 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800eee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eee4:	f113 0f1c 	cmn.w	r3, #28
 800eee8:	d050      	beq.n	800ef8c <lfs_dir_relocatingcommit+0x36c>
 800eeea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eeec:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800eef0:	d04c      	beq.n	800ef8c <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 800eef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eef4:	e14f      	b.n	800f196 <lfs_dir_relocatingcommit+0x576>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 800eef6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800eefa:	4619      	mov	r1, r3
 800eefc:	68f8      	ldr	r0, [r7, #12]
 800eefe:	f7ff f8b3 	bl	800e068 <lfs_dir_commitcrc>
 800ef02:	6578      	str	r0, [r7, #84]	@ 0x54
        if (err) {
 800ef04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d016      	beq.n	800ef38 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800ef0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef0c:	f113 0f1c 	cmn.w	r3, #28
 800ef10:	d03e      	beq.n	800ef90 <lfs_dir_relocatingcommit+0x370>
 800ef12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef14:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800ef18:	d03a      	beq.n	800ef90 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 800ef1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef1c:	e13b      	b.n	800f196 <lfs_dir_relocatingcommit+0x576>
 800ef1e:	bf00      	nop
 800ef20:	08013b08 	.word	0x08013b08
 800ef24:	080146e4 	.word	0x080146e4
 800ef28:	08013884 	.word	0x08013884
 800ef2c:	08013b18 	.word	0x08013b18
 800ef30:	0800e589 	.word	0x0800e589
 800ef34:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800ef38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef3a:	68fa      	ldr	r2, [r7, #12]
 800ef3c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800ef3e:	6992      	ldr	r2, [r2, #24]
 800ef40:	fbb3 f1f2 	udiv	r1, r3, r2
 800ef44:	fb01 f202 	mul.w	r2, r1, r2
 800ef48:	1a9b      	subs	r3, r3, r2
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d006      	beq.n	800ef5c <lfs_dir_relocatingcommit+0x33c>
 800ef4e:	4b94      	ldr	r3, [pc, #592]	@ (800f1a0 <lfs_dir_relocatingcommit+0x580>)
 800ef50:	4a94      	ldr	r2, [pc, #592]	@ (800f1a4 <lfs_dir_relocatingcommit+0x584>)
 800ef52:	f640 111c 	movw	r1, #2332	@ 0x91c
 800ef56:	4894      	ldr	r0, [pc, #592]	@ (800f1a8 <lfs_dir_relocatingcommit+0x588>)
 800ef58:	f003 fb66 	bl	8012628 <__assert_func>
        dir->off = commit.off;
 800ef5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 800ef62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	68fa      	ldr	r2, [r7, #12]
 800ef6c:	333c      	adds	r3, #60	@ 0x3c
 800ef6e:	3230      	adds	r2, #48	@ 0x30
 800ef70:	ca07      	ldmia	r2, {r0, r1, r2}
 800ef72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	3348      	adds	r3, #72	@ 0x48
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	601a      	str	r2, [r3, #0]
 800ef7e:	605a      	str	r2, [r3, #4]
 800ef80:	609a      	str	r2, [r3, #8]
 800ef82:	e021      	b.n	800efc8 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 800ef84:	bf00      	nop
 800ef86:	e004      	b.n	800ef92 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 800ef88:	bf00      	nop
 800ef8a:	e002      	b.n	800ef92 <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 800ef8c:	bf00      	nop
 800ef8e:	e000      	b.n	800ef92 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 800ef90:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	3310      	adds	r3, #16
 800ef96:	4619      	mov	r1, r3
 800ef98:	68f8      	ldr	r0, [r7, #12]
 800ef9a:	f7fc fb95 	bl	800b6c8 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	8a9b      	ldrh	r3, [r3, #20]
 800efa2:	9302      	str	r3, [sp, #8]
 800efa4:	2300      	movs	r3, #0
 800efa6:	9301      	str	r3, [sp, #4]
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	9300      	str	r3, [sp, #0]
 800efac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800efb0:	683a      	ldr	r2, [r7, #0]
 800efb2:	68b9      	ldr	r1, [r7, #8]
 800efb4:	68f8      	ldr	r0, [r7, #12]
 800efb6:	f7ff fd1b 	bl	800e9f0 <lfs_dir_splittingcompact>
 800efba:	66f8      	str	r0, [r7, #108]	@ 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 800efbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	da01      	bge.n	800efc6 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 800efc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800efc4:	e0e7      	b.n	800f196 <lfs_dir_relocatingcommit+0x576>
    }

    goto fixmlist;
 800efc6:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	3304      	adds	r3, #4
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efda:	663b      	str	r3, [r7, #96]	@ 0x60
 800efdc:	e0d6      	b.n	800f18c <lfs_dir_relocatingcommit+0x56c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 800efde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800efe0:	3308      	adds	r3, #8
 800efe2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800efe6:	4611      	mov	r1, r2
 800efe8:	4618      	mov	r0, r3
 800efea:	f7fc ff79 	bl	800bee0 <lfs_pair_cmp>
 800efee:	4603      	mov	r3, r0
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	f040 80c8 	bne.w	800f186 <lfs_dir_relocatingcommit+0x566>
            d->m = *dir;
 800eff6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eff8:	68ba      	ldr	r2, [r7, #8]
 800effa:	f103 0408 	add.w	r4, r3, #8
 800effe:	4615      	mov	r5, r2
 800f000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f004:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f008:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 800f00c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f00e:	3308      	adds	r3, #8
 800f010:	687a      	ldr	r2, [r7, #4]
 800f012:	429a      	cmp	r2, r3
 800f014:	f000 80ad 	beq.w	800f172 <lfs_dir_relocatingcommit+0x552>
                for (int i = 0; i < attrcount; i++) {
 800f018:	2300      	movs	r3, #0
 800f01a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f01c:	e07f      	b.n	800f11e <lfs_dir_relocatingcommit+0x4fe>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800f01e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f020:	00db      	lsls	r3, r3, #3
 800f022:	683a      	ldr	r2, [r7, #0]
 800f024:	4413      	add	r3, r2
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	4618      	mov	r0, r3
 800f02a:	f7fd f825 	bl	800c078 <lfs_tag_type3>
 800f02e:	4603      	mov	r3, r0
 800f030:	461a      	mov	r2, r3
 800f032:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 800f036:	429a      	cmp	r2, r3
 800f038:	d119      	bne.n	800f06e <lfs_dir_relocatingcommit+0x44e>
                            d->id == lfs_tag_id(attrs[i].tag) &&
 800f03a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f03c:	889c      	ldrh	r4, [r3, #4]
 800f03e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f040:	00db      	lsls	r3, r3, #3
 800f042:	683a      	ldr	r2, [r7, #0]
 800f044:	4413      	add	r3, r2
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	4618      	mov	r0, r3
 800f04a:	f7fd f83f 	bl	800c0cc <lfs_tag_id>
 800f04e:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800f050:	429c      	cmp	r4, r3
 800f052:	d10c      	bne.n	800f06e <lfs_dir_relocatingcommit+0x44e>
                            d->type != LFS_TYPE_DIR) {
 800f054:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f056:	799b      	ldrb	r3, [r3, #6]
                            d->id == lfs_tag_id(attrs[i].tag) &&
 800f058:	2b02      	cmp	r3, #2
 800f05a:	d008      	beq.n	800f06e <lfs_dir_relocatingcommit+0x44e>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 800f05c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f05e:	f04f 32ff 	mov.w	r2, #4294967295
 800f062:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 800f064:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f066:	f04f 32ff 	mov.w	r2, #4294967295
 800f06a:	60da      	str	r2, [r3, #12]
 800f06c:	e054      	b.n	800f118 <lfs_dir_relocatingcommit+0x4f8>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800f06e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f070:	00db      	lsls	r3, r3, #3
 800f072:	683a      	ldr	r2, [r7, #0]
 800f074:	4413      	add	r3, r2
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	4618      	mov	r0, r3
 800f07a:	f7fc fffd 	bl	800c078 <lfs_tag_type3>
 800f07e:	4603      	mov	r3, r0
 800f080:	461a      	mov	r2, r3
 800f082:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 800f086:	429a      	cmp	r2, r3
 800f088:	d11c      	bne.n	800f0c4 <lfs_dir_relocatingcommit+0x4a4>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 800f08a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f08c:	889c      	ldrh	r4, [r3, #4]
 800f08e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f090:	00db      	lsls	r3, r3, #3
 800f092:	683a      	ldr	r2, [r7, #0]
 800f094:	4413      	add	r3, r2
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	4618      	mov	r0, r3
 800f09a:	f7fd f817 	bl	800c0cc <lfs_tag_id>
 800f09e:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800f0a0:	429c      	cmp	r4, r3
 800f0a2:	d90f      	bls.n	800f0c4 <lfs_dir_relocatingcommit+0x4a4>
                        d->id -= 1;
 800f0a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0a6:	889b      	ldrh	r3, [r3, #4]
 800f0a8:	3b01      	subs	r3, #1
 800f0aa:	b29a      	uxth	r2, r3
 800f0ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0ae:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 800f0b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0b2:	799b      	ldrb	r3, [r3, #6]
 800f0b4:	2b02      	cmp	r3, #2
 800f0b6:	d12f      	bne.n	800f118 <lfs_dir_relocatingcommit+0x4f8>
                            ((lfs_dir_t*)d)->pos -= 1;
 800f0b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0bc:	1e5a      	subs	r2, r3, #1
 800f0be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0c0:	629a      	str	r2, [r3, #40]	@ 0x28
                        if (d->type == LFS_TYPE_DIR) {
 800f0c2:	e029      	b.n	800f118 <lfs_dir_relocatingcommit+0x4f8>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800f0c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f0c6:	00db      	lsls	r3, r3, #3
 800f0c8:	683a      	ldr	r2, [r7, #0]
 800f0ca:	4413      	add	r3, r2
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f7fc ffd2 	bl	800c078 <lfs_tag_type3>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	461a      	mov	r2, r3
 800f0d8:	f240 4301 	movw	r3, #1025	@ 0x401
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d11b      	bne.n	800f118 <lfs_dir_relocatingcommit+0x4f8>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 800f0e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0e2:	889c      	ldrh	r4, [r3, #4]
 800f0e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f0e6:	00db      	lsls	r3, r3, #3
 800f0e8:	683a      	ldr	r2, [r7, #0]
 800f0ea:	4413      	add	r3, r2
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7fc ffec 	bl	800c0cc <lfs_tag_id>
 800f0f4:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800f0f6:	429c      	cmp	r4, r3
 800f0f8:	d30e      	bcc.n	800f118 <lfs_dir_relocatingcommit+0x4f8>
                        d->id += 1;
 800f0fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0fc:	889b      	ldrh	r3, [r3, #4]
 800f0fe:	3301      	adds	r3, #1
 800f100:	b29a      	uxth	r2, r3
 800f102:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f104:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 800f106:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f108:	799b      	ldrb	r3, [r3, #6]
 800f10a:	2b02      	cmp	r3, #2
 800f10c:	d104      	bne.n	800f118 <lfs_dir_relocatingcommit+0x4f8>
                            ((lfs_dir_t*)d)->pos += 1;
 800f10e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f112:	1c5a      	adds	r2, r3, #1
 800f114:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f116:	629a      	str	r2, [r3, #40]	@ 0x28
                for (int i = 0; i < attrcount; i++) {
 800f118:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f11a:	3301      	adds	r3, #1
 800f11c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f11e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f120:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f124:	429a      	cmp	r2, r3
 800f126:	f6ff af7a 	blt.w	800f01e <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 800f12a:	e022      	b.n	800f172 <lfs_dir_relocatingcommit+0x552>
                // we split and id is on tail now
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 800f12c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f12e:	f103 0220 	add.w	r2, r3, #32
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	3320      	adds	r3, #32
 800f136:	4619      	mov	r1, r3
 800f138:	4610      	mov	r0, r2
 800f13a:	f7fc fed1 	bl	800bee0 <lfs_pair_cmp>
 800f13e:	4603      	mov	r3, r0
 800f140:	2b00      	cmp	r3, #0
 800f142:	d007      	beq.n	800f154 <lfs_dir_relocatingcommit+0x534>
                    d->id -= d->m.count;
 800f144:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f146:	889a      	ldrh	r2, [r3, #4]
 800f148:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f14a:	8b9b      	ldrh	r3, [r3, #28]
 800f14c:	1ad3      	subs	r3, r2, r3
 800f14e:	b29a      	uxth	r2, r3
 800f150:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f152:	809a      	strh	r2, [r3, #4]
                }
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800f154:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f156:	f103 0108 	add.w	r1, r3, #8
 800f15a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f15c:	3320      	adds	r3, #32
 800f15e:	461a      	mov	r2, r3
 800f160:	68f8      	ldr	r0, [r7, #12]
 800f162:	f7fe fd2f 	bl	800dbc4 <lfs_dir_fetch>
 800f166:	6538      	str	r0, [r7, #80]	@ 0x50
                if (err) {
 800f168:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d001      	beq.n	800f172 <lfs_dir_relocatingcommit+0x552>
                    return err;
 800f16e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f170:	e011      	b.n	800f196 <lfs_dir_relocatingcommit+0x576>
            while (d->id >= d->m.count && d->m.split) {
 800f172:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f174:	889a      	ldrh	r2, [r3, #4]
 800f176:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f178:	8b9b      	ldrh	r3, [r3, #28]
 800f17a:	429a      	cmp	r2, r3
 800f17c:	d303      	bcc.n	800f186 <lfs_dir_relocatingcommit+0x566>
 800f17e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f180:	7fdb      	ldrb	r3, [r3, #31]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d1d2      	bne.n	800f12c <lfs_dir_relocatingcommit+0x50c>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800f186:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	663b      	str	r3, [r7, #96]	@ 0x60
 800f18c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f18e:	2b00      	cmp	r3, #0
 800f190:	f47f af25 	bne.w	800efde <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 800f194:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 800f196:	4618      	mov	r0, r3
 800f198:	3770      	adds	r7, #112	@ 0x70
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bdb0      	pop	{r4, r5, r7, pc}
 800f19e:	bf00      	nop
 800f1a0:	080139f8 	.word	0x080139f8
 800f1a4:	080146e4 	.word	0x080146e4
 800f1a8:	08013884 	.word	0x08013884

0800f1ac <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800f1ac:	b5b0      	push	{r4, r5, r7, lr}
 800f1ae:	b0bc      	sub	sp, #240	@ 0xf0
 800f1b0:	af04      	add	r7, sp, #16
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	607a      	str	r2, [r7, #4]
 800f1b8:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f1c2:	e045      	b.n	800f250 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800f1c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f1c8:	3308      	adds	r3, #8
 800f1ca:	68ba      	ldr	r2, [r7, #8]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d03a      	beq.n	800f246 <lfs_dir_orphaningcommit+0x9a>
 800f1d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f1d4:	3308      	adds	r3, #8
 800f1d6:	68ba      	ldr	r2, [r7, #8]
 800f1d8:	4611      	mov	r1, r2
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7fc fe80 	bl	800bee0 <lfs_pair_cmp>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d12f      	bne.n	800f246 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800f1e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f1ea:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800f1ec:	2b01      	cmp	r3, #1
 800f1ee:	d12a      	bne.n	800f246 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800f1f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f1f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d023      	beq.n	800f246 <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 800f1fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800f20a:	429a      	cmp	r2, r3
 800f20c:	d91b      	bls.n	800f246 <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 800f20e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 800f212:	68f8      	ldr	r0, [r7, #12]
 800f214:	f001 f802 	bl	801021c <lfs_file_outline>
 800f218:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 800f21c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f220:	2b00      	cmp	r3, #0
 800f222:	d002      	beq.n	800f22a <lfs_dir_orphaningcommit+0x7e>
                return err;
 800f224:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f228:	e2ad      	b.n	800f786 <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 800f22a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 800f22e:	68f8      	ldr	r0, [r7, #12]
 800f230:	f001 f816 	bl	8010260 <lfs_file_flush>
 800f234:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 800f238:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d002      	beq.n	800f246 <lfs_dir_orphaningcommit+0x9a>
                return err;
 800f240:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f244:	e29f      	b.n	800f786 <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800f246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f254:	2b00      	cmp	r3, #0
 800f256:	d1b5      	bne.n	800f1c4 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    lfs_mdir_t ldir = *dir;
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800f26e:	461d      	mov	r5, r3
 800f270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f274:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 800f27c:	68ba      	ldr	r2, [r7, #8]
 800f27e:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 800f282:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800f286:	9301      	str	r3, [sp, #4]
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	9300      	str	r3, [sp, #0]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	68f8      	ldr	r0, [r7, #12]
 800f290:	f7ff fcc6 	bl	800ec20 <lfs_dir_relocatingcommit>
 800f294:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 800f298:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	da02      	bge.n	800f2a6 <lfs_dir_orphaningcommit+0xfa>
        return state;
 800f2a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f2a4:	e26f      	b.n	800f786 <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 800f2ac:	4611      	mov	r1, r2
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7fc fe16 	bl	800bee0 <lfs_pair_cmp>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d109      	bne.n	800f2ce <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	461d      	mov	r5, r3
 800f2be:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800f2c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f2c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f2c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f2ca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 800f2ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f2d2:	2b02      	cmp	r3, #2
 800f2d4:	d14a      	bne.n	800f36c <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	3348      	adds	r3, #72	@ 0x48
 800f2da:	461a      	mov	r2, r3
 800f2dc:	68b9      	ldr	r1, [r7, #8]
 800f2de:	68f8      	ldr	r0, [r7, #12]
 800f2e0:	f7fe fc8c 	bl	800dbfc <lfs_dir_getgstate>
 800f2e4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
        if (err) {
 800f2e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d002      	beq.n	800f2f6 <lfs_dir_orphaningcommit+0x14a>
            return err;
 800f2f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f2f4:	e247      	b.n	800f786 <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 800f2f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f2f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        lpair[1] = pdir.pair[1];
 800f2fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f2fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        lfs_pair_tole32(dir->tail);
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	3318      	adds	r3, #24
 800f306:	4618      	mov	r0, r3
 800f308:	f7fc fe5b 	bl	800bfc2 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	7ddb      	ldrb	r3, [r3, #23]
 800f310:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800f314:	051a      	lsls	r2, r3, #20
 800f316:	4bc2      	ldr	r3, [pc, #776]	@ (800f620 <lfs_dir_orphaningcommit+0x474>)
 800f318:	4313      	orrs	r3, r2
 800f31a:	667b      	str	r3, [r7, #100]	@ 0x64
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	3318      	adds	r3, #24
 800f320:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f322:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800f326:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 800f32a:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800f32e:	2000      	movs	r0, #0
 800f330:	9001      	str	r0, [sp, #4]
 800f332:	2001      	movs	r0, #1
 800f334:	9000      	str	r0, [sp, #0]
 800f336:	68f8      	ldr	r0, [r7, #12]
 800f338:	f7ff fc72 	bl	800ec20 <lfs_dir_relocatingcommit>
 800f33c:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	3318      	adds	r3, #24
 800f344:	4618      	mov	r0, r3
 800f346:	f7fc fe22 	bl	800bf8e <lfs_pair_fromle32>
        if (state < 0) {
 800f34a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f34e:	2b00      	cmp	r3, #0
 800f350:	da02      	bge.n	800f358 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 800f352:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f356:	e216      	b.n	800f786 <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 800f358:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800f35c:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 800f360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f364:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f368:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 800f36c:	2300      	movs	r3, #0
 800f36e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    while (state == LFS_OK_RELOCATED) {
 800f372:	e1fc      	b.n	800f76e <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 800f374:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800f378:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f37c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f380:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f384:	4ca7      	ldr	r4, [pc, #668]	@ (800f624 <lfs_dir_orphaningcommit+0x478>)
 800f386:	9403      	str	r4, [sp, #12]
 800f388:	9102      	str	r1, [sp, #8]
 800f38a:	9201      	str	r2, [sp, #4]
 800f38c:	9300      	str	r3, [sp, #0]
 800f38e:	4603      	mov	r3, r0
 800f390:	f640 12a9 	movw	r2, #2473	@ 0x9a9
 800f394:	49a4      	ldr	r1, [pc, #656]	@ (800f628 <lfs_dir_orphaningcommit+0x47c>)
 800f396:	48a5      	ldr	r0, [pc, #660]	@ (800f62c <lfs_dir_orphaningcommit+0x480>)
 800f398:	f003 faf6 	bl	8012988 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 800f39c:	2300      	movs	r3, #0
 800f39e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	f103 0220 	add.w	r2, r3, #32
 800f3a8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800f3ac:	4611      	mov	r1, r2
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f7fc fd96 	bl	800bee0 <lfs_pair_cmp>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d107      	bne.n	800f3ca <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 800f3ba:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 800f3c2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f3d2:	e037      	b.n	800f444 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 800f3d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f3d8:	f103 0208 	add.w	r2, r3, #8
 800f3dc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800f3e0:	4611      	mov	r1, r2
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f7fc fd7c 	bl	800bee0 <lfs_pair_cmp>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d109      	bne.n	800f402 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 800f3ee:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f3f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f3f6:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 800f3f8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800f3fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f400:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 800f402:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f406:	799b      	ldrb	r3, [r3, #6]
 800f408:	2b02      	cmp	r3, #2
 800f40a:	d116      	bne.n	800f43a <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 800f40c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f410:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800f414:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800f418:	4611      	mov	r1, r2
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7fc fd60 	bl	800bee0 <lfs_pair_cmp>
 800f420:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 800f422:	2b00      	cmp	r3, #0
 800f424:	d109      	bne.n	800f43a <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 800f426:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f42a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f42e:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 800f430:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800f434:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f438:	631a      	str	r2, [r3, #48]	@ 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800f43a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f444:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d1c3      	bne.n	800f3d4 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 800f44c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800f450:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800f454:	4619      	mov	r1, r3
 800f456:	68f8      	ldr	r0, [r7, #12]
 800f458:	f002 fbbe 	bl	8011bd8 <lfs_fs_parent>
 800f45c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 800f460:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f464:	2b00      	cmp	r3, #0
 800f466:	da07      	bge.n	800f478 <lfs_dir_orphaningcommit+0x2cc>
 800f468:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f46c:	f113 0f02 	cmn.w	r3, #2
 800f470:	d002      	beq.n	800f478 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 800f472:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f476:	e186      	b.n	800f786 <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 800f478:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f47c:	f113 0f02 	cmn.w	r3, #2
 800f480:	bf14      	ite	ne
 800f482:	2301      	movne	r3, #1
 800f484:	2300      	moveq	r3, #0
 800f486:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        if (tag != LFS_ERR_NOENT) {
 800f48a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f48e:	f113 0f02 	cmn.w	r3, #2
 800f492:	f000 809e 	beq.w	800f5d2 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 800f496:	2101      	movs	r1, #1
 800f498:	68f8      	ldr	r0, [r7, #12]
 800f49a:	f002 fc11 	bl	8011cc0 <lfs_fs_preporphans>
 800f49e:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
            if (err) {
 800f4a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d002      	beq.n	800f4b0 <lfs_dir_orphaningcommit+0x304>
                return err;
 800f4aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800f4ae:	e16a      	b.n	800f786 <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 800f4b0:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800f4b4:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	3330      	adds	r3, #48	@ 0x30
 800f4bc:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800f4c0:	4611      	mov	r1, r2
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7fc feb8 	bl	800c238 <lfs_gstate_hasmovehere>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d02d      	beq.n	800f52a <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f7fc fdfa 	bl	800c0cc <lfs_tag_id>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                LFS_DEBUG("Fixing move while relocating "
 800f4de:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800f4e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f4e2:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	@ 0xca
 800f4e6:	484f      	ldr	r0, [pc, #316]	@ (800f624 <lfs_dir_orphaningcommit+0x478>)
 800f4e8:	9002      	str	r0, [sp, #8]
 800f4ea:	9201      	str	r2, [sp, #4]
 800f4ec:	9300      	str	r3, [sp, #0]
 800f4ee:	460b      	mov	r3, r1
 800f4f0:	f640 12d6 	movw	r2, #2518	@ 0x9d6
 800f4f4:	494c      	ldr	r1, [pc, #304]	@ (800f628 <lfs_dir_orphaningcommit+0x47c>)
 800f4f6:	484e      	ldr	r0, [pc, #312]	@ (800f630 <lfs_dir_orphaningcommit+0x484>)
 800f4f8:	f003 fa46 	bl	8012988 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800f502:	68f8      	ldr	r0, [r7, #12]
 800f504:	f002 fc2c 	bl	8011d60 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 800f508:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7fc fddd 	bl	800c0cc <lfs_tag_id>
 800f512:	4603      	mov	r3, r0
 800f514:	461a      	mov	r2, r3
 800f516:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 800f51a:	4293      	cmp	r3, r2
 800f51c:	d205      	bcs.n	800f52a <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 800f51e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f522:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800f526:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 800f52a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f52c:	657b      	str	r3, [r7, #84]	@ 0x54
 800f52e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f530:	65bb      	str	r3, [r7, #88]	@ 0x58
            lfs_pair_tole32(ldir.pair);
 800f532:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800f536:	4618      	mov	r0, r3
 800f538:	f7fc fd43 	bl	800bfc2 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 800f53c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 800f540:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800f544:	4293      	cmp	r3, r2
 800f546:	d007      	beq.n	800f558 <lfs_dir_orphaningcommit+0x3ac>
 800f548:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 800f54c:	029b      	lsls	r3, r3, #10
 800f54e:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800f552:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800f556:	e000      	b.n	800f55a <lfs_dir_orphaningcommit+0x3ae>
 800f558:	2300      	movs	r3, #0
 800f55a:	647b      	str	r3, [r7, #68]	@ 0x44
 800f55c:	2300      	movs	r3, #0
 800f55e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f560:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f564:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f566:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800f56a:	653b      	str	r3, [r7, #80]	@ 0x50
 800f56c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800f570:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800f574:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800f578:	2000      	movs	r0, #0
 800f57a:	9001      	str	r0, [sp, #4]
 800f57c:	2002      	movs	r0, #2
 800f57e:	9000      	str	r0, [sp, #0]
 800f580:	68f8      	ldr	r0, [r7, #12]
 800f582:	f7ff fb4d 	bl	800ec20 <lfs_dir_relocatingcommit>
 800f586:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800f58a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800f58e:	4618      	mov	r0, r3
 800f590:	f7fc fcfd 	bl	800bf8e <lfs_pair_fromle32>
            if (state < 0) {
 800f594:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f598:	2b00      	cmp	r3, #0
 800f59a:	da02      	bge.n	800f5a2 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 800f59c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f5a0:	e0f1      	b.n	800f786 <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 800f5a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f5a6:	2b01      	cmp	r3, #1
 800f5a8:	d113      	bne.n	800f5d2 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 800f5aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f5ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                lpair[1] = ppair[1];
 800f5b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f5b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                ldir = pdir;
 800f5b6:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800f5ba:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 800f5be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f5c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f5c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f5c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800f5d0:	e0cd      	b.n	800f76e <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 800f5d2:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800f5d6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800f5da:	4619      	mov	r1, r3
 800f5dc:	68f8      	ldr	r0, [r7, #12]
 800f5de:	f002 fa6b 	bl	8011ab8 <lfs_fs_pred>
 800f5e2:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
        if (err && err != LFS_ERR_NOENT) {
 800f5e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d007      	beq.n	800f5fe <lfs_dir_orphaningcommit+0x452>
 800f5ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f5f2:	f113 0f02 	cmn.w	r3, #2
 800f5f6:	d002      	beq.n	800f5fe <lfs_dir_orphaningcommit+0x452>
            return err;
 800f5f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f5fc:	e0c3      	b.n	800f786 <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 800f5fe:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800f602:	2b00      	cmp	r3, #0
 800f604:	d01a      	beq.n	800f63c <lfs_dir_orphaningcommit+0x490>
 800f606:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f60a:	f113 0f02 	cmn.w	r3, #2
 800f60e:	d115      	bne.n	800f63c <lfs_dir_orphaningcommit+0x490>
 800f610:	4b08      	ldr	r3, [pc, #32]	@ (800f634 <lfs_dir_orphaningcommit+0x488>)
 800f612:	4a09      	ldr	r2, [pc, #36]	@ (800f638 <lfs_dir_orphaningcommit+0x48c>)
 800f614:	f640 11f9 	movw	r1, #2553	@ 0x9f9
 800f618:	4803      	ldr	r0, [pc, #12]	@ (800f628 <lfs_dir_orphaningcommit+0x47c>)
 800f61a:	f003 f805 	bl	8012628 <__assert_func>
 800f61e:	bf00      	nop
 800f620:	000ffc08 	.word	0x000ffc08
 800f624:	080139a4 	.word	0x080139a4
 800f628:	08013884 	.word	0x08013884
 800f62c:	08013b20 	.word	0x08013b20
 800f630:	08013b5c 	.word	0x08013b5c
 800f634:	08013ba0 	.word	0x08013ba0
 800f638:	08014700 	.word	0x08014700

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 800f63c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f640:	f113 0f02 	cmn.w	r3, #2
 800f644:	f000 8093 	beq.w	800f76e <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	3330      	adds	r3, #48	@ 0x30
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7fc fdaa 	bl	800c1a6 <lfs_gstate_hasorphans>
 800f652:	4603      	mov	r3, r0
 800f654:	2b00      	cmp	r3, #0
 800f656:	d011      	beq.n	800f67c <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -(int8_t)hasparent);
 800f658:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800f65c:	425b      	negs	r3, r3
 800f65e:	b2db      	uxtb	r3, r3
 800f660:	b25b      	sxtb	r3, r3
 800f662:	4619      	mov	r1, r3
 800f664:	68f8      	ldr	r0, [r7, #12]
 800f666:	f002 fb2b 	bl	8011cc0 <lfs_fs_preporphans>
 800f66a:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                if (err) {
 800f66e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f672:	2b00      	cmp	r3, #0
 800f674:	d002      	beq.n	800f67c <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 800f676:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f67a:	e084      	b.n	800f786 <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 800f67c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800f680:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	3330      	adds	r3, #48	@ 0x30
 800f688:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800f68c:	4611      	mov	r1, r2
 800f68e:	4618      	mov	r0, r3
 800f690:	f7fc fdd2 	bl	800c238 <lfs_gstate_hasmovehere>
 800f694:	4603      	mov	r3, r0
 800f696:	2b00      	cmp	r3, #0
 800f698:	d01c      	beq.n	800f6d4 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7fc fd14 	bl	800c0cc <lfs_tag_id>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                LFS_DEBUG("Fixing move while relocating "
 800f6aa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800f6ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f6ae:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 800f6b2:	4837      	ldr	r0, [pc, #220]	@ (800f790 <lfs_dir_orphaningcommit+0x5e4>)
 800f6b4:	9002      	str	r0, [sp, #8]
 800f6b6:	9201      	str	r2, [sp, #4]
 800f6b8:	9300      	str	r3, [sp, #0]
 800f6ba:	460b      	mov	r3, r1
 800f6bc:	f640 220a 	movw	r2, #2570	@ 0xa0a
 800f6c0:	4934      	ldr	r1, [pc, #208]	@ (800f794 <lfs_dir_orphaningcommit+0x5e8>)
 800f6c2:	4835      	ldr	r0, [pc, #212]	@ (800f798 <lfs_dir_orphaningcommit+0x5ec>)
 800f6c4:	f003 f960 	bl	8012988 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800f6ce:	68f8      	ldr	r0, [r7, #12]
 800f6d0:	f002 fb46 	bl	8011d60 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 800f6d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            lpair[1] = pdir.pair[1];
 800f6da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f6dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            lfs_pair_tole32(ldir.pair);
 800f6e0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7fc fc6c 	bl	800bfc2 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 800f6ea:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 800f6ee:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d007      	beq.n	800f706 <lfs_dir_orphaningcommit+0x55a>
 800f6f6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 800f6fa:	029b      	lsls	r3, r3, #10
 800f6fc:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800f700:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800f704:	e000      	b.n	800f708 <lfs_dir_orphaningcommit+0x55c>
 800f706:	2300      	movs	r3, #0
 800f708:	627b      	str	r3, [r7, #36]	@ 0x24
 800f70a:	2300      	movs	r3, #0
 800f70c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f70e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800f712:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800f716:	051a      	lsls	r2, r3, #20
 800f718:	4b20      	ldr	r3, [pc, #128]	@ (800f79c <lfs_dir_orphaningcommit+0x5f0>)
 800f71a:	4313      	orrs	r3, r2
 800f71c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f71e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800f722:	633b      	str	r3, [r7, #48]	@ 0x30
 800f724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f728:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 800f72c:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800f730:	2000      	movs	r0, #0
 800f732:	9001      	str	r0, [sp, #4]
 800f734:	2002      	movs	r0, #2
 800f736:	9000      	str	r0, [sp, #0]
 800f738:	68f8      	ldr	r0, [r7, #12]
 800f73a:	f7ff fa71 	bl	800ec20 <lfs_dir_relocatingcommit>
 800f73e:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800f742:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800f746:	4618      	mov	r0, r3
 800f748:	f7fc fc21 	bl	800bf8e <lfs_pair_fromle32>
            if (state < 0) {
 800f74c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f750:	2b00      	cmp	r3, #0
 800f752:	da02      	bge.n	800f75a <lfs_dir_orphaningcommit+0x5ae>
                return state;
 800f754:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f758:	e015      	b.n	800f786 <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 800f75a:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800f75e:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 800f762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f766:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f76a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 800f76e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f772:	2b01      	cmp	r3, #1
 800f774:	f43f adfe 	beq.w	800f374 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 800f778:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d001      	beq.n	800f784 <lfs_dir_orphaningcommit+0x5d8>
 800f780:	2303      	movs	r3, #3
 800f782:	e000      	b.n	800f786 <lfs_dir_orphaningcommit+0x5da>
 800f784:	2300      	movs	r3, #0
}
 800f786:	4618      	mov	r0, r3
 800f788:	37e0      	adds	r7, #224	@ 0xe0
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bdb0      	pop	{r4, r5, r7, pc}
 800f78e:	bf00      	nop
 800f790:	080139a4 	.word	0x080139a4
 800f794:	08013884 	.word	0x08013884
 800f798:	08013b5c 	.word	0x08013b5c
 800f79c:	000ffc08 	.word	0x000ffc08

0800f7a0 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b086      	sub	sp, #24
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	60f8      	str	r0, [r7, #12]
 800f7a8:	60b9      	str	r1, [r7, #8]
 800f7aa:	607a      	str	r2, [r7, #4]
 800f7ac:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	687a      	ldr	r2, [r7, #4]
 800f7b2:	68b9      	ldr	r1, [r7, #8]
 800f7b4:	68f8      	ldr	r0, [r7, #12]
 800f7b6:	f7ff fcf9 	bl	800f1ac <lfs_dir_orphaningcommit>
 800f7ba:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	da01      	bge.n	800f7c6 <lfs_dir_commit+0x26>
        return orphans;
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	e00d      	b.n	800f7e2 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d009      	beq.n	800f7e0 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 800f7cc:	2100      	movs	r1, #0
 800f7ce:	68f8      	ldr	r0, [r7, #12]
 800f7d0:	f002 fbe8 	bl	8011fa4 <lfs_fs_deorphan>
 800f7d4:	6138      	str	r0, [r7, #16]
        if (err) {
 800f7d6:	693b      	ldr	r3, [r7, #16]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d001      	beq.n	800f7e0 <lfs_dir_commit+0x40>
            return err;
 800f7dc:	693b      	ldr	r3, [r7, #16]
 800f7de:	e000      	b.n	800f7e2 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 800f7e0:	2300      	movs	r3, #0
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3718      	adds	r7, #24
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}

0800f7ea <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 800f7ea:	b590      	push	{r4, r7, lr}
 800f7ec:	b087      	sub	sp, #28
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	6078      	str	r0, [r7, #4]
 800f7f2:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f7fe:	69db      	ldr	r3, [r3, #28]
 800f800:	3b08      	subs	r3, #8
 800f802:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 800f804:	697a      	ldr	r2, [r7, #20]
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	fbb2 f3f3 	udiv	r3, r2, r3
 800f80c:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d101      	bne.n	800f818 <lfs_ctz_index+0x2e>
        return 0;
 800f814:	2300      	movs	r3, #0
 800f816:	e01c      	b.n	800f852 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	3b01      	subs	r3, #1
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7fb fef3 	bl	800b608 <lfs_popc>
 800f822:	4603      	mov	r3, r0
 800f824:	3302      	adds	r3, #2
 800f826:	009b      	lsls	r3, r3, #2
 800f828:	697a      	ldr	r2, [r7, #20]
 800f82a:	1ad2      	subs	r2, r2, r3
 800f82c:	693b      	ldr	r3, [r7, #16]
 800f82e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f832:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	68fa      	ldr	r2, [r7, #12]
 800f838:	fb02 f303 	mul.w	r3, r2, r3
 800f83c:	697a      	ldr	r2, [r7, #20]
 800f83e:	1ad4      	subs	r4, r2, r3
 800f840:	68f8      	ldr	r0, [r7, #12]
 800f842:	f7fb fee1 	bl	800b608 <lfs_popc>
 800f846:	4603      	mov	r3, r0
 800f848:	009b      	lsls	r3, r3, #2
 800f84a:	1ae2      	subs	r2, r4, r3
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	601a      	str	r2, [r3, #0]
    return i;
 800f850:	68fb      	ldr	r3, [r7, #12]
}
 800f852:	4618      	mov	r0, r3
 800f854:	371c      	adds	r7, #28
 800f856:	46bd      	mov	sp, r7
 800f858:	bd90      	pop	{r4, r7, pc}

0800f85a <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 800f85a:	b590      	push	{r4, r7, lr}
 800f85c:	b08f      	sub	sp, #60	@ 0x3c
 800f85e:	af04      	add	r7, sp, #16
 800f860:	60f8      	str	r0, [r7, #12]
 800f862:	60b9      	str	r1, [r7, #8]
 800f864:	607a      	str	r2, [r7, #4]
 800f866:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800f868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d108      	bne.n	800f880 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 800f86e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f870:	f04f 32ff 	mov.w	r2, #4294967295
 800f874:	601a      	str	r2, [r3, #0]
        *off = 0;
 800f876:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f878:	2200      	movs	r2, #0
 800f87a:	601a      	str	r2, [r3, #0]
        return 0;
 800f87c:	2300      	movs	r3, #0
 800f87e:	e053      	b.n	800f928 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800f880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f882:	3b01      	subs	r3, #1
 800f884:	617b      	str	r3, [r7, #20]
 800f886:	f107 0314 	add.w	r3, r7, #20
 800f88a:	4619      	mov	r1, r3
 800f88c:	68f8      	ldr	r0, [r7, #12]
 800f88e:	f7ff ffac 	bl	800f7ea <lfs_ctz_index>
 800f892:	4603      	mov	r3, r0
 800f894:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 800f896:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800f89a:	4619      	mov	r1, r3
 800f89c:	68f8      	ldr	r0, [r7, #12]
 800f89e:	f7ff ffa4 	bl	800f7ea <lfs_ctz_index>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	623b      	str	r3, [r7, #32]

    while (current > target) {
 800f8a6:	e034      	b.n	800f912 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 800f8a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8aa:	6a3b      	ldr	r3, [r7, #32]
 800f8ac:	1ad3      	subs	r3, r2, r3
 800f8ae:	3301      	adds	r3, #1
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f7fb fe8a 	bl	800b5ca <lfs_npw2>
 800f8b6:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 800f8b8:	1e5c      	subs	r4, r3, #1
 800f8ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f8bc:	f7fb fe95 	bl	800b5ea <lfs_ctz>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	4619      	mov	r1, r3
 800f8c4:	4620      	mov	r0, r4
 800f8c6:	f7fb fe49 	bl	800b55c <lfs_min>
 800f8ca:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	69fa      	ldr	r2, [r7, #28]
 800f8d0:	0092      	lsls	r2, r2, #2
 800f8d2:	2104      	movs	r1, #4
 800f8d4:	9103      	str	r1, [sp, #12]
 800f8d6:	4639      	mov	r1, r7
 800f8d8:	9102      	str	r1, [sp, #8]
 800f8da:	9201      	str	r2, [sp, #4]
 800f8dc:	9300      	str	r3, [sp, #0]
 800f8de:	2304      	movs	r3, #4
 800f8e0:	687a      	ldr	r2, [r7, #4]
 800f8e2:	68b9      	ldr	r1, [r7, #8]
 800f8e4:	68f8      	ldr	r0, [r7, #12]
 800f8e6:	f7fb ff15 	bl	800b714 <lfs_bd_read>
 800f8ea:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f7fb fea4 	bl	800b63c <lfs_fromle32>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	603b      	str	r3, [r7, #0]
        if (err) {
 800f8f8:	69bb      	ldr	r3, [r7, #24]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d001      	beq.n	800f902 <lfs_ctz_find+0xa8>
            return err;
 800f8fe:	69bb      	ldr	r3, [r7, #24]
 800f900:	e012      	b.n	800f928 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 800f902:	2201      	movs	r2, #1
 800f904:	69fb      	ldr	r3, [r7, #28]
 800f906:	fa02 f303 	lsl.w	r3, r2, r3
 800f90a:	461a      	mov	r2, r3
 800f90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f90e:	1a9b      	subs	r3, r3, r2
 800f910:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current > target) {
 800f912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f914:	6a3b      	ldr	r3, [r7, #32]
 800f916:	429a      	cmp	r2, r3
 800f918:	d8c6      	bhi.n	800f8a8 <lfs_ctz_find+0x4e>
    }

    *block = head;
 800f91a:	683a      	ldr	r2, [r7, #0]
 800f91c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f91e:	601a      	str	r2, [r3, #0]
    *off = pos;
 800f920:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f922:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f924:	601a      	str	r2, [r3, #0]
    return 0;
 800f926:	2300      	movs	r3, #0
}
 800f928:	4618      	mov	r0, r3
 800f92a:	372c      	adds	r7, #44	@ 0x2c
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd90      	pop	{r4, r7, pc}

0800f930 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 800f930:	b580      	push	{r7, lr}
 800f932:	b092      	sub	sp, #72	@ 0x48
 800f934:	af04      	add	r7, sp, #16
 800f936:	60f8      	str	r0, [r7, #12]
 800f938:	60b9      	str	r1, [r7, #8]
 800f93a:	607a      	str	r2, [r7, #4]
 800f93c:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800f93e:	f107 0320 	add.w	r3, r7, #32
 800f942:	4619      	mov	r1, r3
 800f944:	68f8      	ldr	r0, [r7, #12]
 800f946:	f7fc feb9 	bl	800c6bc <lfs_alloc>
 800f94a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (err) {
 800f94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d001      	beq.n	800f956 <lfs_ctz_extend+0x26>
            return err;
 800f952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f954:	e0eb      	b.n	800fb2e <lfs_ctz_extend+0x1fe>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 800f956:	6a3b      	ldr	r3, [r7, #32]
 800f958:	4619      	mov	r1, r3
 800f95a:	68f8      	ldr	r0, [r7, #12]
 800f95c:	f7fc fa1a 	bl	800bd94 <lfs_bd_erase>
 800f960:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (err) {
 800f962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f964:	2b00      	cmp	r3, #0
 800f966:	d006      	beq.n	800f976 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 800f968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f96a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f96e:	f000 80cd 	beq.w	800fb0c <lfs_ctz_extend+0x1dc>
                    goto relocate;
                }
                return err;
 800f972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f974:	e0db      	b.n	800fb2e <lfs_ctz_extend+0x1fe>
            }

            if (size == 0) {
 800f976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d107      	bne.n	800f98c <lfs_ctz_extend+0x5c>
                *block = nblock;
 800f97c:	6a3a      	ldr	r2, [r7, #32]
 800f97e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f980:	601a      	str	r2, [r3, #0]
                *off = 0;
 800f982:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f984:	2200      	movs	r2, #0
 800f986:	601a      	str	r2, [r3, #0]
                return 0;
 800f988:	2300      	movs	r3, #0
 800f98a:	e0d0      	b.n	800fb2e <lfs_ctz_extend+0x1fe>
            }

            lfs_size_t noff = size - 1;
 800f98c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f98e:	3b01      	subs	r3, #1
 800f990:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 800f992:	f107 031c 	add.w	r3, r7, #28
 800f996:	4619      	mov	r1, r3
 800f998:	68f8      	ldr	r0, [r7, #12]
 800f99a:	f7ff ff26 	bl	800f7ea <lfs_ctz_index>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	62bb      	str	r3, [r7, #40]	@ 0x28
            noff = noff + 1;
 800f9a2:	69fb      	ldr	r3, [r7, #28]
 800f9a4:	3301      	adds	r3, #1
 800f9a6:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f9ac:	69da      	ldr	r2, [r3, #28]
 800f9ae:	69fb      	ldr	r3, [r7, #28]
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d046      	beq.n	800fa42 <lfs_ctz_extend+0x112>
                for (lfs_off_t i = 0; i < noff; i++) {
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800f9b8:	e037      	b.n	800fa2a <lfs_ctz_extend+0xfa>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 800f9ba:	69fa      	ldr	r2, [r7, #28]
 800f9bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9be:	1ad2      	subs	r2, r2, r3
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	9303      	str	r3, [sp, #12]
 800f9c4:	f107 0317 	add.w	r3, r7, #23
 800f9c8:	9302      	str	r3, [sp, #8]
 800f9ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9cc:	9301      	str	r3, [sp, #4]
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	9300      	str	r3, [sp, #0]
 800f9d2:	4613      	mov	r3, r2
 800f9d4:	687a      	ldr	r2, [r7, #4]
 800f9d6:	2100      	movs	r1, #0
 800f9d8:	68f8      	ldr	r0, [r7, #12]
 800f9da:	f7fb fe9b 	bl	800b714 <lfs_bd_read>
 800f9de:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 800f9e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d001      	beq.n	800f9ea <lfs_ctz_extend+0xba>
                        return err;
 800f9e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9e8:	e01e      	b.n	800fa28 <lfs_ctz_extend+0xf8>
                    }

                    err = lfs_bd_prog(lfs,
 800f9ea:	6a3b      	ldr	r3, [r7, #32]
 800f9ec:	2201      	movs	r2, #1
 800f9ee:	9203      	str	r2, [sp, #12]
 800f9f0:	f107 0217 	add.w	r2, r7, #23
 800f9f4:	9202      	str	r2, [sp, #8]
 800f9f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f9f8:	9201      	str	r2, [sp, #4]
 800f9fa:	9300      	str	r3, [sp, #0]
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	687a      	ldr	r2, [r7, #4]
 800fa00:	68b9      	ldr	r1, [r7, #8]
 800fa02:	68f8      	ldr	r0, [r7, #12]
 800fa04:	f7fc f918 	bl	800bc38 <lfs_bd_prog>
 800fa08:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 800fa0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d007      	beq.n	800fa20 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 800fa10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa12:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800fa16:	d101      	bne.n	800fa1c <lfs_ctz_extend+0xec>
                            goto relocate;
 800fa18:	bf00      	nop
                    goto relocate;
 800fa1a:	e07a      	b.n	800fb12 <lfs_ctz_extend+0x1e2>
                        }
                        return err;
 800fa1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa1e:	e003      	b.n	800fa28 <lfs_ctz_extend+0xf8>
                for (lfs_off_t i = 0; i < noff; i++) {
 800fa20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa22:	3301      	adds	r3, #1
 800fa24:	637b      	str	r3, [r7, #52]	@ 0x34
 800fa26:	e000      	b.n	800fa2a <lfs_ctz_extend+0xfa>
                return err;
 800fa28:	e081      	b.n	800fb2e <lfs_ctz_extend+0x1fe>
                for (lfs_off_t i = 0; i < noff; i++) {
 800fa2a:	69fb      	ldr	r3, [r7, #28]
 800fa2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d3c3      	bcc.n	800f9ba <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 800fa32:	6a3a      	ldr	r2, [r7, #32]
 800fa34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa36:	601a      	str	r2, [r3, #0]
                *off = noff;
 800fa38:	69fa      	ldr	r2, [r7, #28]
 800fa3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fa3c:	601a      	str	r2, [r3, #0]
                return 0;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	e075      	b.n	800fb2e <lfs_ctz_extend+0x1fe>
            }

            // append block
            index += 1;
 800fa42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa44:	3301      	adds	r3, #1
 800fa46:	62bb      	str	r3, [r7, #40]	@ 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 800fa48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa4a:	f7fb fdce 	bl	800b5ea <lfs_ctz>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	3301      	adds	r3, #1
 800fa52:	627b      	str	r3, [r7, #36]	@ 0x24
            lfs_block_t nhead = head;
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 800fa58:	2300      	movs	r3, #0
 800fa5a:	633b      	str	r3, [r7, #48]	@ 0x30
 800fa5c:	e049      	b.n	800faf2 <lfs_ctz_extend+0x1c2>
                nhead = lfs_tole32(nhead);
 800fa5e:	69bb      	ldr	r3, [r7, #24]
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7fb fdf6 	bl	800b652 <lfs_tole32>
 800fa66:	4603      	mov	r3, r0
 800fa68:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 800fa6a:	6a3b      	ldr	r3, [r7, #32]
 800fa6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa6e:	0092      	lsls	r2, r2, #2
 800fa70:	2104      	movs	r1, #4
 800fa72:	9103      	str	r1, [sp, #12]
 800fa74:	f107 0118 	add.w	r1, r7, #24
 800fa78:	9102      	str	r1, [sp, #8]
 800fa7a:	9201      	str	r2, [sp, #4]
 800fa7c:	9300      	str	r3, [sp, #0]
 800fa7e:	2301      	movs	r3, #1
 800fa80:	687a      	ldr	r2, [r7, #4]
 800fa82:	68b9      	ldr	r1, [r7, #8]
 800fa84:	68f8      	ldr	r0, [r7, #12]
 800fa86:	f7fc f8d7 	bl	800bc38 <lfs_bd_prog>
 800fa8a:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 800fa8c:	69bb      	ldr	r3, [r7, #24]
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f7fb fdd4 	bl	800b63c <lfs_fromle32>
 800fa94:	4603      	mov	r3, r0
 800fa96:	61bb      	str	r3, [r7, #24]
                if (err) {
 800fa98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d005      	beq.n	800faaa <lfs_ctz_extend+0x17a>
                    if (err == LFS_ERR_CORRUPT) {
 800fa9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faa0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800faa4:	d034      	beq.n	800fb10 <lfs_ctz_extend+0x1e0>
                        goto relocate;
                    }
                    return err;
 800faa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faa8:	e041      	b.n	800fb2e <lfs_ctz_extend+0x1fe>
                }

                if (i != skips-1) {
 800faaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faac:	3b01      	subs	r3, #1
 800faae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fab0:	429a      	cmp	r2, r3
 800fab2:	d01b      	beq.n	800faec <lfs_ctz_extend+0x1bc>
                    err = lfs_bd_read(lfs,
 800fab4:	69bb      	ldr	r3, [r7, #24]
 800fab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fab8:	0092      	lsls	r2, r2, #2
 800faba:	2104      	movs	r1, #4
 800fabc:	9103      	str	r1, [sp, #12]
 800fabe:	f107 0118 	add.w	r1, r7, #24
 800fac2:	9102      	str	r1, [sp, #8]
 800fac4:	9201      	str	r2, [sp, #4]
 800fac6:	9300      	str	r3, [sp, #0]
 800fac8:	2304      	movs	r3, #4
 800faca:	687a      	ldr	r2, [r7, #4]
 800facc:	2100      	movs	r1, #0
 800face:	68f8      	ldr	r0, [r7, #12]
 800fad0:	f7fb fe20 	bl	800b714 <lfs_bd_read>
 800fad4:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 800fad6:	69bb      	ldr	r3, [r7, #24]
 800fad8:	4618      	mov	r0, r3
 800fada:	f7fb fdaf 	bl	800b63c <lfs_fromle32>
 800fade:	4603      	mov	r3, r0
 800fae0:	61bb      	str	r3, [r7, #24]
                    if (err) {
 800fae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d001      	beq.n	800faec <lfs_ctz_extend+0x1bc>
                        return err;
 800fae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faea:	e020      	b.n	800fb2e <lfs_ctz_extend+0x1fe>
            for (lfs_off_t i = 0; i < skips; i++) {
 800faec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faee:	3301      	adds	r3, #1
 800faf0:	633b      	str	r3, [r7, #48]	@ 0x30
 800faf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800faf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d3b1      	bcc.n	800fa5e <lfs_ctz_extend+0x12e>
                    }
                }
            }

            *block = nblock;
 800fafa:	6a3a      	ldr	r2, [r7, #32]
 800fafc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fafe:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 800fb00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb02:	009a      	lsls	r2, r3, #2
 800fb04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fb06:	601a      	str	r2, [r3, #0]
            return 0;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	e010      	b.n	800fb2e <lfs_ctz_extend+0x1fe>
                    goto relocate;
 800fb0c:	bf00      	nop
 800fb0e:	e000      	b.n	800fb12 <lfs_ctz_extend+0x1e2>
                        goto relocate;
 800fb10:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800fb12:	6a3b      	ldr	r3, [r7, #32]
 800fb14:	4a08      	ldr	r2, [pc, #32]	@ (800fb38 <lfs_ctz_extend+0x208>)
 800fb16:	9200      	str	r2, [sp, #0]
 800fb18:	f640 32c3 	movw	r2, #3011	@ 0xbc3
 800fb1c:	4907      	ldr	r1, [pc, #28]	@ (800fb3c <lfs_ctz_extend+0x20c>)
 800fb1e:	4808      	ldr	r0, [pc, #32]	@ (800fb40 <lfs_ctz_extend+0x210>)
 800fb20:	f002 ff32 	bl	8012988 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 800fb24:	68b9      	ldr	r1, [r7, #8]
 800fb26:	68f8      	ldr	r0, [r7, #12]
 800fb28:	f7fb fdce 	bl	800b6c8 <lfs_cache_drop>
    while (true) {
 800fb2c:	e707      	b.n	800f93e <lfs_ctz_extend+0xe>
    }
}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	3738      	adds	r7, #56	@ 0x38
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}
 800fb36:	bf00      	nop
 800fb38:	080139a4 	.word	0x080139a4
 800fb3c:	08013884 	.word	0x08013884
 800fb40:	08013a20 	.word	0x08013a20

0800fb44 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b090      	sub	sp, #64	@ 0x40
 800fb48:	af04      	add	r7, sp, #16
 800fb4a:	60f8      	str	r0, [r7, #12]
 800fb4c:	60b9      	str	r1, [r7, #8]
 800fb4e:	607a      	str	r2, [r7, #4]
 800fb50:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800fb52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d101      	bne.n	800fb5c <lfs_ctz_traverse+0x18>
        return 0;
 800fb58:	2300      	movs	r3, #0
 800fb5a:	e06b      	b.n	800fc34 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800fb5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb5e:	3b01      	subs	r3, #1
 800fb60:	61fb      	str	r3, [r7, #28]
 800fb62:	f107 031c 	add.w	r3, r7, #28
 800fb66:	4619      	mov	r1, r3
 800fb68:	68f8      	ldr	r0, [r7, #12]
 800fb6a:	f7ff fe3e 	bl	800f7ea <lfs_ctz_index>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (true) {
        int err = cb(data, head);
 800fb72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb74:	6839      	ldr	r1, [r7, #0]
 800fb76:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800fb78:	4798      	blx	r3
 800fb7a:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 800fb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d001      	beq.n	800fb86 <lfs_ctz_traverse+0x42>
            return err;
 800fb82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb84:	e056      	b.n	800fc34 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 800fb86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d101      	bne.n	800fb90 <lfs_ctz_traverse+0x4c>
            return 0;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	e051      	b.n	800fc34 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 800fb90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb92:	f003 0301 	and.w	r3, r3, #1
 800fb96:	f1c3 0302 	rsb	r3, r3, #2
 800fb9a:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 800fb9c:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 800fb9e:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 800fba0:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 800fba2:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 800fba4:	9303      	str	r3, [sp, #12]
 800fba6:	f107 0314 	add.w	r3, r7, #20
 800fbaa:	9302      	str	r3, [sp, #8]
 800fbac:	2300      	movs	r3, #0
 800fbae:	9301      	str	r3, [sp, #4]
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	9300      	str	r3, [sp, #0]
 800fbb4:	4613      	mov	r3, r2
 800fbb6:	687a      	ldr	r2, [r7, #4]
 800fbb8:	68b9      	ldr	r1, [r7, #8]
 800fbba:	68f8      	ldr	r0, [r7, #12]
 800fbbc:	f7fb fdaa 	bl	800b714 <lfs_bd_read>
 800fbc0:	6278      	str	r0, [r7, #36]	@ 0x24
        heads[0] = lfs_fromle32(heads[0]);
 800fbc2:	697b      	ldr	r3, [r7, #20]
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7fb fd39 	bl	800b63c <lfs_fromle32>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 800fbce:	69bb      	ldr	r3, [r7, #24]
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f7fb fd33 	bl	800b63c <lfs_fromle32>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	61bb      	str	r3, [r7, #24]
        if (err) {
 800fbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d001      	beq.n	800fbe4 <lfs_ctz_traverse+0xa0>
            return err;
 800fbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbe2:	e027      	b.n	800fc34 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fbe8:	e012      	b.n	800fc10 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 800fbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbec:	009b      	lsls	r3, r3, #2
 800fbee:	3330      	adds	r3, #48	@ 0x30
 800fbf0:	443b      	add	r3, r7
 800fbf2:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800fbf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbf8:	4611      	mov	r1, r2
 800fbfa:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800fbfc:	4798      	blx	r3
 800fbfe:	6278      	str	r0, [r7, #36]	@ 0x24
            if (err) {
 800fc00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d001      	beq.n	800fc0a <lfs_ctz_traverse+0xc6>
                return err;
 800fc06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc08:	e014      	b.n	800fc34 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 800fc0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc0c:	3301      	adds	r3, #1
 800fc0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fc10:	6a3b      	ldr	r3, [r7, #32]
 800fc12:	3b01      	subs	r3, #1
 800fc14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc16:	429a      	cmp	r2, r3
 800fc18:	dbe7      	blt.n	800fbea <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 800fc1a:	6a3b      	ldr	r3, [r7, #32]
 800fc1c:	3b01      	subs	r3, #1
 800fc1e:	009b      	lsls	r3, r3, #2
 800fc20:	3330      	adds	r3, #48	@ 0x30
 800fc22:	443b      	add	r3, r7
 800fc24:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800fc28:	603b      	str	r3, [r7, #0]
        index -= count;
 800fc2a:	6a3b      	ldr	r3, [r7, #32]
 800fc2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc2e:	1ad3      	subs	r3, r2, r3
 800fc30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (true) {
 800fc32:	e79e      	b.n	800fb72 <lfs_ctz_traverse+0x2e>
    }
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	3730      	adds	r7, #48	@ 0x30
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}

0800fc3c <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 800fc3c:	b5b0      	push	{r4, r5, r7, lr}
 800fc3e:	b09a      	sub	sp, #104	@ 0x68
 800fc40:	af02      	add	r7, sp, #8
 800fc42:	60f8      	str	r0, [r7, #12]
 800fc44:	60b9      	str	r1, [r7, #8]
 800fc46:	607a      	str	r2, [r7, #4]
 800fc48:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	f003 0302 	and.w	r3, r3, #2
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d008      	beq.n	800fc66 <lfs_file_opencfg_+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 800fc54:	68f8      	ldr	r0, [r7, #12]
 800fc56:	f002 fb55 	bl	8012304 <lfs_fs_forceconsistency>
 800fc5a:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 800fc5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d001      	beq.n	800fc66 <lfs_file_opencfg_+0x2a>
            return err;
 800fc62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc64:	e1bf      	b.n	800ffe6 <lfs_file_opencfg_+0x3aa>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800fc6a:	651a      	str	r2, [r3, #80]	@ 0x50
    file->flags = flags;
 800fc6c:	683a      	ldr	r2, [r7, #0]
 800fc6e:	68bb      	ldr	r3, [r7, #8]
 800fc70:	631a      	str	r2, [r3, #48]	@ 0x30
    file->pos = 0;
 800fc72:	68bb      	ldr	r3, [r7, #8]
 800fc74:	2200      	movs	r2, #0
 800fc76:	635a      	str	r2, [r3, #52]	@ 0x34
    file->off = 0;
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	63da      	str	r2, [r3, #60]	@ 0x3c
    file->cache.buffer = NULL;
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	2200      	movs	r2, #0
 800fc82:	64da      	str	r2, [r3, #76]	@ 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	f103 0108 	add.w	r1, r3, #8
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	3304      	adds	r3, #4
 800fc8e:	1d3a      	adds	r2, r7, #4
 800fc90:	68f8      	ldr	r0, [r7, #12]
 800fc92:	f7fe f82f 	bl	800dcf4 <lfs_dir_find>
 800fc96:	65b8      	str	r0, [r7, #88]	@ 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && lfs_path_islast(path))) {
 800fc98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	da10      	bge.n	800fcc0 <lfs_file_opencfg_+0x84>
 800fc9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fca0:	f113 0f02 	cmn.w	r3, #2
 800fca4:	d109      	bne.n	800fcba <lfs_file_opencfg_+0x7e>
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f7fc f8b5 	bl	800be18 <lfs_path_islast>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	f083 0301 	eor.w	r3, r3, #1
 800fcb4:	b2db      	uxtb	r3, r3
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d002      	beq.n	800fcc0 <lfs_file_opencfg_+0x84>
        err = tag;
 800fcba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fcbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 800fcbe:	e187      	b.n	800ffd0 <lfs_file_opencfg_+0x394>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	2201      	movs	r2, #1
 800fcc4:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 800fcc6:	68b9      	ldr	r1, [r7, #8]
 800fcc8:	68f8      	ldr	r0, [r7, #12]
 800fcca:	f7fc fc24 	bl	800c516 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 800fcce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fcd0:	f113 0f02 	cmn.w	r3, #2
 800fcd4:	d159      	bne.n	800fd8a <lfs_file_opencfg_+0x14e>
        if (!(flags & LFS_O_CREAT)) {
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d103      	bne.n	800fce8 <lfs_file_opencfg_+0xac>
            err = LFS_ERR_NOENT;
 800fce0:	f06f 0301 	mvn.w	r3, #1
 800fce4:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 800fce6:	e173      	b.n	800ffd0 <lfs_file_opencfg_+0x394>
        }

        // don't allow trailing slashes
        if (lfs_path_isdir(path)) {
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7fc f8b4 	bl	800be58 <lfs_path_isdir>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d003      	beq.n	800fcfe <lfs_file_opencfg_+0xc2>
            err = LFS_ERR_NOTDIR;
 800fcf6:	f06f 0313 	mvn.w	r3, #19
 800fcfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 800fcfc:	e168      	b.n	800ffd0 <lfs_file_opencfg_+0x394>
        }

        // check that name fits
        lfs_size_t nlen = lfs_path_namelen(path);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	4618      	mov	r0, r3
 800fd02:	f7fc f879 	bl	800bdf8 <lfs_path_namelen>
 800fd06:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (nlen > lfs->name_max) {
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fd0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	d903      	bls.n	800fd1a <lfs_file_opencfg_+0xde>
            err = LFS_ERR_NAMETOOLONG;
 800fd12:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 800fd16:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 800fd18:	e15a      	b.n	800ffd0 <lfs_file_opencfg_+0x394>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	f103 0108 	add.w	r1, r3, #8
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	889b      	ldrh	r3, [r3, #4]
 800fd24:	029b      	lsls	r3, r3, #10
 800fd26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fd2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fd2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fd30:	2300      	movs	r3, #0
 800fd32:	633b      	str	r3, [r7, #48]	@ 0x30
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	889b      	ldrh	r3, [r3, #4]
 800fd38:	029a      	lsls	r2, r3, #10
 800fd3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd3c:	4313      	orrs	r3, r2
 800fd3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fd42:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	889b      	ldrh	r3, [r3, #4]
 800fd4c:	029b      	lsls	r3, r3, #10
 800fd4e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fd52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fd56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fd58:	2300      	movs	r3, #0
 800fd5a:	643b      	str	r3, [r7, #64]	@ 0x40
 800fd5c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800fd60:	2303      	movs	r3, #3
 800fd62:	68f8      	ldr	r0, [r7, #12]
 800fd64:	f7ff fd1c 	bl	800f7a0 <lfs_dir_commit>
 800fd68:	65f8      	str	r0, [r7, #92]	@ 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 800fd6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fd6c:	f113 0f1c 	cmn.w	r3, #28
 800fd70:	d001      	beq.n	800fd76 <lfs_file_opencfg_+0x13a>
 800fd72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fd74:	e001      	b.n	800fd7a <lfs_file_opencfg_+0x13e>
 800fd76:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 800fd7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (err) {
 800fd7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	f040 8125 	bne.w	800ffce <lfs_file_opencfg_+0x392>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 800fd84:	4b9a      	ldr	r3, [pc, #616]	@ (800fff0 <lfs_file_opencfg_+0x3b4>)
 800fd86:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fd88:	e044      	b.n	800fe14 <lfs_file_opencfg_+0x1d8>
    } else if (flags & LFS_O_EXCL) {
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d003      	beq.n	800fd9c <lfs_file_opencfg_+0x160>
        err = LFS_ERR_EXIST;
 800fd94:	f06f 0310 	mvn.w	r3, #16
 800fd98:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 800fd9a:	e119      	b.n	800ffd0 <lfs_file_opencfg_+0x394>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 800fd9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7fc f96a 	bl	800c078 <lfs_tag_type3>
 800fda4:	4603      	mov	r3, r0
 800fda6:	2b01      	cmp	r3, #1
 800fda8:	d003      	beq.n	800fdb2 <lfs_file_opencfg_+0x176>
        err = LFS_ERR_ISDIR;
 800fdaa:	f06f 0314 	mvn.w	r3, #20
 800fdae:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 800fdb0:	e10e      	b.n	800ffd0 <lfs_file_opencfg_+0x394>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d00e      	beq.n	800fdda <lfs_file_opencfg_+0x19e>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	889b      	ldrh	r3, [r3, #4]
 800fdc0:	029b      	lsls	r3, r3, #10
 800fdc2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fdc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fdca:	65bb      	str	r3, [r7, #88]	@ 0x58
        file->flags |= LFS_F_DIRTY;
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdd0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	631a      	str	r2, [r3, #48]	@ 0x30
 800fdd8:	e01c      	b.n	800fe14 <lfs_file_opencfg_+0x1d8>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	889b      	ldrh	r3, [r3, #4]
 800fde4:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800fde6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fdea:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800fdee:	68ba      	ldr	r2, [r7, #8]
 800fdf0:	3228      	adds	r2, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800fdf2:	9200      	str	r2, [sp, #0]
 800fdf4:	4a7f      	ldr	r2, [pc, #508]	@ (800fff4 <lfs_file_opencfg_+0x3b8>)
 800fdf6:	68f8      	ldr	r0, [r7, #12]
 800fdf8:	f7fc fdde 	bl	800c9b8 <lfs_dir_get>
 800fdfc:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (tag < 0) {
 800fdfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	da02      	bge.n	800fe0a <lfs_file_opencfg_+0x1ce>
            err = tag;
 800fe04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe06:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 800fe08:	e0e2      	b.n	800ffd0 <lfs_file_opencfg_+0x394>
        }
        lfs_ctz_fromle32(&file->ctz);
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	3328      	adds	r3, #40	@ 0x28
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7fc faa2 	bl	800c358 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800fe14:	2300      	movs	r3, #0
 800fe16:	657b      	str	r3, [r7, #84]	@ 0x54
 800fe18:	e063      	b.n	800fee2 <lfs_file_opencfg_+0x2a6>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe1e:	f003 0301 	and.w	r3, r3, #1
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d03c      	beq.n	800fea0 <lfs_file_opencfg_+0x264>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe30:	6859      	ldr	r1, [r3, #4]
 800fe32:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fe34:	4613      	mov	r3, r2
 800fe36:	005b      	lsls	r3, r3, #1
 800fe38:	4413      	add	r3, r2
 800fe3a:	009b      	lsls	r3, r3, #2
 800fe3c:	440b      	add	r3, r1
 800fe3e:	781b      	ldrb	r3, [r3, #0]
 800fe40:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800fe44:	051a      	lsls	r2, r3, #20
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	889b      	ldrh	r3, [r3, #4]
 800fe4a:	029b      	lsls	r3, r3, #10
 800fe4c:	ea42 0103 	orr.w	r1, r2, r3
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe54:	6858      	ldr	r0, [r3, #4]
 800fe56:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fe58:	4613      	mov	r3, r2
 800fe5a:	005b      	lsls	r3, r3, #1
 800fe5c:	4413      	add	r3, r2
 800fe5e:	009b      	lsls	r3, r3, #2
 800fe60:	4403      	add	r3, r0
 800fe62:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800fe64:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe6c:	6859      	ldr	r1, [r3, #4]
 800fe6e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fe70:	4613      	mov	r3, r2
 800fe72:	005b      	lsls	r3, r3, #1
 800fe74:	4413      	add	r3, r2
 800fe76:	009b      	lsls	r3, r3, #2
 800fe78:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800fe7a:	685b      	ldr	r3, [r3, #4]
 800fe7c:	9300      	str	r3, [sp, #0]
 800fe7e:	4603      	mov	r3, r0
 800fe80:	4a5d      	ldr	r2, [pc, #372]	@ (800fff8 <lfs_file_opencfg_+0x3bc>)
 800fe82:	4621      	mov	r1, r4
 800fe84:	68f8      	ldr	r0, [r7, #12]
 800fe86:	f7fc fd97 	bl	800c9b8 <lfs_dir_get>
 800fe8a:	6478      	str	r0, [r7, #68]	@ 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 800fe8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	da06      	bge.n	800fea0 <lfs_file_opencfg_+0x264>
 800fe92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe94:	f113 0f02 	cmn.w	r3, #2
 800fe98:	d002      	beq.n	800fea0 <lfs_file_opencfg_+0x264>
                err = res;
 800fe9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 800fe9e:	e097      	b.n	800ffd0 <lfs_file_opencfg_+0x394>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fea4:	f003 0302 	and.w	r3, r3, #2
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d017      	beq.n	800fedc <lfs_file_opencfg_+0x2a0>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800feb0:	6859      	ldr	r1, [r3, #4]
 800feb2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800feb4:	4613      	mov	r3, r2
 800feb6:	005b      	lsls	r3, r3, #1
 800feb8:	4413      	add	r3, r2
 800feba:	009b      	lsls	r3, r3, #2
 800febc:	440b      	add	r3, r1
 800febe:	689a      	ldr	r2, [r3, #8]
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fec4:	429a      	cmp	r2, r3
 800fec6:	d903      	bls.n	800fed0 <lfs_file_opencfg_+0x294>
                err = LFS_ERR_NOSPC;
 800fec8:	f06f 031b 	mvn.w	r3, #27
 800fecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 800fece:	e07f      	b.n	800ffd0 <lfs_file_opencfg_+0x394>
            }

            file->flags |= LFS_F_DIRTY;
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fed4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	631a      	str	r2, [r3, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800fedc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fede:	3301      	adds	r3, #1
 800fee0:	657b      	str	r3, [r7, #84]	@ 0x54
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fee6:	689b      	ldr	r3, [r3, #8]
 800fee8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800feea:	429a      	cmp	r2, r3
 800feec:	d395      	bcc.n	800fe1a <lfs_file_opencfg_+0x1de>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 800feee:	68bb      	ldr	r3, [r7, #8]
 800fef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d005      	beq.n	800ff04 <lfs_file_opencfg_+0x2c8>
        file->cache.buffer = file->cfg->buffer;
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fefc:	681a      	ldr	r2, [r3, #0]
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	64da      	str	r2, [r3, #76]	@ 0x4c
 800ff02:	e010      	b.n	800ff26 <lfs_file_opencfg_+0x2ea>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ff08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f7fb fbc5 	bl	800b69a <lfs_malloc>
 800ff10:	4602      	mov	r2, r0
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (!file->cache.buffer) {
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d103      	bne.n	800ff26 <lfs_file_opencfg_+0x2ea>
            err = LFS_ERR_NOMEM;
 800ff1e:	f06f 030b 	mvn.w	r3, #11
 800ff22:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 800ff24:	e054      	b.n	800ffd0 <lfs_file_opencfg_+0x394>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	3340      	adds	r3, #64	@ 0x40
 800ff2a:	4619      	mov	r1, r3
 800ff2c:	68f8      	ldr	r0, [r7, #12]
 800ff2e:	f7fb fbda 	bl	800b6e6 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800ff32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7fc f89f 	bl	800c078 <lfs_tag_type3>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	461a      	mov	r2, r3
 800ff3e:	f240 2301 	movw	r3, #513	@ 0x201
 800ff42:	429a      	cmp	r2, r3
 800ff44:	d141      	bne.n	800ffca <lfs_file_opencfg_+0x38e>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	f06f 0201 	mvn.w	r2, #1
 800ff4c:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = lfs_tag_size(tag);
 800ff4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ff50:	4618      	mov	r0, r3
 800ff52:	f7fc f8cb 	bl	800c0ec <lfs_tag_size>
 800ff56:	4602      	mov	r2, r0
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff60:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	631a      	str	r2, [r3, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = 0;
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	2200      	movs	r2, #0
 800ff74:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ff7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	649a      	str	r2, [r3, #72]	@ 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d020      	beq.n	800ffca <lfs_file_opencfg_+0x38e>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	889b      	ldrh	r3, [r3, #4]
 800ff92:	029c      	lsls	r4, r3, #10
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ff98:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f7fb fadd 	bl	800b55c <lfs_min>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800ffa6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800ffae:	9300      	str	r3, [sp, #0]
 800ffb0:	4613      	mov	r3, r2
 800ffb2:	4a10      	ldr	r2, [pc, #64]	@ (800fff4 <lfs_file_opencfg_+0x3b8>)
 800ffb4:	4629      	mov	r1, r5
 800ffb6:	68f8      	ldr	r0, [r7, #12]
 800ffb8:	f7fc fcfe 	bl	800c9b8 <lfs_dir_get>
 800ffbc:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (res < 0) {
 800ffbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	da02      	bge.n	800ffca <lfs_file_opencfg_+0x38e>
                err = res;
 800ffc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ffc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 800ffc8:	e002      	b.n	800ffd0 <lfs_file_opencfg_+0x394>
            }
        }
    }

    return 0;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	e00b      	b.n	800ffe6 <lfs_file_opencfg_+0x3aa>
            goto cleanup;
 800ffce:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffd4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
    lfs_file_close_(lfs, file);
 800ffdc:	68b9      	ldr	r1, [r7, #8]
 800ffde:	68f8      	ldr	r0, [r7, #12]
 800ffe0:	f000 f824 	bl	801002c <lfs_file_close_>
    return err;
 800ffe4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3760      	adds	r7, #96	@ 0x60
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bdb0      	pop	{r4, r5, r7, pc}
 800ffee:	bf00      	nop
 800fff0:	20100000 	.word	0x20100000
 800fff4:	700ffc00 	.word	0x700ffc00
 800fff8:	7ffffc00 	.word	0x7ffffc00

0800fffc <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b088      	sub	sp, #32
 8010000:	af02      	add	r7, sp, #8
 8010002:	60f8      	str	r0, [r7, #12]
 8010004:	60b9      	str	r1, [r7, #8]
 8010006:	607a      	str	r2, [r7, #4]
 8010008:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 801000a:	4b07      	ldr	r3, [pc, #28]	@ (8010028 <lfs_file_open_+0x2c>)
 801000c:	9300      	str	r3, [sp, #0]
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	687a      	ldr	r2, [r7, #4]
 8010012:	68b9      	ldr	r1, [r7, #8]
 8010014:	68f8      	ldr	r0, [r7, #12]
 8010016:	f7ff fe11 	bl	800fc3c <lfs_file_opencfg_>
 801001a:	6178      	str	r0, [r7, #20]
    return err;
 801001c:	697b      	ldr	r3, [r7, #20]
}
 801001e:	4618      	mov	r0, r3
 8010020:	3718      	adds	r7, #24
 8010022:	46bd      	mov	sp, r7
 8010024:	bd80      	pop	{r7, pc}
 8010026:	bf00      	nop
 8010028:	08014718 	.word	0x08014718

0801002c <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 801002c:	b580      	push	{r7, lr}
 801002e:	b084      	sub	sp, #16
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 8010036:	6839      	ldr	r1, [r7, #0]
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f000 f9e5 	bl	8010408 <lfs_file_sync_>
 801003e:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8010040:	6839      	ldr	r1, [r7, #0]
 8010042:	6878      	ldr	r0, [r7, #4]
 8010044:	f7fc fa45 	bl	800c4d2 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d104      	bne.n	801005c <lfs_file_close_+0x30>
        lfs_free(file->cache.buffer);
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010056:	4618      	mov	r0, r3
 8010058:	f7fb fb2b 	bl	800b6b2 <lfs_free>
    }

    return err;
 801005c:	68fb      	ldr	r3, [r7, #12]
}
 801005e:	4618      	mov	r0, r3
 8010060:	3710      	adds	r7, #16
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}
	...

08010068 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8010068:	b590      	push	{r4, r7, lr}
 801006a:	b08d      	sub	sp, #52	@ 0x34
 801006c:	af06      	add	r7, sp, #24
 801006e:	6078      	str	r0, [r7, #4]
 8010070:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8010072:	f107 030c 	add.w	r3, r7, #12
 8010076:	4619      	mov	r1, r3
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	f7fc fb1f 	bl	800c6bc <lfs_alloc>
 801007e:	6138      	str	r0, [r7, #16]
        if (err) {
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d001      	beq.n	801008a <lfs_file_relocate+0x22>
            return err;
 8010086:	693b      	ldr	r3, [r7, #16]
 8010088:	e0bb      	b.n	8010202 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	4619      	mov	r1, r3
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f7fb fe80 	bl	800bd94 <lfs_bd_erase>
 8010094:	6138      	str	r0, [r7, #16]
        if (err) {
 8010096:	693b      	ldr	r3, [r7, #16]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d006      	beq.n	80100aa <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 801009c:	693b      	ldr	r3, [r7, #16]
 801009e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80100a2:	f000 809b 	beq.w	80101dc <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 80100a6:	693b      	ldr	r3, [r7, #16]
 80100a8:	e0ab      	b.n	8010202 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 80100aa:	2300      	movs	r3, #0
 80100ac:	617b      	str	r3, [r7, #20]
 80100ae:	e069      	b.n	8010184 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d027      	beq.n	801010c <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	f103 0008 	add.w	r0, r3, #8
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	f103 0440 	add.w	r4, r3, #64	@ 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	889b      	ldrh	r3, [r3, #4]
 80100d4:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 80100d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80100da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80100de:	2101      	movs	r1, #1
 80100e0:	9105      	str	r1, [sp, #20]
 80100e2:	f107 010b 	add.w	r1, r7, #11
 80100e6:	9104      	str	r1, [sp, #16]
 80100e8:	6979      	ldr	r1, [r7, #20]
 80100ea:	9103      	str	r1, [sp, #12]
 80100ec:	9302      	str	r3, [sp, #8]
 80100ee:	4b47      	ldr	r3, [pc, #284]	@ (801020c <lfs_file_relocate+0x1a4>)
 80100f0:	9301      	str	r3, [sp, #4]
 80100f2:	9200      	str	r2, [sp, #0]
 80100f4:	4623      	mov	r3, r4
 80100f6:	2200      	movs	r2, #0
 80100f8:	4601      	mov	r1, r0
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	f7fc fc77 	bl	800c9ee <lfs_dir_getread>
 8010100:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8010102:	693b      	ldr	r3, [r7, #16]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d01e      	beq.n	8010146 <lfs_file_relocate+0xde>
                    return err;
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	e07a      	b.n	8010202 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
                err = lfs_bd_read(lfs,
 8010112:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_bd_read(lfs,
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	1ad4      	subs	r4, r2, r3
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010120:	2201      	movs	r2, #1
 8010122:	9203      	str	r2, [sp, #12]
 8010124:	f107 020b 	add.w	r2, r7, #11
 8010128:	9202      	str	r2, [sp, #8]
 801012a:	697a      	ldr	r2, [r7, #20]
 801012c:	9201      	str	r2, [sp, #4]
 801012e:	9300      	str	r3, [sp, #0]
 8010130:	4623      	mov	r3, r4
 8010132:	4602      	mov	r2, r0
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f7fb faed 	bl	800b714 <lfs_bd_read>
 801013a:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 801013c:	693b      	ldr	r3, [r7, #16]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d001      	beq.n	8010146 <lfs_file_relocate+0xde>
                    return err;
 8010142:	693b      	ldr	r3, [r7, #16]
 8010144:	e05d      	b.n	8010202 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	f103 0110 	add.w	r1, r3, #16
 801014c:	6878      	ldr	r0, [r7, #4]
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	2201      	movs	r2, #1
 8010152:	9203      	str	r2, [sp, #12]
 8010154:	f107 020b 	add.w	r2, r7, #11
 8010158:	9202      	str	r2, [sp, #8]
 801015a:	697a      	ldr	r2, [r7, #20]
 801015c:	9201      	str	r2, [sp, #4]
 801015e:	9300      	str	r3, [sp, #0]
 8010160:	2301      	movs	r3, #1
 8010162:	4602      	mov	r2, r0
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f7fb fd67 	bl	800bc38 <lfs_bd_prog>
 801016a:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d005      	beq.n	801017e <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8010172:	693b      	ldr	r3, [r7, #16]
 8010174:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8010178:	d032      	beq.n	80101e0 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 801017a:	693b      	ldr	r3, [r7, #16]
 801017c:	e041      	b.n	8010202 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801017e:	697b      	ldr	r3, [r7, #20]
 8010180:	3301      	adds	r3, #1
 8010182:	617b      	str	r3, [r7, #20]
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010188:	697a      	ldr	r2, [r7, #20]
 801018a:	429a      	cmp	r2, r3
 801018c:	d390      	bcc.n	80100b0 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	69d9      	ldr	r1, [r3, #28]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801019a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801019c:	461a      	mov	r2, r3
 801019e:	f002 fd04 	bl	8012baa <memcpy>
        file->cache.block = lfs->pcache.block;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	691a      	ldr	r2, [r3, #16]
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	695a      	ldr	r2, [r3, #20]
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	699a      	ldr	r2, [r3, #24]
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	649a      	str	r2, [r3, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	3310      	adds	r3, #16
 80101be:	4619      	mov	r1, r3
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f7fb fa90 	bl	800b6e6 <lfs_cache_zero>

        file->block = nblock;
 80101c6:	68fa      	ldr	r2, [r7, #12]
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	639a      	str	r2, [r3, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101d0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	631a      	str	r2, [r3, #48]	@ 0x30
        return 0;
 80101d8:	2300      	movs	r3, #0
 80101da:	e012      	b.n	8010202 <lfs_file_relocate+0x19a>
                goto relocate;
 80101dc:	bf00      	nop
 80101de:	e000      	b.n	80101e2 <lfs_file_relocate+0x17a>
                    goto relocate;
 80101e0:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	4a0a      	ldr	r2, [pc, #40]	@ (8010210 <lfs_file_relocate+0x1a8>)
 80101e6:	9200      	str	r2, [sp, #0]
 80101e8:	f640 42ff 	movw	r2, #3327	@ 0xcff
 80101ec:	4909      	ldr	r1, [pc, #36]	@ (8010214 <lfs_file_relocate+0x1ac>)
 80101ee:	480a      	ldr	r0, [pc, #40]	@ (8010218 <lfs_file_relocate+0x1b0>)
 80101f0:	f002 fbca 	bl	8012988 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	3310      	adds	r3, #16
 80101f8:	4619      	mov	r1, r3
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f7fb fa64 	bl	800b6c8 <lfs_cache_drop>
    while (true) {
 8010200:	e737      	b.n	8010072 <lfs_file_relocate+0xa>
    }
}
 8010202:	4618      	mov	r0, r3
 8010204:	371c      	adds	r7, #28
 8010206:	46bd      	mov	sp, r7
 8010208:	bd90      	pop	{r4, r7, pc}
 801020a:	bf00      	nop
 801020c:	fff7fc00 	.word	0xfff7fc00
 8010210:	080139a4 	.word	0x080139a4
 8010214:	08013884 	.word	0x08013884
 8010218:	08013a20 	.word	0x08013a20

0801021c <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 801021c:	b580      	push	{r7, lr}
 801021e:	b084      	sub	sp, #16
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	63da      	str	r2, [r3, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 801022e:	6878      	ldr	r0, [r7, #4]
 8010230:	f7fc f9ad 	bl	800c58e <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 8010234:	6839      	ldr	r1, [r7, #0]
 8010236:	6878      	ldr	r0, [r7, #4]
 8010238:	f7ff ff16 	bl	8010068 <lfs_file_relocate>
 801023c:	60f8      	str	r0, [r7, #12]
    if (err) {
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d001      	beq.n	8010248 <lfs_file_outline+0x2c>
        return err;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	e006      	b.n	8010256 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801024c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	631a      	str	r2, [r3, #48]	@ 0x30
    return 0;
 8010254:	2300      	movs	r3, #0
}
 8010256:	4618      	mov	r0, r3
 8010258:	3710      	adds	r7, #16
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}
	...

08010260 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8010260:	b590      	push	{r4, r7, lr}
 8010262:	b09f      	sub	sp, #124	@ 0x7c
 8010264:	af02      	add	r7, sp, #8
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801026e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010272:	2b00      	cmp	r3, #0
 8010274:	d011      	beq.n	801029a <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801027a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801027e:	2b00      	cmp	r3, #0
 8010280:	d105      	bne.n	801028e <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	3340      	adds	r3, #64	@ 0x40
 8010286:	4619      	mov	r1, r3
 8010288:	6878      	ldr	r0, [r7, #4]
 801028a:	f7fb fa1d 	bl	800b6c8 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 801028e:	683b      	ldr	r3, [r7, #0]
 8010290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010292:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801029e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	f000 80a4 	beq.w	80103f0 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102ac:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d176      	bne.n	80103a8 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 80102ba:	f107 030c 	add.w	r3, r7, #12
 80102be:	2254      	movs	r2, #84	@ 0x54
 80102c0:	2100      	movs	r1, #0
 80102c2:	4618      	mov	r0, r3
 80102c4:	f002 fbc5 	bl	8012a52 <memset>
                .ctz.head = file->ctz.head,
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            lfs_file_t orig = {
 80102cc:	637b      	str	r3, [r7, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            lfs_file_t orig = {
 80102d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80102d4:	2301      	movs	r3, #1
 80102d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            lfs_file_t orig = {
 80102dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 80102e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80102e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	4619      	mov	r1, r3
 80102ee:	6878      	ldr	r0, [r7, #4]
 80102f0:	f7fb f9ea 	bl	800b6c8 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 80102f4:	e02b      	b.n	801034e <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 80102f6:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 80102fa:	f107 010c 	add.w	r1, r7, #12
 80102fe:	2301      	movs	r3, #1
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	f000 f921 	bl	8010548 <lfs_file_flushedread>
 8010306:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 8010308:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801030a:	2b00      	cmp	r3, #0
 801030c:	da01      	bge.n	8010312 <lfs_file_flush+0xb2>
                    return res;
 801030e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010310:	e06f      	b.n	80103f2 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8010312:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8010316:	2301      	movs	r3, #1
 8010318:	6839      	ldr	r1, [r7, #0]
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f000 fa1c 	bl	8010758 <lfs_file_flushedwrite>
 8010320:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 8010322:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010324:	2b00      	cmp	r3, #0
 8010326:	da01      	bge.n	801032c <lfs_file_flush+0xcc>
                    return res;
 8010328:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801032a:	e062      	b.n	80103f2 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010334:	d00b      	beq.n	801034e <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8010336:	f107 030c 	add.w	r3, r7, #12
 801033a:	3340      	adds	r3, #64	@ 0x40
 801033c:	4619      	mov	r1, r3
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	f7fb f9c2 	bl	800b6c8 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	4619      	mov	r1, r3
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f7fb f9bd 	bl	800b6c8 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010356:	429a      	cmp	r2, r3
 8010358:	d3cd      	bcc.n	80102f6 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8010360:	687a      	ldr	r2, [r7, #4]
 8010362:	2301      	movs	r3, #1
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f7fb fbb9 	bl	800badc <lfs_bd_flush>
 801036a:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 801036c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801036e:	2b00      	cmp	r3, #0
 8010370:	d026      	beq.n	80103c0 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8010372:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010374:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8010378:	d001      	beq.n	801037e <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 801037a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801037c:	e039      	b.n	80103f2 <lfs_file_flush+0x192>
                        goto relocate;
 801037e:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010384:	4a1d      	ldr	r2, [pc, #116]	@ (80103fc <lfs_file_flush+0x19c>)
 8010386:	9200      	str	r2, [sp, #0]
 8010388:	f640 524e 	movw	r2, #3406	@ 0xd4e
 801038c:	491c      	ldr	r1, [pc, #112]	@ (8010400 <lfs_file_flush+0x1a0>)
 801038e:	481d      	ldr	r0, [pc, #116]	@ (8010404 <lfs_file_flush+0x1a4>)
 8010390:	f002 fafa 	bl	8012988 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8010394:	6839      	ldr	r1, [r7, #0]
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f7ff fe66 	bl	8010068 <lfs_file_relocate>
 801039c:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 801039e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d0da      	beq.n	801035a <lfs_file_flush+0xfa>
                    return err;
 80103a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80103a6:	e024      	b.n	80103f2 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103b0:	4619      	mov	r1, r3
 80103b2:	4610      	mov	r0, r2
 80103b4:	f7fb f8c2 	bl	800b53c <lfs_max>
 80103b8:	4602      	mov	r2, r0
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80103be:	e000      	b.n	80103c2 <lfs_file_flush+0x162>
                break;
 80103c0:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = file->pos;
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	631a      	str	r2, [r3, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103e2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	631a      	str	r2, [r3, #48]	@ 0x30

        file->pos = pos;
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80103ee:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif

    return 0;
 80103f0:	2300      	movs	r3, #0
}
 80103f2:	4618      	mov	r0, r3
 80103f4:	3774      	adds	r7, #116	@ 0x74
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd90      	pop	{r4, r7, pc}
 80103fa:	bf00      	nop
 80103fc:	080139a4 	.word	0x080139a4
 8010400:	08013884 	.word	0x08013884
 8010404:	08013a20 	.word	0x08013a20

08010408 <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 8010408:	b580      	push	{r7, lr}
 801040a:	b090      	sub	sp, #64	@ 0x40
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
 8010410:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010416:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801041a:	2b00      	cmp	r3, #0
 801041c:	d001      	beq.n	8010422 <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 801041e:	2300      	movs	r3, #0
 8010420:	e08e      	b.n	8010540 <lfs_file_sync_+0x138>
    }

    int err = lfs_file_flush(lfs, file);
 8010422:	6839      	ldr	r1, [r7, #0]
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f7ff ff1b 	bl	8010260 <lfs_file_flush>
 801042a:	6338      	str	r0, [r7, #48]	@ 0x30
    if (err) {
 801042c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801042e:	2b00      	cmp	r3, #0
 8010430:	d007      	beq.n	8010442 <lfs_file_sync_+0x3a>
        file->flags |= LFS_F_ERRED;
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010436:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	631a      	str	r2, [r3, #48]	@ 0x30
        return err;
 801043e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010440:	e07e      	b.n	8010540 <lfs_file_sync_+0x138>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010446:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801044a:	2b00      	cmp	r3, #0
 801044c:	d077      	beq.n	801053e <lfs_file_sync_+0x136>
            !lfs_pair_isnull(file->m.pair)) {
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	3308      	adds	r3, #8
 8010452:	4618      	mov	r0, r3
 8010454:	f7fb fd29 	bl	800beaa <lfs_pair_isnull>
 8010458:	4603      	mov	r3, r0
 801045a:	f083 0301 	eor.w	r3, r3, #1
 801045e:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8010460:	2b00      	cmp	r3, #0
 8010462:	d06c      	beq.n	801053e <lfs_file_sync_+0x136>
        // before we commit metadata, we need sync the disk to make sure
        // data writes don't complete after metadata writes
        if (!(file->flags & LFS_F_INLINE)) {
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010468:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801046c:	2b00      	cmp	r3, #0
 801046e:	d10d      	bne.n	801048c <lfs_file_sync_+0x84>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f103 0110 	add.w	r1, r3, #16
 8010476:	687a      	ldr	r2, [r7, #4]
 8010478:	2300      	movs	r3, #0
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f7fb fba8 	bl	800bbd0 <lfs_bd_sync>
 8010480:	6338      	str	r0, [r7, #48]	@ 0x30
            if (err) {
 8010482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010484:	2b00      	cmp	r3, #0
 8010486:	d001      	beq.n	801048c <lfs_file_sync_+0x84>
                return err;
 8010488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801048a:	e059      	b.n	8010540 <lfs_file_sync_+0x138>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010490:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010494:	2b00      	cmp	r3, #0
 8010496:	d009      	beq.n	80104ac <lfs_file_sync_+0xa4>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8010498:	f240 2301 	movw	r3, #513	@ 0x201
 801049c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            buffer = file->cache.buffer;
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80104a2:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = file->ctz.size;
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80104aa:	e014      	b.n	80104d6 <lfs_file_sync_+0xce>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 80104ac:	f240 2302 	movw	r3, #514	@ 0x202
 80104b0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 80104b2:	683a      	ldr	r2, [r7, #0]
 80104b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80104b8:	3228      	adds	r2, #40	@ 0x28
 80104ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80104be:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 80104c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7fb ff5e 	bl	800c388 <lfs_ctz_tole32>
            buffer = &ctz;
 80104cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80104d0:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = sizeof(ctz);
 80104d2:	2308      	movs	r3, #8
 80104d4:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	f103 0108 	add.w	r1, r3, #8
 80104dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80104de:	051a      	lsls	r2, r3, #20
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	889b      	ldrh	r3, [r3, #4]
 80104e4:	029b      	lsls	r3, r3, #10
 80104e6:	431a      	orrs	r2, r3
 80104e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104ea:	4313      	orrs	r3, r2
 80104ec:	61bb      	str	r3, [r7, #24]
 80104ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104f0:	61fb      	str	r3, [r7, #28]
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	889b      	ldrh	r3, [r3, #4]
 80104f6:	029a      	lsls	r2, r3, #10
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80104fc:	689b      	ldr	r3, [r3, #8]
 80104fe:	4313      	orrs	r3, r2
 8010500:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 8010504:	623b      	str	r3, [r7, #32]
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801050a:	685b      	ldr	r3, [r3, #4]
 801050c:	627b      	str	r3, [r7, #36]	@ 0x24
 801050e:	f107 0218 	add.w	r2, r7, #24
 8010512:	2302      	movs	r3, #2
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f7ff f943 	bl	800f7a0 <lfs_dir_commit>
 801051a:	6338      	str	r0, [r7, #48]	@ 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 801051c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801051e:	2b00      	cmp	r3, #0
 8010520:	d007      	beq.n	8010532 <lfs_file_sync_+0x12a>
            file->flags |= LFS_F_ERRED;
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010526:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 801052e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010530:	e006      	b.n	8010540 <lfs_file_sync_+0x138>
        }

        file->flags &= ~LFS_F_DIRTY;
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010536:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return 0;
 801053e:	2300      	movs	r3, #0
}
 8010540:	4618      	mov	r0, r3
 8010542:	3740      	adds	r7, #64	@ 0x40
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}

08010548 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8010548:	b5b0      	push	{r4, r5, r7, lr}
 801054a:	b090      	sub	sp, #64	@ 0x40
 801054c:	af06      	add	r7, sp, #24
 801054e:	60f8      	str	r0, [r7, #12]
 8010550:	60b9      	str	r1, [r7, #8]
 8010552:	607a      	str	r2, [r7, #4]
 8010554:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t nsize = size;
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010562:	68bb      	ldr	r3, [r7, #8]
 8010564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010566:	429a      	cmp	r2, r3
 8010568:	d301      	bcc.n	801056e <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 801056a:	2300      	movs	r3, #0
 801056c:	e0b7      	b.n	80106de <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 801056e:	68bb      	ldr	r3, [r7, #8]
 8010570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010572:	68bb      	ldr	r3, [r7, #8]
 8010574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010576:	1ad3      	subs	r3, r2, r3
 8010578:	4619      	mov	r1, r3
 801057a:	6838      	ldr	r0, [r7, #0]
 801057c:	f7fa ffee 	bl	800b55c <lfs_min>
 8010580:	6038      	str	r0, [r7, #0]
    nsize = size;
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8010586:	e0a5      	b.n	80106d4 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801058c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010590:	2b00      	cmp	r3, #0
 8010592:	d006      	beq.n	80105a2 <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801059c:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 801059e:	429a      	cmp	r2, r3
 80105a0:	d130      	bne.n	8010604 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80105a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d11c      	bne.n	80105e8 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105bc:	68ba      	ldr	r2, [r7, #8]
 80105be:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80105c0:	68b9      	ldr	r1, [r7, #8]
 80105c2:	3138      	adds	r1, #56	@ 0x38
 80105c4:	68b8      	ldr	r0, [r7, #8]
 80105c6:	303c      	adds	r0, #60	@ 0x3c
 80105c8:	9003      	str	r0, [sp, #12]
 80105ca:	9102      	str	r1, [sp, #8]
 80105cc:	9201      	str	r2, [sp, #4]
 80105ce:	9300      	str	r3, [sp, #0]
 80105d0:	462b      	mov	r3, r5
 80105d2:	4622      	mov	r2, r4
 80105d4:	2100      	movs	r1, #0
 80105d6:	68f8      	ldr	r0, [r7, #12]
 80105d8:	f7ff f93f 	bl	800f85a <lfs_ctz_find>
 80105dc:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 80105de:	69fb      	ldr	r3, [r7, #28]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d009      	beq.n	80105f8 <lfs_file_flushedread+0xb0>
                    return err;
 80105e4:	69fb      	ldr	r3, [r7, #28]
 80105e6:	e07a      	b.n	80106de <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	f06f 0201 	mvn.w	r2, #1
 80105ee:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_READING;
 80105f8:	68bb      	ldr	r3, [r7, #8]
 80105fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80105fc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8010600:	68bb      	ldr	r3, [r7, #8]
 8010602:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010608:	69da      	ldr	r2, [r3, #28]
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801060e:	1ad3      	subs	r3, r2, r3
 8010610:	4619      	mov	r1, r3
 8010612:	6a38      	ldr	r0, [r7, #32]
 8010614:	f7fa ffa2 	bl	800b55c <lfs_min>
 8010618:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801061e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010622:	2b00      	cmp	r3, #0
 8010624:	d026      	beq.n	8010674 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	f103 0408 	add.w	r4, r3, #8
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	f103 0540 	add.w	r5, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010636:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	889b      	ldrh	r3, [r3, #4]
 801063c:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 801063e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010642:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010646:	68b9      	ldr	r1, [r7, #8]
 8010648:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 801064a:	69b8      	ldr	r0, [r7, #24]
 801064c:	9005      	str	r0, [sp, #20]
 801064e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010650:	9004      	str	r0, [sp, #16]
 8010652:	9103      	str	r1, [sp, #12]
 8010654:	9302      	str	r3, [sp, #8]
 8010656:	4b24      	ldr	r3, [pc, #144]	@ (80106e8 <lfs_file_flushedread+0x1a0>)
 8010658:	9301      	str	r3, [sp, #4]
 801065a:	9200      	str	r2, [sp, #0]
 801065c:	462b      	mov	r3, r5
 801065e:	2200      	movs	r2, #0
 8010660:	4621      	mov	r1, r4
 8010662:	68f8      	ldr	r0, [r7, #12]
 8010664:	f7fc f9c3 	bl	800c9ee <lfs_dir_getread>
 8010668:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 801066a:	693b      	ldr	r3, [r7, #16]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d01d      	beq.n	80106ac <lfs_file_flushedread+0x164>
                return err;
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	e034      	b.n	80106de <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8010674:	68bb      	ldr	r3, [r7, #8]
 8010676:	f103 0040 	add.w	r0, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801067e:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010684:	68ba      	ldr	r2, [r7, #8]
 8010686:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8010688:	69b9      	ldr	r1, [r7, #24]
 801068a:	9103      	str	r1, [sp, #12]
 801068c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801068e:	9102      	str	r1, [sp, #8]
 8010690:	9201      	str	r2, [sp, #4]
 8010692:	9300      	str	r3, [sp, #0]
 8010694:	4623      	mov	r3, r4
 8010696:	4602      	mov	r2, r0
 8010698:	2100      	movs	r1, #0
 801069a:	68f8      	ldr	r0, [r7, #12]
 801069c:	f7fb f83a 	bl	800b714 <lfs_bd_read>
 80106a0:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80106a2:	697b      	ldr	r3, [r7, #20]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d001      	beq.n	80106ac <lfs_file_flushedread+0x164>
                return err;
 80106a8:	697b      	ldr	r3, [r7, #20]
 80106aa:	e018      	b.n	80106de <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80106b0:	69bb      	ldr	r3, [r7, #24]
 80106b2:	441a      	add	r2, r3
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80106bc:	69bb      	ldr	r3, [r7, #24]
 80106be:	441a      	add	r2, r3
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 80106c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80106c6:	69bb      	ldr	r3, [r7, #24]
 80106c8:	4413      	add	r3, r2
 80106ca:	627b      	str	r3, [r7, #36]	@ 0x24
        nsize -= diff;
 80106cc:	6a3a      	ldr	r2, [r7, #32]
 80106ce:	69bb      	ldr	r3, [r7, #24]
 80106d0:	1ad3      	subs	r3, r2, r3
 80106d2:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 80106d4:	6a3b      	ldr	r3, [r7, #32]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	f47f af56 	bne.w	8010588 <lfs_file_flushedread+0x40>
    }

    return size;
 80106dc:	683b      	ldr	r3, [r7, #0]
}
 80106de:	4618      	mov	r0, r3
 80106e0:	3728      	adds	r7, #40	@ 0x28
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bdb0      	pop	{r4, r5, r7, pc}
 80106e6:	bf00      	nop
 80106e8:	fff7fc00 	.word	0xfff7fc00

080106ec <lfs_file_read_>:

static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b086      	sub	sp, #24
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	60f8      	str	r0, [r7, #12]
 80106f4:	60b9      	str	r1, [r7, #8]
 80106f6:	607a      	str	r2, [r7, #4]
 80106f8:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80106fe:	f003 0301 	and.w	r3, r3, #1
 8010702:	2b00      	cmp	r3, #0
 8010704:	d106      	bne.n	8010714 <lfs_file_read_+0x28>
 8010706:	4b11      	ldr	r3, [pc, #68]	@ (801074c <lfs_file_read_+0x60>)
 8010708:	4a11      	ldr	r2, [pc, #68]	@ (8010750 <lfs_file_read_+0x64>)
 801070a:	f640 51e2 	movw	r1, #3554	@ 0xde2
 801070e:	4811      	ldr	r0, [pc, #68]	@ (8010754 <lfs_file_read_+0x68>)
 8010710:	f001 ff8a 	bl	8012628 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801071c:	2b00      	cmp	r3, #0
 801071e:	d009      	beq.n	8010734 <lfs_file_read_+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8010720:	68b9      	ldr	r1, [r7, #8]
 8010722:	68f8      	ldr	r0, [r7, #12]
 8010724:	f7ff fd9c 	bl	8010260 <lfs_file_flush>
 8010728:	6178      	str	r0, [r7, #20]
        if (err) {
 801072a:	697b      	ldr	r3, [r7, #20]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d001      	beq.n	8010734 <lfs_file_read_+0x48>
            return err;
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	e006      	b.n	8010742 <lfs_file_read_+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	687a      	ldr	r2, [r7, #4]
 8010738:	68b9      	ldr	r1, [r7, #8]
 801073a:	68f8      	ldr	r0, [r7, #12]
 801073c:	f7ff ff04 	bl	8010548 <lfs_file_flushedread>
 8010740:	4603      	mov	r3, r0
}
 8010742:	4618      	mov	r0, r3
 8010744:	3718      	adds	r7, #24
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}
 801074a:	bf00      	nop
 801074c:	08013bc8 	.word	0x08013bc8
 8010750:	08014724 	.word	0x08014724
 8010754:	08013884 	.word	0x08013884

08010758 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8010758:	b5b0      	push	{r4, r5, r7, lr}
 801075a:	b090      	sub	sp, #64	@ 0x40
 801075c:	af04      	add	r7, sp, #16
 801075e:	60f8      	str	r0, [r7, #12]
 8010760:	60b9      	str	r1, [r7, #8]
 8010762:	607a      	str	r2, [r7, #4]
 8010764:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t nsize = size;
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((file->flags & LFS_F_INLINE) &&
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010772:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010776:	2b00      	cmp	r3, #0
 8010778:	f000 80f4 	beq.w	8010964 <lfs_file_flushedwrite+0x20c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010782:	441a      	add	r2, r3
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010788:	4619      	mov	r1, r3
 801078a:	4610      	mov	r0, r2
 801078c:	f7fa fed6 	bl	800b53c <lfs_max>
 8010790:	4602      	mov	r2, r0
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 8010796:	429a      	cmp	r2, r3
 8010798:	f240 80e4 	bls.w	8010964 <lfs_file_flushedwrite+0x20c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 801079c:	68b9      	ldr	r1, [r7, #8]
 801079e:	68f8      	ldr	r0, [r7, #12]
 80107a0:	f7ff fd3c 	bl	801021c <lfs_file_outline>
 80107a4:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 80107a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	f000 80db 	beq.w	8010964 <lfs_file_flushedwrite+0x20c>
            file->flags |= LFS_F_ERRED;
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107b2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80107b6:	68bb      	ldr	r3, [r7, #8]
 80107b8:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 80107ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107bc:	e0d7      	b.n	801096e <lfs_file_flushedwrite+0x216>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d006      	beq.n	80107d8 <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80107d2:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 80107d4:	429a      	cmp	r2, r3
 80107d6:	d16d      	bne.n	80108b4 <lfs_file_flushedwrite+0x15c>
            if (!(file->flags & LFS_F_INLINE)) {
 80107d8:	68bb      	ldr	r3, [r7, #8]
 80107da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d159      	bne.n	8010898 <lfs_file_flushedwrite+0x140>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d12f      	bne.n	8010850 <lfs_file_flushedwrite+0xf8>
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d02b      	beq.n	8010850 <lfs_file_flushedwrite+0xf8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8010806:	68ba      	ldr	r2, [r7, #8]
 8010808:	6b52      	ldr	r2, [r2, #52]	@ 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801080a:	3a01      	subs	r2, #1
 801080c:	68b9      	ldr	r1, [r7, #8]
 801080e:	3138      	adds	r1, #56	@ 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8010810:	2000      	movs	r0, #0
 8010812:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8010814:	f107 0010 	add.w	r0, r7, #16
 8010818:	9003      	str	r0, [sp, #12]
 801081a:	9102      	str	r1, [sp, #8]
 801081c:	9201      	str	r2, [sp, #4]
 801081e:	9300      	str	r3, [sp, #0]
 8010820:	462b      	mov	r3, r5
 8010822:	4622      	mov	r2, r4
 8010824:	2100      	movs	r1, #0
 8010826:	68f8      	ldr	r0, [r7, #12]
 8010828:	f7ff f817 	bl	800f85a <lfs_ctz_find>
 801082c:	6238      	str	r0, [r7, #32]
                    if (err) {
 801082e:	6a3b      	ldr	r3, [r7, #32]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d007      	beq.n	8010844 <lfs_file_flushedwrite+0xec>
                        file->flags |= LFS_F_ERRED;
 8010834:	68bb      	ldr	r3, [r7, #8]
 8010836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010838:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	631a      	str	r2, [r3, #48]	@ 0x30
                        return err;
 8010840:	6a3b      	ldr	r3, [r7, #32]
 8010842:	e094      	b.n	801096e <lfs_file_flushedwrite+0x216>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	3340      	adds	r3, #64	@ 0x40
 8010848:	4619      	mov	r1, r3
 801084a:	68f8      	ldr	r0, [r7, #12]
 801084c:	f7fa ff4b 	bl	800b6e6 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 8010850:	68f8      	ldr	r0, [r7, #12]
 8010852:	f7fb fe9c 	bl	800c58e <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 801085c:	68fc      	ldr	r4, [r7, #12]
 801085e:	68bb      	ldr	r3, [r7, #8]
 8010860:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010866:	68ba      	ldr	r2, [r7, #8]
 8010868:	3238      	adds	r2, #56	@ 0x38
 801086a:	68b9      	ldr	r1, [r7, #8]
 801086c:	313c      	adds	r1, #60	@ 0x3c
 801086e:	9102      	str	r1, [sp, #8]
 8010870:	9201      	str	r2, [sp, #4]
 8010872:	9300      	str	r3, [sp, #0]
 8010874:	462b      	mov	r3, r5
 8010876:	4622      	mov	r2, r4
 8010878:	4601      	mov	r1, r0
 801087a:	68f8      	ldr	r0, [r7, #12]
 801087c:	f7ff f858 	bl	800f930 <lfs_ctz_extend>
 8010880:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8010882:	69fb      	ldr	r3, [r7, #28]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d00f      	beq.n	80108a8 <lfs_file_flushedwrite+0x150>
                    file->flags |= LFS_F_ERRED;
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801088c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8010890:	68bb      	ldr	r3, [r7, #8]
 8010892:	631a      	str	r2, [r3, #48]	@ 0x30
                    return err;
 8010894:	69fb      	ldr	r3, [r7, #28]
 8010896:	e06a      	b.n	801096e <lfs_file_flushedwrite+0x216>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	f06f 0201 	mvn.w	r2, #1
 801089e:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 80108a0:	68bb      	ldr	r3, [r7, #8]
 80108a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_WRITING;
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108ac:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80108b8:	69da      	ldr	r2, [r3, #28]
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108be:	1ad3      	subs	r3, r2, r3
 80108c0:	4619      	mov	r1, r3
 80108c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80108c4:	f7fa fe4a 	bl	800b55c <lfs_min>
 80108c8:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80108d0:	68fc      	ldr	r4, [r7, #12]
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108d6:	68ba      	ldr	r2, [r7, #8]
 80108d8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80108da:	69b9      	ldr	r1, [r7, #24]
 80108dc:	9103      	str	r1, [sp, #12]
 80108de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80108e0:	9102      	str	r1, [sp, #8]
 80108e2:	9201      	str	r2, [sp, #4]
 80108e4:	9300      	str	r3, [sp, #0]
 80108e6:	2301      	movs	r3, #1
 80108e8:	4622      	mov	r2, r4
 80108ea:	4601      	mov	r1, r0
 80108ec:	68f8      	ldr	r0, [r7, #12]
 80108ee:	f7fb f9a3 	bl	800bc38 <lfs_bd_prog>
 80108f2:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d01c      	beq.n	8010934 <lfs_file_flushedwrite+0x1dc>
                if (err == LFS_ERR_CORRUPT) {
 80108fa:	697b      	ldr	r3, [r7, #20]
 80108fc:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8010900:	d007      	beq.n	8010912 <lfs_file_flushedwrite+0x1ba>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8010902:	68bb      	ldr	r3, [r7, #8]
 8010904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010906:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 801090a:	68bb      	ldr	r3, [r7, #8]
 801090c:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 801090e:	697b      	ldr	r3, [r7, #20]
 8010910:	e02d      	b.n	801096e <lfs_file_flushedwrite+0x216>
                    goto relocate;
 8010912:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8010914:	68b9      	ldr	r1, [r7, #8]
 8010916:	68f8      	ldr	r0, [r7, #12]
 8010918:	f7ff fba6 	bl	8010068 <lfs_file_relocate>
 801091c:	6178      	str	r0, [r7, #20]
            if (err) {
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d0d2      	beq.n	80108ca <lfs_file_flushedwrite+0x172>
                file->flags |= LFS_F_ERRED;
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010928:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	e01c      	b.n	801096e <lfs_file_flushedwrite+0x216>
            break;
 8010934:	bf00      	nop
            }
        }

        file->pos += diff;
 8010936:	68bb      	ldr	r3, [r7, #8]
 8010938:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801093a:	69bb      	ldr	r3, [r7, #24]
 801093c:	441a      	add	r2, r3
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010946:	69bb      	ldr	r3, [r7, #24]
 8010948:	441a      	add	r2, r3
 801094a:	68bb      	ldr	r3, [r7, #8]
 801094c:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 801094e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010950:	69bb      	ldr	r3, [r7, #24]
 8010952:	4413      	add	r3, r2
 8010954:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nsize -= diff;
 8010956:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010958:	69bb      	ldr	r3, [r7, #24]
 801095a:	1ad3      	subs	r3, r2, r3
 801095c:	62bb      	str	r3, [r7, #40]	@ 0x28

        lfs_alloc_ckpoint(lfs);
 801095e:	68f8      	ldr	r0, [r7, #12]
 8010960:	f7fb fe15 	bl	800c58e <lfs_alloc_ckpoint>
    while (nsize > 0) {
 8010964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010966:	2b00      	cmp	r3, #0
 8010968:	f47f af29 	bne.w	80107be <lfs_file_flushedwrite+0x66>
    }

    return size;
 801096c:	683b      	ldr	r3, [r7, #0]
}
 801096e:	4618      	mov	r0, r3
 8010970:	3730      	adds	r7, #48	@ 0x30
 8010972:	46bd      	mov	sp, r7
 8010974:	bdb0      	pop	{r4, r5, r7, pc}
	...

08010978 <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8010978:	b580      	push	{r7, lr}
 801097a:	b08a      	sub	sp, #40	@ 0x28
 801097c:	af00      	add	r7, sp, #0
 801097e:	60f8      	str	r0, [r7, #12]
 8010980:	60b9      	str	r1, [r7, #8]
 8010982:	607a      	str	r2, [r7, #4]
 8010984:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801098a:	f003 0302 	and.w	r3, r3, #2
 801098e:	2b00      	cmp	r3, #0
 8010990:	d106      	bne.n	80109a0 <lfs_file_write_+0x28>
 8010992:	4b38      	ldr	r3, [pc, #224]	@ (8010a74 <lfs_file_write_+0xfc>)
 8010994:	4a38      	ldr	r2, [pc, #224]	@ (8010a78 <lfs_file_write_+0x100>)
 8010996:	f640 6149 	movw	r1, #3657	@ 0xe49
 801099a:	4838      	ldr	r0, [pc, #224]	@ (8010a7c <lfs_file_write_+0x104>)
 801099c:	f001 fe44 	bl	8012628 <__assert_func>

    if (file->flags & LFS_F_READING) {
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d009      	beq.n	80109c0 <lfs_file_write_+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 80109ac:	68b9      	ldr	r1, [r7, #8]
 80109ae:	68f8      	ldr	r0, [r7, #12]
 80109b0:	f7ff fc56 	bl	8010260 <lfs_file_flush>
 80109b4:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 80109b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d001      	beq.n	80109c0 <lfs_file_write_+0x48>
            return err;
 80109bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109be:	e055      	b.n	8010a6c <lfs_file_write_+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d009      	beq.n	80109e0 <lfs_file_write_+0x68>
 80109cc:	68bb      	ldr	r3, [r7, #8]
 80109ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80109d0:	68bb      	ldr	r3, [r7, #8]
 80109d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109d4:	429a      	cmp	r2, r3
 80109d6:	d203      	bcs.n	80109e0 <lfs_file_write_+0x68>
        file->pos = file->ctz.size;
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109dc:	68bb      	ldr	r3, [r7, #8]
 80109de:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if (file->pos + size > lfs->file_max) {
 80109e0:	68bb      	ldr	r3, [r7, #8]
 80109e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80109e4:	683b      	ldr	r3, [r7, #0]
 80109e6:	441a      	add	r2, r3
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80109ec:	429a      	cmp	r2, r3
 80109ee:	d902      	bls.n	80109f6 <lfs_file_write_+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 80109f0:	f06f 031a 	mvn.w	r3, #26
 80109f4:	e03a      	b.n	8010a6c <lfs_file_write_+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d121      	bne.n	8010a46 <lfs_file_write_+0xce>
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010a06:	68bb      	ldr	r3, [r7, #8]
 8010a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a0a:	429a      	cmp	r2, r3
 8010a0c:	d91b      	bls.n	8010a46 <lfs_file_write_+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8010a0e:	68bb      	ldr	r3, [r7, #8]
 8010a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a12:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a18:	68bb      	ldr	r3, [r7, #8]
 8010a1a:	635a      	str	r2, [r3, #52]	@ 0x34

        while (file->pos < pos) {
 8010a1c:	e00e      	b.n	8010a3c <lfs_file_write_+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8010a1e:	2300      	movs	r3, #0
 8010a20:	75fb      	strb	r3, [r7, #23]
 8010a22:	f107 0217 	add.w	r2, r7, #23
 8010a26:	2301      	movs	r3, #1
 8010a28:	68b9      	ldr	r1, [r7, #8]
 8010a2a:	68f8      	ldr	r0, [r7, #12]
 8010a2c:	f7ff fe94 	bl	8010758 <lfs_file_flushedwrite>
 8010a30:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8010a32:	69fb      	ldr	r3, [r7, #28]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	da01      	bge.n	8010a3c <lfs_file_write_+0xc4>
                return res;
 8010a38:	69fb      	ldr	r3, [r7, #28]
 8010a3a:	e017      	b.n	8010a6c <lfs_file_write_+0xf4>
        while (file->pos < pos) {
 8010a3c:	68bb      	ldr	r3, [r7, #8]
 8010a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a40:	6a3a      	ldr	r2, [r7, #32]
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d8eb      	bhi.n	8010a1e <lfs_file_write_+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	687a      	ldr	r2, [r7, #4]
 8010a4a:	68b9      	ldr	r1, [r7, #8]
 8010a4c:	68f8      	ldr	r0, [r7, #12]
 8010a4e:	f7ff fe83 	bl	8010758 <lfs_file_flushedwrite>
 8010a52:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8010a54:	69bb      	ldr	r3, [r7, #24]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	da01      	bge.n	8010a5e <lfs_file_write_+0xe6>
        return nsize;
 8010a5a:	69bb      	ldr	r3, [r7, #24]
 8010a5c:	e006      	b.n	8010a6c <lfs_file_write_+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8010a5e:	68bb      	ldr	r3, [r7, #8]
 8010a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a62:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	631a      	str	r2, [r3, #48]	@ 0x30
    return nsize;
 8010a6a:	69bb      	ldr	r3, [r7, #24]
}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	3728      	adds	r7, #40	@ 0x28
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bd80      	pop	{r7, pc}
 8010a74:	08013bf8 	.word	0x08013bf8
 8010a78:	08014734 	.word	0x08014734
 8010a7c:	08013884 	.word	0x08013884

08010a80 <lfs_remove_>:

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
}

#ifndef LFS_READONLY
static int lfs_remove_(lfs_t *lfs, const char *path) {
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b0a0      	sub	sp, #128	@ 0x80
 8010a84:	af02      	add	r7, sp, #8
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f001 fc3a 	bl	8012304 <lfs_fs_forceconsistency>
 8010a90:	6778      	str	r0, [r7, #116]	@ 0x74
    if (err) {
 8010a92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d001      	beq.n	8010a9c <lfs_remove_+0x1c>
        return err;
 8010a98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010a9a:	e0c4      	b.n	8010c26 <lfs_remove_+0x1a6>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8010a9c:	463a      	mov	r2, r7
 8010a9e:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	6878      	ldr	r0, [r7, #4]
 8010aa6:	f7fd f925 	bl	800dcf4 <lfs_dir_find>
 8010aaa:	6738      	str	r0, [r7, #112]	@ 0x70
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 8010aac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	db09      	blt.n	8010ac6 <lfs_remove_+0x46>
 8010ab2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f7fb fb09 	bl	800c0cc <lfs_tag_id>
 8010aba:	4603      	mov	r3, r0
 8010abc:	461a      	mov	r2, r3
 8010abe:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8010ac2:	429a      	cmp	r2, r3
 8010ac4:	d107      	bne.n	8010ad6 <lfs_remove_+0x56>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 8010ac6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	da01      	bge.n	8010ad0 <lfs_remove_+0x50>
 8010acc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010ace:	e0aa      	b.n	8010c26 <lfs_remove_+0x1a6>
 8010ad0:	f06f 0315 	mvn.w	r3, #21
 8010ad4:	e0a7      	b.n	8010c26 <lfs_remove_+0x1a6>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ada:	627b      	str	r3, [r7, #36]	@ 0x24
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8010adc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f7fb faca 	bl	800c078 <lfs_tag_type3>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	2b02      	cmp	r3, #2
 8010ae8:	d14a      	bne.n	8010b80 <lfs_remove_+0x100>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8010aea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7fb faed 	bl	800c0cc <lfs_tag_id>
 8010af2:	4603      	mov	r3, r0
 8010af4:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8010af6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010afa:	f043 0308 	orr.w	r3, r3, #8
 8010afe:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8010b02:	f107 020c 	add.w	r2, r7, #12
 8010b06:	9200      	str	r2, [sp, #0]
 8010b08:	4a49      	ldr	r2, [pc, #292]	@ (8010c30 <lfs_remove_+0x1b0>)
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	f7fb ff54 	bl	800c9b8 <lfs_dir_get>
 8010b10:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (res < 0) {
 8010b12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	da01      	bge.n	8010b1c <lfs_remove_+0x9c>
            return (int)res;
 8010b18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b1a:	e084      	b.n	8010c26 <lfs_remove_+0x1a6>
        }
        lfs_pair_fromle32(pair);
 8010b1c:	f107 030c 	add.w	r3, r7, #12
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7fb fa34 	bl	800bf8e <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 8010b26:	f107 020c 	add.w	r2, r7, #12
 8010b2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010b2e:	3308      	adds	r3, #8
 8010b30:	4619      	mov	r1, r3
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f7fd f846 	bl	800dbc4 <lfs_dir_fetch>
 8010b38:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8010b3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d001      	beq.n	8010b44 <lfs_remove_+0xc4>
            return err;
 8010b40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010b42:	e070      	b.n	8010c26 <lfs_remove_+0x1a6>
        }

        if (dir.m.count > 0 || dir.m.split) {
 8010b44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d103      	bne.n	8010b54 <lfs_remove_+0xd4>
 8010b4c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d002      	beq.n	8010b5a <lfs_remove_+0xda>
            return LFS_ERR_NOTEMPTY;
 8010b54:	f06f 0326 	mvn.w	r3, #38	@ 0x26
 8010b58:	e065      	b.n	8010c26 <lfs_remove_+0x1a6>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 8010b5a:	2101      	movs	r1, #1
 8010b5c:	6878      	ldr	r0, [r7, #4]
 8010b5e:	f001 f8af 	bl	8011cc0 <lfs_fs_preporphans>
 8010b62:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8010b64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d001      	beq.n	8010b6e <lfs_remove_+0xee>
            return err;
 8010b6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010b6c:	e05b      	b.n	8010c26 <lfs_remove_+0x1a6>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        dir.id = 0;
 8010b74:	2300      	movs	r3, #0
 8010b76:	853b      	strh	r3, [r7, #40]	@ 0x28
        lfs->mlist = &dir;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8010b7e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 8010b80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010b82:	4618      	mov	r0, r3
 8010b84:	f7fb faa2 	bl	800c0cc <lfs_tag_id>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	029b      	lsls	r3, r3, #10
 8010b8c:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8010b90:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8010b94:	61fb      	str	r3, [r7, #28]
 8010b96:	2300      	movs	r3, #0
 8010b98:	623b      	str	r3, [r7, #32]
 8010b9a:	f107 021c 	add.w	r2, r7, #28
 8010b9e:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8010ba2:	2301      	movs	r3, #1
 8010ba4:	6878      	ldr	r0, [r7, #4]
 8010ba6:	f7fe fdfb 	bl	800f7a0 <lfs_dir_commit>
 8010baa:	6778      	str	r0, [r7, #116]	@ 0x74
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 8010bac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d004      	beq.n	8010bbc <lfs_remove_+0x13c>
        lfs->mlist = dir.next;
 8010bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	629a      	str	r2, [r3, #40]	@ 0x28
        return err;
 8010bb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010bba:	e034      	b.n	8010c26 <lfs_remove_+0x1a6>
    }

    lfs->mlist = dir.next;
 8010bbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8010bc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f7fb fa57 	bl	800c078 <lfs_tag_type3>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	2b02      	cmp	r3, #2
 8010bce:	d129      	bne.n	8010c24 <lfs_remove_+0x1a4>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 8010bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f001 f873 	bl	8011cc0 <lfs_fs_preporphans>
 8010bda:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8010bdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d001      	beq.n	8010be6 <lfs_remove_+0x166>
            return err;
 8010be2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010be4:	e01f      	b.n	8010c26 <lfs_remove_+0x1a6>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 8010be6:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8010bea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010bee:	3308      	adds	r3, #8
 8010bf0:	4619      	mov	r1, r3
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f000 ff60 	bl	8011ab8 <lfs_fs_pred>
 8010bf8:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8010bfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d001      	beq.n	8010c04 <lfs_remove_+0x184>
            return err;
 8010c00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010c02:	e010      	b.n	8010c26 <lfs_remove_+0x1a6>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 8010c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010c08:	f103 0208 	add.w	r2, r3, #8
 8010c0c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8010c10:	4619      	mov	r1, r3
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f7fd fc12 	bl	800e43c <lfs_dir_drop>
 8010c18:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8010c1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d001      	beq.n	8010c24 <lfs_remove_+0x1a4>
            return err;
 8010c20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010c22:	e000      	b.n	8010c26 <lfs_remove_+0x1a6>
        }
    }

    return 0;
 8010c24:	2300      	movs	r3, #0
}
 8010c26:	4618      	mov	r0, r3
 8010c28:	3778      	adds	r7, #120	@ 0x78
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}
 8010c2e:	bf00      	nop
 8010c30:	700ffc00 	.word	0x700ffc00

08010c34 <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8010c34:	b590      	push	{r4, r7, lr}
 8010c36:	b08d      	sub	sp, #52	@ 0x34
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
 8010c3c:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	683a      	ldr	r2, [r7, #0]
 8010c42:	669a      	str	r2, [r3, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	6a1a      	ldr	r2, [r3, #32]
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	66da      	str	r2, [r3, #108]	@ 0x6c
    int err = 0;
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // note the most common reason for this failure is a before-c99 compiler,
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // check that the required io functions are provided
    LFS_ASSERT(lfs->cfg->read != NULL);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010c54:	685b      	ldr	r3, [r3, #4]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d106      	bne.n	8010c68 <lfs_init+0x34>
 8010c5a:	4b98      	ldr	r3, [pc, #608]	@ (8010ebc <lfs_init+0x288>)
 8010c5c:	4a98      	ldr	r2, [pc, #608]	@ (8010ec0 <lfs_init+0x28c>)
 8010c5e:	f241 0176 	movw	r1, #4214	@ 0x1076
 8010c62:	4898      	ldr	r0, [pc, #608]	@ (8010ec4 <lfs_init+0x290>)
 8010c64:	f001 fce0 	bl	8012628 <__assert_func>
#ifndef LFS_READONLY
    LFS_ASSERT(lfs->cfg->prog != NULL);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010c6c:	689b      	ldr	r3, [r3, #8]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d106      	bne.n	8010c80 <lfs_init+0x4c>
 8010c72:	4b95      	ldr	r3, [pc, #596]	@ (8010ec8 <lfs_init+0x294>)
 8010c74:	4a92      	ldr	r2, [pc, #584]	@ (8010ec0 <lfs_init+0x28c>)
 8010c76:	f241 0178 	movw	r1, #4216	@ 0x1078
 8010c7a:	4892      	ldr	r0, [pc, #584]	@ (8010ec4 <lfs_init+0x290>)
 8010c7c:	f001 fcd4 	bl	8012628 <__assert_func>
    LFS_ASSERT(lfs->cfg->erase != NULL);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010c84:	68db      	ldr	r3, [r3, #12]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d106      	bne.n	8010c98 <lfs_init+0x64>
 8010c8a:	4b90      	ldr	r3, [pc, #576]	@ (8010ecc <lfs_init+0x298>)
 8010c8c:	4a8c      	ldr	r2, [pc, #560]	@ (8010ec0 <lfs_init+0x28c>)
 8010c8e:	f241 0179 	movw	r1, #4217	@ 0x1079
 8010c92:	488c      	ldr	r0, [pc, #560]	@ (8010ec4 <lfs_init+0x290>)
 8010c94:	f001 fcc8 	bl	8012628 <__assert_func>
    LFS_ASSERT(lfs->cfg->sync != NULL);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010c9c:	691b      	ldr	r3, [r3, #16]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d106      	bne.n	8010cb0 <lfs_init+0x7c>
 8010ca2:	4b8b      	ldr	r3, [pc, #556]	@ (8010ed0 <lfs_init+0x29c>)
 8010ca4:	4a86      	ldr	r2, [pc, #536]	@ (8010ec0 <lfs_init+0x28c>)
 8010ca6:	f241 017a 	movw	r1, #4218	@ 0x107a
 8010caa:	4886      	ldr	r0, [pc, #536]	@ (8010ec4 <lfs_init+0x290>)
 8010cac:	f001 fcbc 	bl	8012628 <__assert_func>
#endif

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010cb4:	695b      	ldr	r3, [r3, #20]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d106      	bne.n	8010cc8 <lfs_init+0x94>
 8010cba:	4b86      	ldr	r3, [pc, #536]	@ (8010ed4 <lfs_init+0x2a0>)
 8010cbc:	4a80      	ldr	r2, [pc, #512]	@ (8010ec0 <lfs_init+0x28c>)
 8010cbe:	f241 017f 	movw	r1, #4223	@ 0x107f
 8010cc2:	4880      	ldr	r0, [pc, #512]	@ (8010ec4 <lfs_init+0x290>)
 8010cc4:	f001 fcb0 	bl	8012628 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010ccc:	699b      	ldr	r3, [r3, #24]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d106      	bne.n	8010ce0 <lfs_init+0xac>
 8010cd2:	4b81      	ldr	r3, [pc, #516]	@ (8010ed8 <lfs_init+0x2a4>)
 8010cd4:	4a7a      	ldr	r2, [pc, #488]	@ (8010ec0 <lfs_init+0x28c>)
 8010cd6:	f44f 5184 	mov.w	r1, #4224	@ 0x1080
 8010cda:	487a      	ldr	r0, [pc, #488]	@ (8010ec4 <lfs_init+0x290>)
 8010cdc:	f001 fca4 	bl	8012628 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d106      	bne.n	8010cf8 <lfs_init+0xc4>
 8010cea:	4b7c      	ldr	r3, [pc, #496]	@ (8010edc <lfs_init+0x2a8>)
 8010cec:	4a74      	ldr	r2, [pc, #464]	@ (8010ec0 <lfs_init+0x28c>)
 8010cee:	f241 0181 	movw	r1, #4225	@ 0x1081
 8010cf2:	4874      	ldr	r0, [pc, #464]	@ (8010ec4 <lfs_init+0x290>)
 8010cf4:	f001 fc98 	bl	8012628 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cfe:	687a      	ldr	r2, [r7, #4]
 8010d00:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8010d02:	6952      	ldr	r2, [r2, #20]
 8010d04:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d08:	fb01 f202 	mul.w	r2, r1, r2
 8010d0c:	1a9b      	subs	r3, r3, r2
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d006      	beq.n	8010d20 <lfs_init+0xec>
 8010d12:	4b73      	ldr	r3, [pc, #460]	@ (8010ee0 <lfs_init+0x2ac>)
 8010d14:	4a6a      	ldr	r2, [pc, #424]	@ (8010ec0 <lfs_init+0x28c>)
 8010d16:	f241 0185 	movw	r1, #4229	@ 0x1085
 8010d1a:	486a      	ldr	r0, [pc, #424]	@ (8010ec4 <lfs_init+0x290>)
 8010d1c:	f001 fc84 	bl	8012628 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d26:	687a      	ldr	r2, [r7, #4]
 8010d28:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8010d2a:	6992      	ldr	r2, [r2, #24]
 8010d2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d30:	fb01 f202 	mul.w	r2, r1, r2
 8010d34:	1a9b      	subs	r3, r3, r2
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d006      	beq.n	8010d48 <lfs_init+0x114>
 8010d3a:	4b6a      	ldr	r3, [pc, #424]	@ (8010ee4 <lfs_init+0x2b0>)
 8010d3c:	4a60      	ldr	r2, [pc, #384]	@ (8010ec0 <lfs_init+0x28c>)
 8010d3e:	f241 0186 	movw	r1, #4230	@ 0x1086
 8010d42:	4860      	ldr	r0, [pc, #384]	@ (8010ec4 <lfs_init+0x290>)
 8010d44:	f001 fc70 	bl	8012628 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010d4c:	69db      	ldr	r3, [r3, #28]
 8010d4e:	687a      	ldr	r2, [r7, #4]
 8010d50:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8010d52:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8010d54:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d58:	fb01 f202 	mul.w	r2, r1, r2
 8010d5c:	1a9b      	subs	r3, r3, r2
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d006      	beq.n	8010d70 <lfs_init+0x13c>
 8010d62:	4b61      	ldr	r3, [pc, #388]	@ (8010ee8 <lfs_init+0x2b4>)
 8010d64:	4a56      	ldr	r2, [pc, #344]	@ (8010ec0 <lfs_init+0x28c>)
 8010d66:	f241 0187 	movw	r1, #4231	@ 0x1087
 8010d6a:	4856      	ldr	r0, [pc, #344]	@ (8010ec4 <lfs_init+0x290>)
 8010d6c:	f001 fc5c 	bl	8012628 <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010d74:	69db      	ldr	r3, [r3, #28]
 8010d76:	2b7f      	cmp	r3, #127	@ 0x7f
 8010d78:	d806      	bhi.n	8010d88 <lfs_init+0x154>
 8010d7a:	4b5c      	ldr	r3, [pc, #368]	@ (8010eec <lfs_init+0x2b8>)
 8010d7c:	4a50      	ldr	r2, [pc, #320]	@ (8010ec0 <lfs_init+0x28c>)
 8010d7e:	f241 018a 	movw	r1, #4234	@ 0x108a
 8010d82:	4850      	ldr	r0, [pc, #320]	@ (8010ec4 <lfs_init+0x290>)
 8010d84:	f001 fc50 	bl	8012628 <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010d8c:	69db      	ldr	r3, [r3, #28]
 8010d8e:	3b08      	subs	r3, #8
 8010d90:	f04f 32ff 	mov.w	r2, #4294967295
 8010d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f7fa fc16 	bl	800b5ca <lfs_npw2>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	009a      	lsls	r2, r3, #2
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010da6:	69db      	ldr	r3, [r3, #28]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d906      	bls.n	8010dba <lfs_init+0x186>
 8010dac:	4b50      	ldr	r3, [pc, #320]	@ (8010ef0 <lfs_init+0x2bc>)
 8010dae:	4a44      	ldr	r2, [pc, #272]	@ (8010ec0 <lfs_init+0x28c>)
 8010db0:	f241 018d 	movw	r1, #4237	@ 0x108d
 8010db4:	4843      	ldr	r0, [pc, #268]	@ (8010ec4 <lfs_init+0x290>)
 8010db6:	f001 fc37 	bl	8012628 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d106      	bne.n	8010dd2 <lfs_init+0x19e>
 8010dc4:	4b4b      	ldr	r3, [pc, #300]	@ (8010ef4 <lfs_init+0x2c0>)
 8010dc6:	4a3e      	ldr	r2, [pc, #248]	@ (8010ec0 <lfs_init+0x28c>)
 8010dc8:	f241 0196 	movw	r1, #4246	@ 0x1096
 8010dcc:	483d      	ldr	r0, [pc, #244]	@ (8010ec4 <lfs_init+0x290>)
 8010dce:	f001 fc2b 	bl	8012628 <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d00f      	beq.n	8010dfc <lfs_init+0x1c8>
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010de0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010de6:	69db      	ldr	r3, [r3, #28]
 8010de8:	085b      	lsrs	r3, r3, #1
 8010dea:	429a      	cmp	r2, r3
 8010dec:	d206      	bcs.n	8010dfc <lfs_init+0x1c8>
 8010dee:	4b42      	ldr	r3, [pc, #264]	@ (8010ef8 <lfs_init+0x2c4>)
 8010df0:	4a33      	ldr	r2, [pc, #204]	@ (8010ec0 <lfs_init+0x28c>)
 8010df2:	f241 019c 	movw	r1, #4252	@ 0x109c
 8010df6:	4833      	ldr	r0, [pc, #204]	@ (8010ec4 <lfs_init+0x290>)
 8010df8:	f001 fc16 	bl	8012628 <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e06:	d00e      	beq.n	8010e26 <lfs_init+0x1f2>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e12:	69db      	ldr	r3, [r3, #28]
 8010e14:	429a      	cmp	r2, r3
 8010e16:	d906      	bls.n	8010e26 <lfs_init+0x1f2>
 8010e18:	4b38      	ldr	r3, [pc, #224]	@ (8010efc <lfs_init+0x2c8>)
 8010e1a:	4a29      	ldr	r2, [pc, #164]	@ (8010ec0 <lfs_init+0x28c>)
 8010e1c:	f241 019e 	movw	r1, #4254	@ 0x109e
 8010e20:	4828      	ldr	r0, [pc, #160]	@ (8010ec4 <lfs_init+0x290>)
 8010e22:	f001 fc01 	bl	8012628 <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // check that metadata_max is a multiple of read_size and prog_size,
    // and a factor of the block_size
    LFS_ASSERT(!lfs->cfg->metadata_max
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d013      	beq.n	8010e58 <lfs_init+0x224>
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010e36:	687a      	ldr	r2, [r7, #4]
 8010e38:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8010e3a:	6952      	ldr	r2, [r2, #20]
 8010e3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010e40:	fb01 f202 	mul.w	r2, r1, r2
 8010e44:	1a9b      	subs	r3, r3, r2
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d006      	beq.n	8010e58 <lfs_init+0x224>
 8010e4a:	4b2d      	ldr	r3, [pc, #180]	@ (8010f00 <lfs_init+0x2cc>)
 8010e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8010ec0 <lfs_init+0x28c>)
 8010e4e:	f241 01a3 	movw	r1, #4259	@ 0x10a3
 8010e52:	481c      	ldr	r0, [pc, #112]	@ (8010ec4 <lfs_init+0x290>)
 8010e54:	f001 fbe8 	bl	8012628 <__assert_func>
            || lfs->cfg->metadata_max % lfs->cfg->read_size == 0);
    LFS_ASSERT(!lfs->cfg->metadata_max
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d013      	beq.n	8010e8a <lfs_init+0x256>
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010e68:	687a      	ldr	r2, [r7, #4]
 8010e6a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8010e6c:	6992      	ldr	r2, [r2, #24]
 8010e6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010e72:	fb01 f202 	mul.w	r2, r1, r2
 8010e76:	1a9b      	subs	r3, r3, r2
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d006      	beq.n	8010e8a <lfs_init+0x256>
 8010e7c:	4b21      	ldr	r3, [pc, #132]	@ (8010f04 <lfs_init+0x2d0>)
 8010e7e:	4a10      	ldr	r2, [pc, #64]	@ (8010ec0 <lfs_init+0x28c>)
 8010e80:	f241 01a5 	movw	r1, #4261	@ 0x10a5
 8010e84:	480f      	ldr	r0, [pc, #60]	@ (8010ec4 <lfs_init+0x290>)
 8010e86:	f001 fbcf 	bl	8012628 <__assert_func>
            || lfs->cfg->metadata_max % lfs->cfg->prog_size == 0);
    LFS_ASSERT(!lfs->cfg->metadata_max
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d03b      	beq.n	8010f0c <lfs_init+0x2d8>
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e98:	69db      	ldr	r3, [r3, #28]
 8010e9a:	687a      	ldr	r2, [r7, #4]
 8010e9c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8010e9e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8010ea0:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ea4:	fb01 f202 	mul.w	r2, r1, r2
 8010ea8:	1a9b      	subs	r3, r3, r2
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d02e      	beq.n	8010f0c <lfs_init+0x2d8>
 8010eae:	4b16      	ldr	r3, [pc, #88]	@ (8010f08 <lfs_init+0x2d4>)
 8010eb0:	4a03      	ldr	r2, [pc, #12]	@ (8010ec0 <lfs_init+0x28c>)
 8010eb2:	f241 01a7 	movw	r1, #4263	@ 0x10a7
 8010eb6:	4803      	ldr	r0, [pc, #12]	@ (8010ec4 <lfs_init+0x290>)
 8010eb8:	f001 fbb6 	bl	8012628 <__assert_func>
 8010ebc:	08013c28 	.word	0x08013c28
 8010ec0:	08014744 	.word	0x08014744
 8010ec4:	08013884 	.word	0x08013884
 8010ec8:	08013c48 	.word	0x08013c48
 8010ecc:	08013c68 	.word	0x08013c68
 8010ed0:	08013c88 	.word	0x08013c88
 8010ed4:	08013ca8 	.word	0x08013ca8
 8010ed8:	08013cc4 	.word	0x08013cc4
 8010edc:	08013ce0 	.word	0x08013ce0
 8010ee0:	08013cfc 	.word	0x08013cfc
 8010ee4:	08013d2c 	.word	0x08013d2c
 8010ee8:	08013d5c 	.word	0x08013d5c
 8010eec:	08013d90 	.word	0x08013d90
 8010ef0:	08013dac 	.word	0x08013dac
 8010ef4:	08013df8 	.word	0x08013df8
 8010ef8:	08013e14 	.word	0x08013e14
 8010efc:	08013e68 	.word	0x08013e68
 8010f00:	08013ec8 	.word	0x08013ec8
 8010f04:	08013f18 	.word	0x08013f18
 8010f08:	08013f68 	.word	0x08013f68
            || lfs->cfg->block_size % lfs->cfg->metadata_max == 0);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d005      	beq.n	8010f22 <lfs_init+0x2ee>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	60da      	str	r2, [r3, #12]
 8010f20:	e010      	b.n	8010f44 <lfs_init+0x310>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f7fa fbb6 	bl	800b69a <lfs_malloc>
 8010f2e:	4602      	mov	r2, r0
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	68db      	ldr	r3, [r3, #12]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d103      	bne.n	8010f44 <lfs_init+0x310>
            err = LFS_ERR_NOMEM;
 8010f3c:	f06f 030b 	mvn.w	r3, #11
 8010f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8010f42:	e145      	b.n	80111d0 <lfs_init+0x59c>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d005      	beq.n	8010f5a <lfs_init+0x326>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	61da      	str	r2, [r3, #28]
 8010f58:	e010      	b.n	8010f7c <lfs_init+0x348>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7fa fb9a 	bl	800b69a <lfs_malloc>
 8010f66:	4602      	mov	r2, r0
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	69db      	ldr	r3, [r3, #28]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d103      	bne.n	8010f7c <lfs_init+0x348>
            err = LFS_ERR_NOMEM;
 8010f74:	f06f 030b 	mvn.w	r3, #11
 8010f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8010f7a:	e129      	b.n	80111d0 <lfs_init+0x59c>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	4619      	mov	r1, r3
 8010f80:	6878      	ldr	r0, [r7, #4]
 8010f82:	f7fa fbb0 	bl	800b6e6 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	3310      	adds	r3, #16
 8010f8a:	4619      	mov	r1, r3
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f7fa fbaa 	bl	800b6e6 <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d106      	bne.n	8010faa <lfs_init+0x376>
 8010f9c:	4b90      	ldr	r3, [pc, #576]	@ (80111e0 <lfs_init+0x5ac>)
 8010f9e:	4a91      	ldr	r2, [pc, #580]	@ (80111e4 <lfs_init+0x5b0>)
 8010fa0:	f241 01c6 	movw	r1, #4294	@ 0x10c6
 8010fa4:	4890      	ldr	r0, [pc, #576]	@ (80111e8 <lfs_init+0x5b4>)
 8010fa6:	f001 fb3f 	bl	8012628 <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d005      	beq.n	8010fc0 <lfs_init+0x38c>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010fb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	665a      	str	r2, [r3, #100]	@ 0x64
 8010fbe:	e010      	b.n	8010fe2 <lfs_init+0x3ae>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f7fa fb67 	bl	800b69a <lfs_malloc>
 8010fcc:	4602      	mov	r2, r0
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	665a      	str	r2, [r3, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d103      	bne.n	8010fe2 <lfs_init+0x3ae>
            err = LFS_ERR_NOMEM;
 8010fda:	f06f 030b 	mvn.w	r3, #11
 8010fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8010fe0:	e0f6      	b.n	80111d0 <lfs_init+0x59c>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010fe8:	2bff      	cmp	r3, #255	@ 0xff
 8010fea:	d906      	bls.n	8010ffa <lfs_init+0x3c6>
 8010fec:	4b7f      	ldr	r3, [pc, #508]	@ (80111ec <lfs_init+0x5b8>)
 8010fee:	4a7d      	ldr	r2, [pc, #500]	@ (80111e4 <lfs_init+0x5b0>)
 8010ff0:	f241 01d2 	movw	r1, #4306	@ 0x10d2
 8010ff4:	487c      	ldr	r0, [pc, #496]	@ (80111e8 <lfs_init+0x5b4>)
 8010ff6:	f001 fb17 	bl	8012628 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010ffe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	671a      	str	r2, [r3, #112]	@ 0x70
    if (!lfs->name_max) {
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011008:	2b00      	cmp	r3, #0
 801100a:	d102      	bne.n	8011012 <lfs_init+0x3de>
        lfs->name_max = LFS_NAME_MAX;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	22ff      	movs	r2, #255	@ 0xff
 8011010:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011018:	2b00      	cmp	r3, #0
 801101a:	da06      	bge.n	801102a <lfs_init+0x3f6>
 801101c:	4b74      	ldr	r3, [pc, #464]	@ (80111f0 <lfs_init+0x5bc>)
 801101e:	4a71      	ldr	r2, [pc, #452]	@ (80111e4 <lfs_init+0x5b0>)
 8011020:	f241 01d8 	movw	r1, #4312	@ 0x10d8
 8011024:	4870      	ldr	r0, [pc, #448]	@ (80111e8 <lfs_init+0x5b4>)
 8011026:	f001 faff 	bl	8012628 <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801102e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	675a      	str	r2, [r3, #116]	@ 0x74
    if (!lfs->file_max) {
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011038:	2b00      	cmp	r3, #0
 801103a:	d103      	bne.n	8011044 <lfs_init+0x410>
        lfs->file_max = LFS_FILE_MAX;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8011042:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801104a:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801104e:	4293      	cmp	r3, r2
 8011050:	d906      	bls.n	8011060 <lfs_init+0x42c>
 8011052:	4b68      	ldr	r3, [pc, #416]	@ (80111f4 <lfs_init+0x5c0>)
 8011054:	4a63      	ldr	r2, [pc, #396]	@ (80111e4 <lfs_init+0x5b0>)
 8011056:	f241 01de 	movw	r1, #4318	@ 0x10de
 801105a:	4863      	ldr	r0, [pc, #396]	@ (80111e8 <lfs_init+0x5b4>)
 801105c:	f001 fae4 	bl	8012628 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011064:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	679a      	str	r2, [r3, #120]	@ 0x78
    if (!lfs->attr_max) {
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801106e:	2b00      	cmp	r3, #0
 8011070:	d103      	bne.n	801107a <lfs_init+0x446>
        lfs->attr_max = LFS_ATTR_MAX;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8011078:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801107e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011084:	69db      	ldr	r3, [r3, #28]
 8011086:	429a      	cmp	r2, r3
 8011088:	d906      	bls.n	8011098 <lfs_init+0x464>
 801108a:	4b5b      	ldr	r3, [pc, #364]	@ (80111f8 <lfs_init+0x5c4>)
 801108c:	4a55      	ldr	r2, [pc, #340]	@ (80111e4 <lfs_init+0x5b0>)
 801108e:	f241 01e4 	movw	r1, #4324	@ 0x10e4
 8011092:	4855      	ldr	r0, [pc, #340]	@ (80111e8 <lfs_init+0x5b4>)
 8011094:	f001 fac8 	bl	8012628 <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801109c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801109e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110a2:	d00e      	beq.n	80110c2 <lfs_init+0x48e>
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80110a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80110ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110b0:	429a      	cmp	r2, r3
 80110b2:	d906      	bls.n	80110c2 <lfs_init+0x48e>
 80110b4:	4b51      	ldr	r3, [pc, #324]	@ (80111fc <lfs_init+0x5c8>)
 80110b6:	4a4b      	ldr	r2, [pc, #300]	@ (80111e4 <lfs_init+0x5b0>)
 80110b8:	f241 01e6 	movw	r1, #4326	@ 0x10e6
 80110bc:	484a      	ldr	r0, [pc, #296]	@ (80111e8 <lfs_init+0x5b4>)
 80110be:	f001 fab3 	bl	8012628 <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80110c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80110c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110cc:	d00d      	beq.n	80110ea <lfs_init+0x4b6>
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80110d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80110d8:	429a      	cmp	r2, r3
 80110da:	d906      	bls.n	80110ea <lfs_init+0x4b6>
 80110dc:	4b48      	ldr	r3, [pc, #288]	@ (8011200 <lfs_init+0x5cc>)
 80110de:	4a41      	ldr	r2, [pc, #260]	@ (80111e4 <lfs_init+0x5b0>)
 80110e0:	f241 01e8 	movw	r1, #4328	@ 0x10e8
 80110e4:	4840      	ldr	r0, [pc, #256]	@ (80111e8 <lfs_init+0x5b4>)
 80110e6:	f001 fa9f 	bl	8012628 <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80110ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80110f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110f4:	d019      	beq.n	801112a <lfs_init+0x4f6>
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80110fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011102:	2b00      	cmp	r3, #0
 8011104:	d004      	beq.n	8011110 <lfs_init+0x4dc>
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801110a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801110c:	08db      	lsrs	r3, r3, #3
 801110e:	e003      	b.n	8011118 <lfs_init+0x4e4>
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011114:	69db      	ldr	r3, [r3, #28]
 8011116:	08db      	lsrs	r3, r3, #3
 8011118:	4293      	cmp	r3, r2
 801111a:	d206      	bcs.n	801112a <lfs_init+0x4f6>
 801111c:	4b39      	ldr	r3, [pc, #228]	@ (8011204 <lfs_init+0x5d0>)
 801111e:	4a31      	ldr	r2, [pc, #196]	@ (80111e4 <lfs_init+0x5b0>)
 8011120:	f241 01ea 	movw	r1, #4330	@ 0x10ea
 8011124:	4830      	ldr	r0, [pc, #192]	@ (80111e8 <lfs_init+0x5b4>)
 8011126:	f001 fa7f 	bl	8012628 <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801112e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	67da      	str	r2, [r3, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011138:	f1b3 3fff 	cmp.w	r3, #4294967295
 801113c:	d103      	bne.n	8011146 <lfs_init+0x512>
        lfs->inline_max = 0;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2200      	movs	r2, #0
 8011142:	67da      	str	r2, [r3, #124]	@ 0x7c
 8011144:	e022      	b.n	801118c <lfs_init+0x558>
    } else if (lfs->inline_max == 0) {
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801114a:	2b00      	cmp	r3, #0
 801114c:	d11e      	bne.n	801118c <lfs_init+0x558>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011152:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
        lfs->inline_max = lfs_min(
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
        lfs->inline_max = lfs_min(
 801115e:	2b00      	cmp	r3, #0
 8011160:	d004      	beq.n	801116c <lfs_init+0x538>
                        ? lfs->cfg->metadata_max
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
        lfs->inline_max = lfs_min(
 8011168:	08db      	lsrs	r3, r3, #3
 801116a:	e003      	b.n	8011174 <lfs_init+0x540>
                        : lfs->cfg->block_size)/8));
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011170:	69db      	ldr	r3, [r3, #28]
        lfs->inline_max = lfs_min(
 8011172:	08db      	lsrs	r3, r3, #3
 8011174:	4619      	mov	r1, r3
 8011176:	4610      	mov	r0, r2
 8011178:	f7fa f9f0 	bl	800b55c <lfs_min>
 801117c:	4603      	mov	r3, r0
 801117e:	4619      	mov	r1, r3
 8011180:	4620      	mov	r0, r4
 8011182:	f7fa f9eb 	bl	800b55c <lfs_min>
 8011186:	4602      	mov	r2, r0
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f04f 32ff 	mov.w	r2, #4294967295
 8011192:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	f04f 32ff 	mov.w	r2, #4294967295
 801119a:	625a      	str	r2, [r3, #36]	@ 0x24
    lfs->mlist = NULL;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2200      	movs	r2, #0
 80111a0:	629a      	str	r2, [r3, #40]	@ 0x28
    lfs->seed = 0;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2200      	movs	r2, #0
 80111a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	333c      	adds	r3, #60	@ 0x3c
 80111ac:	2200      	movs	r2, #0
 80111ae:	601a      	str	r2, [r3, #0]
 80111b0:	605a      	str	r2, [r3, #4]
 80111b2:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	3330      	adds	r3, #48	@ 0x30
 80111b8:	2200      	movs	r2, #0
 80111ba:	601a      	str	r2, [r3, #0]
 80111bc:	605a      	str	r2, [r3, #4]
 80111be:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	3348      	adds	r3, #72	@ 0x48
 80111c4:	2200      	movs	r2, #0
 80111c6:	601a      	str	r2, [r3, #0]
 80111c8:	605a      	str	r2, [r3, #4]
 80111ca:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 80111cc:	2300      	movs	r3, #0
 80111ce:	e003      	b.n	80111d8 <lfs_init+0x5a4>

cleanup:
    lfs_deinit(lfs);
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f000 f819 	bl	8011208 <lfs_deinit>
    return err;
 80111d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80111d8:	4618      	mov	r0, r3
 80111da:	3734      	adds	r7, #52	@ 0x34
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd90      	pop	{r4, r7, pc}
 80111e0:	08013fb8 	.word	0x08013fb8
 80111e4:	08014744 	.word	0x08014744
 80111e8:	08013884 	.word	0x08013884
 80111ec:	08013fd8 	.word	0x08013fd8
 80111f0:	08013ff4 	.word	0x08013ff4
 80111f4:	08014018 	.word	0x08014018
 80111f8:	08014034 	.word	0x08014034
 80111fc:	08014064 	.word	0x08014064
 8011200:	080140bc 	.word	0x080140bc
 8011204:	0801410c 	.word	0x0801410c

08011208 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8011208:	b580      	push	{r7, lr}
 801120a:	b082      	sub	sp, #8
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011216:	2b00      	cmp	r3, #0
 8011218:	d104      	bne.n	8011224 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	68db      	ldr	r3, [r3, #12]
 801121e:	4618      	mov	r0, r3
 8011220:	f7fa fa47 	bl	800b6b2 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801122a:	2b00      	cmp	r3, #0
 801122c:	d104      	bne.n	8011238 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	69db      	ldr	r3, [r3, #28]
 8011232:	4618      	mov	r0, r3
 8011234:	f7fa fa3d 	bl	800b6b2 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801123c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801123e:	2b00      	cmp	r3, #0
 8011240:	d104      	bne.n	801124c <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011246:	4618      	mov	r0, r3
 8011248:	f7fa fa33 	bl	800b6b2 <lfs_free>
    }

    return 0;
 801124c:	2300      	movs	r3, #0
}
 801124e:	4618      	mov	r0, r3
 8011250:	3708      	adds	r7, #8
 8011252:	46bd      	mov	sp, r7
 8011254:	bd80      	pop	{r7, pc}
	...

08011258 <lfs_format_>:



#ifndef LFS_READONLY
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 8011258:	b580      	push	{r7, lr}
 801125a:	b0a0      	sub	sp, #128	@ 0x80
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
 8011260:	6039      	str	r1, [r7, #0]
    int err = 0;
 8011262:	2300      	movs	r3, #0
 8011264:	67fb      	str	r3, [r7, #124]	@ 0x7c
    {
        err = lfs_init(lfs, cfg);
 8011266:	6839      	ldr	r1, [r7, #0]
 8011268:	6878      	ldr	r0, [r7, #4]
 801126a:	f7ff fce3 	bl	8010c34 <lfs_init>
 801126e:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8011270:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011272:	2b00      	cmp	r3, #0
 8011274:	d001      	beq.n	801127a <lfs_format_+0x22>
            return err;
 8011276:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011278:	e08d      	b.n	8011396 <lfs_format_+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	6a1b      	ldr	r3, [r3, #32]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d106      	bne.n	8011290 <lfs_format_+0x38>
 8011282:	4b47      	ldr	r3, [pc, #284]	@ (80113a0 <lfs_format_+0x148>)
 8011284:	4a47      	ldr	r2, [pc, #284]	@ (80113a4 <lfs_format_+0x14c>)
 8011286:	f241 112a 	movw	r1, #4394	@ 0x112a
 801128a:	4847      	ldr	r0, [pc, #284]	@ (80113a8 <lfs_format_+0x150>)
 801128c:	f001 f9cc 	bl	8012628 <__assert_func>

        // create free lookahead
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801129a:	461a      	mov	r2, r3
 801129c:	2100      	movs	r1, #0
 801129e:	f001 fbd8 	bl	8012a52 <memset>
        lfs->lookahead.start = 0;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	2200      	movs	r2, #0
 80112a6:	655a      	str	r2, [r3, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80112ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112ae:	00da      	lsls	r2, r3, #3
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80112b4:	4619      	mov	r1, r3
 80112b6:	4610      	mov	r0, r2
 80112b8:	f7fa f950 	bl	800b55c <lfs_min>
 80112bc:	4602      	mov	r2, r0
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	659a      	str	r2, [r3, #88]	@ 0x58
                lfs->block_count);
        lfs->lookahead.next = 0;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	2200      	movs	r2, #0
 80112c6:	65da      	str	r2, [r3, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 80112c8:	6878      	ldr	r0, [r7, #4]
 80112ca:	f7fb f960 	bl	800c58e <lfs_alloc_ckpoint>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 80112ce:	f107 030c 	add.w	r3, r7, #12
 80112d2:	4619      	mov	r1, r3
 80112d4:	6878      	ldr	r0, [r7, #4]
 80112d6:	f7fd f837 	bl	800e348 <lfs_dir_alloc>
 80112da:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 80112dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d150      	bne.n	8011384 <lfs_format_+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 80112e2:	6878      	ldr	r0, [r7, #4]
 80112e4:	f7fb f92a 	bl	800c53c <lfs_fs_disk_version>
 80112e8:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 80112ea:	667b      	str	r3, [r7, #100]	@ 0x64
            .block_size  = lfs->cfg->block_size,
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80112f0:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 80112f2:	66bb      	str	r3, [r7, #104]	@ 0x68
            .block_count = lfs->block_count,
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 80112f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
            .name_max    = lfs->name_max,
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
        lfs_superblock_t superblock = {
 80112fe:	673b      	str	r3, [r7, #112]	@ 0x70
            .file_max    = lfs->file_max,
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
        lfs_superblock_t superblock = {
 8011304:	677b      	str	r3, [r7, #116]	@ 0x74
            .attr_max    = lfs->attr_max,
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
        lfs_superblock_t superblock = {
 801130a:	67bb      	str	r3, [r7, #120]	@ 0x78
        };

        lfs_superblock_tole32(&superblock);
 801130c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8011310:	4618      	mov	r0, r3
 8011312:	f7fb f889 	bl	800c428 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8011316:	4b25      	ldr	r3, [pc, #148]	@ (80113ac <lfs_format_+0x154>)
 8011318:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801131a:	2300      	movs	r3, #0
 801131c:	653b      	str	r3, [r7, #80]	@ 0x50
 801131e:	4b24      	ldr	r3, [pc, #144]	@ (80113b0 <lfs_format_+0x158>)
 8011320:	657b      	str	r3, [r7, #84]	@ 0x54
 8011322:	4b24      	ldr	r3, [pc, #144]	@ (80113b4 <lfs_format_+0x15c>)
 8011324:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011326:	4b24      	ldr	r3, [pc, #144]	@ (80113b8 <lfs_format_+0x160>)
 8011328:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801132a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801132e:	663b      	str	r3, [r7, #96]	@ 0x60
 8011330:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8011334:	f107 010c 	add.w	r1, r7, #12
 8011338:	2303      	movs	r3, #3
 801133a:	6878      	ldr	r0, [r7, #4]
 801133c:	f7fe fa30 	bl	800f7a0 <lfs_dir_commit>
 8011340:	67f8      	str	r0, [r7, #124]	@ 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8011342:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011344:	2b00      	cmp	r3, #0
 8011346:	d11f      	bne.n	8011388 <lfs_format_+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8011348:	2300      	movs	r3, #0
 801134a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 801134e:	f107 010c 	add.w	r1, r7, #12
 8011352:	2300      	movs	r3, #0
 8011354:	2200      	movs	r2, #0
 8011356:	6878      	ldr	r0, [r7, #4]
 8011358:	f7fe fa22 	bl	800f7a0 <lfs_dir_commit>
 801135c:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 801135e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011360:	2b00      	cmp	r3, #0
 8011362:	d113      	bne.n	801138c <lfs_format_+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8011364:	2300      	movs	r3, #0
 8011366:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011368:	2301      	movs	r3, #1
 801136a:	633b      	str	r3, [r7, #48]	@ 0x30
 801136c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8011370:	f107 030c 	add.w	r3, r7, #12
 8011374:	4619      	mov	r1, r3
 8011376:	6878      	ldr	r0, [r7, #4]
 8011378:	f7fc fc24 	bl	800dbc4 <lfs_dir_fetch>
 801137c:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 801137e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011380:	2b00      	cmp	r3, #0
 8011382:	e004      	b.n	801138e <lfs_format_+0x136>
            goto cleanup;
 8011384:	bf00      	nop
 8011386:	e002      	b.n	801138e <lfs_format_+0x136>
            goto cleanup;
 8011388:	bf00      	nop
 801138a:	e000      	b.n	801138e <lfs_format_+0x136>
            goto cleanup;
 801138c:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 801138e:	6878      	ldr	r0, [r7, #4]
 8011390:	f7ff ff3a 	bl	8011208 <lfs_deinit>
    return err;
 8011394:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c

}
 8011396:	4618      	mov	r0, r3
 8011398:	3780      	adds	r7, #128	@ 0x80
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}
 801139e:	bf00      	nop
 80113a0:	0801419c 	.word	0x0801419c
 80113a4:	08014750 	.word	0x08014750
 80113a8:	08013884 	.word	0x08013884
 80113ac:	40100000 	.word	0x40100000
 80113b0:	0ff00008 	.word	0x0ff00008
 80113b4:	080141b4 	.word	0x080141b4
 80113b8:	20100018 	.word	0x20100018

080113bc <lfs_tortoise_detectcycles>:
    lfs_size_t i;
    lfs_size_t period;
};

static int lfs_tortoise_detectcycles(
    const lfs_mdir_t *dir, struct lfs_tortoise_t *tortoise) {
 80113bc:	b580      	push	{r7, lr}
 80113be:	b082      	sub	sp, #8
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
 80113c4:	6039      	str	r1, [r7, #0]
    // detect cycles with Brent's algorithm
    if (lfs_pair_issync(dir->tail, tortoise->pair)) {
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	3318      	adds	r3, #24
 80113ca:	683a      	ldr	r2, [r7, #0]
 80113cc:	4611      	mov	r1, r2
 80113ce:	4618      	mov	r0, r3
 80113d0:	f7fa fdb0 	bl	800bf34 <lfs_pair_issync>
 80113d4:	4603      	mov	r3, r0
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d009      	beq.n	80113ee <lfs_tortoise_detectcycles+0x32>
        LFS_WARN("Cycle detected in tail list");
 80113da:	4b15      	ldr	r3, [pc, #84]	@ (8011430 <lfs_tortoise_detectcycles+0x74>)
 80113dc:	f241 126f 	movw	r2, #4463	@ 0x116f
 80113e0:	4914      	ldr	r1, [pc, #80]	@ (8011434 <lfs_tortoise_detectcycles+0x78>)
 80113e2:	4815      	ldr	r0, [pc, #84]	@ (8011438 <lfs_tortoise_detectcycles+0x7c>)
 80113e4:	f001 fad0 	bl	8012988 <iprintf>
        return LFS_ERR_CORRUPT;
 80113e8:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80113ec:	e01b      	b.n	8011426 <lfs_tortoise_detectcycles+0x6a>
    }
    if (tortoise->i == tortoise->period) {
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	689a      	ldr	r2, [r3, #8]
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	68db      	ldr	r3, [r3, #12]
 80113f6:	429a      	cmp	r2, r3
 80113f8:	d10f      	bne.n	801141a <lfs_tortoise_detectcycles+0x5e>
        tortoise->pair[0] = dir->tail[0];
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	699a      	ldr	r2, [r3, #24]
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	601a      	str	r2, [r3, #0]
        tortoise->pair[1] = dir->tail[1];
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	69da      	ldr	r2, [r3, #28]
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	605a      	str	r2, [r3, #4]
        tortoise->i = 0;
 801140a:	683b      	ldr	r3, [r7, #0]
 801140c:	2200      	movs	r2, #0
 801140e:	609a      	str	r2, [r3, #8]
        tortoise->period *= 2;
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	68db      	ldr	r3, [r3, #12]
 8011414:	005a      	lsls	r2, r3, #1
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	60da      	str	r2, [r3, #12]
    }
    tortoise->i += 1;
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	689b      	ldr	r3, [r3, #8]
 801141e:	1c5a      	adds	r2, r3, #1
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	609a      	str	r2, [r3, #8]

    return LFS_ERR_OK;
 8011424:	2300      	movs	r3, #0
}
 8011426:	4618      	mov	r0, r3
 8011428:	3708      	adds	r7, #8
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
 801142e:	bf00      	nop
 8011430:	080139a4 	.word	0x080139a4
 8011434:	08013884 	.word	0x08013884
 8011438:	080141c0 	.word	0x080141c0

0801143c <lfs_mount_>:

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 801143c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801143e:	b0a1      	sub	sp, #132	@ 0x84
 8011440:	af04      	add	r7, sp, #16
 8011442:	6078      	str	r0, [r7, #4]
 8011444:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8011446:	6839      	ldr	r1, [r7, #0]
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	f7ff fbf3 	bl	8010c34 <lfs_init>
 801144e:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (err) {
 8011450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011452:	2b00      	cmp	r3, #0
 8011454:	d001      	beq.n	801145a <lfs_mount_+0x1e>
        return err;
 8011456:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011458:	e1e5      	b.n	8011826 <lfs_mount_+0x3ea>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 801145a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801145e:	2220      	movs	r2, #32
 8011460:	2100      	movs	r1, #0
 8011462:	4618      	mov	r0, r3
 8011464:	f001 faf5 	bl	8012a52 <memset>
 8011468:	2301      	movs	r3, #1
 801146a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    struct lfs_tortoise_t tortoise = {
 801146c:	4ba0      	ldr	r3, [pc, #640]	@ (80116f0 <lfs_mount_+0x2b4>)
 801146e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8011472:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011474:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    while (!lfs_pair_isnull(dir.tail)) {
 8011478:	e17f      	b.n	801177a <lfs_mount_+0x33e>
        err = lfs_tortoise_detectcycles(&dir, &tortoise);
 801147a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801147e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8011482:	4611      	mov	r1, r2
 8011484:	4618      	mov	r0, r3
 8011486:	f7ff ff99 	bl	80113bc <lfs_tortoise_detectcycles>
 801148a:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (err < 0) {
 801148c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801148e:	2b00      	cmp	r3, #0
 8011490:	f2c0 81c2 	blt.w	8011818 <lfs_mount_+0x3dc>
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	627b      	str	r3, [r7, #36]	@ 0x24
 8011498:	4b96      	ldr	r3, [pc, #600]	@ (80116f4 <lfs_mount_+0x2b8>)
 801149a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801149c:	2308      	movs	r3, #8
 801149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 80114a0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80114a4:	f103 0218 	add.w	r2, r3, #24
 80114a8:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80114ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80114b0:	9303      	str	r3, [sp, #12]
 80114b2:	4b91      	ldr	r3, [pc, #580]	@ (80116f8 <lfs_mount_+0x2bc>)
 80114b4:	9302      	str	r3, [sp, #8]
 80114b6:	2300      	movs	r3, #0
 80114b8:	9301      	str	r3, [sp, #4]
 80114ba:	4b90      	ldr	r3, [pc, #576]	@ (80116fc <lfs_mount_+0x2c0>)
 80114bc:	9300      	str	r3, [sp, #0]
 80114be:	4b90      	ldr	r3, [pc, #576]	@ (8011700 <lfs_mount_+0x2c4>)
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	f7fb ffaf 	bl	800d424 <lfs_dir_fetchmatch>
 80114c6:	6678      	str	r0, [r7, #100]	@ 0x64
                    lfs, "littlefs", 8});
        if (tag < 0) {
 80114c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	da02      	bge.n	80114d4 <lfs_mount_+0x98>
            err = tag;
 80114ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80114d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 80114d2:	e1a4      	b.n	801181e <lfs_mount_+0x3e2>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 80114d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	f000 8142 	beq.w	8011760 <lfs_mount_+0x324>
 80114dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80114de:	4618      	mov	r0, r3
 80114e0:	f7fa fd97 	bl	800c012 <lfs_tag_isdelete>
 80114e4:	4603      	mov	r3, r0
 80114e6:	f083 0301 	eor.w	r3, r3, #1
 80114ea:	b2db      	uxtb	r3, r3
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	f000 8137 	beq.w	8011760 <lfs_mount_+0x324>
            // update root
            lfs->root[0] = dir.pair[0];
 80114f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 80114f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	625a      	str	r2, [r3, #36]	@ 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 80114fe:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8011502:	f107 030c 	add.w	r3, r7, #12
 8011506:	9300      	str	r3, [sp, #0]
 8011508:	4b7e      	ldr	r3, [pc, #504]	@ (8011704 <lfs_mount_+0x2c8>)
 801150a:	4a7d      	ldr	r2, [pc, #500]	@ (8011700 <lfs_mount_+0x2c4>)
 801150c:	6878      	ldr	r0, [r7, #4]
 801150e:	f7fb fa53 	bl	800c9b8 <lfs_dir_get>
 8011512:	6678      	str	r0, [r7, #100]	@ 0x64
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8011514:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011516:	2b00      	cmp	r3, #0
 8011518:	da02      	bge.n	8011520 <lfs_mount_+0xe4>
                err = tag;
 801151a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801151c:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 801151e:	e11e      	b.n	801175e <lfs_mount_+0x322>
            }
            lfs_superblock_fromle32(&superblock);
 8011520:	f107 030c 	add.w	r3, r7, #12
 8011524:	4618      	mov	r0, r3
 8011526:	f7fa ff47 	bl	800c3b8 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	0c1b      	lsrs	r3, r3, #16
 801152e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
            if (major_version != lfs_fs_disk_version_major(lfs)
 8011538:	6878      	ldr	r0, [r7, #4]
 801153a:	f7fb f80d 	bl	800c558 <lfs_fs_disk_version_major>
 801153e:	4603      	mov	r3, r0
 8011540:	461a      	mov	r2, r3
 8011542:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8011546:	4293      	cmp	r3, r2
 8011548:	d108      	bne.n	801155c <lfs_mount_+0x120>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 801154a:	6878      	ldr	r0, [r7, #4]
 801154c:	f7fb f812 	bl	800c574 <lfs_fs_disk_version_minor>
 8011550:	4603      	mov	r3, r0
 8011552:	461a      	mov	r2, r3
 8011554:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8011558:	4293      	cmp	r3, r2
 801155a:	d91d      	bls.n	8011598 <lfs_mount_+0x15c>
                LFS_ERROR("Invalid version "
 801155c:	f8b7 5062 	ldrh.w	r5, [r7, #98]	@ 0x62
 8011560:	f8b7 4060 	ldrh.w	r4, [r7, #96]	@ 0x60
 8011564:	6878      	ldr	r0, [r7, #4]
 8011566:	f7fa fff7 	bl	800c558 <lfs_fs_disk_version_major>
 801156a:	4603      	mov	r3, r0
 801156c:	461e      	mov	r6, r3
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f7fb f800 	bl	800c574 <lfs_fs_disk_version_minor>
 8011574:	4603      	mov	r3, r0
 8011576:	461a      	mov	r2, r3
 8011578:	4b63      	ldr	r3, [pc, #396]	@ (8011708 <lfs_mount_+0x2cc>)
 801157a:	9303      	str	r3, [sp, #12]
 801157c:	9202      	str	r2, [sp, #8]
 801157e:	9601      	str	r6, [sp, #4]
 8011580:	9400      	str	r4, [sp, #0]
 8011582:	462b      	mov	r3, r5
 8011584:	f241 12b2 	movw	r2, #4530	@ 0x11b2
 8011588:	4960      	ldr	r1, [pc, #384]	@ (801170c <lfs_mount_+0x2d0>)
 801158a:	4861      	ldr	r0, [pc, #388]	@ (8011710 <lfs_mount_+0x2d4>)
 801158c:	f001 f9fc 	bl	8012988 <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 8011590:	f06f 0315 	mvn.w	r3, #21
 8011594:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8011596:	e0e2      	b.n	801175e <lfs_mount_+0x322>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            bool needssuperblock = false;
 8011598:	2300      	movs	r3, #0
 801159a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f7fa ffe8 	bl	800c574 <lfs_fs_disk_version_minor>
 80115a4:	4603      	mov	r3, r0
 80115a6:	461a      	mov	r2, r3
 80115a8:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80115ac:	4293      	cmp	r3, r2
 80115ae:	d21c      	bcs.n	80115ea <lfs_mount_+0x1ae>
                LFS_DEBUG("Found older minor version "
 80115b0:	f8b7 5062 	ldrh.w	r5, [r7, #98]	@ 0x62
 80115b4:	f8b7 4060 	ldrh.w	r4, [r7, #96]	@ 0x60
 80115b8:	6878      	ldr	r0, [r7, #4]
 80115ba:	f7fa ffcd 	bl	800c558 <lfs_fs_disk_version_major>
 80115be:	4603      	mov	r3, r0
 80115c0:	461e      	mov	r6, r3
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f7fa ffd6 	bl	800c574 <lfs_fs_disk_version_minor>
 80115c8:	4603      	mov	r3, r0
 80115ca:	461a      	mov	r2, r3
 80115cc:	4b4e      	ldr	r3, [pc, #312]	@ (8011708 <lfs_mount_+0x2cc>)
 80115ce:	9303      	str	r3, [sp, #12]
 80115d0:	9202      	str	r2, [sp, #8]
 80115d2:	9601      	str	r6, [sp, #4]
 80115d4:	9400      	str	r4, [sp, #0]
 80115d6:	462b      	mov	r3, r5
 80115d8:	f241 12c1 	movw	r2, #4545	@ 0x11c1
 80115dc:	494b      	ldr	r1, [pc, #300]	@ (801170c <lfs_mount_+0x2d0>)
 80115de:	484d      	ldr	r0, [pc, #308]	@ (8011714 <lfs_mount_+0x2d8>)
 80115e0:	f001 f9d2 	bl	8012988 <iprintf>
                        "v%"PRIu16".%"PRIu16" < v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                needssuperblock = true;
 80115e4:	2301      	movs	r3, #1
 80115e6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
            }
            // note this bit is reserved on disk, so fetching more gstate
            // will not interfere here
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 80115ea:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80115ee:	4619      	mov	r1, r3
 80115f0:	6878      	ldr	r0, [r7, #4]
 80115f2:	f000 fb4f 	bl	8011c94 <lfs_fs_prepsuperblock>

            // check superblock configuration
            if (superblock.name_max) {
 80115f6:	69bb      	ldr	r3, [r7, #24]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d018      	beq.n	801162e <lfs_mount_+0x1f2>
                if (superblock.name_max > lfs->name_max) {
 80115fc:	69ba      	ldr	r2, [r7, #24]
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011602:	429a      	cmp	r2, r3
 8011604:	d910      	bls.n	8011628 <lfs_mount_+0x1ec>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8011606:	69ba      	ldr	r2, [r7, #24]
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801160c:	493e      	ldr	r1, [pc, #248]	@ (8011708 <lfs_mount_+0x2cc>)
 801160e:	9101      	str	r1, [sp, #4]
 8011610:	9300      	str	r3, [sp, #0]
 8011612:	4613      	mov	r3, r2
 8011614:	f241 12d0 	movw	r2, #4560	@ 0x11d0
 8011618:	493c      	ldr	r1, [pc, #240]	@ (801170c <lfs_mount_+0x2d0>)
 801161a:	483f      	ldr	r0, [pc, #252]	@ (8011718 <lfs_mount_+0x2dc>)
 801161c:	f001 f9b4 	bl	8012988 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8011620:	f06f 0315 	mvn.w	r3, #21
 8011624:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8011626:	e09a      	b.n	801175e <lfs_mount_+0x322>
                }

                lfs->name_max = superblock.name_max;
 8011628:	69ba      	ldr	r2, [r7, #24]
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            if (superblock.file_max) {
 801162e:	69fb      	ldr	r3, [r7, #28]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d018      	beq.n	8011666 <lfs_mount_+0x22a>
                if (superblock.file_max > lfs->file_max) {
 8011634:	69fa      	ldr	r2, [r7, #28]
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801163a:	429a      	cmp	r2, r3
 801163c:	d910      	bls.n	8011660 <lfs_mount_+0x224>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 801163e:	69fa      	ldr	r2, [r7, #28]
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011644:	4930      	ldr	r1, [pc, #192]	@ (8011708 <lfs_mount_+0x2cc>)
 8011646:	9101      	str	r1, [sp, #4]
 8011648:	9300      	str	r3, [sp, #0]
 801164a:	4613      	mov	r3, r2
 801164c:	f241 12db 	movw	r2, #4571	@ 0x11db
 8011650:	492e      	ldr	r1, [pc, #184]	@ (801170c <lfs_mount_+0x2d0>)
 8011652:	4832      	ldr	r0, [pc, #200]	@ (801171c <lfs_mount_+0x2e0>)
 8011654:	f001 f998 	bl	8012988 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8011658:	f06f 0315 	mvn.w	r3, #21
 801165c:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 801165e:	e07e      	b.n	801175e <lfs_mount_+0x322>
                }

                lfs->file_max = superblock.file_max;
 8011660:	69fa      	ldr	r2, [r7, #28]
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            if (superblock.attr_max) {
 8011666:	6a3b      	ldr	r3, [r7, #32]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d023      	beq.n	80116b4 <lfs_mount_+0x278>
                if (superblock.attr_max > lfs->attr_max) {
 801166c:	6a3a      	ldr	r2, [r7, #32]
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011672:	429a      	cmp	r2, r3
 8011674:	d910      	bls.n	8011698 <lfs_mount_+0x25c>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8011676:	6a3a      	ldr	r2, [r7, #32]
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801167c:	4922      	ldr	r1, [pc, #136]	@ (8011708 <lfs_mount_+0x2cc>)
 801167e:	9101      	str	r1, [sp, #4]
 8011680:	9300      	str	r3, [sp, #0]
 8011682:	4613      	mov	r3, r2
 8011684:	f241 12e6 	movw	r2, #4582	@ 0x11e6
 8011688:	4920      	ldr	r1, [pc, #128]	@ (801170c <lfs_mount_+0x2d0>)
 801168a:	4825      	ldr	r0, [pc, #148]	@ (8011720 <lfs_mount_+0x2e4>)
 801168c:	f001 f97c 	bl	8012988 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8011690:	f06f 0315 	mvn.w	r3, #21
 8011694:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8011696:	e062      	b.n	801175e <lfs_mount_+0x322>
                }

                lfs->attr_max = superblock.attr_max;
 8011698:	6a3a      	ldr	r2, [r7, #32]
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	679a      	str	r2, [r3, #120]	@ 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80116a6:	4619      	mov	r1, r3
 80116a8:	4610      	mov	r0, r2
 80116aa:	f7f9 ff57 	bl	800b55c <lfs_min>
 80116ae:	4602      	mov	r2, r0
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80116b8:	6a1b      	ldr	r3, [r3, #32]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d034      	beq.n	8011728 <lfs_mount_+0x2ec>
                    && superblock.block_count != lfs->cfg->block_count) {
 80116be:	697a      	ldr	r2, [r7, #20]
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80116c4:	6a1b      	ldr	r3, [r3, #32]
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d02e      	beq.n	8011728 <lfs_mount_+0x2ec>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 80116ca:	697a      	ldr	r2, [r7, #20]
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80116d0:	6a1b      	ldr	r3, [r3, #32]
 80116d2:	490d      	ldr	r1, [pc, #52]	@ (8011708 <lfs_mount_+0x2cc>)
 80116d4:	9101      	str	r1, [sp, #4]
 80116d6:	9300      	str	r3, [sp, #0]
 80116d8:	4613      	mov	r3, r2
 80116da:	f241 12f5 	movw	r2, #4597	@ 0x11f5
 80116de:	490b      	ldr	r1, [pc, #44]	@ (801170c <lfs_mount_+0x2d0>)
 80116e0:	4810      	ldr	r0, [pc, #64]	@ (8011724 <lfs_mount_+0x2e8>)
 80116e2:	f001 f951 	bl	8012988 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 80116e6:	f06f 0315 	mvn.w	r3, #21
 80116ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 80116ec:	e037      	b.n	801175e <lfs_mount_+0x322>
 80116ee:	bf00      	nop
 80116f0:	0801439c 	.word	0x0801439c
 80116f4:	080141b4 	.word	0x080141b4
 80116f8:	0800dc61 	.word	0x0800dc61
 80116fc:	0ff00008 	.word	0x0ff00008
 8011700:	7ffffc00 	.word	0x7ffffc00
 8011704:	20100018 	.word	0x20100018
 8011708:	080139a4 	.word	0x080139a4
 801170c:	08013884 	.word	0x08013884
 8011710:	080141ec 	.word	0x080141ec
 8011714:	08014224 	.word	0x08014224
 8011718:	08014264 	.word	0x08014264
 801171c:	08014298 	.word	0x08014298
 8011720:	080142cc 	.word	0x080142cc
 8011724:	08014300 	.word	0x08014300
            }

            lfs->block_count = superblock.block_count;
 8011728:	697a      	ldr	r2, [r7, #20]
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	66da      	str	r2, [r3, #108]	@ 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 801172e:	693a      	ldr	r2, [r7, #16]
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011734:	69db      	ldr	r3, [r3, #28]
 8011736:	429a      	cmp	r2, r3
 8011738:	d012      	beq.n	8011760 <lfs_mount_+0x324>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 801173a:	693a      	ldr	r2, [r7, #16]
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011740:	69db      	ldr	r3, [r3, #28]
 8011742:	493b      	ldr	r1, [pc, #236]	@ (8011830 <lfs_mount_+0x3f4>)
 8011744:	9101      	str	r1, [sp, #4]
 8011746:	9300      	str	r3, [sp, #0]
 8011748:	4613      	mov	r3, r2
 801174a:	f241 12fe 	movw	r2, #4606	@ 0x11fe
 801174e:	4939      	ldr	r1, [pc, #228]	@ (8011834 <lfs_mount_+0x3f8>)
 8011750:	4839      	ldr	r0, [pc, #228]	@ (8011838 <lfs_mount_+0x3fc>)
 8011752:	f001 f919 	bl	8012988 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8011756:	f06f 0315 	mvn.w	r3, #21
 801175a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 801175c:	bf00      	nop
            goto cleanup;
 801175e:	e05e      	b.n	801181e <lfs_mount_+0x3e2>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011766:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801176a:	4619      	mov	r1, r3
 801176c:	6878      	ldr	r0, [r7, #4]
 801176e:	f7fc fa45 	bl	800dbfc <lfs_dir_getgstate>
 8011772:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (err) {
 8011774:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011776:	2b00      	cmp	r3, #0
 8011778:	d150      	bne.n	801181c <lfs_mount_+0x3e0>
    while (!lfs_pair_isnull(dir.tail)) {
 801177a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801177e:	3318      	adds	r3, #24
 8011780:	4618      	mov	r0, r3
 8011782:	f7fa fb92 	bl	800beaa <lfs_pair_isnull>
 8011786:	4603      	mov	r3, r0
 8011788:	f083 0301 	eor.w	r3, r3, #1
 801178c:	b2db      	uxtb	r3, r3
 801178e:	2b00      	cmp	r3, #0
 8011790:	f47f ae73 	bne.w	801147a <lfs_mount_+0x3e>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	3330      	adds	r3, #48	@ 0x30
 8011798:	4618      	mov	r0, r3
 801179a:	f7fa fce8 	bl	800c16e <lfs_gstate_iszero>
 801179e:	4603      	mov	r3, r0
 80117a0:	f083 0301 	eor.w	r3, r3, #1
 80117a4:	b2db      	uxtb	r3, r3
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d010      	beq.n	80117cc <lfs_mount_+0x390>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80117b2:	687a      	ldr	r2, [r7, #4]
 80117b4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80117b6:	481e      	ldr	r0, [pc, #120]	@ (8011830 <lfs_mount_+0x3f4>)
 80117b8:	9002      	str	r0, [sp, #8]
 80117ba:	9201      	str	r2, [sp, #4]
 80117bc:	9300      	str	r3, [sp, #0]
 80117be:	460b      	mov	r3, r1
 80117c0:	f241 220e 	movw	r2, #4622	@ 0x120e
 80117c4:	491b      	ldr	r1, [pc, #108]	@ (8011834 <lfs_mount_+0x3f8>)
 80117c6:	481d      	ldr	r0, [pc, #116]	@ (801183c <lfs_mount_+0x400>)
 80117c8:	f001 f8de 	bl	8012988 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117d0:	4618      	mov	r0, r3
 80117d2:	f7fa fc10 	bl	800bff6 <lfs_tag_isvalid>
 80117d6:	4603      	mov	r3, r0
 80117d8:	f083 0301 	eor.w	r3, r3, #1
 80117dc:	b2db      	uxtb	r3, r3
 80117de:	461a      	mov	r2, r3
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117e4:	441a      	add	r2, r3
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	687a      	ldr	r2, [r7, #4]
 80117ee:	333c      	adds	r3, #60	@ 0x3c
 80117f0:	3230      	adds	r2, #48	@ 0x30
 80117f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80117f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117fc:	687a      	ldr	r2, [r7, #4]
 80117fe:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8011800:	fbb3 f1f2 	udiv	r1, r3, r2
 8011804:	fb01 f202 	mul.w	r2, r1, r2
 8011808:	1a9a      	subs	r2, r3, r2
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 801180e:	6878      	ldr	r0, [r7, #4]
 8011810:	f7fa fecb 	bl	800c5aa <lfs_alloc_drop>

    return 0;
 8011814:	2300      	movs	r3, #0
 8011816:	e006      	b.n	8011826 <lfs_mount_+0x3ea>
            goto cleanup;
 8011818:	bf00      	nop
 801181a:	e000      	b.n	801181e <lfs_mount_+0x3e2>
            goto cleanup;
 801181c:	bf00      	nop

cleanup:
    lfs_unmount_(lfs);
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	f000 f80e 	bl	8011840 <lfs_unmount_>
    return err;
 8011824:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8011826:	4618      	mov	r0, r3
 8011828:	3774      	adds	r7, #116	@ 0x74
 801182a:	46bd      	mov	sp, r7
 801182c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801182e:	bf00      	nop
 8011830:	080139a4 	.word	0x080139a4
 8011834:	08013884 	.word	0x08013884
 8011838:	08014334 	.word	0x08014334
 801183c:	08014364 	.word	0x08014364

08011840 <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 8011840:	b580      	push	{r7, lr}
 8011842:	b082      	sub	sp, #8
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	f7ff fcdd 	bl	8011208 <lfs_deinit>
 801184e:	4603      	mov	r3, r0
}
 8011850:	4618      	mov	r0, r3
 8011852:	3708      	adds	r7, #8
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}

08011858 <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8011858:	b590      	push	{r4, r7, lr}
 801185a:	b0a1      	sub	sp, #132	@ 0x84
 801185c:	af04      	add	r7, sp, #16
 801185e:	60f8      	str	r0, [r7, #12]
 8011860:	60b9      	str	r1, [r7, #8]
 8011862:	607a      	str	r2, [r7, #4]
 8011864:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8011866:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801186a:	2220      	movs	r2, #32
 801186c:	2100      	movs	r1, #0
 801186e:	4618      	mov	r0, r3
 8011870:	f001 f8ef 	bl	8012a52 <memset>
 8011874:	2301      	movs	r3, #1
 8011876:	647b      	str	r3, [r7, #68]	@ 0x44
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    struct lfs_tortoise_t tortoise = {
 8011878:	4b8d      	ldr	r3, [pc, #564]	@ (8011ab0 <lfs_fs_traverse_+0x258>)
 801187a:	f107 0418 	add.w	r4, r7, #24
 801187e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011880:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    int err = LFS_ERR_OK;
 8011884:	2300      	movs	r3, #0
 8011886:	65fb      	str	r3, [r7, #92]	@ 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8011888:	e0a9      	b.n	80119de <lfs_fs_traverse_+0x186>
        err = lfs_tortoise_detectcycles(&dir, &tortoise);
 801188a:	f107 0218 	add.w	r2, r7, #24
 801188e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011892:	4611      	mov	r1, r2
 8011894:	4618      	mov	r0, r3
 8011896:	f7ff fd91 	bl	80113bc <lfs_tortoise_detectcycles>
 801189a:	65f8      	str	r0, [r7, #92]	@ 0x5c
        if (err < 0) {
 801189c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801189e:	2b00      	cmp	r3, #0
 80118a0:	da02      	bge.n	80118a8 <lfs_fs_traverse_+0x50>
            return LFS_ERR_CORRUPT;
 80118a2:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80118a6:	e0ff      	b.n	8011aa8 <lfs_fs_traverse_+0x250>
        }

        for (int i = 0; i < 2; i++) {
 80118a8:	2300      	movs	r3, #0
 80118aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80118ac:	e013      	b.n	80118d6 <lfs_fs_traverse_+0x7e>
            int err = cb(data, dir.tail[i]);
 80118ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80118b0:	3306      	adds	r3, #6
 80118b2:	009b      	lsls	r3, r3, #2
 80118b4:	3370      	adds	r3, #112	@ 0x70
 80118b6:	443b      	add	r3, r7
 80118b8:	f853 2c48 	ldr.w	r2, [r3, #-72]
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	4611      	mov	r1, r2
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	4798      	blx	r3
 80118c4:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (err) {
 80118c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d001      	beq.n	80118d0 <lfs_fs_traverse_+0x78>
                return err;
 80118cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80118ce:	e0eb      	b.n	8011aa8 <lfs_fs_traverse_+0x250>
        for (int i = 0; i < 2; i++) {
 80118d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80118d2:	3301      	adds	r3, #1
 80118d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80118d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80118d8:	2b01      	cmp	r3, #1
 80118da:	dde8      	ble.n	80118ae <lfs_fs_traverse_+0x56>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 80118dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80118e0:	f103 0218 	add.w	r2, r3, #24
 80118e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80118e8:	4619      	mov	r1, r3
 80118ea:	68f8      	ldr	r0, [r7, #12]
 80118ec:	f7fc f96a 	bl	800dbc4 <lfs_dir_fetch>
 80118f0:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 80118f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d001      	beq.n	80118fc <lfs_fs_traverse_+0xa4>
            return err;
 80118f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80118fa:	e0d5      	b.n	8011aa8 <lfs_fs_traverse_+0x250>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 80118fc:	2300      	movs	r3, #0
 80118fe:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8011902:	e067      	b.n	80119d4 <lfs_fs_traverse_+0x17c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8011904:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8011908:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801190a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801190e:	f043 0308 	orr.w	r3, r3, #8
 8011912:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8011916:	f107 0210 	add.w	r2, r7, #16
 801191a:	9200      	str	r2, [sp, #0]
 801191c:	4a65      	ldr	r2, [pc, #404]	@ (8011ab4 <lfs_fs_traverse_+0x25c>)
 801191e:	68f8      	ldr	r0, [r7, #12]
 8011920:	f7fb f84a 	bl	800c9b8 <lfs_dir_get>
 8011924:	64f8      	str	r0, [r7, #76]	@ 0x4c
            if (tag < 0) {
 8011926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011928:	2b00      	cmp	r3, #0
 801192a:	da05      	bge.n	8011938 <lfs_fs_traverse_+0xe0>
                if (tag == LFS_ERR_NOENT) {
 801192c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801192e:	f113 0f02 	cmn.w	r3, #2
 8011932:	d049      	beq.n	80119c8 <lfs_fs_traverse_+0x170>
                    continue;
                }
                return tag;
 8011934:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011936:	e0b7      	b.n	8011aa8 <lfs_fs_traverse_+0x250>
            }
            lfs_ctz_fromle32(&ctz);
 8011938:	f107 0310 	add.w	r3, r7, #16
 801193c:	4618      	mov	r0, r3
 801193e:	f7fa fd0b 	bl	800c358 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8011942:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011944:	4618      	mov	r0, r3
 8011946:	f7fa fb97 	bl	800c078 <lfs_tag_type3>
 801194a:	4603      	mov	r3, r0
 801194c:	461a      	mov	r2, r3
 801194e:	f240 2302 	movw	r3, #514	@ 0x202
 8011952:	429a      	cmp	r2, r3
 8011954:	d113      	bne.n	801197e <lfs_fs_traverse_+0x126>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8011956:	68f9      	ldr	r1, [r7, #12]
 8011958:	6938      	ldr	r0, [r7, #16]
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	687a      	ldr	r2, [r7, #4]
 801195e:	9202      	str	r2, [sp, #8]
 8011960:	68ba      	ldr	r2, [r7, #8]
 8011962:	9201      	str	r2, [sp, #4]
 8011964:	9300      	str	r3, [sp, #0]
 8011966:	4603      	mov	r3, r0
 8011968:	460a      	mov	r2, r1
 801196a:	2100      	movs	r1, #0
 801196c:	68f8      	ldr	r0, [r7, #12]
 801196e:	f7fe f8e9 	bl	800fb44 <lfs_ctz_traverse>
 8011972:	6538      	str	r0, [r7, #80]	@ 0x50
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8011974:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011976:	2b00      	cmp	r3, #0
 8011978:	d027      	beq.n	80119ca <lfs_fs_traverse_+0x172>
                    return err;
 801197a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801197c:	e094      	b.n	8011aa8 <lfs_fs_traverse_+0x250>
                }
            } else if (includeorphans &&
 801197e:	78fb      	ldrb	r3, [r7, #3]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d022      	beq.n	80119ca <lfs_fs_traverse_+0x172>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8011984:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011986:	4618      	mov	r0, r3
 8011988:	f7fa fb76 	bl	800c078 <lfs_tag_type3>
 801198c:	4603      	mov	r3, r0
            } else if (includeorphans &&
 801198e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011992:	d11a      	bne.n	80119ca <lfs_fs_traverse_+0x172>
                for (int i = 0; i < 2; i++) {
 8011994:	2300      	movs	r3, #0
 8011996:	667b      	str	r3, [r7, #100]	@ 0x64
 8011998:	e012      	b.n	80119c0 <lfs_fs_traverse_+0x168>
                    err = cb(data, (&ctz.head)[i]);
 801199a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801199c:	009b      	lsls	r3, r3, #2
 801199e:	f107 0210 	add.w	r2, r7, #16
 80119a2:	4413      	add	r3, r2
 80119a4:	681a      	ldr	r2, [r3, #0]
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	4611      	mov	r1, r2
 80119aa:	6878      	ldr	r0, [r7, #4]
 80119ac:	4798      	blx	r3
 80119ae:	6538      	str	r0, [r7, #80]	@ 0x50
                    if (err) {
 80119b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d001      	beq.n	80119ba <lfs_fs_traverse_+0x162>
                        return err;
 80119b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119b8:	e076      	b.n	8011aa8 <lfs_fs_traverse_+0x250>
                for (int i = 0; i < 2; i++) {
 80119ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80119bc:	3301      	adds	r3, #1
 80119be:	667b      	str	r3, [r7, #100]	@ 0x64
 80119c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80119c2:	2b01      	cmp	r3, #1
 80119c4:	dde9      	ble.n	801199a <lfs_fs_traverse_+0x142>
 80119c6:	e000      	b.n	80119ca <lfs_fs_traverse_+0x172>
                    continue;
 80119c8:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 80119ca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80119ce:	3301      	adds	r3, #1
 80119d0:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80119d4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80119d6:	f8b7 206a 	ldrh.w	r2, [r7, #106]	@ 0x6a
 80119da:	429a      	cmp	r2, r3
 80119dc:	d392      	bcc.n	8011904 <lfs_fs_traverse_+0xac>
    while (!lfs_pair_isnull(dir.tail)) {
 80119de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80119e2:	3318      	adds	r3, #24
 80119e4:	4618      	mov	r0, r3
 80119e6:	f7fa fa60 	bl	800beaa <lfs_pair_isnull>
 80119ea:	4603      	mov	r3, r0
 80119ec:	f083 0301 	eor.w	r3, r3, #1
 80119f0:	b2db      	uxtb	r3, r3
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	f47f af49 	bne.w	801188a <lfs_fs_traverse_+0x32>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80119fe:	e04f      	b.n	8011aa0 <lfs_fs_traverse_+0x248>
        if (f->type != LFS_TYPE_REG) {
 8011a00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a02:	799b      	ldrb	r3, [r3, #6]
 8011a04:	2b01      	cmp	r3, #1
 8011a06:	d147      	bne.n	8011a98 <lfs_fs_traverse_+0x240>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8011a08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d01d      	beq.n	8011a50 <lfs_fs_traverse_+0x1f8>
 8011a14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d117      	bne.n	8011a50 <lfs_fs_traverse_+0x1f8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8011a20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a22:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8011a26:	68f8      	ldr	r0, [r7, #12]
 8011a28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a2a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8011a2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a30:	687a      	ldr	r2, [r7, #4]
 8011a32:	9202      	str	r2, [sp, #8]
 8011a34:	68ba      	ldr	r2, [r7, #8]
 8011a36:	9201      	str	r2, [sp, #4]
 8011a38:	9300      	str	r3, [sp, #0]
 8011a3a:	4623      	mov	r3, r4
 8011a3c:	4602      	mov	r2, r0
 8011a3e:	68f8      	ldr	r0, [r7, #12]
 8011a40:	f7fe f880 	bl	800fb44 <lfs_ctz_traverse>
 8011a44:	65b8      	str	r0, [r7, #88]	@ 0x58
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8011a46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d001      	beq.n	8011a50 <lfs_fs_traverse_+0x1f8>
                return err;
 8011a4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011a4e:	e02b      	b.n	8011aa8 <lfs_fs_traverse_+0x250>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8011a50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d01e      	beq.n	8011a9a <lfs_fs_traverse_+0x242>
 8011a5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d118      	bne.n	8011a9a <lfs_fs_traverse_+0x242>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8011a68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a6a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8011a6e:	68f8      	ldr	r0, [r7, #12]
 8011a70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a72:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8011a74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011a78:	687a      	ldr	r2, [r7, #4]
 8011a7a:	9202      	str	r2, [sp, #8]
 8011a7c:	68ba      	ldr	r2, [r7, #8]
 8011a7e:	9201      	str	r2, [sp, #4]
 8011a80:	9300      	str	r3, [sp, #0]
 8011a82:	4623      	mov	r3, r4
 8011a84:	4602      	mov	r2, r0
 8011a86:	68f8      	ldr	r0, [r7, #12]
 8011a88:	f7fe f85c 	bl	800fb44 <lfs_ctz_traverse>
 8011a8c:	6578      	str	r0, [r7, #84]	@ 0x54
                    f->block, f->pos, cb, data);
            if (err) {
 8011a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d002      	beq.n	8011a9a <lfs_fs_traverse_+0x242>
                return err;
 8011a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a96:	e007      	b.n	8011aa8 <lfs_fs_traverse_+0x250>
            continue;
 8011a98:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8011a9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8011aa0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d1ac      	bne.n	8011a00 <lfs_fs_traverse_+0x1a8>
            }
        }
    }
#endif

    return 0;
 8011aa6:	2300      	movs	r3, #0
}
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	3774      	adds	r7, #116	@ 0x74
 8011aac:	46bd      	mov	sp, r7
 8011aae:	bd90      	pop	{r4, r7, pc}
 8011ab0:	0801439c 	.word	0x0801439c
 8011ab4:	700ffc00 	.word	0x700ffc00

08011ab8 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8011ab8:	b590      	push	{r4, r7, lr}
 8011aba:	b08b      	sub	sp, #44	@ 0x2c
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	60f8      	str	r0, [r7, #12]
 8011ac0:	60b9      	str	r1, [r7, #8]
 8011ac2:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2201      	movs	r2, #1
 8011ace:	61da      	str	r2, [r3, #28]
    struct lfs_tortoise_t tortoise = {
 8011ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8011b50 <lfs_fs_pred+0x98>)
 8011ad2:	f107 0410 	add.w	r4, r7, #16
 8011ad6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011ad8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    int err = LFS_ERR_OK;
 8011adc:	2300      	movs	r3, #0
 8011ade:	627b      	str	r3, [r7, #36]	@ 0x24
    while (!lfs_pair_isnull(pdir->tail)) {
 8011ae0:	e024      	b.n	8011b2c <lfs_fs_pred+0x74>
        err = lfs_tortoise_detectcycles(pdir, &tortoise);
 8011ae2:	f107 0310 	add.w	r3, r7, #16
 8011ae6:	4619      	mov	r1, r3
 8011ae8:	6878      	ldr	r0, [r7, #4]
 8011aea:	f7ff fc67 	bl	80113bc <lfs_tortoise_detectcycles>
 8011aee:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err < 0) {
 8011af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	da02      	bge.n	8011afc <lfs_fs_pred+0x44>
            return LFS_ERR_CORRUPT;
 8011af6:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8011afa:	e024      	b.n	8011b46 <lfs_fs_pred+0x8e>
        }

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	3318      	adds	r3, #24
 8011b00:	68b9      	ldr	r1, [r7, #8]
 8011b02:	4618      	mov	r0, r3
 8011b04:	f7fa f9ec 	bl	800bee0 <lfs_pair_cmp>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d101      	bne.n	8011b12 <lfs_fs_pred+0x5a>
            return 0;
 8011b0e:	2300      	movs	r3, #0
 8011b10:	e019      	b.n	8011b46 <lfs_fs_pred+0x8e>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	3318      	adds	r3, #24
 8011b16:	461a      	mov	r2, r3
 8011b18:	6879      	ldr	r1, [r7, #4]
 8011b1a:	68f8      	ldr	r0, [r7, #12]
 8011b1c:	f7fc f852 	bl	800dbc4 <lfs_dir_fetch>
 8011b20:	6238      	str	r0, [r7, #32]
        if (err) {
 8011b22:	6a3b      	ldr	r3, [r7, #32]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d001      	beq.n	8011b2c <lfs_fs_pred+0x74>
            return err;
 8011b28:	6a3b      	ldr	r3, [r7, #32]
 8011b2a:	e00c      	b.n	8011b46 <lfs_fs_pred+0x8e>
    while (!lfs_pair_isnull(pdir->tail)) {
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	3318      	adds	r3, #24
 8011b30:	4618      	mov	r0, r3
 8011b32:	f7fa f9ba 	bl	800beaa <lfs_pair_isnull>
 8011b36:	4603      	mov	r3, r0
 8011b38:	f083 0301 	eor.w	r3, r3, #1
 8011b3c:	b2db      	uxtb	r3, r3
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d1cf      	bne.n	8011ae2 <lfs_fs_pred+0x2a>
        }
    }

    return LFS_ERR_NOENT;
 8011b42:	f06f 0301 	mvn.w	r3, #1
}
 8011b46:	4618      	mov	r0, r3
 8011b48:	372c      	adds	r7, #44	@ 0x2c
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bd90      	pop	{r4, r7, pc}
 8011b4e:	bf00      	nop
 8011b50:	0801439c 	.word	0x0801439c

08011b54 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8011b54:	b5b0      	push	{r4, r5, r7, lr}
 8011b56:	b08e      	sub	sp, #56	@ 0x38
 8011b58:	af04      	add	r7, sp, #16
 8011b5a:	60f8      	str	r0, [r7, #12]
 8011b5c:	60b9      	str	r1, [r7, #8]
 8011b5e:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = find->lfs;
 8011b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8011b6e:	6a3b      	ldr	r3, [r7, #32]
 8011b70:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8011b74:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8011b76:	6a3b      	ldr	r3, [r7, #32]
 8011b78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011b7a:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 8011b7c:	69fb      	ldr	r3, [r7, #28]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	69fa      	ldr	r2, [r7, #28]
 8011b82:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8011b84:	2108      	movs	r1, #8
 8011b86:	9103      	str	r1, [sp, #12]
 8011b88:	f107 0110 	add.w	r1, r7, #16
 8011b8c:	9102      	str	r1, [sp, #8]
 8011b8e:	9201      	str	r2, [sp, #4]
 8011b90:	9300      	str	r3, [sp, #0]
 8011b92:	462b      	mov	r3, r5
 8011b94:	4622      	mov	r2, r4
 8011b96:	4601      	mov	r1, r0
 8011b98:	6a38      	ldr	r0, [r7, #32]
 8011b9a:	f7f9 fdbb 	bl	800b714 <lfs_bd_read>
 8011b9e:	61b8      	str	r0, [r7, #24]
    if (err) {
 8011ba0:	69bb      	ldr	r3, [r7, #24]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d001      	beq.n	8011baa <lfs_fs_parent_match+0x56>
        return err;
 8011ba6:	69bb      	ldr	r3, [r7, #24]
 8011ba8:	e012      	b.n	8011bd0 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8011baa:	f107 0310 	add.w	r3, r7, #16
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f7fa f9ed 	bl	800bf8e <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8011bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bb6:	1d1a      	adds	r2, r3, #4
 8011bb8:	f107 0310 	add.w	r3, r7, #16
 8011bbc:	4611      	mov	r1, r2
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f7fa f98e 	bl	800bee0 <lfs_pair_cmp>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	bf14      	ite	ne
 8011bca:	2301      	movne	r3, #1
 8011bcc:	2300      	moveq	r3, #0
 8011bce:	b2db      	uxtb	r3, r3
}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	3728      	adds	r7, #40	@ 0x28
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bdb0      	pop	{r4, r5, r7, pc}

08011bd8 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8011bd8:	b590      	push	{r4, r7, lr}
 8011bda:	b093      	sub	sp, #76	@ 0x4c
 8011bdc:	af04      	add	r7, sp, #16
 8011bde:	60f8      	str	r0, [r7, #12]
 8011be0:	60b9      	str	r1, [r7, #8]
 8011be2:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	2200      	movs	r2, #0
 8011be8:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2201      	movs	r2, #1
 8011bee:	61da      	str	r2, [r3, #28]
    struct lfs_tortoise_t tortoise = {
 8011bf0:	4b24      	ldr	r3, [pc, #144]	@ (8011c84 <lfs_fs_parent+0xac>)
 8011bf2:	f107 0420 	add.w	r4, r7, #32
 8011bf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    int err = LFS_ERR_OK;
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	637b      	str	r3, [r7, #52]	@ 0x34
    while (!lfs_pair_isnull(parent->tail)) {
 8011c00:	e02f      	b.n	8011c62 <lfs_fs_parent+0x8a>
        err = lfs_tortoise_detectcycles(parent, &tortoise);
 8011c02:	f107 0320 	add.w	r3, r7, #32
 8011c06:	4619      	mov	r1, r3
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f7ff fbd7 	bl	80113bc <lfs_tortoise_detectcycles>
 8011c0e:	6378      	str	r0, [r7, #52]	@ 0x34
        if (err < 0) {
 8011c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	da01      	bge.n	8011c1a <lfs_fs_parent+0x42>
            return err;
 8011c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c18:	e030      	b.n	8011c7c <lfs_fs_parent+0xa4>
        }

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8011c24:	68bb      	ldr	r3, [r7, #8]
 8011c26:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8011c28:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	3304      	adds	r3, #4
 8011c2e:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8011c30:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8011c32:	f107 0314 	add.w	r3, r7, #20
 8011c36:	9303      	str	r3, [sp, #12]
 8011c38:	4b13      	ldr	r3, [pc, #76]	@ (8011c88 <lfs_fs_parent+0xb0>)
 8011c3a:	9302      	str	r3, [sp, #8]
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	9301      	str	r3, [sp, #4]
 8011c40:	4b12      	ldr	r3, [pc, #72]	@ (8011c8c <lfs_fs_parent+0xb4>)
 8011c42:	9300      	str	r3, [sp, #0]
 8011c44:	4b12      	ldr	r3, [pc, #72]	@ (8011c90 <lfs_fs_parent+0xb8>)
 8011c46:	6879      	ldr	r1, [r7, #4]
 8011c48:	68f8      	ldr	r0, [r7, #12]
 8011c4a:	f7fb fbeb 	bl	800d424 <lfs_dir_fetchmatch>
 8011c4e:	6338      	str	r0, [r7, #48]	@ 0x30
        if (tag && tag != LFS_ERR_NOENT) {
 8011c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d005      	beq.n	8011c62 <lfs_fs_parent+0x8a>
 8011c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c58:	f113 0f02 	cmn.w	r3, #2
 8011c5c:	d001      	beq.n	8011c62 <lfs_fs_parent+0x8a>
            return tag;
 8011c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c60:	e00c      	b.n	8011c7c <lfs_fs_parent+0xa4>
    while (!lfs_pair_isnull(parent->tail)) {
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	3318      	adds	r3, #24
 8011c66:	4618      	mov	r0, r3
 8011c68:	f7fa f91f 	bl	800beaa <lfs_pair_isnull>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	f083 0301 	eor.w	r3, r3, #1
 8011c72:	b2db      	uxtb	r3, r3
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d1c4      	bne.n	8011c02 <lfs_fs_parent+0x2a>
        }
    }

    return LFS_ERR_NOENT;
 8011c78:	f06f 0301 	mvn.w	r3, #1
}
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	373c      	adds	r7, #60	@ 0x3c
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd90      	pop	{r4, r7, pc}
 8011c84:	0801439c 	.word	0x0801439c
 8011c88:	08011b55 	.word	0x08011b55
 8011c8c:	20000008 	.word	0x20000008
 8011c90:	7ff003ff 	.word	0x7ff003ff

08011c94 <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 8011c94:	b480      	push	{r7}
 8011c96:	b083      	sub	sp, #12
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	6078      	str	r0, [r7, #4]
 8011c9c:	460b      	mov	r3, r1
 8011c9e:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ca4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 8011ca8:	78fb      	ldrb	r3, [r7, #3]
 8011caa:	025b      	lsls	r3, r3, #9
 8011cac:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8011cb2:	bf00      	nop
 8011cb4:	370c      	adds	r7, #12
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbc:	4770      	bx	lr
	...

08011cc0 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8011cc0:	b590      	push	{r4, r7, lr}
 8011cc2:	b083      	sub	sp, #12
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
 8011cc8:	460b      	mov	r3, r1
 8011cca:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f7fa fa0b 	bl	800c0ec <lfs_tag_size>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d10a      	bne.n	8011cf2 <lfs_fs_preporphans+0x32>
 8011cdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	da06      	bge.n	8011cf2 <lfs_fs_preporphans+0x32>
 8011ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8011d50 <lfs_fs_preporphans+0x90>)
 8011ce6:	4a1b      	ldr	r2, [pc, #108]	@ (8011d54 <lfs_fs_preporphans+0x94>)
 8011ce8:	f241 311a 	movw	r1, #4890	@ 0x131a
 8011cec:	481a      	ldr	r0, [pc, #104]	@ (8011d58 <lfs_fs_preporphans+0x98>)
 8011cee:	f000 fc9b 	bl	8012628 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f7fa f9f8 	bl	800c0ec <lfs_tag_size>
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8011d02:	d90a      	bls.n	8011d1a <lfs_fs_preporphans+0x5a>
 8011d04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	dd06      	ble.n	8011d1a <lfs_fs_preporphans+0x5a>
 8011d0c:	4b13      	ldr	r3, [pc, #76]	@ (8011d5c <lfs_fs_preporphans+0x9c>)
 8011d0e:	4a11      	ldr	r2, [pc, #68]	@ (8011d54 <lfs_fs_preporphans+0x94>)
 8011d10:	f241 311b 	movw	r1, #4891	@ 0x131b
 8011d14:	4810      	ldr	r0, [pc, #64]	@ (8011d58 <lfs_fs_preporphans+0x98>)
 8011d16:	f000 fc87 	bl	8012628 <__assert_func>
    lfs->gstate.tag += orphans;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011d1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011d22:	441a      	add	r2, r3
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d2c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	3330      	adds	r3, #48	@ 0x30
 8011d34:	4618      	mov	r0, r3
 8011d36:	f7fa fa36 	bl	800c1a6 <lfs_gstate_hasorphans>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8011d3e:	ea44 0203 	orr.w	r2, r4, r3
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8011d46:	2300      	movs	r3, #0
}
 8011d48:	4618      	mov	r0, r3
 8011d4a:	370c      	adds	r7, #12
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	bd90      	pop	{r4, r7, pc}
 8011d50:	080143ac 	.word	0x080143ac
 8011d54:	0801475c 	.word	0x0801475c
 8011d58:	08013884 	.word	0x08013884
 8011d5c:	080143e4 	.word	0x080143e4

08011d60 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8011d60:	b480      	push	{r7}
 8011d62:	b085      	sub	sp, #20
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	60f8      	str	r0, [r7, #12]
 8011d68:	460b      	mov	r3, r1
 8011d6a:	607a      	str	r2, [r7, #4]
 8011d6c:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d72:	4a17      	ldr	r2, [pc, #92]	@ (8011dd0 <lfs_fs_prepmove+0x70>)
 8011d74:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8011d76:	897b      	ldrh	r3, [r7, #10]
 8011d78:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8011d7c:	428b      	cmp	r3, r1
 8011d7e:	d006      	beq.n	8011d8e <lfs_fs_prepmove+0x2e>
 8011d80:	897b      	ldrh	r3, [r7, #10]
 8011d82:	029b      	lsls	r3, r3, #10
 8011d84:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8011d88:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8011d8c:	e000      	b.n	8011d90 <lfs_fs_prepmove+0x30>
 8011d8e:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8011d90:	431a      	orrs	r2, r3
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8011d96:	897b      	ldrh	r3, [r7, #10]
 8011d98:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8011d9c:	4293      	cmp	r3, r2
 8011d9e:	d002      	beq.n	8011da6 <lfs_fs_prepmove+0x46>
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	e000      	b.n	8011da8 <lfs_fs_prepmove+0x48>
 8011da6:	2300      	movs	r3, #0
 8011da8:	68fa      	ldr	r2, [r7, #12]
 8011daa:	6353      	str	r3, [r2, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8011dac:	897b      	ldrh	r3, [r7, #10]
 8011dae:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8011db2:	4293      	cmp	r3, r2
 8011db4:	d003      	beq.n	8011dbe <lfs_fs_prepmove+0x5e>
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	3304      	adds	r3, #4
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	e000      	b.n	8011dc0 <lfs_fs_prepmove+0x60>
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	68fa      	ldr	r2, [r7, #12]
 8011dc2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8011dc4:	bf00      	nop
 8011dc6:	3714      	adds	r7, #20
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dce:	4770      	bx	lr
 8011dd0:	800003ff 	.word	0x800003ff

08011dd4 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b098      	sub	sp, #96	@ 0x60
 8011dd8:	af02      	add	r7, sp, #8
 8011dda:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	3330      	adds	r3, #48	@ 0x30
 8011de0:	4618      	mov	r0, r3
 8011de2:	f7fa fa15 	bl	800c210 <lfs_gstate_needssuperblock>
 8011de6:	4603      	mov	r3, r0
 8011de8:	f083 0301 	eor.w	r3, r3, #1
 8011dec:	b2db      	uxtb	r3, r3
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d001      	beq.n	8011df6 <lfs_fs_desuperblock+0x22>
        return 0;
 8011df2:	2300      	movs	r3, #0
 8011df4:	e04e      	b.n	8011e94 <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	6a1a      	ldr	r2, [r3, #32]
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011dfe:	4927      	ldr	r1, [pc, #156]	@ (8011e9c <lfs_fs_desuperblock+0xc8>)
 8011e00:	9101      	str	r1, [sp, #4]
 8011e02:	9300      	str	r3, [sp, #0]
 8011e04:	4613      	mov	r3, r2
 8011e06:	f241 3234 	movw	r2, #4916	@ 0x1334
 8011e0a:	4925      	ldr	r1, [pc, #148]	@ (8011ea0 <lfs_fs_desuperblock+0xcc>)
 8011e0c:	4825      	ldr	r0, [pc, #148]	@ (8011ea4 <lfs_fs_desuperblock+0xd0>)
 8011e0e:	f000 fdbb 	bl	8012988 <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	f103 0220 	add.w	r2, r3, #32
 8011e18:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011e1c:	4619      	mov	r1, r3
 8011e1e:	6878      	ldr	r0, [r7, #4]
 8011e20:	f7fb fed0 	bl	800dbc4 <lfs_dir_fetch>
 8011e24:	6578      	str	r0, [r7, #84]	@ 0x54
    if (err) {
 8011e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d001      	beq.n	8011e30 <lfs_fs_desuperblock+0x5c>
        return err;
 8011e2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e2e:	e031      	b.n	8011e94 <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8011e30:	6878      	ldr	r0, [r7, #4]
 8011e32:	f7fa fb83 	bl	800c53c <lfs_fs_disk_version>
 8011e36:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 8011e38:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011e3e:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 8011e40:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 8011e46:	627b      	str	r3, [r7, #36]	@ 0x24
        .name_max    = lfs->name_max,
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    lfs_superblock_t superblock = {
 8011e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
        .file_max    = lfs->file_max,
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
    lfs_superblock_t superblock = {
 8011e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .attr_max    = lfs->attr_max,
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    lfs_superblock_t superblock = {
 8011e58:	633b      	str	r3, [r7, #48]	@ 0x30
    };

    lfs_superblock_tole32(&superblock);
 8011e5a:	f107 031c 	add.w	r3, r7, #28
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f7fa fae2 	bl	800c428 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8011e64:	4b10      	ldr	r3, [pc, #64]	@ (8011ea8 <lfs_fs_desuperblock+0xd4>)
 8011e66:	617b      	str	r3, [r7, #20]
 8011e68:	f107 031c 	add.w	r3, r7, #28
 8011e6c:	61bb      	str	r3, [r7, #24]
 8011e6e:	f107 0214 	add.w	r2, r7, #20
 8011e72:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8011e76:	2301      	movs	r3, #1
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	f7fd fc91 	bl	800f7a0 <lfs_dir_commit>
 8011e7e:	6578      	str	r0, [r7, #84]	@ 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 8011e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d001      	beq.n	8011e8a <lfs_fs_desuperblock+0xb6>
        return err;
 8011e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e88:	e004      	b.n	8011e94 <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 8011e8a:	2100      	movs	r1, #0
 8011e8c:	6878      	ldr	r0, [r7, #4]
 8011e8e:	f7ff ff01 	bl	8011c94 <lfs_fs_prepsuperblock>
    return 0;
 8011e92:	2300      	movs	r3, #0
}
 8011e94:	4618      	mov	r0, r3
 8011e96:	3758      	adds	r7, #88	@ 0x58
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	bd80      	pop	{r7, pc}
 8011e9c:	080139a4 	.word	0x080139a4
 8011ea0:	08013884 	.word	0x08013884
 8011ea4:	0801441c 	.word	0x0801441c
 8011ea8:	20100018 	.word	0x20100018

08011eac <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8011eac:	b5b0      	push	{r4, r5, r7, lr}
 8011eae:	b094      	sub	sp, #80	@ 0x50
 8011eb0:	af04      	add	r7, sp, #16
 8011eb2:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	333c      	adds	r3, #60	@ 0x3c
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f7fa f996 	bl	800c1ea <lfs_gstate_hasmove>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	f083 0301 	eor.w	r3, r3, #1
 8011ec4:	b2db      	uxtb	r3, r3
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d001      	beq.n	8011ece <lfs_fs_demove+0x22>
        return 0;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	e05b      	b.n	8011f86 <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011eda:	4618      	mov	r0, r3
 8011edc:	f7fa f8f6 	bl	800c0cc <lfs_tag_id>
 8011ee0:	4603      	mov	r3, r0
 8011ee2:	461a      	mov	r2, r3
 8011ee4:	4b2a      	ldr	r3, [pc, #168]	@ (8011f90 <lfs_fs_demove+0xe4>)
 8011ee6:	9302      	str	r3, [sp, #8]
 8011ee8:	9201      	str	r2, [sp, #4]
 8011eea:	9400      	str	r4, [sp, #0]
 8011eec:	462b      	mov	r3, r5
 8011eee:	f241 325c 	movw	r2, #4956	@ 0x135c
 8011ef2:	4928      	ldr	r1, [pc, #160]	@ (8011f94 <lfs_fs_demove+0xe8>)
 8011ef4:	4828      	ldr	r0, [pc, #160]	@ (8011f98 <lfs_fs_demove+0xec>)
 8011ef6:	f000 fd47 	bl	8012988 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011efe:	4618      	mov	r0, r3
 8011f00:	f7fa f8ba 	bl	800c078 <lfs_tag_type3>
 8011f04:	4603      	mov	r3, r0
 8011f06:	461a      	mov	r2, r3
 8011f08:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8011f0c:	429a      	cmp	r2, r3
 8011f0e:	d006      	beq.n	8011f1e <lfs_fs_demove+0x72>
 8011f10:	4b22      	ldr	r3, [pc, #136]	@ (8011f9c <lfs_fs_demove+0xf0>)
 8011f12:	4a23      	ldr	r2, [pc, #140]	@ (8011fa0 <lfs_fs_demove+0xf4>)
 8011f14:	f241 3163 	movw	r1, #4963	@ 0x1363
 8011f18:	481e      	ldr	r0, [pc, #120]	@ (8011f94 <lfs_fs_demove+0xe8>)
 8011f1a:	f000 fb85 	bl	8012628 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8011f24:	f107 0318 	add.w	r3, r7, #24
 8011f28:	4619      	mov	r1, r3
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	f7fb fe4a 	bl	800dbc4 <lfs_dir_fetch>
 8011f30:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (err) {
 8011f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d001      	beq.n	8011f3c <lfs_fs_demove+0x90>
        return err;
 8011f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f3a:	e024      	b.n	8011f86 <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011f40:	4618      	mov	r0, r3
 8011f42:	f7fa f8c3 	bl	800c0cc <lfs_tag_id>
 8011f46:	4603      	mov	r3, r0
 8011f48:	877b      	strh	r3, [r7, #58]	@ 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f7ff ff05 	bl	8011d60 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8011f56:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011f58:	029b      	lsls	r3, r3, #10
 8011f5a:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8011f5e:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8011f62:	613b      	str	r3, [r7, #16]
 8011f64:	2300      	movs	r3, #0
 8011f66:	617b      	str	r3, [r7, #20]
 8011f68:	f107 0210 	add.w	r2, r7, #16
 8011f6c:	f107 0118 	add.w	r1, r7, #24
 8011f70:	2301      	movs	r3, #1
 8011f72:	6878      	ldr	r0, [r7, #4]
 8011f74:	f7fd fc14 	bl	800f7a0 <lfs_dir_commit>
 8011f78:	63f8      	str	r0, [r7, #60]	@ 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8011f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d001      	beq.n	8011f84 <lfs_fs_demove+0xd8>
        return err;
 8011f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f82:	e000      	b.n	8011f86 <lfs_fs_demove+0xda>
    }

    return 0;
 8011f84:	2300      	movs	r3, #0
}
 8011f86:	4618      	mov	r0, r3
 8011f88:	3740      	adds	r7, #64	@ 0x40
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8011f8e:	bf00      	nop
 8011f90:	080139a4 	.word	0x080139a4
 8011f94:	08013884 	.word	0x08013884
 8011f98:	08014450 	.word	0x08014450
 8011f9c:	08014484 	.word	0x08014484
 8011fa0:	08014770 	.word	0x08014770

08011fa4 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8011fa4:	b5b0      	push	{r4, r5, r7, lr}
 8011fa6:	b0b2      	sub	sp, #200	@ 0xc8
 8011fa8:	af04      	add	r7, sp, #16
 8011faa:	6078      	str	r0, [r7, #4]
 8011fac:	460b      	mov	r3, r1
 8011fae:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	3330      	adds	r3, #48	@ 0x30
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f7fa f8f6 	bl	800c1a6 <lfs_gstate_hasorphans>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	f083 0301 	eor.w	r3, r3, #1
 8011fc0:	b2db      	uxtb	r3, r3
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d001      	beq.n	8011fca <lfs_fs_deorphan+0x26>
        return 0;
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	e188      	b.n	80122dc <lfs_fs_deorphan+0x338>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 8011fca:	2300      	movs	r3, #0
 8011fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 8011fd0:	e171      	b.n	80122b6 <lfs_fs_deorphan+0x312>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8011fd2:	f107 0308 	add.w	r3, r7, #8
 8011fd6:	2220      	movs	r2, #32
 8011fd8:	2100      	movs	r1, #0
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f000 fd39 	bl	8012a52 <memset>
 8011fe0:	2301      	movs	r3, #1
 8011fe2:	77fb      	strb	r3, [r7, #31]
 8011fe4:	2301      	movs	r3, #1
 8011fe6:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 8011fe8:	2300      	movs	r3, #0
 8011fea:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8011fee:	e14a      	b.n	8012286 <lfs_fs_deorphan+0x2e2>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8011ff0:	f107 0308 	add.w	r3, r7, #8
 8011ff4:	f103 0218 	add.w	r2, r3, #24
 8011ff8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011ffc:	4619      	mov	r1, r3
 8011ffe:	6878      	ldr	r0, [r7, #4]
 8012000:	f7fb fde0 	bl	800dbc4 <lfs_dir_fetch>
 8012004:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
            if (err) {
 8012008:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801200c:	2b00      	cmp	r3, #0
 801200e:	d002      	beq.n	8012016 <lfs_fs_deorphan+0x72>
                return err;
 8012010:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012014:	e162      	b.n	80122dc <lfs_fs_deorphan+0x338>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8012016:	7ffb      	ldrb	r3, [r7, #31]
 8012018:	f083 0301 	eor.w	r3, r3, #1
 801201c:	b2db      	uxtb	r3, r3
 801201e:	2b00      	cmp	r3, #0
 8012020:	f000 8125 	beq.w	801226e <lfs_fs_deorphan+0x2ca>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8012024:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8012028:	f107 0308 	add.w	r3, r7, #8
 801202c:	3318      	adds	r3, #24
 801202e:	4619      	mov	r1, r3
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f7ff fdd1 	bl	8011bd8 <lfs_fs_parent>
 8012036:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801203a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801203e:	2b00      	cmp	r3, #0
 8012040:	da07      	bge.n	8012052 <lfs_fs_deorphan+0xae>
 8012042:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012046:	f113 0f02 	cmn.w	r3, #2
 801204a:	d002      	beq.n	8012052 <lfs_fs_deorphan+0xae>
                    return tag;
 801204c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012050:	e10c      	b.n	801226c <lfs_fs_deorphan+0x2c8>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 8012052:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012056:	2b00      	cmp	r3, #0
 8012058:	f040 80ac 	bne.w	80121b4 <lfs_fs_deorphan+0x210>
 801205c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012060:	f113 0f02 	cmn.w	r3, #2
 8012064:	f000 80a6 	beq.w	80121b4 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8012068:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801206c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8012070:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8012074:	9300      	str	r3, [sp, #0]
 8012076:	4613      	mov	r3, r2
 8012078:	4a9a      	ldr	r2, [pc, #616]	@ (80122e4 <lfs_fs_deorphan+0x340>)
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f7fa fc9c 	bl	800c9b8 <lfs_dir_get>
 8012080:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8012084:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012088:	2b00      	cmp	r3, #0
 801208a:	da02      	bge.n	8012092 <lfs_fs_deorphan+0xee>
                        return state;
 801208c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                    return tag;
 8012090:	e124      	b.n	80122dc <lfs_fs_deorphan+0x338>
                    }
                    lfs_pair_fromle32(pair);
 8012092:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8012096:	4618      	mov	r0, r3
 8012098:	f7f9 ff79 	bl	800bf8e <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 801209c:	f107 0308 	add.w	r3, r7, #8
 80120a0:	f103 0218 	add.w	r2, r3, #24
 80120a4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80120a8:	4611      	mov	r1, r2
 80120aa:	4618      	mov	r0, r3
 80120ac:	f7f9 ff42 	bl	800bf34 <lfs_pair_issync>
 80120b0:	4603      	mov	r3, r0
 80120b2:	f083 0301 	eor.w	r3, r3, #1
 80120b6:	b2db      	uxtb	r3, r3
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d07b      	beq.n	80121b4 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 80120bc:	6a38      	ldr	r0, [r7, #32]
 80120be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120c0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80120c4:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80120c8:	4c87      	ldr	r4, [pc, #540]	@ (80122e8 <lfs_fs_deorphan+0x344>)
 80120ca:	9403      	str	r4, [sp, #12]
 80120cc:	9102      	str	r1, [sp, #8]
 80120ce:	9201      	str	r2, [sp, #4]
 80120d0:	9300      	str	r3, [sp, #0]
 80120d2:	4603      	mov	r3, r0
 80120d4:	f241 32a9 	movw	r2, #5033	@ 0x13a9
 80120d8:	4984      	ldr	r1, [pc, #528]	@ (80122ec <lfs_fs_deorphan+0x348>)
 80120da:	4885      	ldr	r0, [pc, #532]	@ (80122f0 <lfs_fs_deorphan+0x34c>)
 80120dc:	f000 fc54 	bl	8012988 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 80120e0:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80120e4:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	3330      	adds	r3, #48	@ 0x30
 80120ec:	f107 0208 	add.w	r2, r7, #8
 80120f0:	4611      	mov	r1, r2
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7fa f8a0 	bl	800c238 <lfs_gstate_hasmovehere>
 80120f8:	4603      	mov	r3, r0
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d01c      	beq.n	8012138 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012102:	4618      	mov	r0, r3
 8012104:	f7f9 ffe2 	bl	800c0cc <lfs_tag_id>
 8012108:	4603      	mov	r3, r0
 801210a:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 801210e:	68b9      	ldr	r1, [r7, #8]
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 8012116:	4874      	ldr	r0, [pc, #464]	@ (80122e8 <lfs_fs_deorphan+0x344>)
 8012118:	9002      	str	r0, [sp, #8]
 801211a:	9201      	str	r2, [sp, #4]
 801211c:	9300      	str	r3, [sp, #0]
 801211e:	460b      	mov	r3, r1
 8012120:	f241 32b4 	movw	r2, #5044	@ 0x13b4
 8012124:	4971      	ldr	r1, [pc, #452]	@ (80122ec <lfs_fs_deorphan+0x348>)
 8012126:	4873      	ldr	r0, [pc, #460]	@ (80122f4 <lfs_fs_deorphan+0x350>)
 8012128:	f000 fc2e 	bl	8012988 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801212c:	2200      	movs	r2, #0
 801212e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8012132:	6878      	ldr	r0, [r7, #4]
 8012134:	f7ff fe14 	bl	8011d60 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8012138:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 801213c:	4618      	mov	r0, r3
 801213e:	f7f9 ff40 	bl	800bfc2 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8012142:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8012146:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801214a:	4293      	cmp	r3, r2
 801214c:	d007      	beq.n	801215e <lfs_fs_deorphan+0x1ba>
 801214e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8012152:	029b      	lsls	r3, r3, #10
 8012154:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8012158:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801215c:	e000      	b.n	8012160 <lfs_fs_deorphan+0x1bc>
 801215e:	2300      	movs	r3, #0
 8012160:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012164:	2300      	movs	r3, #0
 8012166:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801216a:	4b63      	ldr	r3, [pc, #396]	@ (80122f8 <lfs_fs_deorphan+0x354>)
 801216c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012170:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8012174:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012178:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801217c:	f107 0108 	add.w	r1, r7, #8
 8012180:	2302      	movs	r3, #2
 8012182:	6878      	ldr	r0, [r7, #4]
 8012184:	f7fd f812 	bl	800f1ac <lfs_dir_orphaningcommit>
 8012188:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 801218c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8012190:	4618      	mov	r0, r3
 8012192:	f7f9 fefc 	bl	800bf8e <lfs_pair_fromle32>
                        if (state < 0) {
 8012196:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801219a:	2b00      	cmp	r3, #0
 801219c:	da02      	bge.n	80121a4 <lfs_fs_deorphan+0x200>
                            return state;
 801219e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        return state;
 80121a2:	e063      	b.n	801226c <lfs_fs_deorphan+0x2c8>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 80121a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80121a8:	2b03      	cmp	r3, #3
 80121aa:	d16c      	bne.n	8012286 <lfs_fs_deorphan+0x2e2>
                            moreorphans = true;
 80121ac:	2301      	movs	r3, #1
 80121ae:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 80121b2:	e068      	b.n	8012286 <lfs_fs_deorphan+0x2e2>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 80121b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80121b8:	2b01      	cmp	r3, #1
 80121ba:	d158      	bne.n	801226e <lfs_fs_deorphan+0x2ca>
 80121bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80121c0:	f113 0f02 	cmn.w	r3, #2
 80121c4:	d153      	bne.n	801226e <lfs_fs_deorphan+0x2ca>
 80121c6:	78fb      	ldrb	r3, [r7, #3]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d050      	beq.n	801226e <lfs_fs_deorphan+0x2ca>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 80121cc:	6a3a      	ldr	r2, [r7, #32]
 80121ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121d0:	4945      	ldr	r1, [pc, #276]	@ (80122e8 <lfs_fs_deorphan+0x344>)
 80121d2:	9101      	str	r1, [sp, #4]
 80121d4:	9300      	str	r3, [sp, #0]
 80121d6:	4613      	mov	r3, r2
 80121d8:	f241 32d4 	movw	r2, #5076	@ 0x13d4
 80121dc:	4943      	ldr	r1, [pc, #268]	@ (80122ec <lfs_fs_deorphan+0x348>)
 80121de:	4847      	ldr	r0, [pc, #284]	@ (80122fc <lfs_fs_deorphan+0x358>)
 80121e0:	f000 fbd2 	bl	8012988 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80121ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80121ee:	4619      	mov	r1, r3
 80121f0:	6878      	ldr	r0, [r7, #4]
 80121f2:	f7fb fd03 	bl	800dbfc <lfs_dir_getgstate>
 80121f6:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                    if (err) {
 80121fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d002      	beq.n	8012208 <lfs_fs_deorphan+0x264>
                        return err;
 8012202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012206:	e030      	b.n	801226a <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8012208:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801220c:	3318      	adds	r3, #24
 801220e:	4618      	mov	r0, r3
 8012210:	f7f9 fed7 	bl	800bfc2 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8012214:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012218:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 801221c:	051a      	lsls	r2, r3, #20
 801221e:	4b38      	ldr	r3, [pc, #224]	@ (8012300 <lfs_fs_deorphan+0x35c>)
 8012220:	4313      	orrs	r3, r2
 8012222:	673b      	str	r3, [r7, #112]	@ 0x70
 8012224:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012228:	3318      	adds	r3, #24
 801222a:	677b      	str	r3, [r7, #116]	@ 0x74
 801222c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8012230:	f107 0108 	add.w	r1, r7, #8
 8012234:	2301      	movs	r3, #1
 8012236:	6878      	ldr	r0, [r7, #4]
 8012238:	f7fc ffb8 	bl	800f1ac <lfs_dir_orphaningcommit>
 801223c:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8012240:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012244:	3318      	adds	r3, #24
 8012246:	4618      	mov	r0, r3
 8012248:	f7f9 fea1 	bl	800bf8e <lfs_pair_fromle32>
                    if (state < 0) {
 801224c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012250:	2b00      	cmp	r3, #0
 8012252:	da02      	bge.n	801225a <lfs_fs_deorphan+0x2b6>
                        return state;
 8012254:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012258:	e007      	b.n	801226a <lfs_fs_deorphan+0x2c6>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 801225a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801225e:	2b03      	cmp	r3, #3
 8012260:	d110      	bne.n	8012284 <lfs_fs_deorphan+0x2e0>
                        moreorphans = true;
 8012262:	2301      	movs	r3, #1
 8012264:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8012268:	e00d      	b.n	8012286 <lfs_fs_deorphan+0x2e2>
                    return tag;
 801226a:	e037      	b.n	80122dc <lfs_fs_deorphan+0x338>
                return err;
 801226c:	e036      	b.n	80122dc <lfs_fs_deorphan+0x338>
                    // refetch tail
                    continue;
                }
            }

            pdir = dir;
 801226e:	f107 0408 	add.w	r4, r7, #8
 8012272:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8012276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801227a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801227e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012282:	e000      	b.n	8012286 <lfs_fs_deorphan+0x2e2>
                    continue;
 8012284:	bf00      	nop
        while (!lfs_pair_isnull(pdir.tail)) {
 8012286:	f107 0308 	add.w	r3, r7, #8
 801228a:	3318      	adds	r3, #24
 801228c:	4618      	mov	r0, r3
 801228e:	f7f9 fe0c 	bl	800beaa <lfs_pair_isnull>
 8012292:	4603      	mov	r3, r0
 8012294:	f083 0301 	eor.w	r3, r3, #1
 8012298:	b2db      	uxtb	r3, r3
 801229a:	2b00      	cmp	r3, #0
 801229c:	f47f aea8 	bne.w	8011ff0 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 80122a0:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d001      	beq.n	80122ac <lfs_fs_deorphan+0x308>
 80122a8:	2300      	movs	r3, #0
 80122aa:	e002      	b.n	80122b2 <lfs_fs_deorphan+0x30e>
 80122ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80122b0:	3301      	adds	r3, #1
 80122b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 80122b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80122ba:	2b01      	cmp	r3, #1
 80122bc:	f77f ae89 	ble.w	8011fd2 <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	3330      	adds	r3, #48	@ 0x30
 80122c4:	4618      	mov	r0, r3
 80122c6:	f7f9 ff81 	bl	800c1cc <lfs_gstate_getorphans>
 80122ca:	4603      	mov	r3, r0
 80122cc:	425b      	negs	r3, r3
 80122ce:	b2db      	uxtb	r3, r3
 80122d0:	b25b      	sxtb	r3, r3
 80122d2:	4619      	mov	r1, r3
 80122d4:	6878      	ldr	r0, [r7, #4]
 80122d6:	f7ff fcf3 	bl	8011cc0 <lfs_fs_preporphans>
 80122da:	4603      	mov	r3, r0
}
 80122dc:	4618      	mov	r0, r3
 80122de:	37b8      	adds	r7, #184	@ 0xb8
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bdb0      	pop	{r4, r5, r7, pc}
 80122e4:	7ffffc00 	.word	0x7ffffc00
 80122e8:	080139a4 	.word	0x080139a4
 80122ec:	08013884 	.word	0x08013884
 80122f0:	080144b8 	.word	0x080144b8
 80122f4:	080144fc 	.word	0x080144fc
 80122f8:	600ffc08 	.word	0x600ffc08
 80122fc:	08014544 	.word	0x08014544
 8012300:	000ffc08 	.word	0x000ffc08

08012304 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8012304:	b580      	push	{r7, lr}
 8012306:	b084      	sub	sp, #16
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 801230c:	6878      	ldr	r0, [r7, #4]
 801230e:	f7ff fd61 	bl	8011dd4 <lfs_fs_desuperblock>
 8012312:	60f8      	str	r0, [r7, #12]
    if (err) {
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d001      	beq.n	801231e <lfs_fs_forceconsistency+0x1a>
        return err;
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	e013      	b.n	8012346 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 801231e:	6878      	ldr	r0, [r7, #4]
 8012320:	f7ff fdc4 	bl	8011eac <lfs_fs_demove>
 8012324:	60f8      	str	r0, [r7, #12]
    if (err) {
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d001      	beq.n	8012330 <lfs_fs_forceconsistency+0x2c>
        return err;
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	e00a      	b.n	8012346 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 8012330:	2101      	movs	r1, #1
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f7ff fe36 	bl	8011fa4 <lfs_fs_deorphan>
 8012338:	60f8      	str	r0, [r7, #12]
    if (err) {
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d001      	beq.n	8012344 <lfs_fs_forceconsistency+0x40>
        return err;
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	e000      	b.n	8012346 <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 8012344:	2300      	movs	r3, #0
}
 8012346:	4618      	mov	r0, r3
 8012348:	3710      	adds	r7, #16
 801234a:	46bd      	mov	sp, r7
 801234c:	bd80      	pop	{r7, pc}

0801234e <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 801234e:	b480      	push	{r7}
 8012350:	b085      	sub	sp, #20
 8012352:	af00      	add	r7, sp, #0
 8012354:	6078      	str	r0, [r7, #4]
 8012356:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	60fb      	str	r3, [r7, #12]
    *size += 1;
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	1c5a      	adds	r2, r3, #1
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	601a      	str	r2, [r3, #0]
    return 0;
 8012366:	2300      	movs	r3, #0
}
 8012368:	4618      	mov	r0, r3
 801236a:	3714      	adds	r7, #20
 801236c:	46bd      	mov	sp, r7
 801236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012372:	4770      	bx	lr

08012374 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 8012374:	b580      	push	{r7, lr}
 8012376:	b084      	sub	sp, #16
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 801237c:	2300      	movs	r3, #0
 801237e:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 8012380:	f107 0208 	add.w	r2, r7, #8
 8012384:	2300      	movs	r3, #0
 8012386:	4907      	ldr	r1, [pc, #28]	@ (80123a4 <lfs_fs_size_+0x30>)
 8012388:	6878      	ldr	r0, [r7, #4]
 801238a:	f7ff fa65 	bl	8011858 <lfs_fs_traverse_>
 801238e:	60f8      	str	r0, [r7, #12]
    if (err) {
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d001      	beq.n	801239a <lfs_fs_size_+0x26>
        return err;
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	e000      	b.n	801239c <lfs_fs_size_+0x28>
    }

    return size;
 801239a:	68bb      	ldr	r3, [r7, #8]
}
 801239c:	4618      	mov	r0, r3
 801239e:	3710      	adds	r7, #16
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}
 80123a4:	0801234f 	.word	0x0801234f

080123a8 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b084      	sub	sp, #16
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
 80123b0:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80123b2:	2300      	movs	r3, #0
 80123b4:	60fb      	str	r3, [r7, #12]
    if (err) {
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d001      	beq.n	80123c0 <lfs_format+0x18>
        return err;
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	e005      	b.n	80123cc <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_format_(lfs, cfg);
 80123c0:	6839      	ldr	r1, [r7, #0]
 80123c2:	6878      	ldr	r0, [r7, #4]
 80123c4:	f7fe ff48 	bl	8011258 <lfs_format_>
 80123c8:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 80123ca:	68fb      	ldr	r3, [r7, #12]
}
 80123cc:	4618      	mov	r0, r3
 80123ce:	3710      	adds	r7, #16
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}

080123d4 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b084      	sub	sp, #16
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
 80123dc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80123de:	2300      	movs	r3, #0
 80123e0:	60fb      	str	r3, [r7, #12]
    if (err) {
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d001      	beq.n	80123ec <lfs_mount+0x18>
        return err;
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	e005      	b.n	80123f8 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 80123ec:	6839      	ldr	r1, [r7, #0]
 80123ee:	6878      	ldr	r0, [r7, #4]
 80123f0:	f7ff f824 	bl	801143c <lfs_mount_>
 80123f4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 80123f6:	68fb      	ldr	r3, [r7, #12]
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	3710      	adds	r7, #16
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}

08012400 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 8012400:	b580      	push	{r7, lr}
 8012402:	b084      	sub	sp, #16
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
 8012408:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801240a:	2300      	movs	r3, #0
 801240c:	60fb      	str	r3, [r7, #12]
    if (err) {
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d001      	beq.n	8012418 <lfs_remove+0x18>
        return err;
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	e005      	b.n	8012424 <lfs_remove+0x24>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_remove_(lfs, path);
 8012418:	6839      	ldr	r1, [r7, #0]
 801241a:	6878      	ldr	r0, [r7, #4]
 801241c:	f7fe fb30 	bl	8010a80 <lfs_remove_>
 8012420:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8012422:	68fb      	ldr	r3, [r7, #12]
}
 8012424:	4618      	mov	r0, r3
 8012426:	3710      	adds	r7, #16
 8012428:	46bd      	mov	sp, r7
 801242a:	bd80      	pop	{r7, pc}

0801242c <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 801242c:	b580      	push	{r7, lr}
 801242e:	b086      	sub	sp, #24
 8012430:	af00      	add	r7, sp, #0
 8012432:	60f8      	str	r0, [r7, #12]
 8012434:	60b9      	str	r1, [r7, #8]
 8012436:	607a      	str	r2, [r7, #4]
 8012438:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801243a:	2300      	movs	r3, #0
 801243c:	617b      	str	r3, [r7, #20]
    if (err) {
 801243e:	697b      	ldr	r3, [r7, #20]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d001      	beq.n	8012448 <lfs_file_open+0x1c>
        return err;
 8012444:	697b      	ldr	r3, [r7, #20]
 8012446:	e01a      	b.n	801247e <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, (unsigned)flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801244c:	68b9      	ldr	r1, [r7, #8]
 801244e:	4618      	mov	r0, r3
 8012450:	f7fa f822 	bl	800c498 <lfs_mlist_isopen>
 8012454:	4603      	mov	r3, r0
 8012456:	f083 0301 	eor.w	r3, r3, #1
 801245a:	b2db      	uxtb	r3, r3
 801245c:	2b00      	cmp	r3, #0
 801245e:	d106      	bne.n	801246e <lfs_file_open+0x42>
 8012460:	4b09      	ldr	r3, [pc, #36]	@ (8012488 <lfs_file_open+0x5c>)
 8012462:	4a0a      	ldr	r2, [pc, #40]	@ (801248c <lfs_file_open+0x60>)
 8012464:	f241 71e5 	movw	r1, #6117	@ 0x17e5
 8012468:	4809      	ldr	r0, [pc, #36]	@ (8012490 <lfs_file_open+0x64>)
 801246a:	f000 f8dd 	bl	8012628 <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	687a      	ldr	r2, [r7, #4]
 8012472:	68b9      	ldr	r1, [r7, #8]
 8012474:	68f8      	ldr	r0, [r7, #12]
 8012476:	f7fd fdc1 	bl	800fffc <lfs_file_open_>
 801247a:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 801247c:	697b      	ldr	r3, [r7, #20]
}
 801247e:	4618      	mov	r0, r3
 8012480:	3718      	adds	r7, #24
 8012482:	46bd      	mov	sp, r7
 8012484:	bd80      	pop	{r7, pc}
 8012486:	bf00      	nop
 8012488:	08014594 	.word	0x08014594
 801248c:	08014780 	.word	0x08014780
 8012490:	08013884 	.word	0x08013884

08012494 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8012494:	b580      	push	{r7, lr}
 8012496:	b084      	sub	sp, #16
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
 801249c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801249e:	2300      	movs	r3, #0
 80124a0:	60fb      	str	r3, [r7, #12]
    if (err) {
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d001      	beq.n	80124ac <lfs_file_close+0x18>
        return err;
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	e015      	b.n	80124d8 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124b0:	6839      	ldr	r1, [r7, #0]
 80124b2:	4618      	mov	r0, r3
 80124b4:	f7f9 fff0 	bl	800c498 <lfs_mlist_isopen>
 80124b8:	4603      	mov	r3, r0
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d106      	bne.n	80124cc <lfs_file_close+0x38>
 80124be:	4b08      	ldr	r3, [pc, #32]	@ (80124e0 <lfs_file_close+0x4c>)
 80124c0:	4a08      	ldr	r2, [pc, #32]	@ (80124e4 <lfs_file_close+0x50>)
 80124c2:	f641 0109 	movw	r1, #6153	@ 0x1809
 80124c6:	4808      	ldr	r0, [pc, #32]	@ (80124e8 <lfs_file_close+0x54>)
 80124c8:	f000 f8ae 	bl	8012628 <__assert_func>

    err = lfs_file_close_(lfs, file);
 80124cc:	6839      	ldr	r1, [r7, #0]
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f7fd fdac 	bl	801002c <lfs_file_close_>
 80124d4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80124d6:	68fb      	ldr	r3, [r7, #12]
}
 80124d8:	4618      	mov	r0, r3
 80124da:	3710      	adds	r7, #16
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}
 80124e0:	080145cc 	.word	0x080145cc
 80124e4:	08014790 	.word	0x08014790
 80124e8:	08013884 	.word	0x08013884

080124ec <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b086      	sub	sp, #24
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	60f8      	str	r0, [r7, #12]
 80124f4:	60b9      	str	r1, [r7, #8]
 80124f6:	607a      	str	r2, [r7, #4]
 80124f8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80124fa:	2300      	movs	r3, #0
 80124fc:	617b      	str	r3, [r7, #20]
    if (err) {
 80124fe:	697b      	ldr	r3, [r7, #20]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d001      	beq.n	8012508 <lfs_file_read+0x1c>
        return err;
 8012504:	697b      	ldr	r3, [r7, #20]
 8012506:	e017      	b.n	8012538 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801250c:	68b9      	ldr	r1, [r7, #8]
 801250e:	4618      	mov	r0, r3
 8012510:	f7f9 ffc2 	bl	800c498 <lfs_mlist_isopen>
 8012514:	4603      	mov	r3, r0
 8012516:	2b00      	cmp	r3, #0
 8012518:	d106      	bne.n	8012528 <lfs_file_read+0x3c>
 801251a:	4b09      	ldr	r3, [pc, #36]	@ (8012540 <lfs_file_read+0x54>)
 801251c:	4a09      	ldr	r2, [pc, #36]	@ (8012544 <lfs_file_read+0x58>)
 801251e:	f641 012b 	movw	r1, #6187	@ 0x182b
 8012522:	4809      	ldr	r0, [pc, #36]	@ (8012548 <lfs_file_read+0x5c>)
 8012524:	f000 f880 	bl	8012628 <__assert_func>

    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	687a      	ldr	r2, [r7, #4]
 801252c:	68b9      	ldr	r1, [r7, #8]
 801252e:	68f8      	ldr	r0, [r7, #12]
 8012530:	f7fe f8dc 	bl	80106ec <lfs_file_read_>
 8012534:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8012536:	693b      	ldr	r3, [r7, #16]
}
 8012538:	4618      	mov	r0, r3
 801253a:	3718      	adds	r7, #24
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}
 8012540:	080145cc 	.word	0x080145cc
 8012544:	080147a0 	.word	0x080147a0
 8012548:	08013884 	.word	0x08013884

0801254c <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 801254c:	b580      	push	{r7, lr}
 801254e:	b086      	sub	sp, #24
 8012550:	af00      	add	r7, sp, #0
 8012552:	60f8      	str	r0, [r7, #12]
 8012554:	60b9      	str	r1, [r7, #8]
 8012556:	607a      	str	r2, [r7, #4]
 8012558:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801255a:	2300      	movs	r3, #0
 801255c:	617b      	str	r3, [r7, #20]
    if (err) {
 801255e:	697b      	ldr	r3, [r7, #20]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d001      	beq.n	8012568 <lfs_file_write+0x1c>
        return err;
 8012564:	697b      	ldr	r3, [r7, #20]
 8012566:	e017      	b.n	8012598 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801256c:	68b9      	ldr	r1, [r7, #8]
 801256e:	4618      	mov	r0, r3
 8012570:	f7f9 ff92 	bl	800c498 <lfs_mlist_isopen>
 8012574:	4603      	mov	r3, r0
 8012576:	2b00      	cmp	r3, #0
 8012578:	d106      	bne.n	8012588 <lfs_file_write+0x3c>
 801257a:	4b09      	ldr	r3, [pc, #36]	@ (80125a0 <lfs_file_write+0x54>)
 801257c:	4a09      	ldr	r2, [pc, #36]	@ (80125a4 <lfs_file_write+0x58>)
 801257e:	f641 013d 	movw	r1, #6205	@ 0x183d
 8012582:	4809      	ldr	r0, [pc, #36]	@ (80125a8 <lfs_file_write+0x5c>)
 8012584:	f000 f850 	bl	8012628 <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	687a      	ldr	r2, [r7, #4]
 801258c:	68b9      	ldr	r1, [r7, #8]
 801258e:	68f8      	ldr	r0, [r7, #12]
 8012590:	f7fe f9f2 	bl	8010978 <lfs_file_write_>
 8012594:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8012596:	693b      	ldr	r3, [r7, #16]
}
 8012598:	4618      	mov	r0, r3
 801259a:	3718      	adds	r7, #24
 801259c:	46bd      	mov	sp, r7
 801259e:	bd80      	pop	{r7, pc}
 80125a0:	080145cc 	.word	0x080145cc
 80125a4:	080147b0 	.word	0x080147b0
 80125a8:	08013884 	.word	0x08013884

080125ac <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 80125ac:	b480      	push	{r7}
 80125ae:	b087      	sub	sp, #28
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	60f8      	str	r0, [r7, #12]
 80125b4:	60b9      	str	r1, [r7, #8]
 80125b6:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 80125b8:	68bb      	ldr	r3, [r7, #8]
 80125ba:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 80125bc:	2300      	movs	r3, #0
 80125be:	617b      	str	r3, [r7, #20]
 80125c0:	e024      	b.n	801260c <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	091a      	lsrs	r2, r3, #4
 80125c6:	6939      	ldr	r1, [r7, #16]
 80125c8:	697b      	ldr	r3, [r7, #20]
 80125ca:	440b      	add	r3, r1
 80125cc:	781b      	ldrb	r3, [r3, #0]
 80125ce:	4619      	mov	r1, r3
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	404b      	eors	r3, r1
 80125d4:	f003 030f 	and.w	r3, r3, #15
 80125d8:	4912      	ldr	r1, [pc, #72]	@ (8012624 <lfs_crc+0x78>)
 80125da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80125de:	4053      	eors	r3, r2
 80125e0:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	091a      	lsrs	r2, r3, #4
 80125e6:	6939      	ldr	r1, [r7, #16]
 80125e8:	697b      	ldr	r3, [r7, #20]
 80125ea:	440b      	add	r3, r1
 80125ec:	781b      	ldrb	r3, [r3, #0]
 80125ee:	091b      	lsrs	r3, r3, #4
 80125f0:	b2db      	uxtb	r3, r3
 80125f2:	4619      	mov	r1, r3
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	404b      	eors	r3, r1
 80125f8:	f003 030f 	and.w	r3, r3, #15
 80125fc:	4909      	ldr	r1, [pc, #36]	@ (8012624 <lfs_crc+0x78>)
 80125fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012602:	4053      	eors	r3, r2
 8012604:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	3301      	adds	r3, #1
 801260a:	617b      	str	r3, [r7, #20]
 801260c:	697a      	ldr	r2, [r7, #20]
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	429a      	cmp	r2, r3
 8012612:	d3d6      	bcc.n	80125c2 <lfs_crc+0x16>
    }

    return crc;
 8012614:	68fb      	ldr	r3, [r7, #12]
}
 8012616:	4618      	mov	r0, r3
 8012618:	371c      	adds	r7, #28
 801261a:	46bd      	mov	sp, r7
 801261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012620:	4770      	bx	lr
 8012622:	bf00      	nop
 8012624:	080147c0 	.word	0x080147c0

08012628 <__assert_func>:
 8012628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801262a:	4614      	mov	r4, r2
 801262c:	461a      	mov	r2, r3
 801262e:	4b09      	ldr	r3, [pc, #36]	@ (8012654 <__assert_func+0x2c>)
 8012630:	4605      	mov	r5, r0
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	68d8      	ldr	r0, [r3, #12]
 8012636:	b14c      	cbz	r4, 801264c <__assert_func+0x24>
 8012638:	4b07      	ldr	r3, [pc, #28]	@ (8012658 <__assert_func+0x30>)
 801263a:	9100      	str	r1, [sp, #0]
 801263c:	4907      	ldr	r1, [pc, #28]	@ (801265c <__assert_func+0x34>)
 801263e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012642:	462b      	mov	r3, r5
 8012644:	f000 f970 	bl	8012928 <fiprintf>
 8012648:	f000 fabc 	bl	8012bc4 <abort>
 801264c:	4b04      	ldr	r3, [pc, #16]	@ (8012660 <__assert_func+0x38>)
 801264e:	461c      	mov	r4, r3
 8012650:	e7f3      	b.n	801263a <__assert_func+0x12>
 8012652:	bf00      	nop
 8012654:	20000018 	.word	0x20000018
 8012658:	08014800 	.word	0x08014800
 801265c:	0801480d 	.word	0x0801480d
 8012660:	0801483b 	.word	0x0801483b

08012664 <malloc>:
 8012664:	4b02      	ldr	r3, [pc, #8]	@ (8012670 <malloc+0xc>)
 8012666:	4601      	mov	r1, r0
 8012668:	6818      	ldr	r0, [r3, #0]
 801266a:	f000 b82d 	b.w	80126c8 <_malloc_r>
 801266e:	bf00      	nop
 8012670:	20000018 	.word	0x20000018

08012674 <free>:
 8012674:	4b02      	ldr	r3, [pc, #8]	@ (8012680 <free+0xc>)
 8012676:	4601      	mov	r1, r0
 8012678:	6818      	ldr	r0, [r3, #0]
 801267a:	f000 baab 	b.w	8012bd4 <_free_r>
 801267e:	bf00      	nop
 8012680:	20000018 	.word	0x20000018

08012684 <sbrk_aligned>:
 8012684:	b570      	push	{r4, r5, r6, lr}
 8012686:	4e0f      	ldr	r6, [pc, #60]	@ (80126c4 <sbrk_aligned+0x40>)
 8012688:	460c      	mov	r4, r1
 801268a:	4605      	mov	r5, r0
 801268c:	6831      	ldr	r1, [r6, #0]
 801268e:	b911      	cbnz	r1, 8012696 <sbrk_aligned+0x12>
 8012690:	f000 fa3c 	bl	8012b0c <_sbrk_r>
 8012694:	6030      	str	r0, [r6, #0]
 8012696:	4621      	mov	r1, r4
 8012698:	4628      	mov	r0, r5
 801269a:	f000 fa37 	bl	8012b0c <_sbrk_r>
 801269e:	1c43      	adds	r3, r0, #1
 80126a0:	d103      	bne.n	80126aa <sbrk_aligned+0x26>
 80126a2:	f04f 34ff 	mov.w	r4, #4294967295
 80126a6:	4620      	mov	r0, r4
 80126a8:	bd70      	pop	{r4, r5, r6, pc}
 80126aa:	1cc4      	adds	r4, r0, #3
 80126ac:	f024 0403 	bic.w	r4, r4, #3
 80126b0:	42a0      	cmp	r0, r4
 80126b2:	d0f8      	beq.n	80126a6 <sbrk_aligned+0x22>
 80126b4:	1a21      	subs	r1, r4, r0
 80126b6:	4628      	mov	r0, r5
 80126b8:	f000 fa28 	bl	8012b0c <_sbrk_r>
 80126bc:	3001      	adds	r0, #1
 80126be:	d1f2      	bne.n	80126a6 <sbrk_aligned+0x22>
 80126c0:	e7ef      	b.n	80126a2 <sbrk_aligned+0x1e>
 80126c2:	bf00      	nop
 80126c4:	200001dc 	.word	0x200001dc

080126c8 <_malloc_r>:
 80126c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126cc:	1ccd      	adds	r5, r1, #3
 80126ce:	4606      	mov	r6, r0
 80126d0:	f025 0503 	bic.w	r5, r5, #3
 80126d4:	3508      	adds	r5, #8
 80126d6:	2d0c      	cmp	r5, #12
 80126d8:	bf38      	it	cc
 80126da:	250c      	movcc	r5, #12
 80126dc:	2d00      	cmp	r5, #0
 80126de:	db01      	blt.n	80126e4 <_malloc_r+0x1c>
 80126e0:	42a9      	cmp	r1, r5
 80126e2:	d904      	bls.n	80126ee <_malloc_r+0x26>
 80126e4:	230c      	movs	r3, #12
 80126e6:	6033      	str	r3, [r6, #0]
 80126e8:	2000      	movs	r0, #0
 80126ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80127c4 <_malloc_r+0xfc>
 80126f2:	f000 f869 	bl	80127c8 <__malloc_lock>
 80126f6:	f8d8 3000 	ldr.w	r3, [r8]
 80126fa:	461c      	mov	r4, r3
 80126fc:	bb44      	cbnz	r4, 8012750 <_malloc_r+0x88>
 80126fe:	4629      	mov	r1, r5
 8012700:	4630      	mov	r0, r6
 8012702:	f7ff ffbf 	bl	8012684 <sbrk_aligned>
 8012706:	1c43      	adds	r3, r0, #1
 8012708:	4604      	mov	r4, r0
 801270a:	d158      	bne.n	80127be <_malloc_r+0xf6>
 801270c:	f8d8 4000 	ldr.w	r4, [r8]
 8012710:	4627      	mov	r7, r4
 8012712:	2f00      	cmp	r7, #0
 8012714:	d143      	bne.n	801279e <_malloc_r+0xd6>
 8012716:	2c00      	cmp	r4, #0
 8012718:	d04b      	beq.n	80127b2 <_malloc_r+0xea>
 801271a:	6823      	ldr	r3, [r4, #0]
 801271c:	4639      	mov	r1, r7
 801271e:	4630      	mov	r0, r6
 8012720:	eb04 0903 	add.w	r9, r4, r3
 8012724:	f000 f9f2 	bl	8012b0c <_sbrk_r>
 8012728:	4581      	cmp	r9, r0
 801272a:	d142      	bne.n	80127b2 <_malloc_r+0xea>
 801272c:	6821      	ldr	r1, [r4, #0]
 801272e:	4630      	mov	r0, r6
 8012730:	1a6d      	subs	r5, r5, r1
 8012732:	4629      	mov	r1, r5
 8012734:	f7ff ffa6 	bl	8012684 <sbrk_aligned>
 8012738:	3001      	adds	r0, #1
 801273a:	d03a      	beq.n	80127b2 <_malloc_r+0xea>
 801273c:	6823      	ldr	r3, [r4, #0]
 801273e:	442b      	add	r3, r5
 8012740:	6023      	str	r3, [r4, #0]
 8012742:	f8d8 3000 	ldr.w	r3, [r8]
 8012746:	685a      	ldr	r2, [r3, #4]
 8012748:	bb62      	cbnz	r2, 80127a4 <_malloc_r+0xdc>
 801274a:	f8c8 7000 	str.w	r7, [r8]
 801274e:	e00f      	b.n	8012770 <_malloc_r+0xa8>
 8012750:	6822      	ldr	r2, [r4, #0]
 8012752:	1b52      	subs	r2, r2, r5
 8012754:	d420      	bmi.n	8012798 <_malloc_r+0xd0>
 8012756:	2a0b      	cmp	r2, #11
 8012758:	d917      	bls.n	801278a <_malloc_r+0xc2>
 801275a:	1961      	adds	r1, r4, r5
 801275c:	42a3      	cmp	r3, r4
 801275e:	6025      	str	r5, [r4, #0]
 8012760:	bf18      	it	ne
 8012762:	6059      	strne	r1, [r3, #4]
 8012764:	6863      	ldr	r3, [r4, #4]
 8012766:	bf08      	it	eq
 8012768:	f8c8 1000 	streq.w	r1, [r8]
 801276c:	5162      	str	r2, [r4, r5]
 801276e:	604b      	str	r3, [r1, #4]
 8012770:	4630      	mov	r0, r6
 8012772:	f000 f82f 	bl	80127d4 <__malloc_unlock>
 8012776:	f104 000b 	add.w	r0, r4, #11
 801277a:	1d23      	adds	r3, r4, #4
 801277c:	f020 0007 	bic.w	r0, r0, #7
 8012780:	1ac2      	subs	r2, r0, r3
 8012782:	bf1c      	itt	ne
 8012784:	1a1b      	subne	r3, r3, r0
 8012786:	50a3      	strne	r3, [r4, r2]
 8012788:	e7af      	b.n	80126ea <_malloc_r+0x22>
 801278a:	6862      	ldr	r2, [r4, #4]
 801278c:	42a3      	cmp	r3, r4
 801278e:	bf0c      	ite	eq
 8012790:	f8c8 2000 	streq.w	r2, [r8]
 8012794:	605a      	strne	r2, [r3, #4]
 8012796:	e7eb      	b.n	8012770 <_malloc_r+0xa8>
 8012798:	4623      	mov	r3, r4
 801279a:	6864      	ldr	r4, [r4, #4]
 801279c:	e7ae      	b.n	80126fc <_malloc_r+0x34>
 801279e:	463c      	mov	r4, r7
 80127a0:	687f      	ldr	r7, [r7, #4]
 80127a2:	e7b6      	b.n	8012712 <_malloc_r+0x4a>
 80127a4:	461a      	mov	r2, r3
 80127a6:	685b      	ldr	r3, [r3, #4]
 80127a8:	42a3      	cmp	r3, r4
 80127aa:	d1fb      	bne.n	80127a4 <_malloc_r+0xdc>
 80127ac:	2300      	movs	r3, #0
 80127ae:	6053      	str	r3, [r2, #4]
 80127b0:	e7de      	b.n	8012770 <_malloc_r+0xa8>
 80127b2:	230c      	movs	r3, #12
 80127b4:	4630      	mov	r0, r6
 80127b6:	6033      	str	r3, [r6, #0]
 80127b8:	f000 f80c 	bl	80127d4 <__malloc_unlock>
 80127bc:	e794      	b.n	80126e8 <_malloc_r+0x20>
 80127be:	6005      	str	r5, [r0, #0]
 80127c0:	e7d6      	b.n	8012770 <_malloc_r+0xa8>
 80127c2:	bf00      	nop
 80127c4:	200001e0 	.word	0x200001e0

080127c8 <__malloc_lock>:
 80127c8:	4801      	ldr	r0, [pc, #4]	@ (80127d0 <__malloc_lock+0x8>)
 80127ca:	f000 b9ec 	b.w	8012ba6 <__retarget_lock_acquire_recursive>
 80127ce:	bf00      	nop
 80127d0:	20000324 	.word	0x20000324

080127d4 <__malloc_unlock>:
 80127d4:	4801      	ldr	r0, [pc, #4]	@ (80127dc <__malloc_unlock+0x8>)
 80127d6:	f000 b9e7 	b.w	8012ba8 <__retarget_lock_release_recursive>
 80127da:	bf00      	nop
 80127dc:	20000324 	.word	0x20000324

080127e0 <std>:
 80127e0:	2300      	movs	r3, #0
 80127e2:	b510      	push	{r4, lr}
 80127e4:	4604      	mov	r4, r0
 80127e6:	6083      	str	r3, [r0, #8]
 80127e8:	8181      	strh	r1, [r0, #12]
 80127ea:	4619      	mov	r1, r3
 80127ec:	6643      	str	r3, [r0, #100]	@ 0x64
 80127ee:	81c2      	strh	r2, [r0, #14]
 80127f0:	2208      	movs	r2, #8
 80127f2:	6183      	str	r3, [r0, #24]
 80127f4:	e9c0 3300 	strd	r3, r3, [r0]
 80127f8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80127fc:	305c      	adds	r0, #92	@ 0x5c
 80127fe:	f000 f928 	bl	8012a52 <memset>
 8012802:	4b0d      	ldr	r3, [pc, #52]	@ (8012838 <std+0x58>)
 8012804:	6224      	str	r4, [r4, #32]
 8012806:	6263      	str	r3, [r4, #36]	@ 0x24
 8012808:	4b0c      	ldr	r3, [pc, #48]	@ (801283c <std+0x5c>)
 801280a:	62a3      	str	r3, [r4, #40]	@ 0x28
 801280c:	4b0c      	ldr	r3, [pc, #48]	@ (8012840 <std+0x60>)
 801280e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012810:	4b0c      	ldr	r3, [pc, #48]	@ (8012844 <std+0x64>)
 8012812:	6323      	str	r3, [r4, #48]	@ 0x30
 8012814:	4b0c      	ldr	r3, [pc, #48]	@ (8012848 <std+0x68>)
 8012816:	429c      	cmp	r4, r3
 8012818:	d006      	beq.n	8012828 <std+0x48>
 801281a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801281e:	4294      	cmp	r4, r2
 8012820:	d002      	beq.n	8012828 <std+0x48>
 8012822:	33d0      	adds	r3, #208	@ 0xd0
 8012824:	429c      	cmp	r4, r3
 8012826:	d105      	bne.n	8012834 <std+0x54>
 8012828:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801282c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012830:	f000 b9b8 	b.w	8012ba4 <__retarget_lock_init_recursive>
 8012834:	bd10      	pop	{r4, pc}
 8012836:	bf00      	nop
 8012838:	080129ad 	.word	0x080129ad
 801283c:	080129cf 	.word	0x080129cf
 8012840:	08012a07 	.word	0x08012a07
 8012844:	08012a2b 	.word	0x08012a2b
 8012848:	200001e4 	.word	0x200001e4

0801284c <stdio_exit_handler>:
 801284c:	4a02      	ldr	r2, [pc, #8]	@ (8012858 <stdio_exit_handler+0xc>)
 801284e:	4903      	ldr	r1, [pc, #12]	@ (801285c <stdio_exit_handler+0x10>)
 8012850:	4803      	ldr	r0, [pc, #12]	@ (8012860 <stdio_exit_handler+0x14>)
 8012852:	f000 b87b 	b.w	801294c <_fwalk_sglue>
 8012856:	bf00      	nop
 8012858:	2000000c 	.word	0x2000000c
 801285c:	08013315 	.word	0x08013315
 8012860:	2000001c 	.word	0x2000001c

08012864 <cleanup_stdio>:
 8012864:	6841      	ldr	r1, [r0, #4]
 8012866:	4b0c      	ldr	r3, [pc, #48]	@ (8012898 <cleanup_stdio+0x34>)
 8012868:	4299      	cmp	r1, r3
 801286a:	b510      	push	{r4, lr}
 801286c:	4604      	mov	r4, r0
 801286e:	d001      	beq.n	8012874 <cleanup_stdio+0x10>
 8012870:	f000 fd50 	bl	8013314 <_fflush_r>
 8012874:	68a1      	ldr	r1, [r4, #8]
 8012876:	4b09      	ldr	r3, [pc, #36]	@ (801289c <cleanup_stdio+0x38>)
 8012878:	4299      	cmp	r1, r3
 801287a:	d002      	beq.n	8012882 <cleanup_stdio+0x1e>
 801287c:	4620      	mov	r0, r4
 801287e:	f000 fd49 	bl	8013314 <_fflush_r>
 8012882:	68e1      	ldr	r1, [r4, #12]
 8012884:	4b06      	ldr	r3, [pc, #24]	@ (80128a0 <cleanup_stdio+0x3c>)
 8012886:	4299      	cmp	r1, r3
 8012888:	d004      	beq.n	8012894 <cleanup_stdio+0x30>
 801288a:	4620      	mov	r0, r4
 801288c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012890:	f000 bd40 	b.w	8013314 <_fflush_r>
 8012894:	bd10      	pop	{r4, pc}
 8012896:	bf00      	nop
 8012898:	200001e4 	.word	0x200001e4
 801289c:	2000024c 	.word	0x2000024c
 80128a0:	200002b4 	.word	0x200002b4

080128a4 <global_stdio_init.part.0>:
 80128a4:	b510      	push	{r4, lr}
 80128a6:	4b0b      	ldr	r3, [pc, #44]	@ (80128d4 <global_stdio_init.part.0+0x30>)
 80128a8:	2104      	movs	r1, #4
 80128aa:	4c0b      	ldr	r4, [pc, #44]	@ (80128d8 <global_stdio_init.part.0+0x34>)
 80128ac:	4a0b      	ldr	r2, [pc, #44]	@ (80128dc <global_stdio_init.part.0+0x38>)
 80128ae:	4620      	mov	r0, r4
 80128b0:	601a      	str	r2, [r3, #0]
 80128b2:	2200      	movs	r2, #0
 80128b4:	f7ff ff94 	bl	80127e0 <std>
 80128b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80128bc:	2201      	movs	r2, #1
 80128be:	2109      	movs	r1, #9
 80128c0:	f7ff ff8e 	bl	80127e0 <std>
 80128c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80128c8:	2202      	movs	r2, #2
 80128ca:	2112      	movs	r1, #18
 80128cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128d0:	f7ff bf86 	b.w	80127e0 <std>
 80128d4:	2000031c 	.word	0x2000031c
 80128d8:	200001e4 	.word	0x200001e4
 80128dc:	0801284d 	.word	0x0801284d

080128e0 <__sfp_lock_acquire>:
 80128e0:	4801      	ldr	r0, [pc, #4]	@ (80128e8 <__sfp_lock_acquire+0x8>)
 80128e2:	f000 b960 	b.w	8012ba6 <__retarget_lock_acquire_recursive>
 80128e6:	bf00      	nop
 80128e8:	20000325 	.word	0x20000325

080128ec <__sfp_lock_release>:
 80128ec:	4801      	ldr	r0, [pc, #4]	@ (80128f4 <__sfp_lock_release+0x8>)
 80128ee:	f000 b95b 	b.w	8012ba8 <__retarget_lock_release_recursive>
 80128f2:	bf00      	nop
 80128f4:	20000325 	.word	0x20000325

080128f8 <__sinit>:
 80128f8:	b510      	push	{r4, lr}
 80128fa:	4604      	mov	r4, r0
 80128fc:	f7ff fff0 	bl	80128e0 <__sfp_lock_acquire>
 8012900:	6a23      	ldr	r3, [r4, #32]
 8012902:	b11b      	cbz	r3, 801290c <__sinit+0x14>
 8012904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012908:	f7ff bff0 	b.w	80128ec <__sfp_lock_release>
 801290c:	4b04      	ldr	r3, [pc, #16]	@ (8012920 <__sinit+0x28>)
 801290e:	6223      	str	r3, [r4, #32]
 8012910:	4b04      	ldr	r3, [pc, #16]	@ (8012924 <__sinit+0x2c>)
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d1f5      	bne.n	8012904 <__sinit+0xc>
 8012918:	f7ff ffc4 	bl	80128a4 <global_stdio_init.part.0>
 801291c:	e7f2      	b.n	8012904 <__sinit+0xc>
 801291e:	bf00      	nop
 8012920:	08012865 	.word	0x08012865
 8012924:	2000031c 	.word	0x2000031c

08012928 <fiprintf>:
 8012928:	b40e      	push	{r1, r2, r3}
 801292a:	b503      	push	{r0, r1, lr}
 801292c:	ab03      	add	r3, sp, #12
 801292e:	4601      	mov	r1, r0
 8012930:	4805      	ldr	r0, [pc, #20]	@ (8012948 <fiprintf+0x20>)
 8012932:	f853 2b04 	ldr.w	r2, [r3], #4
 8012936:	6800      	ldr	r0, [r0, #0]
 8012938:	9301      	str	r3, [sp, #4]
 801293a:	f000 f9bf 	bl	8012cbc <_vfiprintf_r>
 801293e:	b002      	add	sp, #8
 8012940:	f85d eb04 	ldr.w	lr, [sp], #4
 8012944:	b003      	add	sp, #12
 8012946:	4770      	bx	lr
 8012948:	20000018 	.word	0x20000018

0801294c <_fwalk_sglue>:
 801294c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012950:	4607      	mov	r7, r0
 8012952:	4688      	mov	r8, r1
 8012954:	4614      	mov	r4, r2
 8012956:	2600      	movs	r6, #0
 8012958:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801295c:	f1b9 0901 	subs.w	r9, r9, #1
 8012960:	d505      	bpl.n	801296e <_fwalk_sglue+0x22>
 8012962:	6824      	ldr	r4, [r4, #0]
 8012964:	2c00      	cmp	r4, #0
 8012966:	d1f7      	bne.n	8012958 <_fwalk_sglue+0xc>
 8012968:	4630      	mov	r0, r6
 801296a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801296e:	89ab      	ldrh	r3, [r5, #12]
 8012970:	2b01      	cmp	r3, #1
 8012972:	d907      	bls.n	8012984 <_fwalk_sglue+0x38>
 8012974:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012978:	3301      	adds	r3, #1
 801297a:	d003      	beq.n	8012984 <_fwalk_sglue+0x38>
 801297c:	4629      	mov	r1, r5
 801297e:	4638      	mov	r0, r7
 8012980:	47c0      	blx	r8
 8012982:	4306      	orrs	r6, r0
 8012984:	3568      	adds	r5, #104	@ 0x68
 8012986:	e7e9      	b.n	801295c <_fwalk_sglue+0x10>

08012988 <iprintf>:
 8012988:	b40f      	push	{r0, r1, r2, r3}
 801298a:	b507      	push	{r0, r1, r2, lr}
 801298c:	4906      	ldr	r1, [pc, #24]	@ (80129a8 <iprintf+0x20>)
 801298e:	ab04      	add	r3, sp, #16
 8012990:	6808      	ldr	r0, [r1, #0]
 8012992:	f853 2b04 	ldr.w	r2, [r3], #4
 8012996:	6881      	ldr	r1, [r0, #8]
 8012998:	9301      	str	r3, [sp, #4]
 801299a:	f000 f98f 	bl	8012cbc <_vfiprintf_r>
 801299e:	b003      	add	sp, #12
 80129a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80129a4:	b004      	add	sp, #16
 80129a6:	4770      	bx	lr
 80129a8:	20000018 	.word	0x20000018

080129ac <__sread>:
 80129ac:	b510      	push	{r4, lr}
 80129ae:	460c      	mov	r4, r1
 80129b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129b4:	f000 f898 	bl	8012ae8 <_read_r>
 80129b8:	2800      	cmp	r0, #0
 80129ba:	bfab      	itete	ge
 80129bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80129be:	89a3      	ldrhlt	r3, [r4, #12]
 80129c0:	181b      	addge	r3, r3, r0
 80129c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80129c6:	bfac      	ite	ge
 80129c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80129ca:	81a3      	strhlt	r3, [r4, #12]
 80129cc:	bd10      	pop	{r4, pc}

080129ce <__swrite>:
 80129ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129d2:	461f      	mov	r7, r3
 80129d4:	898b      	ldrh	r3, [r1, #12]
 80129d6:	4605      	mov	r5, r0
 80129d8:	460c      	mov	r4, r1
 80129da:	05db      	lsls	r3, r3, #23
 80129dc:	4616      	mov	r6, r2
 80129de:	d505      	bpl.n	80129ec <__swrite+0x1e>
 80129e0:	2302      	movs	r3, #2
 80129e2:	2200      	movs	r2, #0
 80129e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129e8:	f000 f86c 	bl	8012ac4 <_lseek_r>
 80129ec:	89a3      	ldrh	r3, [r4, #12]
 80129ee:	4632      	mov	r2, r6
 80129f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80129f4:	4628      	mov	r0, r5
 80129f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80129fa:	81a3      	strh	r3, [r4, #12]
 80129fc:	463b      	mov	r3, r7
 80129fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a02:	f000 b893 	b.w	8012b2c <_write_r>

08012a06 <__sseek>:
 8012a06:	b510      	push	{r4, lr}
 8012a08:	460c      	mov	r4, r1
 8012a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a0e:	f000 f859 	bl	8012ac4 <_lseek_r>
 8012a12:	1c43      	adds	r3, r0, #1
 8012a14:	89a3      	ldrh	r3, [r4, #12]
 8012a16:	bf15      	itete	ne
 8012a18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012a1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012a1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012a22:	81a3      	strheq	r3, [r4, #12]
 8012a24:	bf18      	it	ne
 8012a26:	81a3      	strhne	r3, [r4, #12]
 8012a28:	bd10      	pop	{r4, pc}

08012a2a <__sclose>:
 8012a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a2e:	f000 b839 	b.w	8012aa4 <_close_r>

08012a32 <memcmp>:
 8012a32:	3901      	subs	r1, #1
 8012a34:	4402      	add	r2, r0
 8012a36:	b510      	push	{r4, lr}
 8012a38:	4290      	cmp	r0, r2
 8012a3a:	d101      	bne.n	8012a40 <memcmp+0xe>
 8012a3c:	2000      	movs	r0, #0
 8012a3e:	e005      	b.n	8012a4c <memcmp+0x1a>
 8012a40:	7803      	ldrb	r3, [r0, #0]
 8012a42:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012a46:	42a3      	cmp	r3, r4
 8012a48:	d001      	beq.n	8012a4e <memcmp+0x1c>
 8012a4a:	1b18      	subs	r0, r3, r4
 8012a4c:	bd10      	pop	{r4, pc}
 8012a4e:	3001      	adds	r0, #1
 8012a50:	e7f2      	b.n	8012a38 <memcmp+0x6>

08012a52 <memset>:
 8012a52:	4402      	add	r2, r0
 8012a54:	4603      	mov	r3, r0
 8012a56:	4293      	cmp	r3, r2
 8012a58:	d100      	bne.n	8012a5c <memset+0xa>
 8012a5a:	4770      	bx	lr
 8012a5c:	f803 1b01 	strb.w	r1, [r3], #1
 8012a60:	e7f9      	b.n	8012a56 <memset+0x4>

08012a62 <strcspn>:
 8012a62:	4603      	mov	r3, r0
 8012a64:	b570      	push	{r4, r5, r6, lr}
 8012a66:	461e      	mov	r6, r3
 8012a68:	f813 4b01 	ldrb.w	r4, [r3], #1
 8012a6c:	b144      	cbz	r4, 8012a80 <strcspn+0x1e>
 8012a6e:	1e4a      	subs	r2, r1, #1
 8012a70:	e001      	b.n	8012a76 <strcspn+0x14>
 8012a72:	42a5      	cmp	r5, r4
 8012a74:	d004      	beq.n	8012a80 <strcspn+0x1e>
 8012a76:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8012a7a:	2d00      	cmp	r5, #0
 8012a7c:	d1f9      	bne.n	8012a72 <strcspn+0x10>
 8012a7e:	e7f2      	b.n	8012a66 <strcspn+0x4>
 8012a80:	1a30      	subs	r0, r6, r0
 8012a82:	bd70      	pop	{r4, r5, r6, pc}

08012a84 <strspn>:
 8012a84:	4603      	mov	r3, r0
 8012a86:	b570      	push	{r4, r5, r6, lr}
 8012a88:	461e      	mov	r6, r3
 8012a8a:	f813 4b01 	ldrb.w	r4, [r3], #1
 8012a8e:	b13c      	cbz	r4, 8012aa0 <strspn+0x1c>
 8012a90:	1e4a      	subs	r2, r1, #1
 8012a92:	e001      	b.n	8012a98 <strspn+0x14>
 8012a94:	42a5      	cmp	r5, r4
 8012a96:	d0f7      	beq.n	8012a88 <strspn+0x4>
 8012a98:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8012a9c:	2d00      	cmp	r5, #0
 8012a9e:	d1f9      	bne.n	8012a94 <strspn+0x10>
 8012aa0:	1a30      	subs	r0, r6, r0
 8012aa2:	bd70      	pop	{r4, r5, r6, pc}

08012aa4 <_close_r>:
 8012aa4:	b538      	push	{r3, r4, r5, lr}
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	4d05      	ldr	r5, [pc, #20]	@ (8012ac0 <_close_r+0x1c>)
 8012aaa:	4604      	mov	r4, r0
 8012aac:	4608      	mov	r0, r1
 8012aae:	602b      	str	r3, [r5, #0]
 8012ab0:	f7ee fc3a 	bl	8001328 <_close>
 8012ab4:	1c43      	adds	r3, r0, #1
 8012ab6:	d102      	bne.n	8012abe <_close_r+0x1a>
 8012ab8:	682b      	ldr	r3, [r5, #0]
 8012aba:	b103      	cbz	r3, 8012abe <_close_r+0x1a>
 8012abc:	6023      	str	r3, [r4, #0]
 8012abe:	bd38      	pop	{r3, r4, r5, pc}
 8012ac0:	20000320 	.word	0x20000320

08012ac4 <_lseek_r>:
 8012ac4:	b538      	push	{r3, r4, r5, lr}
 8012ac6:	4604      	mov	r4, r0
 8012ac8:	4d06      	ldr	r5, [pc, #24]	@ (8012ae4 <_lseek_r+0x20>)
 8012aca:	4608      	mov	r0, r1
 8012acc:	4611      	mov	r1, r2
 8012ace:	2200      	movs	r2, #0
 8012ad0:	602a      	str	r2, [r5, #0]
 8012ad2:	461a      	mov	r2, r3
 8012ad4:	f7ee fc4f 	bl	8001376 <_lseek>
 8012ad8:	1c43      	adds	r3, r0, #1
 8012ada:	d102      	bne.n	8012ae2 <_lseek_r+0x1e>
 8012adc:	682b      	ldr	r3, [r5, #0]
 8012ade:	b103      	cbz	r3, 8012ae2 <_lseek_r+0x1e>
 8012ae0:	6023      	str	r3, [r4, #0]
 8012ae2:	bd38      	pop	{r3, r4, r5, pc}
 8012ae4:	20000320 	.word	0x20000320

08012ae8 <_read_r>:
 8012ae8:	b538      	push	{r3, r4, r5, lr}
 8012aea:	4604      	mov	r4, r0
 8012aec:	4d06      	ldr	r5, [pc, #24]	@ (8012b08 <_read_r+0x20>)
 8012aee:	4608      	mov	r0, r1
 8012af0:	4611      	mov	r1, r2
 8012af2:	2200      	movs	r2, #0
 8012af4:	602a      	str	r2, [r5, #0]
 8012af6:	461a      	mov	r2, r3
 8012af8:	f7ee fbdd 	bl	80012b6 <_read>
 8012afc:	1c43      	adds	r3, r0, #1
 8012afe:	d102      	bne.n	8012b06 <_read_r+0x1e>
 8012b00:	682b      	ldr	r3, [r5, #0]
 8012b02:	b103      	cbz	r3, 8012b06 <_read_r+0x1e>
 8012b04:	6023      	str	r3, [r4, #0]
 8012b06:	bd38      	pop	{r3, r4, r5, pc}
 8012b08:	20000320 	.word	0x20000320

08012b0c <_sbrk_r>:
 8012b0c:	b538      	push	{r3, r4, r5, lr}
 8012b0e:	2300      	movs	r3, #0
 8012b10:	4d05      	ldr	r5, [pc, #20]	@ (8012b28 <_sbrk_r+0x1c>)
 8012b12:	4604      	mov	r4, r0
 8012b14:	4608      	mov	r0, r1
 8012b16:	602b      	str	r3, [r5, #0]
 8012b18:	f7ee fc3a 	bl	8001390 <_sbrk>
 8012b1c:	1c43      	adds	r3, r0, #1
 8012b1e:	d102      	bne.n	8012b26 <_sbrk_r+0x1a>
 8012b20:	682b      	ldr	r3, [r5, #0]
 8012b22:	b103      	cbz	r3, 8012b26 <_sbrk_r+0x1a>
 8012b24:	6023      	str	r3, [r4, #0]
 8012b26:	bd38      	pop	{r3, r4, r5, pc}
 8012b28:	20000320 	.word	0x20000320

08012b2c <_write_r>:
 8012b2c:	b538      	push	{r3, r4, r5, lr}
 8012b2e:	4604      	mov	r4, r0
 8012b30:	4d06      	ldr	r5, [pc, #24]	@ (8012b4c <_write_r+0x20>)
 8012b32:	4608      	mov	r0, r1
 8012b34:	4611      	mov	r1, r2
 8012b36:	2200      	movs	r2, #0
 8012b38:	602a      	str	r2, [r5, #0]
 8012b3a:	461a      	mov	r2, r3
 8012b3c:	f7ee fbd8 	bl	80012f0 <_write>
 8012b40:	1c43      	adds	r3, r0, #1
 8012b42:	d102      	bne.n	8012b4a <_write_r+0x1e>
 8012b44:	682b      	ldr	r3, [r5, #0]
 8012b46:	b103      	cbz	r3, 8012b4a <_write_r+0x1e>
 8012b48:	6023      	str	r3, [r4, #0]
 8012b4a:	bd38      	pop	{r3, r4, r5, pc}
 8012b4c:	20000320 	.word	0x20000320

08012b50 <__errno>:
 8012b50:	4b01      	ldr	r3, [pc, #4]	@ (8012b58 <__errno+0x8>)
 8012b52:	6818      	ldr	r0, [r3, #0]
 8012b54:	4770      	bx	lr
 8012b56:	bf00      	nop
 8012b58:	20000018 	.word	0x20000018

08012b5c <__libc_init_array>:
 8012b5c:	b570      	push	{r4, r5, r6, lr}
 8012b5e:	4d0d      	ldr	r5, [pc, #52]	@ (8012b94 <__libc_init_array+0x38>)
 8012b60:	2600      	movs	r6, #0
 8012b62:	4c0d      	ldr	r4, [pc, #52]	@ (8012b98 <__libc_init_array+0x3c>)
 8012b64:	1b64      	subs	r4, r4, r5
 8012b66:	10a4      	asrs	r4, r4, #2
 8012b68:	42a6      	cmp	r6, r4
 8012b6a:	d109      	bne.n	8012b80 <__libc_init_array+0x24>
 8012b6c:	4d0b      	ldr	r5, [pc, #44]	@ (8012b9c <__libc_init_array+0x40>)
 8012b6e:	2600      	movs	r6, #0
 8012b70:	4c0b      	ldr	r4, [pc, #44]	@ (8012ba0 <__libc_init_array+0x44>)
 8012b72:	f000 fd61 	bl	8013638 <_init>
 8012b76:	1b64      	subs	r4, r4, r5
 8012b78:	10a4      	asrs	r4, r4, #2
 8012b7a:	42a6      	cmp	r6, r4
 8012b7c:	d105      	bne.n	8012b8a <__libc_init_array+0x2e>
 8012b7e:	bd70      	pop	{r4, r5, r6, pc}
 8012b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b84:	3601      	adds	r6, #1
 8012b86:	4798      	blx	r3
 8012b88:	e7ee      	b.n	8012b68 <__libc_init_array+0xc>
 8012b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b8e:	3601      	adds	r6, #1
 8012b90:	4798      	blx	r3
 8012b92:	e7f2      	b.n	8012b7a <__libc_init_array+0x1e>
 8012b94:	08014878 	.word	0x08014878
 8012b98:	08014878 	.word	0x08014878
 8012b9c:	08014878 	.word	0x08014878
 8012ba0:	0801487c 	.word	0x0801487c

08012ba4 <__retarget_lock_init_recursive>:
 8012ba4:	4770      	bx	lr

08012ba6 <__retarget_lock_acquire_recursive>:
 8012ba6:	4770      	bx	lr

08012ba8 <__retarget_lock_release_recursive>:
 8012ba8:	4770      	bx	lr

08012baa <memcpy>:
 8012baa:	440a      	add	r2, r1
 8012bac:	1e43      	subs	r3, r0, #1
 8012bae:	4291      	cmp	r1, r2
 8012bb0:	d100      	bne.n	8012bb4 <memcpy+0xa>
 8012bb2:	4770      	bx	lr
 8012bb4:	b510      	push	{r4, lr}
 8012bb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012bba:	4291      	cmp	r1, r2
 8012bbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012bc0:	d1f9      	bne.n	8012bb6 <memcpy+0xc>
 8012bc2:	bd10      	pop	{r4, pc}

08012bc4 <abort>:
 8012bc4:	2006      	movs	r0, #6
 8012bc6:	b508      	push	{r3, lr}
 8012bc8:	f000 fc88 	bl	80134dc <raise>
 8012bcc:	2001      	movs	r0, #1
 8012bce:	f7ee fb67 	bl	80012a0 <_exit>
	...

08012bd4 <_free_r>:
 8012bd4:	b538      	push	{r3, r4, r5, lr}
 8012bd6:	4605      	mov	r5, r0
 8012bd8:	2900      	cmp	r1, #0
 8012bda:	d041      	beq.n	8012c60 <_free_r+0x8c>
 8012bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012be0:	1f0c      	subs	r4, r1, #4
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	bfb8      	it	lt
 8012be6:	18e4      	addlt	r4, r4, r3
 8012be8:	f7ff fdee 	bl	80127c8 <__malloc_lock>
 8012bec:	4a1d      	ldr	r2, [pc, #116]	@ (8012c64 <_free_r+0x90>)
 8012bee:	6813      	ldr	r3, [r2, #0]
 8012bf0:	b933      	cbnz	r3, 8012c00 <_free_r+0x2c>
 8012bf2:	6063      	str	r3, [r4, #4]
 8012bf4:	6014      	str	r4, [r2, #0]
 8012bf6:	4628      	mov	r0, r5
 8012bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bfc:	f7ff bdea 	b.w	80127d4 <__malloc_unlock>
 8012c00:	42a3      	cmp	r3, r4
 8012c02:	d908      	bls.n	8012c16 <_free_r+0x42>
 8012c04:	6820      	ldr	r0, [r4, #0]
 8012c06:	1821      	adds	r1, r4, r0
 8012c08:	428b      	cmp	r3, r1
 8012c0a:	bf01      	itttt	eq
 8012c0c:	6819      	ldreq	r1, [r3, #0]
 8012c0e:	685b      	ldreq	r3, [r3, #4]
 8012c10:	1809      	addeq	r1, r1, r0
 8012c12:	6021      	streq	r1, [r4, #0]
 8012c14:	e7ed      	b.n	8012bf2 <_free_r+0x1e>
 8012c16:	461a      	mov	r2, r3
 8012c18:	685b      	ldr	r3, [r3, #4]
 8012c1a:	b10b      	cbz	r3, 8012c20 <_free_r+0x4c>
 8012c1c:	42a3      	cmp	r3, r4
 8012c1e:	d9fa      	bls.n	8012c16 <_free_r+0x42>
 8012c20:	6811      	ldr	r1, [r2, #0]
 8012c22:	1850      	adds	r0, r2, r1
 8012c24:	42a0      	cmp	r0, r4
 8012c26:	d10b      	bne.n	8012c40 <_free_r+0x6c>
 8012c28:	6820      	ldr	r0, [r4, #0]
 8012c2a:	4401      	add	r1, r0
 8012c2c:	1850      	adds	r0, r2, r1
 8012c2e:	6011      	str	r1, [r2, #0]
 8012c30:	4283      	cmp	r3, r0
 8012c32:	d1e0      	bne.n	8012bf6 <_free_r+0x22>
 8012c34:	6818      	ldr	r0, [r3, #0]
 8012c36:	685b      	ldr	r3, [r3, #4]
 8012c38:	4408      	add	r0, r1
 8012c3a:	6053      	str	r3, [r2, #4]
 8012c3c:	6010      	str	r0, [r2, #0]
 8012c3e:	e7da      	b.n	8012bf6 <_free_r+0x22>
 8012c40:	d902      	bls.n	8012c48 <_free_r+0x74>
 8012c42:	230c      	movs	r3, #12
 8012c44:	602b      	str	r3, [r5, #0]
 8012c46:	e7d6      	b.n	8012bf6 <_free_r+0x22>
 8012c48:	6820      	ldr	r0, [r4, #0]
 8012c4a:	1821      	adds	r1, r4, r0
 8012c4c:	428b      	cmp	r3, r1
 8012c4e:	bf02      	ittt	eq
 8012c50:	6819      	ldreq	r1, [r3, #0]
 8012c52:	685b      	ldreq	r3, [r3, #4]
 8012c54:	1809      	addeq	r1, r1, r0
 8012c56:	6063      	str	r3, [r4, #4]
 8012c58:	bf08      	it	eq
 8012c5a:	6021      	streq	r1, [r4, #0]
 8012c5c:	6054      	str	r4, [r2, #4]
 8012c5e:	e7ca      	b.n	8012bf6 <_free_r+0x22>
 8012c60:	bd38      	pop	{r3, r4, r5, pc}
 8012c62:	bf00      	nop
 8012c64:	200001e0 	.word	0x200001e0

08012c68 <__sfputc_r>:
 8012c68:	6893      	ldr	r3, [r2, #8]
 8012c6a:	3b01      	subs	r3, #1
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	b410      	push	{r4}
 8012c70:	6093      	str	r3, [r2, #8]
 8012c72:	da08      	bge.n	8012c86 <__sfputc_r+0x1e>
 8012c74:	6994      	ldr	r4, [r2, #24]
 8012c76:	42a3      	cmp	r3, r4
 8012c78:	db01      	blt.n	8012c7e <__sfputc_r+0x16>
 8012c7a:	290a      	cmp	r1, #10
 8012c7c:	d103      	bne.n	8012c86 <__sfputc_r+0x1e>
 8012c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c82:	f000 bb6f 	b.w	8013364 <__swbuf_r>
 8012c86:	6813      	ldr	r3, [r2, #0]
 8012c88:	1c58      	adds	r0, r3, #1
 8012c8a:	6010      	str	r0, [r2, #0]
 8012c8c:	4608      	mov	r0, r1
 8012c8e:	7019      	strb	r1, [r3, #0]
 8012c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c94:	4770      	bx	lr

08012c96 <__sfputs_r>:
 8012c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c98:	4606      	mov	r6, r0
 8012c9a:	460f      	mov	r7, r1
 8012c9c:	4614      	mov	r4, r2
 8012c9e:	18d5      	adds	r5, r2, r3
 8012ca0:	42ac      	cmp	r4, r5
 8012ca2:	d101      	bne.n	8012ca8 <__sfputs_r+0x12>
 8012ca4:	2000      	movs	r0, #0
 8012ca6:	e007      	b.n	8012cb8 <__sfputs_r+0x22>
 8012ca8:	463a      	mov	r2, r7
 8012caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cae:	4630      	mov	r0, r6
 8012cb0:	f7ff ffda 	bl	8012c68 <__sfputc_r>
 8012cb4:	1c43      	adds	r3, r0, #1
 8012cb6:	d1f3      	bne.n	8012ca0 <__sfputs_r+0xa>
 8012cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012cbc <_vfiprintf_r>:
 8012cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cc0:	460d      	mov	r5, r1
 8012cc2:	b09d      	sub	sp, #116	@ 0x74
 8012cc4:	4614      	mov	r4, r2
 8012cc6:	4698      	mov	r8, r3
 8012cc8:	4606      	mov	r6, r0
 8012cca:	b118      	cbz	r0, 8012cd4 <_vfiprintf_r+0x18>
 8012ccc:	6a03      	ldr	r3, [r0, #32]
 8012cce:	b90b      	cbnz	r3, 8012cd4 <_vfiprintf_r+0x18>
 8012cd0:	f7ff fe12 	bl	80128f8 <__sinit>
 8012cd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012cd6:	07d9      	lsls	r1, r3, #31
 8012cd8:	d405      	bmi.n	8012ce6 <_vfiprintf_r+0x2a>
 8012cda:	89ab      	ldrh	r3, [r5, #12]
 8012cdc:	059a      	lsls	r2, r3, #22
 8012cde:	d402      	bmi.n	8012ce6 <_vfiprintf_r+0x2a>
 8012ce0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012ce2:	f7ff ff60 	bl	8012ba6 <__retarget_lock_acquire_recursive>
 8012ce6:	89ab      	ldrh	r3, [r5, #12]
 8012ce8:	071b      	lsls	r3, r3, #28
 8012cea:	d501      	bpl.n	8012cf0 <_vfiprintf_r+0x34>
 8012cec:	692b      	ldr	r3, [r5, #16]
 8012cee:	b99b      	cbnz	r3, 8012d18 <_vfiprintf_r+0x5c>
 8012cf0:	4629      	mov	r1, r5
 8012cf2:	4630      	mov	r0, r6
 8012cf4:	f000 fb74 	bl	80133e0 <__swsetup_r>
 8012cf8:	b170      	cbz	r0, 8012d18 <_vfiprintf_r+0x5c>
 8012cfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012cfc:	07dc      	lsls	r4, r3, #31
 8012cfe:	d504      	bpl.n	8012d0a <_vfiprintf_r+0x4e>
 8012d00:	f04f 30ff 	mov.w	r0, #4294967295
 8012d04:	b01d      	add	sp, #116	@ 0x74
 8012d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d0a:	89ab      	ldrh	r3, [r5, #12]
 8012d0c:	0598      	lsls	r0, r3, #22
 8012d0e:	d4f7      	bmi.n	8012d00 <_vfiprintf_r+0x44>
 8012d10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012d12:	f7ff ff49 	bl	8012ba8 <__retarget_lock_release_recursive>
 8012d16:	e7f3      	b.n	8012d00 <_vfiprintf_r+0x44>
 8012d18:	2300      	movs	r3, #0
 8012d1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d1e:	f04f 0901 	mov.w	r9, #1
 8012d22:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8012ed8 <_vfiprintf_r+0x21c>
 8012d26:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d28:	2320      	movs	r3, #32
 8012d2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012d2e:	2330      	movs	r3, #48	@ 0x30
 8012d30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012d34:	4623      	mov	r3, r4
 8012d36:	469a      	mov	sl, r3
 8012d38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d3c:	b10a      	cbz	r2, 8012d42 <_vfiprintf_r+0x86>
 8012d3e:	2a25      	cmp	r2, #37	@ 0x25
 8012d40:	d1f9      	bne.n	8012d36 <_vfiprintf_r+0x7a>
 8012d42:	ebba 0b04 	subs.w	fp, sl, r4
 8012d46:	d00b      	beq.n	8012d60 <_vfiprintf_r+0xa4>
 8012d48:	465b      	mov	r3, fp
 8012d4a:	4622      	mov	r2, r4
 8012d4c:	4629      	mov	r1, r5
 8012d4e:	4630      	mov	r0, r6
 8012d50:	f7ff ffa1 	bl	8012c96 <__sfputs_r>
 8012d54:	3001      	adds	r0, #1
 8012d56:	f000 80a7 	beq.w	8012ea8 <_vfiprintf_r+0x1ec>
 8012d5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012d5c:	445a      	add	r2, fp
 8012d5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012d60:	f89a 3000 	ldrb.w	r3, [sl]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	f000 809f 	beq.w	8012ea8 <_vfiprintf_r+0x1ec>
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8012d70:	f10a 0a01 	add.w	sl, sl, #1
 8012d74:	9304      	str	r3, [sp, #16]
 8012d76:	9307      	str	r3, [sp, #28]
 8012d78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012d7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8012d7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d82:	4654      	mov	r4, sl
 8012d84:	2205      	movs	r2, #5
 8012d86:	4854      	ldr	r0, [pc, #336]	@ (8012ed8 <_vfiprintf_r+0x21c>)
 8012d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d8c:	f000 fbc2 	bl	8013514 <memchr>
 8012d90:	9a04      	ldr	r2, [sp, #16]
 8012d92:	b9d8      	cbnz	r0, 8012dcc <_vfiprintf_r+0x110>
 8012d94:	06d1      	lsls	r1, r2, #27
 8012d96:	bf44      	itt	mi
 8012d98:	2320      	movmi	r3, #32
 8012d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012d9e:	0713      	lsls	r3, r2, #28
 8012da0:	bf44      	itt	mi
 8012da2:	232b      	movmi	r3, #43	@ 0x2b
 8012da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012da8:	f89a 3000 	ldrb.w	r3, [sl]
 8012dac:	2b2a      	cmp	r3, #42	@ 0x2a
 8012dae:	d015      	beq.n	8012ddc <_vfiprintf_r+0x120>
 8012db0:	9a07      	ldr	r2, [sp, #28]
 8012db2:	4654      	mov	r4, sl
 8012db4:	2000      	movs	r0, #0
 8012db6:	f04f 0c0a 	mov.w	ip, #10
 8012dba:	4621      	mov	r1, r4
 8012dbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012dc0:	3b30      	subs	r3, #48	@ 0x30
 8012dc2:	2b09      	cmp	r3, #9
 8012dc4:	d94b      	bls.n	8012e5e <_vfiprintf_r+0x1a2>
 8012dc6:	b1b0      	cbz	r0, 8012df6 <_vfiprintf_r+0x13a>
 8012dc8:	9207      	str	r2, [sp, #28]
 8012dca:	e014      	b.n	8012df6 <_vfiprintf_r+0x13a>
 8012dcc:	eba0 0308 	sub.w	r3, r0, r8
 8012dd0:	46a2      	mov	sl, r4
 8012dd2:	fa09 f303 	lsl.w	r3, r9, r3
 8012dd6:	4313      	orrs	r3, r2
 8012dd8:	9304      	str	r3, [sp, #16]
 8012dda:	e7d2      	b.n	8012d82 <_vfiprintf_r+0xc6>
 8012ddc:	9b03      	ldr	r3, [sp, #12]
 8012dde:	1d19      	adds	r1, r3, #4
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	9103      	str	r1, [sp, #12]
 8012de6:	bfbb      	ittet	lt
 8012de8:	425b      	neglt	r3, r3
 8012dea:	f042 0202 	orrlt.w	r2, r2, #2
 8012dee:	9307      	strge	r3, [sp, #28]
 8012df0:	9307      	strlt	r3, [sp, #28]
 8012df2:	bfb8      	it	lt
 8012df4:	9204      	strlt	r2, [sp, #16]
 8012df6:	7823      	ldrb	r3, [r4, #0]
 8012df8:	2b2e      	cmp	r3, #46	@ 0x2e
 8012dfa:	d10a      	bne.n	8012e12 <_vfiprintf_r+0x156>
 8012dfc:	7863      	ldrb	r3, [r4, #1]
 8012dfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e00:	d132      	bne.n	8012e68 <_vfiprintf_r+0x1ac>
 8012e02:	9b03      	ldr	r3, [sp, #12]
 8012e04:	3402      	adds	r4, #2
 8012e06:	1d1a      	adds	r2, r3, #4
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012e0e:	9203      	str	r2, [sp, #12]
 8012e10:	9305      	str	r3, [sp, #20]
 8012e12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012ee8 <_vfiprintf_r+0x22c>
 8012e16:	2203      	movs	r2, #3
 8012e18:	7821      	ldrb	r1, [r4, #0]
 8012e1a:	4650      	mov	r0, sl
 8012e1c:	f000 fb7a 	bl	8013514 <memchr>
 8012e20:	b138      	cbz	r0, 8012e32 <_vfiprintf_r+0x176>
 8012e22:	eba0 000a 	sub.w	r0, r0, sl
 8012e26:	2240      	movs	r2, #64	@ 0x40
 8012e28:	9b04      	ldr	r3, [sp, #16]
 8012e2a:	3401      	adds	r4, #1
 8012e2c:	4082      	lsls	r2, r0
 8012e2e:	4313      	orrs	r3, r2
 8012e30:	9304      	str	r3, [sp, #16]
 8012e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e36:	2206      	movs	r2, #6
 8012e38:	4828      	ldr	r0, [pc, #160]	@ (8012edc <_vfiprintf_r+0x220>)
 8012e3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012e3e:	f000 fb69 	bl	8013514 <memchr>
 8012e42:	2800      	cmp	r0, #0
 8012e44:	d03f      	beq.n	8012ec6 <_vfiprintf_r+0x20a>
 8012e46:	4b26      	ldr	r3, [pc, #152]	@ (8012ee0 <_vfiprintf_r+0x224>)
 8012e48:	bb1b      	cbnz	r3, 8012e92 <_vfiprintf_r+0x1d6>
 8012e4a:	9b03      	ldr	r3, [sp, #12]
 8012e4c:	3307      	adds	r3, #7
 8012e4e:	f023 0307 	bic.w	r3, r3, #7
 8012e52:	3308      	adds	r3, #8
 8012e54:	9303      	str	r3, [sp, #12]
 8012e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e58:	443b      	add	r3, r7
 8012e5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e5c:	e76a      	b.n	8012d34 <_vfiprintf_r+0x78>
 8012e5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e62:	460c      	mov	r4, r1
 8012e64:	2001      	movs	r0, #1
 8012e66:	e7a8      	b.n	8012dba <_vfiprintf_r+0xfe>
 8012e68:	2300      	movs	r3, #0
 8012e6a:	3401      	adds	r4, #1
 8012e6c:	f04f 0c0a 	mov.w	ip, #10
 8012e70:	4619      	mov	r1, r3
 8012e72:	9305      	str	r3, [sp, #20]
 8012e74:	4620      	mov	r0, r4
 8012e76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e7a:	3a30      	subs	r2, #48	@ 0x30
 8012e7c:	2a09      	cmp	r2, #9
 8012e7e:	d903      	bls.n	8012e88 <_vfiprintf_r+0x1cc>
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d0c6      	beq.n	8012e12 <_vfiprintf_r+0x156>
 8012e84:	9105      	str	r1, [sp, #20]
 8012e86:	e7c4      	b.n	8012e12 <_vfiprintf_r+0x156>
 8012e88:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e8c:	4604      	mov	r4, r0
 8012e8e:	2301      	movs	r3, #1
 8012e90:	e7f0      	b.n	8012e74 <_vfiprintf_r+0x1b8>
 8012e92:	ab03      	add	r3, sp, #12
 8012e94:	462a      	mov	r2, r5
 8012e96:	a904      	add	r1, sp, #16
 8012e98:	4630      	mov	r0, r6
 8012e9a:	9300      	str	r3, [sp, #0]
 8012e9c:	4b11      	ldr	r3, [pc, #68]	@ (8012ee4 <_vfiprintf_r+0x228>)
 8012e9e:	f3af 8000 	nop.w
 8012ea2:	4607      	mov	r7, r0
 8012ea4:	1c78      	adds	r0, r7, #1
 8012ea6:	d1d6      	bne.n	8012e56 <_vfiprintf_r+0x19a>
 8012ea8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012eaa:	07d9      	lsls	r1, r3, #31
 8012eac:	d405      	bmi.n	8012eba <_vfiprintf_r+0x1fe>
 8012eae:	89ab      	ldrh	r3, [r5, #12]
 8012eb0:	059a      	lsls	r2, r3, #22
 8012eb2:	d402      	bmi.n	8012eba <_vfiprintf_r+0x1fe>
 8012eb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012eb6:	f7ff fe77 	bl	8012ba8 <__retarget_lock_release_recursive>
 8012eba:	89ab      	ldrh	r3, [r5, #12]
 8012ebc:	065b      	lsls	r3, r3, #25
 8012ebe:	f53f af1f 	bmi.w	8012d00 <_vfiprintf_r+0x44>
 8012ec2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012ec4:	e71e      	b.n	8012d04 <_vfiprintf_r+0x48>
 8012ec6:	ab03      	add	r3, sp, #12
 8012ec8:	462a      	mov	r2, r5
 8012eca:	a904      	add	r1, sp, #16
 8012ecc:	4630      	mov	r0, r6
 8012ece:	9300      	str	r3, [sp, #0]
 8012ed0:	4b04      	ldr	r3, [pc, #16]	@ (8012ee4 <_vfiprintf_r+0x228>)
 8012ed2:	f000 f87d 	bl	8012fd0 <_printf_i>
 8012ed6:	e7e4      	b.n	8012ea2 <_vfiprintf_r+0x1e6>
 8012ed8:	0801483c 	.word	0x0801483c
 8012edc:	08014846 	.word	0x08014846
 8012ee0:	00000000 	.word	0x00000000
 8012ee4:	08012c97 	.word	0x08012c97
 8012ee8:	08014842 	.word	0x08014842

08012eec <_printf_common>:
 8012eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ef0:	4616      	mov	r6, r2
 8012ef2:	4698      	mov	r8, r3
 8012ef4:	688a      	ldr	r2, [r1, #8]
 8012ef6:	4607      	mov	r7, r0
 8012ef8:	690b      	ldr	r3, [r1, #16]
 8012efa:	460c      	mov	r4, r1
 8012efc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012f00:	4293      	cmp	r3, r2
 8012f02:	bfb8      	it	lt
 8012f04:	4613      	movlt	r3, r2
 8012f06:	6033      	str	r3, [r6, #0]
 8012f08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012f0c:	b10a      	cbz	r2, 8012f12 <_printf_common+0x26>
 8012f0e:	3301      	adds	r3, #1
 8012f10:	6033      	str	r3, [r6, #0]
 8012f12:	6823      	ldr	r3, [r4, #0]
 8012f14:	0699      	lsls	r1, r3, #26
 8012f16:	bf42      	ittt	mi
 8012f18:	6833      	ldrmi	r3, [r6, #0]
 8012f1a:	3302      	addmi	r3, #2
 8012f1c:	6033      	strmi	r3, [r6, #0]
 8012f1e:	6825      	ldr	r5, [r4, #0]
 8012f20:	f015 0506 	ands.w	r5, r5, #6
 8012f24:	d106      	bne.n	8012f34 <_printf_common+0x48>
 8012f26:	f104 0a19 	add.w	sl, r4, #25
 8012f2a:	68e3      	ldr	r3, [r4, #12]
 8012f2c:	6832      	ldr	r2, [r6, #0]
 8012f2e:	1a9b      	subs	r3, r3, r2
 8012f30:	42ab      	cmp	r3, r5
 8012f32:	dc2b      	bgt.n	8012f8c <_printf_common+0xa0>
 8012f34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012f38:	6822      	ldr	r2, [r4, #0]
 8012f3a:	3b00      	subs	r3, #0
 8012f3c:	bf18      	it	ne
 8012f3e:	2301      	movne	r3, #1
 8012f40:	0692      	lsls	r2, r2, #26
 8012f42:	d430      	bmi.n	8012fa6 <_printf_common+0xba>
 8012f44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012f48:	4641      	mov	r1, r8
 8012f4a:	4638      	mov	r0, r7
 8012f4c:	47c8      	blx	r9
 8012f4e:	3001      	adds	r0, #1
 8012f50:	d023      	beq.n	8012f9a <_printf_common+0xae>
 8012f52:	6823      	ldr	r3, [r4, #0]
 8012f54:	341a      	adds	r4, #26
 8012f56:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8012f5a:	f003 0306 	and.w	r3, r3, #6
 8012f5e:	2b04      	cmp	r3, #4
 8012f60:	bf0a      	itet	eq
 8012f62:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8012f66:	2500      	movne	r5, #0
 8012f68:	6833      	ldreq	r3, [r6, #0]
 8012f6a:	f04f 0600 	mov.w	r6, #0
 8012f6e:	bf08      	it	eq
 8012f70:	1aed      	subeq	r5, r5, r3
 8012f72:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8012f76:	bf08      	it	eq
 8012f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012f7c:	4293      	cmp	r3, r2
 8012f7e:	bfc4      	itt	gt
 8012f80:	1a9b      	subgt	r3, r3, r2
 8012f82:	18ed      	addgt	r5, r5, r3
 8012f84:	42b5      	cmp	r5, r6
 8012f86:	d11a      	bne.n	8012fbe <_printf_common+0xd2>
 8012f88:	2000      	movs	r0, #0
 8012f8a:	e008      	b.n	8012f9e <_printf_common+0xb2>
 8012f8c:	2301      	movs	r3, #1
 8012f8e:	4652      	mov	r2, sl
 8012f90:	4641      	mov	r1, r8
 8012f92:	4638      	mov	r0, r7
 8012f94:	47c8      	blx	r9
 8012f96:	3001      	adds	r0, #1
 8012f98:	d103      	bne.n	8012fa2 <_printf_common+0xb6>
 8012f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8012f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fa2:	3501      	adds	r5, #1
 8012fa4:	e7c1      	b.n	8012f2a <_printf_common+0x3e>
 8012fa6:	18e1      	adds	r1, r4, r3
 8012fa8:	1c5a      	adds	r2, r3, #1
 8012faa:	2030      	movs	r0, #48	@ 0x30
 8012fac:	3302      	adds	r3, #2
 8012fae:	4422      	add	r2, r4
 8012fb0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012fb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012fbc:	e7c2      	b.n	8012f44 <_printf_common+0x58>
 8012fbe:	2301      	movs	r3, #1
 8012fc0:	4622      	mov	r2, r4
 8012fc2:	4641      	mov	r1, r8
 8012fc4:	4638      	mov	r0, r7
 8012fc6:	47c8      	blx	r9
 8012fc8:	3001      	adds	r0, #1
 8012fca:	d0e6      	beq.n	8012f9a <_printf_common+0xae>
 8012fcc:	3601      	adds	r6, #1
 8012fce:	e7d9      	b.n	8012f84 <_printf_common+0x98>

08012fd0 <_printf_i>:
 8012fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012fd4:	7e0f      	ldrb	r7, [r1, #24]
 8012fd6:	4691      	mov	r9, r2
 8012fd8:	4680      	mov	r8, r0
 8012fda:	460c      	mov	r4, r1
 8012fdc:	2f78      	cmp	r7, #120	@ 0x78
 8012fde:	469a      	mov	sl, r3
 8012fe0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012fe2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012fe6:	d807      	bhi.n	8012ff8 <_printf_i+0x28>
 8012fe8:	2f62      	cmp	r7, #98	@ 0x62
 8012fea:	d80a      	bhi.n	8013002 <_printf_i+0x32>
 8012fec:	2f00      	cmp	r7, #0
 8012fee:	f000 80d1 	beq.w	8013194 <_printf_i+0x1c4>
 8012ff2:	2f58      	cmp	r7, #88	@ 0x58
 8012ff4:	f000 80b8 	beq.w	8013168 <_printf_i+0x198>
 8012ff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012ffc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013000:	e03a      	b.n	8013078 <_printf_i+0xa8>
 8013002:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013006:	2b15      	cmp	r3, #21
 8013008:	d8f6      	bhi.n	8012ff8 <_printf_i+0x28>
 801300a:	a101      	add	r1, pc, #4	@ (adr r1, 8013010 <_printf_i+0x40>)
 801300c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013010:	08013069 	.word	0x08013069
 8013014:	0801307d 	.word	0x0801307d
 8013018:	08012ff9 	.word	0x08012ff9
 801301c:	08012ff9 	.word	0x08012ff9
 8013020:	08012ff9 	.word	0x08012ff9
 8013024:	08012ff9 	.word	0x08012ff9
 8013028:	0801307d 	.word	0x0801307d
 801302c:	08012ff9 	.word	0x08012ff9
 8013030:	08012ff9 	.word	0x08012ff9
 8013034:	08012ff9 	.word	0x08012ff9
 8013038:	08012ff9 	.word	0x08012ff9
 801303c:	0801317b 	.word	0x0801317b
 8013040:	080130a7 	.word	0x080130a7
 8013044:	08013135 	.word	0x08013135
 8013048:	08012ff9 	.word	0x08012ff9
 801304c:	08012ff9 	.word	0x08012ff9
 8013050:	0801319d 	.word	0x0801319d
 8013054:	08012ff9 	.word	0x08012ff9
 8013058:	080130a7 	.word	0x080130a7
 801305c:	08012ff9 	.word	0x08012ff9
 8013060:	08012ff9 	.word	0x08012ff9
 8013064:	0801313d 	.word	0x0801313d
 8013068:	6833      	ldr	r3, [r6, #0]
 801306a:	1d1a      	adds	r2, r3, #4
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	6032      	str	r2, [r6, #0]
 8013070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013074:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013078:	2301      	movs	r3, #1
 801307a:	e09c      	b.n	80131b6 <_printf_i+0x1e6>
 801307c:	6833      	ldr	r3, [r6, #0]
 801307e:	6820      	ldr	r0, [r4, #0]
 8013080:	1d19      	adds	r1, r3, #4
 8013082:	6031      	str	r1, [r6, #0]
 8013084:	0606      	lsls	r6, r0, #24
 8013086:	d501      	bpl.n	801308c <_printf_i+0xbc>
 8013088:	681d      	ldr	r5, [r3, #0]
 801308a:	e003      	b.n	8013094 <_printf_i+0xc4>
 801308c:	0645      	lsls	r5, r0, #25
 801308e:	d5fb      	bpl.n	8013088 <_printf_i+0xb8>
 8013090:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013094:	2d00      	cmp	r5, #0
 8013096:	da03      	bge.n	80130a0 <_printf_i+0xd0>
 8013098:	232d      	movs	r3, #45	@ 0x2d
 801309a:	426d      	negs	r5, r5
 801309c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80130a0:	4858      	ldr	r0, [pc, #352]	@ (8013204 <_printf_i+0x234>)
 80130a2:	230a      	movs	r3, #10
 80130a4:	e011      	b.n	80130ca <_printf_i+0xfa>
 80130a6:	6821      	ldr	r1, [r4, #0]
 80130a8:	6833      	ldr	r3, [r6, #0]
 80130aa:	0608      	lsls	r0, r1, #24
 80130ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80130b0:	d402      	bmi.n	80130b8 <_printf_i+0xe8>
 80130b2:	0649      	lsls	r1, r1, #25
 80130b4:	bf48      	it	mi
 80130b6:	b2ad      	uxthmi	r5, r5
 80130b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80130ba:	6033      	str	r3, [r6, #0]
 80130bc:	4851      	ldr	r0, [pc, #324]	@ (8013204 <_printf_i+0x234>)
 80130be:	bf14      	ite	ne
 80130c0:	230a      	movne	r3, #10
 80130c2:	2308      	moveq	r3, #8
 80130c4:	2100      	movs	r1, #0
 80130c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80130ca:	6866      	ldr	r6, [r4, #4]
 80130cc:	2e00      	cmp	r6, #0
 80130ce:	60a6      	str	r6, [r4, #8]
 80130d0:	db05      	blt.n	80130de <_printf_i+0x10e>
 80130d2:	6821      	ldr	r1, [r4, #0]
 80130d4:	432e      	orrs	r6, r5
 80130d6:	f021 0104 	bic.w	r1, r1, #4
 80130da:	6021      	str	r1, [r4, #0]
 80130dc:	d04b      	beq.n	8013176 <_printf_i+0x1a6>
 80130de:	4616      	mov	r6, r2
 80130e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80130e4:	fb03 5711 	mls	r7, r3, r1, r5
 80130e8:	5dc7      	ldrb	r7, [r0, r7]
 80130ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80130ee:	462f      	mov	r7, r5
 80130f0:	460d      	mov	r5, r1
 80130f2:	42bb      	cmp	r3, r7
 80130f4:	d9f4      	bls.n	80130e0 <_printf_i+0x110>
 80130f6:	2b08      	cmp	r3, #8
 80130f8:	d10b      	bne.n	8013112 <_printf_i+0x142>
 80130fa:	6823      	ldr	r3, [r4, #0]
 80130fc:	07df      	lsls	r7, r3, #31
 80130fe:	d508      	bpl.n	8013112 <_printf_i+0x142>
 8013100:	6923      	ldr	r3, [r4, #16]
 8013102:	6861      	ldr	r1, [r4, #4]
 8013104:	4299      	cmp	r1, r3
 8013106:	bfde      	ittt	le
 8013108:	2330      	movle	r3, #48	@ 0x30
 801310a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801310e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013112:	1b92      	subs	r2, r2, r6
 8013114:	6122      	str	r2, [r4, #16]
 8013116:	464b      	mov	r3, r9
 8013118:	aa03      	add	r2, sp, #12
 801311a:	4621      	mov	r1, r4
 801311c:	4640      	mov	r0, r8
 801311e:	f8cd a000 	str.w	sl, [sp]
 8013122:	f7ff fee3 	bl	8012eec <_printf_common>
 8013126:	3001      	adds	r0, #1
 8013128:	d14a      	bne.n	80131c0 <_printf_i+0x1f0>
 801312a:	f04f 30ff 	mov.w	r0, #4294967295
 801312e:	b004      	add	sp, #16
 8013130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013134:	6823      	ldr	r3, [r4, #0]
 8013136:	f043 0320 	orr.w	r3, r3, #32
 801313a:	6023      	str	r3, [r4, #0]
 801313c:	2778      	movs	r7, #120	@ 0x78
 801313e:	4832      	ldr	r0, [pc, #200]	@ (8013208 <_printf_i+0x238>)
 8013140:	6823      	ldr	r3, [r4, #0]
 8013142:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013146:	061f      	lsls	r7, r3, #24
 8013148:	6831      	ldr	r1, [r6, #0]
 801314a:	f851 5b04 	ldr.w	r5, [r1], #4
 801314e:	d402      	bmi.n	8013156 <_printf_i+0x186>
 8013150:	065f      	lsls	r7, r3, #25
 8013152:	bf48      	it	mi
 8013154:	b2ad      	uxthmi	r5, r5
 8013156:	6031      	str	r1, [r6, #0]
 8013158:	07d9      	lsls	r1, r3, #31
 801315a:	bf44      	itt	mi
 801315c:	f043 0320 	orrmi.w	r3, r3, #32
 8013160:	6023      	strmi	r3, [r4, #0]
 8013162:	b11d      	cbz	r5, 801316c <_printf_i+0x19c>
 8013164:	2310      	movs	r3, #16
 8013166:	e7ad      	b.n	80130c4 <_printf_i+0xf4>
 8013168:	4826      	ldr	r0, [pc, #152]	@ (8013204 <_printf_i+0x234>)
 801316a:	e7e9      	b.n	8013140 <_printf_i+0x170>
 801316c:	6823      	ldr	r3, [r4, #0]
 801316e:	f023 0320 	bic.w	r3, r3, #32
 8013172:	6023      	str	r3, [r4, #0]
 8013174:	e7f6      	b.n	8013164 <_printf_i+0x194>
 8013176:	4616      	mov	r6, r2
 8013178:	e7bd      	b.n	80130f6 <_printf_i+0x126>
 801317a:	6833      	ldr	r3, [r6, #0]
 801317c:	6825      	ldr	r5, [r4, #0]
 801317e:	1d18      	adds	r0, r3, #4
 8013180:	6961      	ldr	r1, [r4, #20]
 8013182:	6030      	str	r0, [r6, #0]
 8013184:	062e      	lsls	r6, r5, #24
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	d501      	bpl.n	801318e <_printf_i+0x1be>
 801318a:	6019      	str	r1, [r3, #0]
 801318c:	e002      	b.n	8013194 <_printf_i+0x1c4>
 801318e:	0668      	lsls	r0, r5, #25
 8013190:	d5fb      	bpl.n	801318a <_printf_i+0x1ba>
 8013192:	8019      	strh	r1, [r3, #0]
 8013194:	2300      	movs	r3, #0
 8013196:	4616      	mov	r6, r2
 8013198:	6123      	str	r3, [r4, #16]
 801319a:	e7bc      	b.n	8013116 <_printf_i+0x146>
 801319c:	6833      	ldr	r3, [r6, #0]
 801319e:	2100      	movs	r1, #0
 80131a0:	1d1a      	adds	r2, r3, #4
 80131a2:	6032      	str	r2, [r6, #0]
 80131a4:	681e      	ldr	r6, [r3, #0]
 80131a6:	6862      	ldr	r2, [r4, #4]
 80131a8:	4630      	mov	r0, r6
 80131aa:	f000 f9b3 	bl	8013514 <memchr>
 80131ae:	b108      	cbz	r0, 80131b4 <_printf_i+0x1e4>
 80131b0:	1b80      	subs	r0, r0, r6
 80131b2:	6060      	str	r0, [r4, #4]
 80131b4:	6863      	ldr	r3, [r4, #4]
 80131b6:	6123      	str	r3, [r4, #16]
 80131b8:	2300      	movs	r3, #0
 80131ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80131be:	e7aa      	b.n	8013116 <_printf_i+0x146>
 80131c0:	6923      	ldr	r3, [r4, #16]
 80131c2:	4632      	mov	r2, r6
 80131c4:	4649      	mov	r1, r9
 80131c6:	4640      	mov	r0, r8
 80131c8:	47d0      	blx	sl
 80131ca:	3001      	adds	r0, #1
 80131cc:	d0ad      	beq.n	801312a <_printf_i+0x15a>
 80131ce:	6823      	ldr	r3, [r4, #0]
 80131d0:	079b      	lsls	r3, r3, #30
 80131d2:	d413      	bmi.n	80131fc <_printf_i+0x22c>
 80131d4:	68e0      	ldr	r0, [r4, #12]
 80131d6:	9b03      	ldr	r3, [sp, #12]
 80131d8:	4298      	cmp	r0, r3
 80131da:	bfb8      	it	lt
 80131dc:	4618      	movlt	r0, r3
 80131de:	e7a6      	b.n	801312e <_printf_i+0x15e>
 80131e0:	2301      	movs	r3, #1
 80131e2:	4632      	mov	r2, r6
 80131e4:	4649      	mov	r1, r9
 80131e6:	4640      	mov	r0, r8
 80131e8:	47d0      	blx	sl
 80131ea:	3001      	adds	r0, #1
 80131ec:	d09d      	beq.n	801312a <_printf_i+0x15a>
 80131ee:	3501      	adds	r5, #1
 80131f0:	68e3      	ldr	r3, [r4, #12]
 80131f2:	9903      	ldr	r1, [sp, #12]
 80131f4:	1a5b      	subs	r3, r3, r1
 80131f6:	42ab      	cmp	r3, r5
 80131f8:	dcf2      	bgt.n	80131e0 <_printf_i+0x210>
 80131fa:	e7eb      	b.n	80131d4 <_printf_i+0x204>
 80131fc:	2500      	movs	r5, #0
 80131fe:	f104 0619 	add.w	r6, r4, #25
 8013202:	e7f5      	b.n	80131f0 <_printf_i+0x220>
 8013204:	0801484d 	.word	0x0801484d
 8013208:	0801485e 	.word	0x0801485e

0801320c <__sflush_r>:
 801320c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013214:	0716      	lsls	r6, r2, #28
 8013216:	4605      	mov	r5, r0
 8013218:	460c      	mov	r4, r1
 801321a:	d454      	bmi.n	80132c6 <__sflush_r+0xba>
 801321c:	684b      	ldr	r3, [r1, #4]
 801321e:	2b00      	cmp	r3, #0
 8013220:	dc02      	bgt.n	8013228 <__sflush_r+0x1c>
 8013222:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013224:	2b00      	cmp	r3, #0
 8013226:	dd48      	ble.n	80132ba <__sflush_r+0xae>
 8013228:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801322a:	2e00      	cmp	r6, #0
 801322c:	d045      	beq.n	80132ba <__sflush_r+0xae>
 801322e:	2300      	movs	r3, #0
 8013230:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013234:	682f      	ldr	r7, [r5, #0]
 8013236:	6a21      	ldr	r1, [r4, #32]
 8013238:	602b      	str	r3, [r5, #0]
 801323a:	d030      	beq.n	801329e <__sflush_r+0x92>
 801323c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801323e:	89a3      	ldrh	r3, [r4, #12]
 8013240:	0759      	lsls	r1, r3, #29
 8013242:	d505      	bpl.n	8013250 <__sflush_r+0x44>
 8013244:	6863      	ldr	r3, [r4, #4]
 8013246:	1ad2      	subs	r2, r2, r3
 8013248:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801324a:	b10b      	cbz	r3, 8013250 <__sflush_r+0x44>
 801324c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801324e:	1ad2      	subs	r2, r2, r3
 8013250:	2300      	movs	r3, #0
 8013252:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013254:	6a21      	ldr	r1, [r4, #32]
 8013256:	4628      	mov	r0, r5
 8013258:	47b0      	blx	r6
 801325a:	1c43      	adds	r3, r0, #1
 801325c:	89a3      	ldrh	r3, [r4, #12]
 801325e:	d106      	bne.n	801326e <__sflush_r+0x62>
 8013260:	6829      	ldr	r1, [r5, #0]
 8013262:	291d      	cmp	r1, #29
 8013264:	d82b      	bhi.n	80132be <__sflush_r+0xb2>
 8013266:	4a2a      	ldr	r2, [pc, #168]	@ (8013310 <__sflush_r+0x104>)
 8013268:	40ca      	lsrs	r2, r1
 801326a:	07d6      	lsls	r6, r2, #31
 801326c:	d527      	bpl.n	80132be <__sflush_r+0xb2>
 801326e:	2200      	movs	r2, #0
 8013270:	04d9      	lsls	r1, r3, #19
 8013272:	6062      	str	r2, [r4, #4]
 8013274:	6922      	ldr	r2, [r4, #16]
 8013276:	6022      	str	r2, [r4, #0]
 8013278:	d504      	bpl.n	8013284 <__sflush_r+0x78>
 801327a:	1c42      	adds	r2, r0, #1
 801327c:	d101      	bne.n	8013282 <__sflush_r+0x76>
 801327e:	682b      	ldr	r3, [r5, #0]
 8013280:	b903      	cbnz	r3, 8013284 <__sflush_r+0x78>
 8013282:	6560      	str	r0, [r4, #84]	@ 0x54
 8013284:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013286:	602f      	str	r7, [r5, #0]
 8013288:	b1b9      	cbz	r1, 80132ba <__sflush_r+0xae>
 801328a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801328e:	4299      	cmp	r1, r3
 8013290:	d002      	beq.n	8013298 <__sflush_r+0x8c>
 8013292:	4628      	mov	r0, r5
 8013294:	f7ff fc9e 	bl	8012bd4 <_free_r>
 8013298:	2300      	movs	r3, #0
 801329a:	6363      	str	r3, [r4, #52]	@ 0x34
 801329c:	e00d      	b.n	80132ba <__sflush_r+0xae>
 801329e:	2301      	movs	r3, #1
 80132a0:	4628      	mov	r0, r5
 80132a2:	47b0      	blx	r6
 80132a4:	4602      	mov	r2, r0
 80132a6:	1c50      	adds	r0, r2, #1
 80132a8:	d1c9      	bne.n	801323e <__sflush_r+0x32>
 80132aa:	682b      	ldr	r3, [r5, #0]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d0c6      	beq.n	801323e <__sflush_r+0x32>
 80132b0:	2b1d      	cmp	r3, #29
 80132b2:	d001      	beq.n	80132b8 <__sflush_r+0xac>
 80132b4:	2b16      	cmp	r3, #22
 80132b6:	d11d      	bne.n	80132f4 <__sflush_r+0xe8>
 80132b8:	602f      	str	r7, [r5, #0]
 80132ba:	2000      	movs	r0, #0
 80132bc:	e021      	b.n	8013302 <__sflush_r+0xf6>
 80132be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80132c2:	b21b      	sxth	r3, r3
 80132c4:	e01a      	b.n	80132fc <__sflush_r+0xf0>
 80132c6:	690f      	ldr	r7, [r1, #16]
 80132c8:	2f00      	cmp	r7, #0
 80132ca:	d0f6      	beq.n	80132ba <__sflush_r+0xae>
 80132cc:	0793      	lsls	r3, r2, #30
 80132ce:	680e      	ldr	r6, [r1, #0]
 80132d0:	600f      	str	r7, [r1, #0]
 80132d2:	bf0c      	ite	eq
 80132d4:	694b      	ldreq	r3, [r1, #20]
 80132d6:	2300      	movne	r3, #0
 80132d8:	eba6 0807 	sub.w	r8, r6, r7
 80132dc:	608b      	str	r3, [r1, #8]
 80132de:	f1b8 0f00 	cmp.w	r8, #0
 80132e2:	ddea      	ble.n	80132ba <__sflush_r+0xae>
 80132e4:	4643      	mov	r3, r8
 80132e6:	463a      	mov	r2, r7
 80132e8:	6a21      	ldr	r1, [r4, #32]
 80132ea:	4628      	mov	r0, r5
 80132ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80132ee:	47b0      	blx	r6
 80132f0:	2800      	cmp	r0, #0
 80132f2:	dc08      	bgt.n	8013306 <__sflush_r+0xfa>
 80132f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80132fc:	f04f 30ff 	mov.w	r0, #4294967295
 8013300:	81a3      	strh	r3, [r4, #12]
 8013302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013306:	4407      	add	r7, r0
 8013308:	eba8 0800 	sub.w	r8, r8, r0
 801330c:	e7e7      	b.n	80132de <__sflush_r+0xd2>
 801330e:	bf00      	nop
 8013310:	20400001 	.word	0x20400001

08013314 <_fflush_r>:
 8013314:	b538      	push	{r3, r4, r5, lr}
 8013316:	690b      	ldr	r3, [r1, #16]
 8013318:	4605      	mov	r5, r0
 801331a:	460c      	mov	r4, r1
 801331c:	b913      	cbnz	r3, 8013324 <_fflush_r+0x10>
 801331e:	2500      	movs	r5, #0
 8013320:	4628      	mov	r0, r5
 8013322:	bd38      	pop	{r3, r4, r5, pc}
 8013324:	b118      	cbz	r0, 801332e <_fflush_r+0x1a>
 8013326:	6a03      	ldr	r3, [r0, #32]
 8013328:	b90b      	cbnz	r3, 801332e <_fflush_r+0x1a>
 801332a:	f7ff fae5 	bl	80128f8 <__sinit>
 801332e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d0f3      	beq.n	801331e <_fflush_r+0xa>
 8013336:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013338:	07d0      	lsls	r0, r2, #31
 801333a:	d404      	bmi.n	8013346 <_fflush_r+0x32>
 801333c:	0599      	lsls	r1, r3, #22
 801333e:	d402      	bmi.n	8013346 <_fflush_r+0x32>
 8013340:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013342:	f7ff fc30 	bl	8012ba6 <__retarget_lock_acquire_recursive>
 8013346:	4628      	mov	r0, r5
 8013348:	4621      	mov	r1, r4
 801334a:	f7ff ff5f 	bl	801320c <__sflush_r>
 801334e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013350:	4605      	mov	r5, r0
 8013352:	07da      	lsls	r2, r3, #31
 8013354:	d4e4      	bmi.n	8013320 <_fflush_r+0xc>
 8013356:	89a3      	ldrh	r3, [r4, #12]
 8013358:	059b      	lsls	r3, r3, #22
 801335a:	d4e1      	bmi.n	8013320 <_fflush_r+0xc>
 801335c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801335e:	f7ff fc23 	bl	8012ba8 <__retarget_lock_release_recursive>
 8013362:	e7dd      	b.n	8013320 <_fflush_r+0xc>

08013364 <__swbuf_r>:
 8013364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013366:	460e      	mov	r6, r1
 8013368:	4614      	mov	r4, r2
 801336a:	4605      	mov	r5, r0
 801336c:	b118      	cbz	r0, 8013376 <__swbuf_r+0x12>
 801336e:	6a03      	ldr	r3, [r0, #32]
 8013370:	b90b      	cbnz	r3, 8013376 <__swbuf_r+0x12>
 8013372:	f7ff fac1 	bl	80128f8 <__sinit>
 8013376:	69a3      	ldr	r3, [r4, #24]
 8013378:	60a3      	str	r3, [r4, #8]
 801337a:	89a3      	ldrh	r3, [r4, #12]
 801337c:	071a      	lsls	r2, r3, #28
 801337e:	d501      	bpl.n	8013384 <__swbuf_r+0x20>
 8013380:	6923      	ldr	r3, [r4, #16]
 8013382:	b943      	cbnz	r3, 8013396 <__swbuf_r+0x32>
 8013384:	4621      	mov	r1, r4
 8013386:	4628      	mov	r0, r5
 8013388:	f000 f82a 	bl	80133e0 <__swsetup_r>
 801338c:	b118      	cbz	r0, 8013396 <__swbuf_r+0x32>
 801338e:	f04f 37ff 	mov.w	r7, #4294967295
 8013392:	4638      	mov	r0, r7
 8013394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013396:	6823      	ldr	r3, [r4, #0]
 8013398:	b2f6      	uxtb	r6, r6
 801339a:	6922      	ldr	r2, [r4, #16]
 801339c:	4637      	mov	r7, r6
 801339e:	1a98      	subs	r0, r3, r2
 80133a0:	6963      	ldr	r3, [r4, #20]
 80133a2:	4283      	cmp	r3, r0
 80133a4:	dc05      	bgt.n	80133b2 <__swbuf_r+0x4e>
 80133a6:	4621      	mov	r1, r4
 80133a8:	4628      	mov	r0, r5
 80133aa:	f7ff ffb3 	bl	8013314 <_fflush_r>
 80133ae:	2800      	cmp	r0, #0
 80133b0:	d1ed      	bne.n	801338e <__swbuf_r+0x2a>
 80133b2:	68a3      	ldr	r3, [r4, #8]
 80133b4:	3b01      	subs	r3, #1
 80133b6:	60a3      	str	r3, [r4, #8]
 80133b8:	6823      	ldr	r3, [r4, #0]
 80133ba:	1c5a      	adds	r2, r3, #1
 80133bc:	6022      	str	r2, [r4, #0]
 80133be:	701e      	strb	r6, [r3, #0]
 80133c0:	1c43      	adds	r3, r0, #1
 80133c2:	6962      	ldr	r2, [r4, #20]
 80133c4:	429a      	cmp	r2, r3
 80133c6:	d004      	beq.n	80133d2 <__swbuf_r+0x6e>
 80133c8:	89a3      	ldrh	r3, [r4, #12]
 80133ca:	07db      	lsls	r3, r3, #31
 80133cc:	d5e1      	bpl.n	8013392 <__swbuf_r+0x2e>
 80133ce:	2e0a      	cmp	r6, #10
 80133d0:	d1df      	bne.n	8013392 <__swbuf_r+0x2e>
 80133d2:	4621      	mov	r1, r4
 80133d4:	4628      	mov	r0, r5
 80133d6:	f7ff ff9d 	bl	8013314 <_fflush_r>
 80133da:	2800      	cmp	r0, #0
 80133dc:	d0d9      	beq.n	8013392 <__swbuf_r+0x2e>
 80133de:	e7d6      	b.n	801338e <__swbuf_r+0x2a>

080133e0 <__swsetup_r>:
 80133e0:	b538      	push	{r3, r4, r5, lr}
 80133e2:	4b29      	ldr	r3, [pc, #164]	@ (8013488 <__swsetup_r+0xa8>)
 80133e4:	4605      	mov	r5, r0
 80133e6:	460c      	mov	r4, r1
 80133e8:	6818      	ldr	r0, [r3, #0]
 80133ea:	b118      	cbz	r0, 80133f4 <__swsetup_r+0x14>
 80133ec:	6a03      	ldr	r3, [r0, #32]
 80133ee:	b90b      	cbnz	r3, 80133f4 <__swsetup_r+0x14>
 80133f0:	f7ff fa82 	bl	80128f8 <__sinit>
 80133f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133f8:	0719      	lsls	r1, r3, #28
 80133fa:	d422      	bmi.n	8013442 <__swsetup_r+0x62>
 80133fc:	06da      	lsls	r2, r3, #27
 80133fe:	d407      	bmi.n	8013410 <__swsetup_r+0x30>
 8013400:	2209      	movs	r2, #9
 8013402:	602a      	str	r2, [r5, #0]
 8013404:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013408:	f04f 30ff 	mov.w	r0, #4294967295
 801340c:	81a3      	strh	r3, [r4, #12]
 801340e:	e033      	b.n	8013478 <__swsetup_r+0x98>
 8013410:	0758      	lsls	r0, r3, #29
 8013412:	d512      	bpl.n	801343a <__swsetup_r+0x5a>
 8013414:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013416:	b141      	cbz	r1, 801342a <__swsetup_r+0x4a>
 8013418:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801341c:	4299      	cmp	r1, r3
 801341e:	d002      	beq.n	8013426 <__swsetup_r+0x46>
 8013420:	4628      	mov	r0, r5
 8013422:	f7ff fbd7 	bl	8012bd4 <_free_r>
 8013426:	2300      	movs	r3, #0
 8013428:	6363      	str	r3, [r4, #52]	@ 0x34
 801342a:	89a3      	ldrh	r3, [r4, #12]
 801342c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013430:	81a3      	strh	r3, [r4, #12]
 8013432:	2300      	movs	r3, #0
 8013434:	6063      	str	r3, [r4, #4]
 8013436:	6923      	ldr	r3, [r4, #16]
 8013438:	6023      	str	r3, [r4, #0]
 801343a:	89a3      	ldrh	r3, [r4, #12]
 801343c:	f043 0308 	orr.w	r3, r3, #8
 8013440:	81a3      	strh	r3, [r4, #12]
 8013442:	6923      	ldr	r3, [r4, #16]
 8013444:	b94b      	cbnz	r3, 801345a <__swsetup_r+0x7a>
 8013446:	89a3      	ldrh	r3, [r4, #12]
 8013448:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801344c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013450:	d003      	beq.n	801345a <__swsetup_r+0x7a>
 8013452:	4621      	mov	r1, r4
 8013454:	4628      	mov	r0, r5
 8013456:	f000 f890 	bl	801357a <__smakebuf_r>
 801345a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801345e:	f013 0201 	ands.w	r2, r3, #1
 8013462:	d00a      	beq.n	801347a <__swsetup_r+0x9a>
 8013464:	2200      	movs	r2, #0
 8013466:	60a2      	str	r2, [r4, #8]
 8013468:	6962      	ldr	r2, [r4, #20]
 801346a:	4252      	negs	r2, r2
 801346c:	61a2      	str	r2, [r4, #24]
 801346e:	6922      	ldr	r2, [r4, #16]
 8013470:	b942      	cbnz	r2, 8013484 <__swsetup_r+0xa4>
 8013472:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013476:	d1c5      	bne.n	8013404 <__swsetup_r+0x24>
 8013478:	bd38      	pop	{r3, r4, r5, pc}
 801347a:	0799      	lsls	r1, r3, #30
 801347c:	bf58      	it	pl
 801347e:	6962      	ldrpl	r2, [r4, #20]
 8013480:	60a2      	str	r2, [r4, #8]
 8013482:	e7f4      	b.n	801346e <__swsetup_r+0x8e>
 8013484:	2000      	movs	r0, #0
 8013486:	e7f7      	b.n	8013478 <__swsetup_r+0x98>
 8013488:	20000018 	.word	0x20000018

0801348c <_raise_r>:
 801348c:	291f      	cmp	r1, #31
 801348e:	b538      	push	{r3, r4, r5, lr}
 8013490:	4605      	mov	r5, r0
 8013492:	460c      	mov	r4, r1
 8013494:	d904      	bls.n	80134a0 <_raise_r+0x14>
 8013496:	2316      	movs	r3, #22
 8013498:	6003      	str	r3, [r0, #0]
 801349a:	f04f 30ff 	mov.w	r0, #4294967295
 801349e:	bd38      	pop	{r3, r4, r5, pc}
 80134a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80134a2:	b112      	cbz	r2, 80134aa <_raise_r+0x1e>
 80134a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80134a8:	b94b      	cbnz	r3, 80134be <_raise_r+0x32>
 80134aa:	4628      	mov	r0, r5
 80134ac:	f000 f830 	bl	8013510 <_getpid_r>
 80134b0:	4622      	mov	r2, r4
 80134b2:	4601      	mov	r1, r0
 80134b4:	4628      	mov	r0, r5
 80134b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80134ba:	f000 b817 	b.w	80134ec <_kill_r>
 80134be:	2b01      	cmp	r3, #1
 80134c0:	d00a      	beq.n	80134d8 <_raise_r+0x4c>
 80134c2:	1c59      	adds	r1, r3, #1
 80134c4:	d103      	bne.n	80134ce <_raise_r+0x42>
 80134c6:	2316      	movs	r3, #22
 80134c8:	6003      	str	r3, [r0, #0]
 80134ca:	2001      	movs	r0, #1
 80134cc:	e7e7      	b.n	801349e <_raise_r+0x12>
 80134ce:	2100      	movs	r1, #0
 80134d0:	4620      	mov	r0, r4
 80134d2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80134d6:	4798      	blx	r3
 80134d8:	2000      	movs	r0, #0
 80134da:	e7e0      	b.n	801349e <_raise_r+0x12>

080134dc <raise>:
 80134dc:	4b02      	ldr	r3, [pc, #8]	@ (80134e8 <raise+0xc>)
 80134de:	4601      	mov	r1, r0
 80134e0:	6818      	ldr	r0, [r3, #0]
 80134e2:	f7ff bfd3 	b.w	801348c <_raise_r>
 80134e6:	bf00      	nop
 80134e8:	20000018 	.word	0x20000018

080134ec <_kill_r>:
 80134ec:	b538      	push	{r3, r4, r5, lr}
 80134ee:	2300      	movs	r3, #0
 80134f0:	4d06      	ldr	r5, [pc, #24]	@ (801350c <_kill_r+0x20>)
 80134f2:	4604      	mov	r4, r0
 80134f4:	4608      	mov	r0, r1
 80134f6:	4611      	mov	r1, r2
 80134f8:	602b      	str	r3, [r5, #0]
 80134fa:	f7ed fec1 	bl	8001280 <_kill>
 80134fe:	1c43      	adds	r3, r0, #1
 8013500:	d102      	bne.n	8013508 <_kill_r+0x1c>
 8013502:	682b      	ldr	r3, [r5, #0]
 8013504:	b103      	cbz	r3, 8013508 <_kill_r+0x1c>
 8013506:	6023      	str	r3, [r4, #0]
 8013508:	bd38      	pop	{r3, r4, r5, pc}
 801350a:	bf00      	nop
 801350c:	20000320 	.word	0x20000320

08013510 <_getpid_r>:
 8013510:	f7ed beae 	b.w	8001270 <_getpid>

08013514 <memchr>:
 8013514:	b2c9      	uxtb	r1, r1
 8013516:	4603      	mov	r3, r0
 8013518:	4402      	add	r2, r0
 801351a:	b510      	push	{r4, lr}
 801351c:	4293      	cmp	r3, r2
 801351e:	4618      	mov	r0, r3
 8013520:	d101      	bne.n	8013526 <memchr+0x12>
 8013522:	2000      	movs	r0, #0
 8013524:	e003      	b.n	801352e <memchr+0x1a>
 8013526:	7804      	ldrb	r4, [r0, #0]
 8013528:	3301      	adds	r3, #1
 801352a:	428c      	cmp	r4, r1
 801352c:	d1f6      	bne.n	801351c <memchr+0x8>
 801352e:	bd10      	pop	{r4, pc}

08013530 <__swhatbuf_r>:
 8013530:	b570      	push	{r4, r5, r6, lr}
 8013532:	460c      	mov	r4, r1
 8013534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013538:	b096      	sub	sp, #88	@ 0x58
 801353a:	4615      	mov	r5, r2
 801353c:	2900      	cmp	r1, #0
 801353e:	461e      	mov	r6, r3
 8013540:	da0c      	bge.n	801355c <__swhatbuf_r+0x2c>
 8013542:	89a3      	ldrh	r3, [r4, #12]
 8013544:	2100      	movs	r1, #0
 8013546:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801354a:	bf14      	ite	ne
 801354c:	2340      	movne	r3, #64	@ 0x40
 801354e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013552:	2000      	movs	r0, #0
 8013554:	6031      	str	r1, [r6, #0]
 8013556:	602b      	str	r3, [r5, #0]
 8013558:	b016      	add	sp, #88	@ 0x58
 801355a:	bd70      	pop	{r4, r5, r6, pc}
 801355c:	466a      	mov	r2, sp
 801355e:	f000 f849 	bl	80135f4 <_fstat_r>
 8013562:	2800      	cmp	r0, #0
 8013564:	dbed      	blt.n	8013542 <__swhatbuf_r+0x12>
 8013566:	9901      	ldr	r1, [sp, #4]
 8013568:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801356c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013570:	4259      	negs	r1, r3
 8013572:	4159      	adcs	r1, r3
 8013574:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013578:	e7eb      	b.n	8013552 <__swhatbuf_r+0x22>

0801357a <__smakebuf_r>:
 801357a:	898b      	ldrh	r3, [r1, #12]
 801357c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801357e:	079d      	lsls	r5, r3, #30
 8013580:	4606      	mov	r6, r0
 8013582:	460c      	mov	r4, r1
 8013584:	d507      	bpl.n	8013596 <__smakebuf_r+0x1c>
 8013586:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801358a:	6023      	str	r3, [r4, #0]
 801358c:	6123      	str	r3, [r4, #16]
 801358e:	2301      	movs	r3, #1
 8013590:	6163      	str	r3, [r4, #20]
 8013592:	b003      	add	sp, #12
 8013594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013596:	ab01      	add	r3, sp, #4
 8013598:	466a      	mov	r2, sp
 801359a:	f7ff ffc9 	bl	8013530 <__swhatbuf_r>
 801359e:	9f00      	ldr	r7, [sp, #0]
 80135a0:	4605      	mov	r5, r0
 80135a2:	4630      	mov	r0, r6
 80135a4:	4639      	mov	r1, r7
 80135a6:	f7ff f88f 	bl	80126c8 <_malloc_r>
 80135aa:	b948      	cbnz	r0, 80135c0 <__smakebuf_r+0x46>
 80135ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135b0:	059a      	lsls	r2, r3, #22
 80135b2:	d4ee      	bmi.n	8013592 <__smakebuf_r+0x18>
 80135b4:	f023 0303 	bic.w	r3, r3, #3
 80135b8:	f043 0302 	orr.w	r3, r3, #2
 80135bc:	81a3      	strh	r3, [r4, #12]
 80135be:	e7e2      	b.n	8013586 <__smakebuf_r+0xc>
 80135c0:	89a3      	ldrh	r3, [r4, #12]
 80135c2:	6020      	str	r0, [r4, #0]
 80135c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80135c8:	81a3      	strh	r3, [r4, #12]
 80135ca:	9b01      	ldr	r3, [sp, #4]
 80135cc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80135d0:	b15b      	cbz	r3, 80135ea <__smakebuf_r+0x70>
 80135d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80135d6:	4630      	mov	r0, r6
 80135d8:	f000 f81e 	bl	8013618 <_isatty_r>
 80135dc:	b128      	cbz	r0, 80135ea <__smakebuf_r+0x70>
 80135de:	89a3      	ldrh	r3, [r4, #12]
 80135e0:	f023 0303 	bic.w	r3, r3, #3
 80135e4:	f043 0301 	orr.w	r3, r3, #1
 80135e8:	81a3      	strh	r3, [r4, #12]
 80135ea:	89a3      	ldrh	r3, [r4, #12]
 80135ec:	431d      	orrs	r5, r3
 80135ee:	81a5      	strh	r5, [r4, #12]
 80135f0:	e7cf      	b.n	8013592 <__smakebuf_r+0x18>
	...

080135f4 <_fstat_r>:
 80135f4:	b538      	push	{r3, r4, r5, lr}
 80135f6:	2300      	movs	r3, #0
 80135f8:	4d06      	ldr	r5, [pc, #24]	@ (8013614 <_fstat_r+0x20>)
 80135fa:	4604      	mov	r4, r0
 80135fc:	4608      	mov	r0, r1
 80135fe:	4611      	mov	r1, r2
 8013600:	602b      	str	r3, [r5, #0]
 8013602:	f7ed fe9d 	bl	8001340 <_fstat>
 8013606:	1c43      	adds	r3, r0, #1
 8013608:	d102      	bne.n	8013610 <_fstat_r+0x1c>
 801360a:	682b      	ldr	r3, [r5, #0]
 801360c:	b103      	cbz	r3, 8013610 <_fstat_r+0x1c>
 801360e:	6023      	str	r3, [r4, #0]
 8013610:	bd38      	pop	{r3, r4, r5, pc}
 8013612:	bf00      	nop
 8013614:	20000320 	.word	0x20000320

08013618 <_isatty_r>:
 8013618:	b538      	push	{r3, r4, r5, lr}
 801361a:	2300      	movs	r3, #0
 801361c:	4d05      	ldr	r5, [pc, #20]	@ (8013634 <_isatty_r+0x1c>)
 801361e:	4604      	mov	r4, r0
 8013620:	4608      	mov	r0, r1
 8013622:	602b      	str	r3, [r5, #0]
 8013624:	f7ed fe9c 	bl	8001360 <_isatty>
 8013628:	1c43      	adds	r3, r0, #1
 801362a:	d102      	bne.n	8013632 <_isatty_r+0x1a>
 801362c:	682b      	ldr	r3, [r5, #0]
 801362e:	b103      	cbz	r3, 8013632 <_isatty_r+0x1a>
 8013630:	6023      	str	r3, [r4, #0]
 8013632:	bd38      	pop	{r3, r4, r5, pc}
 8013634:	20000320 	.word	0x20000320

08013638 <_init>:
 8013638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801363a:	bf00      	nop
 801363c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801363e:	bc08      	pop	{r3}
 8013640:	469e      	mov	lr, r3
 8013642:	4770      	bx	lr

08013644 <_fini>:
 8013644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013646:	bf00      	nop
 8013648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801364a:	bc08      	pop	{r3}
 801364c:	469e      	mov	lr, r3
 801364e:	4770      	bx	lr
