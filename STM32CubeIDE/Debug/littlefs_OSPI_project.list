
littlefs_OSPI_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001341c  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001244  08013668  08013668  00014668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080148ac  080148ac  00016068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080148ac  080148ac  000158ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080148b4  080148b4  00016068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080148b4  080148b4  000158b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080148b8  080148b8  000158b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080148bc  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000068  08014924  00016068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08014924  00016328  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00016068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e7f9  00000000  00000000  0001609e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003719  00000000  00000000  00034897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  00037fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001293  00000000  00000000  00039598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000357f9  00000000  00000000  0003a82b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f248  00000000  00000000  00070024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00142431  00000000  00000000  0008f26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d169d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006678  00000000  00000000  001d16e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001d7d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000068 	.word	0x20000068
 8000268:	00000000 	.word	0x00000000
 800026c:	08013650 	.word	0x08013650

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	2000006c 	.word	0x2000006c
 8000288:	08013650 	.word	0x08013650

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_uldivmod>:
 800029c:	b953      	cbnz	r3, 80002b4 <__aeabi_uldivmod+0x18>
 800029e:	b94a      	cbnz	r2, 80002b4 <__aeabi_uldivmod+0x18>
 80002a0:	2900      	cmp	r1, #0
 80002a2:	bf08      	it	eq
 80002a4:	2800      	cmpeq	r0, #0
 80002a6:	bf1c      	itt	ne
 80002a8:	f04f 31ff 	movne.w	r1, #4294967295
 80002ac:	f04f 30ff 	movne.w	r0, #4294967295
 80002b0:	f000 b9c4 	b.w	800063c <__aeabi_idiv0>
 80002b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002bc:	f000 f81a 	bl	80002f4 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4770      	bx	lr

080002cc <__popcountsi2>:
 80002cc:	0843      	lsrs	r3, r0, #1
 80002ce:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	0883      	lsrs	r3, r0, #2
 80002d6:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 80002da:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80002de:	4418      	add	r0, r3
 80002e0:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002e4:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 80002e8:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002ec:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002f0:	0e00      	lsrs	r0, r0, #24
 80002f2:	4770      	bx	lr

080002f4 <__udivmoddi4>:
 80002f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002f8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002fa:	4688      	mov	r8, r1
 80002fc:	4604      	mov	r4, r0
 80002fe:	468e      	mov	lr, r1
 8000300:	2b00      	cmp	r3, #0
 8000302:	d14a      	bne.n	800039a <__udivmoddi4+0xa6>
 8000304:	428a      	cmp	r2, r1
 8000306:	4617      	mov	r7, r2
 8000308:	d95f      	bls.n	80003ca <__udivmoddi4+0xd6>
 800030a:	fab2 f682 	clz	r6, r2
 800030e:	b14e      	cbz	r6, 8000324 <__udivmoddi4+0x30>
 8000310:	f1c6 0320 	rsb	r3, r6, #32
 8000314:	fa01 fe06 	lsl.w	lr, r1, r6
 8000318:	40b7      	lsls	r7, r6
 800031a:	40b4      	lsls	r4, r6
 800031c:	fa20 f303 	lsr.w	r3, r0, r3
 8000320:	ea43 0e0e 	orr.w	lr, r3, lr
 8000324:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fbbe f1f8 	udiv	r1, lr, r8
 8000332:	fb08 ee11 	mls	lr, r8, r1, lr
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x5e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f101 30ff 	add.w	r0, r1, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x5c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 8154 	bhi.w	80005f8 <__udivmoddi4+0x304>
 8000350:	4601      	mov	r1, r0
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	b2a2      	uxth	r2, r4
 8000356:	fbb3 f0f8 	udiv	r0, r3, r8
 800035a:	fb08 3310 	mls	r3, r8, r0, r3
 800035e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000362:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000366:	4594      	cmp	ip, r2
 8000368:	d90b      	bls.n	8000382 <__udivmoddi4+0x8e>
 800036a:	18ba      	adds	r2, r7, r2
 800036c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000370:	bf2c      	ite	cs
 8000372:	2401      	movcs	r4, #1
 8000374:	2400      	movcc	r4, #0
 8000376:	4594      	cmp	ip, r2
 8000378:	d902      	bls.n	8000380 <__udivmoddi4+0x8c>
 800037a:	2c00      	cmp	r4, #0
 800037c:	f000 813f 	beq.w	80005fe <__udivmoddi4+0x30a>
 8000380:	4618      	mov	r0, r3
 8000382:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000386:	eba2 020c 	sub.w	r2, r2, ip
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa2>
 800038e:	40f2      	lsrs	r2, r6
 8000390:	2300      	movs	r3, #0
 8000392:	e9c5 2300 	strd	r2, r3, [r5]
 8000396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xb6>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb0>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa2>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d14e      	bne.n	8000450 <__udivmoddi4+0x15c>
 80003b2:	4543      	cmp	r3, r8
 80003b4:	f0c0 8112 	bcc.w	80005dc <__udivmoddi4+0x2e8>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f240 810f 	bls.w	80005dc <__udivmoddi4+0x2e8>
 80003be:	4608      	mov	r0, r1
 80003c0:	2d00      	cmp	r5, #0
 80003c2:	d0e8      	beq.n	8000396 <__udivmoddi4+0xa2>
 80003c4:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c8:	e7e5      	b.n	8000396 <__udivmoddi4+0xa2>
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	f000 80ac 	beq.w	8000528 <__udivmoddi4+0x234>
 80003d0:	fab2 f682 	clz	r6, r2
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	f040 80bb 	bne.w	8000550 <__udivmoddi4+0x25c>
 80003da:	1a8b      	subs	r3, r1, r2
 80003dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003e0:	b2bc      	uxth	r4, r7
 80003e2:	2101      	movs	r1, #1
 80003e4:	0c02      	lsrs	r2, r0, #16
 80003e6:	b280      	uxth	r0, r0
 80003e8:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80003f0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003f4:	fb04 f20c 	mul.w	r2, r4, ip
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d90e      	bls.n	800041a <__udivmoddi4+0x126>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0901 	movcs.w	r9, #1
 8000408:	f04f 0900 	movcc.w	r9, #0
 800040c:	429a      	cmp	r2, r3
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x124>
 8000410:	f1b9 0f00 	cmp.w	r9, #0
 8000414:	f000 80ec 	beq.w	80005f0 <__udivmoddi4+0x2fc>
 8000418:	46c4      	mov	ip, r8
 800041a:	1a9b      	subs	r3, r3, r2
 800041c:	fbb3 f8fe 	udiv	r8, r3, lr
 8000420:	fb0e 3318 	mls	r3, lr, r8, r3
 8000424:	fb04 f408 	mul.w	r4, r4, r8
 8000428:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800042c:	4294      	cmp	r4, r2
 800042e:	d90b      	bls.n	8000448 <__udivmoddi4+0x154>
 8000430:	18ba      	adds	r2, r7, r2
 8000432:	f108 33ff 	add.w	r3, r8, #4294967295
 8000436:	bf2c      	ite	cs
 8000438:	2001      	movcs	r0, #1
 800043a:	2000      	movcc	r0, #0
 800043c:	4294      	cmp	r4, r2
 800043e:	d902      	bls.n	8000446 <__udivmoddi4+0x152>
 8000440:	2800      	cmp	r0, #0
 8000442:	f000 80d1 	beq.w	80005e8 <__udivmoddi4+0x2f4>
 8000446:	4698      	mov	r8, r3
 8000448:	1b12      	subs	r2, r2, r4
 800044a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 800044e:	e79d      	b.n	800038c <__udivmoddi4+0x98>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa08 f401 	lsl.w	r4, r8, r1
 800045a:	fa00 f901 	lsl.w	r9, r0, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	fa28 f806 	lsr.w	r8, r8, r6
 8000466:	408a      	lsls	r2, r1
 8000468:	431f      	orrs	r7, r3
 800046a:	fa20 f306 	lsr.w	r3, r0, r6
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa1f fc87 	uxth.w	ip, r7
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fbb8 fef0 	udiv	lr, r8, r0
 800047c:	fb00 881e 	mls	r8, r0, lr, r8
 8000480:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000484:	fb0e f80c 	mul.w	r8, lr, ip
 8000488:	45a0      	cmp	r8, r4
 800048a:	d90e      	bls.n	80004aa <__udivmoddi4+0x1b6>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000492:	bf2c      	ite	cs
 8000494:	f04f 0b01 	movcs.w	fp, #1
 8000498:	f04f 0b00 	movcc.w	fp, #0
 800049c:	45a0      	cmp	r8, r4
 800049e:	d903      	bls.n	80004a8 <__udivmoddi4+0x1b4>
 80004a0:	f1bb 0f00 	cmp.w	fp, #0
 80004a4:	f000 80b8 	beq.w	8000618 <__udivmoddi4+0x324>
 80004a8:	46d6      	mov	lr, sl
 80004aa:	eba4 0408 	sub.w	r4, r4, r8
 80004ae:	fa1f f883 	uxth.w	r8, r3
 80004b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b6:	fb00 4413 	mls	r4, r0, r3, r4
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d90e      	bls.n	80004e4 <__udivmoddi4+0x1f0>
 80004c6:	193c      	adds	r4, r7, r4
 80004c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004cc:	bf2c      	ite	cs
 80004ce:	f04f 0801 	movcs.w	r8, #1
 80004d2:	f04f 0800 	movcc.w	r8, #0
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d903      	bls.n	80004e2 <__udivmoddi4+0x1ee>
 80004da:	f1b8 0f00 	cmp.w	r8, #0
 80004de:	f000 809f 	beq.w	8000620 <__udivmoddi4+0x32c>
 80004e2:	4603      	mov	r3, r0
 80004e4:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e8:	eba4 040c 	sub.w	r4, r4, ip
 80004ec:	fba0 ec02 	umull	lr, ip, r0, r2
 80004f0:	4564      	cmp	r4, ip
 80004f2:	4673      	mov	r3, lr
 80004f4:	46e0      	mov	r8, ip
 80004f6:	d302      	bcc.n	80004fe <__udivmoddi4+0x20a>
 80004f8:	d107      	bne.n	800050a <__udivmoddi4+0x216>
 80004fa:	45f1      	cmp	r9, lr
 80004fc:	d205      	bcs.n	800050a <__udivmoddi4+0x216>
 80004fe:	ebbe 0302 	subs.w	r3, lr, r2
 8000502:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000506:	3801      	subs	r0, #1
 8000508:	46e0      	mov	r8, ip
 800050a:	b15d      	cbz	r5, 8000524 <__udivmoddi4+0x230>
 800050c:	ebb9 0203 	subs.w	r2, r9, r3
 8000510:	eb64 0408 	sbc.w	r4, r4, r8
 8000514:	fa04 f606 	lsl.w	r6, r4, r6
 8000518:	fa22 f301 	lsr.w	r3, r2, r1
 800051c:	40cc      	lsrs	r4, r1
 800051e:	431e      	orrs	r6, r3
 8000520:	e9c5 6400 	strd	r6, r4, [r5]
 8000524:	2100      	movs	r1, #0
 8000526:	e736      	b.n	8000396 <__udivmoddi4+0xa2>
 8000528:	fbb1 fcf2 	udiv	ip, r1, r2
 800052c:	0c01      	lsrs	r1, r0, #16
 800052e:	4614      	mov	r4, r2
 8000530:	b280      	uxth	r0, r0
 8000532:	4696      	mov	lr, r2
 8000534:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000538:	2620      	movs	r6, #32
 800053a:	4690      	mov	r8, r2
 800053c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000540:	4610      	mov	r0, r2
 8000542:	fbb1 f1f2 	udiv	r1, r1, r2
 8000546:	eba3 0308 	sub.w	r3, r3, r8
 800054a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054e:	e74b      	b.n	80003e8 <__udivmoddi4+0xf4>
 8000550:	40b7      	lsls	r7, r6
 8000552:	f1c6 0320 	rsb	r3, r6, #32
 8000556:	fa01 f206 	lsl.w	r2, r1, r6
 800055a:	fa21 f803 	lsr.w	r8, r1, r3
 800055e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000562:	fa20 f303 	lsr.w	r3, r0, r3
 8000566:	b2bc      	uxth	r4, r7
 8000568:	40b0      	lsls	r0, r6
 800056a:	4313      	orrs	r3, r2
 800056c:	0c02      	lsrs	r2, r0, #16
 800056e:	0c19      	lsrs	r1, r3, #16
 8000570:	b280      	uxth	r0, r0
 8000572:	fbb8 f9fe 	udiv	r9, r8, lr
 8000576:	fb0e 8819 	mls	r8, lr, r9, r8
 800057a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	4588      	cmp	r8, r1
 8000584:	d951      	bls.n	800062a <__udivmoddi4+0x336>
 8000586:	1879      	adds	r1, r7, r1
 8000588:	f109 3cff 	add.w	ip, r9, #4294967295
 800058c:	bf2c      	ite	cs
 800058e:	f04f 0a01 	movcs.w	sl, #1
 8000592:	f04f 0a00 	movcc.w	sl, #0
 8000596:	4588      	cmp	r8, r1
 8000598:	d902      	bls.n	80005a0 <__udivmoddi4+0x2ac>
 800059a:	f1ba 0f00 	cmp.w	sl, #0
 800059e:	d031      	beq.n	8000604 <__udivmoddi4+0x310>
 80005a0:	eba1 0108 	sub.w	r1, r1, r8
 80005a4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a8:	fb09 f804 	mul.w	r8, r9, r4
 80005ac:	fb0e 1119 	mls	r1, lr, r9, r1
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005b6:	4543      	cmp	r3, r8
 80005b8:	d235      	bcs.n	8000626 <__udivmoddi4+0x332>
 80005ba:	18fb      	adds	r3, r7, r3
 80005bc:	f109 31ff 	add.w	r1, r9, #4294967295
 80005c0:	bf2c      	ite	cs
 80005c2:	f04f 0a01 	movcs.w	sl, #1
 80005c6:	f04f 0a00 	movcc.w	sl, #0
 80005ca:	4543      	cmp	r3, r8
 80005cc:	d2bb      	bcs.n	8000546 <__udivmoddi4+0x252>
 80005ce:	f1ba 0f00 	cmp.w	sl, #0
 80005d2:	d1b8      	bne.n	8000546 <__udivmoddi4+0x252>
 80005d4:	f1a9 0102 	sub.w	r1, r9, #2
 80005d8:	443b      	add	r3, r7
 80005da:	e7b4      	b.n	8000546 <__udivmoddi4+0x252>
 80005dc:	1a84      	subs	r4, r0, r2
 80005de:	eb68 0203 	sbc.w	r2, r8, r3
 80005e2:	2001      	movs	r0, #1
 80005e4:	4696      	mov	lr, r2
 80005e6:	e6eb      	b.n	80003c0 <__udivmoddi4+0xcc>
 80005e8:	443a      	add	r2, r7
 80005ea:	f1a8 0802 	sub.w	r8, r8, #2
 80005ee:	e72b      	b.n	8000448 <__udivmoddi4+0x154>
 80005f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f4:	443b      	add	r3, r7
 80005f6:	e710      	b.n	800041a <__udivmoddi4+0x126>
 80005f8:	3902      	subs	r1, #2
 80005fa:	443b      	add	r3, r7
 80005fc:	e6a9      	b.n	8000352 <__udivmoddi4+0x5e>
 80005fe:	443a      	add	r2, r7
 8000600:	3802      	subs	r0, #2
 8000602:	e6be      	b.n	8000382 <__udivmoddi4+0x8e>
 8000604:	eba7 0808 	sub.w	r8, r7, r8
 8000608:	f1a9 0c02 	sub.w	ip, r9, #2
 800060c:	4441      	add	r1, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c9      	b.n	80005ac <__udivmoddi4+0x2b8>
 8000618:	f1ae 0e02 	sub.w	lr, lr, #2
 800061c:	443c      	add	r4, r7
 800061e:	e744      	b.n	80004aa <__udivmoddi4+0x1b6>
 8000620:	3b02      	subs	r3, #2
 8000622:	443c      	add	r4, r7
 8000624:	e75e      	b.n	80004e4 <__udivmoddi4+0x1f0>
 8000626:	4649      	mov	r1, r9
 8000628:	e78d      	b.n	8000546 <__udivmoddi4+0x252>
 800062a:	eba1 0108 	sub.w	r1, r1, r8
 800062e:	46cc      	mov	ip, r9
 8000630:	fbb1 f9fe 	udiv	r9, r1, lr
 8000634:	fb09 f804 	mul.w	r8, r9, r4
 8000638:	e7b8      	b.n	80005ac <__udivmoddi4+0x2b8>
 800063a:	bf00      	nop

0800063c <__aeabi_idiv0>:
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop

08000640 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08e      	sub	sp, #56	@ 0x38
 8000644:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000656:	4b48      	ldr	r3, [pc, #288]	@ (8000778 <MX_GPIO_Init+0x138>)
 8000658:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800065c:	4a46      	ldr	r2, [pc, #280]	@ (8000778 <MX_GPIO_Init+0x138>)
 800065e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000662:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000666:	4b44      	ldr	r3, [pc, #272]	@ (8000778 <MX_GPIO_Init+0x138>)
 8000668:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800066c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000670:	623b      	str	r3, [r7, #32]
 8000672:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000674:	4b40      	ldr	r3, [pc, #256]	@ (8000778 <MX_GPIO_Init+0x138>)
 8000676:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800067a:	4a3f      	ldr	r2, [pc, #252]	@ (8000778 <MX_GPIO_Init+0x138>)
 800067c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000680:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000684:	4b3c      	ldr	r3, [pc, #240]	@ (8000778 <MX_GPIO_Init+0x138>)
 8000686:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800068a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800068e:	61fb      	str	r3, [r7, #28]
 8000690:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b39      	ldr	r3, [pc, #228]	@ (8000778 <MX_GPIO_Init+0x138>)
 8000694:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000698:	4a37      	ldr	r2, [pc, #220]	@ (8000778 <MX_GPIO_Init+0x138>)
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006a2:	4b35      	ldr	r3, [pc, #212]	@ (8000778 <MX_GPIO_Init+0x138>)
 80006a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	61bb      	str	r3, [r7, #24]
 80006ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006b0:	4b31      	ldr	r3, [pc, #196]	@ (8000778 <MX_GPIO_Init+0x138>)
 80006b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006b6:	4a30      	ldr	r2, [pc, #192]	@ (8000778 <MX_GPIO_Init+0x138>)
 80006b8:	f043 0320 	orr.w	r3, r3, #32
 80006bc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000778 <MX_GPIO_Init+0x138>)
 80006c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006c6:	f003 0320 	and.w	r3, r3, #32
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000778 <MX_GPIO_Init+0x138>)
 80006d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006d4:	4a28      	ldr	r2, [pc, #160]	@ (8000778 <MX_GPIO_Init+0x138>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006de:	4b26      	ldr	r3, [pc, #152]	@ (8000778 <MX_GPIO_Init+0x138>)
 80006e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ec:	4b22      	ldr	r3, [pc, #136]	@ (8000778 <MX_GPIO_Init+0x138>)
 80006ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006f2:	4a21      	ldr	r2, [pc, #132]	@ (8000778 <MX_GPIO_Init+0x138>)
 80006f4:	f043 0308 	orr.w	r3, r3, #8
 80006f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000778 <MX_GPIO_Init+0x138>)
 80006fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000702:	f003 0308 	and.w	r3, r3, #8
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	4b1b      	ldr	r3, [pc, #108]	@ (8000778 <MX_GPIO_Init+0x138>)
 800070c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000710:	4a19      	ldr	r2, [pc, #100]	@ (8000778 <MX_GPIO_Init+0x138>)
 8000712:	f043 0302 	orr.w	r3, r3, #2
 8000716:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800071a:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <MX_GPIO_Init+0x138>)
 800071c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000720:	f003 0302 	and.w	r3, r3, #2
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000728:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <MX_GPIO_Init+0x138>)
 800072a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800072e:	4a12      	ldr	r2, [pc, #72]	@ (8000778 <MX_GPIO_Init+0x138>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000734:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_GPIO_Init+0x138>)
 800073a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800073e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_8, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800074c:	480b      	ldr	r0, [pc, #44]	@ (800077c <MX_GPIO_Init+0x13c>)
 800074e:	f003 fa35 	bl	8003bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000752:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000756:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	2301      	movs	r3, #1
 800075a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000768:	4619      	mov	r1, r3
 800076a:	4804      	ldr	r0, [pc, #16]	@ (800077c <MX_GPIO_Init+0x13c>)
 800076c:	f003 f8c8 	bl	8003900 <HAL_GPIO_Init>

}
 8000770:	bf00      	nop
 8000772:	3738      	adds	r7, #56	@ 0x38
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	44020c00 	.word	0x44020c00
 800077c:	42022000 	.word	0x42022000

08000780 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000784:	f003 fa5e 	bl	8003c44 <HAL_ICACHE_Enable>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 800078e:	f000 fb23 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <lfs_init>:
#include "stm32h573i_discovery_ospi.h"
#include "usart.h"
#include "gpio.h"
#include <string.h>

int lfs_init(lfs_t *lfs, struct lfs_config *cfg) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b098      	sub	sp, #96	@ 0x60
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*)"Init LittleFS...\r\n", 19, HAL_MAX_DELAY);
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	2213      	movs	r2, #19
 80007a8:	493c      	ldr	r1, [pc, #240]	@ (800089c <lfs_init+0x104>)
 80007aa:	483d      	ldr	r0, [pc, #244]	@ (80008a0 <lfs_init+0x108>)
 80007ac:	f009 fa7c 	bl	8009ca8 <HAL_UART_Transmit>

    BSP_OSPI_NOR_Init_t FlashConfig = {
 80007b0:	2301      	movs	r3, #1
 80007b2:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 80007b6:	2300      	movs	r3, #0
 80007b8:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
        .InterfaceMode = BSP_OSPI_NOR_OPI_MODE,
        .TransferRate = BSP_OSPI_NOR_STR_TRANSFER
    };

    if (BSP_OSPI_NOR_Init(0, &FlashConfig) != BSP_ERROR_NONE) {
 80007bc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007c0:	4619      	mov	r1, r3
 80007c2:	2000      	movs	r0, #0
 80007c4:	f001 fd84 	bl	80022d0 <BSP_OSPI_NOR_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d009      	beq.n	80007e2 <lfs_init+0x4a>
        HAL_UART_Transmit(&huart1, (uint8_t*)"Erreur BSP_OSPI_NOR_Init\r\n", 27, HAL_MAX_DELAY);
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295
 80007d2:	221b      	movs	r2, #27
 80007d4:	4933      	ldr	r1, [pc, #204]	@ (80008a4 <lfs_init+0x10c>)
 80007d6:	4832      	ldr	r0, [pc, #200]	@ (80008a0 <lfs_init+0x108>)
 80007d8:	f009 fa66 	bl	8009ca8 <HAL_UART_Transmit>
        return -1;
 80007dc:	f04f 33ff 	mov.w	r3, #4294967295
 80007e0:	e057      	b.n	8000892 <lfs_init+0xfa>
    }

    *cfg = (struct lfs_config){
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	4618      	mov	r0, r3
 80007e6:	2354      	movs	r3, #84	@ 0x54
 80007e8:	461a      	mov	r2, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	f012 f93d 	bl	8012a6a <memset>
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	4a2d      	ldr	r2, [pc, #180]	@ (80008a8 <lfs_init+0x110>)
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	4a2c      	ldr	r2, [pc, #176]	@ (80008ac <lfs_init+0x114>)
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	4a2c      	ldr	r2, [pc, #176]	@ (80008b0 <lfs_init+0x118>)
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	4a2b      	ldr	r2, [pc, #172]	@ (80008b4 <lfs_init+0x11c>)
 8000806:	611a      	str	r2, [r3, #16]
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800080e:	615a      	str	r2, [r3, #20]
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000816:	619a      	str	r2, [r3, #24]
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800081e:	61da      	str	r2, [r3, #28]
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000826:	621a      	str	r2, [r3, #32]
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800082e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000836:	629a      	str	r2, [r3, #40]	@ 0x28
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	2210      	movs	r2, #16
 800083c:	62da      	str	r2, [r3, #44]	@ 0x2c
        .cache_size = 256,
        .lookahead_size = 16,
        .block_cycles = 500,
    };

    if (lfs_format(lfs, cfg) != 0) {
 800083e:	6839      	ldr	r1, [r7, #0]
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f011 fdbd 	bl	80123c0 <lfs_format>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d009      	beq.n	8000860 <lfs_init+0xc8>
        HAL_UART_Transmit(&huart1, (uint8_t*)"Format failed\r\n", 15, HAL_MAX_DELAY);
 800084c:	f04f 33ff 	mov.w	r3, #4294967295
 8000850:	220f      	movs	r2, #15
 8000852:	4919      	ldr	r1, [pc, #100]	@ (80008b8 <lfs_init+0x120>)
 8000854:	4812      	ldr	r0, [pc, #72]	@ (80008a0 <lfs_init+0x108>)
 8000856:	f009 fa27 	bl	8009ca8 <HAL_UART_Transmit>
        return -2;
 800085a:	f06f 0301 	mvn.w	r3, #1
 800085e:	e018      	b.n	8000892 <lfs_init+0xfa>
    }

    if (lfs_mount(lfs, cfg) != 0) {
 8000860:	6839      	ldr	r1, [r7, #0]
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f011 fdc2 	bl	80123ec <lfs_mount>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d009      	beq.n	8000882 <lfs_init+0xea>
        HAL_UART_Transmit(&huart1, (uint8_t*)"Mount failed\r\n", 14, HAL_MAX_DELAY);
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
 8000872:	220e      	movs	r2, #14
 8000874:	4911      	ldr	r1, [pc, #68]	@ (80008bc <lfs_init+0x124>)
 8000876:	480a      	ldr	r0, [pc, #40]	@ (80008a0 <lfs_init+0x108>)
 8000878:	f009 fa16 	bl	8009ca8 <HAL_UART_Transmit>
        return -3;
 800087c:	f06f 0302 	mvn.w	r3, #2
 8000880:	e007      	b.n	8000892 <lfs_init+0xfa>
    }

    HAL_UART_Transmit(&huart1, (uint8_t*)"LittleFS OK\r\n", 13, HAL_MAX_DELAY);
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
 8000886:	220d      	movs	r2, #13
 8000888:	490d      	ldr	r1, [pc, #52]	@ (80008c0 <lfs_init+0x128>)
 800088a:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <lfs_init+0x108>)
 800088c:	f009 fa0c 	bl	8009ca8 <HAL_UART_Transmit>
    return 0;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3760      	adds	r7, #96	@ 0x60
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	08013668 	.word	0x08013668
 80008a0:	200000e4 	.word	0x200000e4
 80008a4:	0801367c 	.word	0x0801367c
 80008a8:	080015c9 	.word	0x080015c9
 80008ac:	08001609 	.word	0x08001609
 80008b0:	08001649 	.word	0x08001649
 80008b4:	08001685 	.word	0x08001685
 80008b8:	08013698 	.word	0x08013698
 80008bc:	080136a8 	.word	0x080136a8
 80008c0:	080136b8 	.word	0x080136b8

080008c4 <blink_led>:
#include "stm32h573i_discovery_ospi.h"
#include "lfs_config.h"
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN 0 */
void blink_led(int times) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 for (int i = 0; i < times; i++) {
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	e014      	b.n	80008fc <blink_led+0x38>
   HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_8); // LD2
 80008d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008d6:	480e      	ldr	r0, [pc, #56]	@ (8000910 <blink_led+0x4c>)
 80008d8:	f003 f988 	bl	8003bec <HAL_GPIO_TogglePin>
   HAL_Delay(500);
 80008dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008e0:	f002 fe0a 	bl	80034f8 <HAL_Delay>
   HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_8);
 80008e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008e8:	4809      	ldr	r0, [pc, #36]	@ (8000910 <blink_led+0x4c>)
 80008ea:	f003 f97f 	bl	8003bec <HAL_GPIO_TogglePin>
   HAL_Delay(500);
 80008ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008f2:	f002 fe01 	bl	80034f8 <HAL_Delay>
 for (int i = 0; i < times; i++) {
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	3301      	adds	r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fa      	ldr	r2, [r7, #12]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	429a      	cmp	r2, r3
 8000902:	dbe6      	blt.n	80008d2 <blink_led+0xe>
 }
}
 8000904:	bf00      	nop
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	42022000 	.word	0x42022000

08000914 <main>:
/* USER CODE END 0 */
int main(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 800091a:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN 1 */
 /* USER CODE END 1 */
 /* MCU Configuration--------------------------------------------------------*/
 /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 HAL_Init();
 800091c:	f002 fd2e 	bl	800337c <HAL_Init>
 /* USER CODE BEGIN Init */
 /* USER CODE END Init */
 /* Configure the system clock */
 SystemClock_Config();
 8000920:	f000 f9fa 	bl	8000d18 <SystemClock_Config>
 /* USER CODE BEGIN SysInit */
 /* USER CODE END SysInit */
 /* Initialize all configured peripherals */
 MX_GPIO_Init();
 8000924:	f7ff fe8c 	bl	8000640 <MX_GPIO_Init>
 MX_ICACHE_Init();
 8000928:	f7ff ff2a 	bl	8000780 <MX_ICACHE_Init>
 MX_OCTOSPI1_Init();
 800092c:	f000 fa64 	bl	8000df8 <MX_OCTOSPI1_Init>
 MX_USART1_UART_Init();
 8000930:	f000 fd70 	bl	8001414 <MX_USART1_UART_Init>
 /* USER CODE BEGIN 2 */
 // ...
 HAL_UART_Transmit(&huart1, (uint8_t*)"Init done. Starting LittleFS test...\r\n", 38, HAL_MAX_DELAY);
 8000934:	f04f 33ff 	mov.w	r3, #4294967295
 8000938:	2226      	movs	r2, #38	@ 0x26
 800093a:	49d8      	ldr	r1, [pc, #864]	@ (8000c9c <main+0x388>)
 800093c:	48d8      	ldr	r0, [pc, #864]	@ (8000ca0 <main+0x38c>)
 800093e:	f009 f9b3 	bl	8009ca8 <HAL_UART_Transmit>
 blink_led(4);
 8000942:	2004      	movs	r0, #4
 8000944:	f7ff ffbe 	bl	80008c4 <blink_led>

 lfs_t lfs;
 struct lfs_config cfg;

 if (lfs_init(&lfs, &cfg) != 0) {
 8000948:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 800094c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff20 	bl	8000798 <lfs_init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <main+0x4e>
     Error_Handler();
 800095e:	f000 fa3b 	bl	8000dd8 <Error_Handler>
 }


 // Write test.txt
 lfs_file_t file;
 const char *text = "Hello from LittleFS!\r\n";
 8000962:	4bd0      	ldr	r3, [pc, #832]	@ (8000ca4 <main+0x390>)
 8000964:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 if (lfs_file_open(&lfs, &file, "test.txt", LFS_O_WRONLY | LFS_O_CREAT) < 0) {
 8000968:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 800096c:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8000970:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000974:	4acc      	ldr	r2, [pc, #816]	@ (8000ca8 <main+0x394>)
 8000976:	f011 fd65 	bl	8012444 <lfs_file_open>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	da01      	bge.n	8000984 <main+0x70>
     Error_Handler();
 8000980:	f000 fa2a 	bl	8000dd8 <Error_Handler>
 }
 lfs_file_write(&lfs, &file, text, strlen(text));
 8000984:	f8d7 024c 	ldr.w	r0, [r7, #588]	@ 0x24c
 8000988:	f7ff fc80 	bl	800028c <strlen>
 800098c:	4603      	mov	r3, r0
 800098e:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000992:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8000996:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 800099a:	f011 fde3 	bl	8012564 <lfs_file_write>
 lfs_file_close(&lfs, &file);
 800099e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80009a2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f011 fd7f 	bl	80124ac <lfs_file_close>
 // Read and display test.txt
 char buffer[64] = {0};
 80009ae:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80009b2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80009b6:	4618      	mov	r0, r3
 80009b8:	2340      	movs	r3, #64	@ 0x40
 80009ba:	461a      	mov	r2, r3
 80009bc:	2100      	movs	r1, #0
 80009be:	f012 f854 	bl	8012a6a <memset>
 if (lfs_file_open(&lfs, &file, "test.txt", LFS_O_RDONLY) < 0) {
 80009c2:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80009c6:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 80009ca:	2301      	movs	r3, #1
 80009cc:	4ab6      	ldr	r2, [pc, #728]	@ (8000ca8 <main+0x394>)
 80009ce:	f011 fd39 	bl	8012444 <lfs_file_open>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	da01      	bge.n	80009dc <main+0xc8>
     Error_Handler();
 80009d8:	f000 f9fe 	bl	8000dd8 <Error_Handler>
 }
 lfs_file_read(&lfs, &file, buffer, sizeof(buffer));
 80009dc:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 80009e0:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80009e4:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 80009e8:	2340      	movs	r3, #64	@ 0x40
 80009ea:	f011 fd8b 	bl	8012504 <lfs_file_read>
 lfs_file_close(&lfs, &file);
 80009ee:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80009f2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f011 fd57 	bl	80124ac <lfs_file_close>
 HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80009fe:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fc42 	bl	800028c <strlen>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295
 8000a14:	48a2      	ldr	r0, [pc, #648]	@ (8000ca0 <main+0x38c>)
 8000a16:	f009 f947 	bl	8009ca8 <HAL_UART_Transmit>
 blink_led(5);
 8000a1a:	2005      	movs	r0, #5
 8000a1c:	f7ff ff52 	bl	80008c4 <blink_led>

 // Write test.txt
 lfs_file_t file2;
 const char *text2 = "Test File2!\r\n";
 8000a20:	4ba2      	ldr	r3, [pc, #648]	@ (8000cac <main+0x398>)
 8000a22:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 if (lfs_file_open(&lfs, &file2, "test2.txt", LFS_O_WRONLY | LFS_O_CREAT) < 0) {
 8000a26:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8000a2a:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8000a2e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000a32:	4a9f      	ldr	r2, [pc, #636]	@ (8000cb0 <main+0x39c>)
 8000a34:	f011 fd06 	bl	8012444 <lfs_file_open>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	da01      	bge.n	8000a42 <main+0x12e>
     Error_Handler();
 8000a3e:	f000 f9cb 	bl	8000dd8 <Error_Handler>
 }
 lfs_file_write(&lfs, &file2, text2, strlen(text2));
 8000a42:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 8000a46:	f7ff fc21 	bl	800028c <strlen>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8000a50:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8000a54:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8000a58:	f011 fd84 	bl	8012564 <lfs_file_write>
 lfs_file_close(&lfs, &file2);
 8000a5c:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8000a60:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000a64:	4611      	mov	r1, r2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f011 fd20 	bl	80124ac <lfs_file_close>
 // Read and display test.txt

 if (lfs_file_open(&lfs, &file2, "test2.txt", LFS_O_RDONLY) < 0) {
 8000a6c:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8000a70:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8000a74:	2301      	movs	r3, #1
 8000a76:	4a8e      	ldr	r2, [pc, #568]	@ (8000cb0 <main+0x39c>)
 8000a78:	f011 fce4 	bl	8012444 <lfs_file_open>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	da01      	bge.n	8000a86 <main+0x172>
     Error_Handler();
 8000a82:	f000 f9a9 	bl	8000dd8 <Error_Handler>
 }
 char bufferr[64] = {0};
 8000a86:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000a8a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000a8e:	4618      	mov	r0, r3
 8000a90:	2340      	movs	r3, #64	@ 0x40
 8000a92:	461a      	mov	r2, r3
 8000a94:	2100      	movs	r1, #0
 8000a96:	f011 ffe8 	bl	8012a6a <memset>
 lfs_file_read(&lfs, &file2, bufferr, sizeof(bufferr));
 8000a9a:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000a9e:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8000aa2:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8000aa6:	2340      	movs	r3, #64	@ 0x40
 8000aa8:	f011 fd2c 	bl	8012504 <lfs_file_read>
 lfs_file_close(&lfs, &file2);
 8000aac:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8000ab0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f011 fcf8 	bl	80124ac <lfs_file_close>
 HAL_UART_Transmit(&huart1, (uint8_t*)bufferr, strlen(bufferr), HAL_MAX_DELAY);
 8000abc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fbe3 	bl	800028c <strlen>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	4873      	ldr	r0, [pc, #460]	@ (8000ca0 <main+0x38c>)
 8000ad4:	f009 f8e8 	bl	8009ca8 <HAL_UART_Transmit>
 blink_led(5);
 8000ad8:	2005      	movs	r0, #5
 8000ada:	f7ff fef3 	bl	80008c4 <blink_led>

/* USER CODE END 2 */

HAL_UART_Transmit(&huart1, (uint8_t*)"Testing lfs_remove()...\r\n", 26, HAL_MAX_DELAY);
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	221a      	movs	r2, #26
 8000ae4:	4973      	ldr	r1, [pc, #460]	@ (8000cb4 <main+0x3a0>)
 8000ae6:	486e      	ldr	r0, [pc, #440]	@ (8000ca0 <main+0x38c>)
 8000ae8:	f009 f8de 	bl	8009ca8 <HAL_UART_Transmit>

 // Supprimer si le fichier existe
 int err = lfs_remove(&lfs, "test.txt");
 8000aec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000af0:	496d      	ldr	r1, [pc, #436]	@ (8000ca8 <main+0x394>)
 8000af2:	4618      	mov	r0, r3
 8000af4:	f011 fc90 	bl	8012418 <lfs_remove>
 8000af8:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
 if (err == 0) {
 8000afc:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d107      	bne.n	8000b14 <main+0x200>
     HAL_UART_Transmit(&huart1, (uint8_t*)"File removed successfully.\r\n", 29, HAL_MAX_DELAY);
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
 8000b08:	221d      	movs	r2, #29
 8000b0a:	496b      	ldr	r1, [pc, #428]	@ (8000cb8 <main+0x3a4>)
 8000b0c:	4864      	ldr	r0, [pc, #400]	@ (8000ca0 <main+0x38c>)
 8000b0e:	f009 f8cb 	bl	8009ca8 <HAL_UART_Transmit>
 8000b12:	e018      	b.n	8000b46 <main+0x232>
 } else if (err == LFS_ERR_NOENT) {
 8000b14:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000b18:	f113 0f02 	cmn.w	r3, #2
 8000b1c:	d107      	bne.n	8000b2e <main+0x21a>
     HAL_UART_Transmit(&huart1, (uint8_t*)"File did not exist (OK).\r\n", 27, HAL_MAX_DELAY);
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	221b      	movs	r2, #27
 8000b24:	4965      	ldr	r1, [pc, #404]	@ (8000cbc <main+0x3a8>)
 8000b26:	485e      	ldr	r0, [pc, #376]	@ (8000ca0 <main+0x38c>)
 8000b28:	f009 f8be 	bl	8009ca8 <HAL_UART_Transmit>
 8000b2c:	e00b      	b.n	8000b46 <main+0x232>
 } else {
     HAL_UART_Transmit(&huart1, (uint8_t*)"Remove failed!\r\n", 17, HAL_MAX_DELAY);
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	2211      	movs	r2, #17
 8000b34:	4962      	ldr	r1, [pc, #392]	@ (8000cc0 <main+0x3ac>)
 8000b36:	485a      	ldr	r0, [pc, #360]	@ (8000ca0 <main+0x38c>)
 8000b38:	f009 f8b6 	bl	8009ca8 <HAL_UART_Transmit>
     blink_led(3);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f7ff fec1 	bl	80008c4 <blink_led>
     Error_Handler();
 8000b42:	f000 f949 	bl	8000dd8 <Error_Handler>
 }

 // Créer un nouveau fichier
 const char *msg = "contenu file 2!\r\n";
 8000b46:	4b5f      	ldr	r3, [pc, #380]	@ (8000cc4 <main+0x3b0>)
 8000b48:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 err = lfs_file_open(&lfs, &file, "test.txt", LFS_O_WRONLY | LFS_O_CREAT);
 8000b4c:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000b50:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8000b54:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000b58:	4a53      	ldr	r2, [pc, #332]	@ (8000ca8 <main+0x394>)
 8000b5a:	f011 fc73 	bl	8012444 <lfs_file_open>
 8000b5e:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
 if (err < 0) {
 8000b62:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	da08      	bge.n	8000b7c <main+0x268>
     HAL_UART_Transmit(&huart1, (uint8_t*)"Failed to create file\r\n", 24, HAL_MAX_DELAY);
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	2218      	movs	r2, #24
 8000b70:	4955      	ldr	r1, [pc, #340]	@ (8000cc8 <main+0x3b4>)
 8000b72:	484b      	ldr	r0, [pc, #300]	@ (8000ca0 <main+0x38c>)
 8000b74:	f009 f898 	bl	8009ca8 <HAL_UART_Transmit>
     Error_Handler();
 8000b78:	f000 f92e 	bl	8000dd8 <Error_Handler>
 }
 lfs_file_write(&lfs, &file, msg, strlen(msg));
 8000b7c:	f8d7 0240 	ldr.w	r0, [r7, #576]	@ 0x240
 8000b80:	f7ff fb84 	bl	800028c <strlen>
 8000b84:	4603      	mov	r3, r0
 8000b86:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000b8a:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8000b8e:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 8000b92:	f011 fce7 	bl	8012564 <lfs_file_write>
 lfs_file_close(&lfs, &file);
 8000b96:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000b9a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f011 fc83 	bl	80124ac <lfs_file_close>

 // Lire pour vérifier que l'écriture a réussi
 err = lfs_file_open(&lfs, &file, "test.txt", LFS_O_RDONLY);
 8000ba6:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000baa:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8000bae:	2301      	movs	r3, #1
 8000bb0:	4a3d      	ldr	r2, [pc, #244]	@ (8000ca8 <main+0x394>)
 8000bb2:	f011 fc47 	bl	8012444 <lfs_file_open>
 8000bb6:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
 if (err < 0) {
 8000bba:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	da08      	bge.n	8000bd4 <main+0x2c0>
     HAL_UART_Transmit(&huart1, (uint8_t*)"Read failed\r\n", 14, HAL_MAX_DELAY);
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc6:	220e      	movs	r2, #14
 8000bc8:	4940      	ldr	r1, [pc, #256]	@ (8000ccc <main+0x3b8>)
 8000bca:	4835      	ldr	r0, [pc, #212]	@ (8000ca0 <main+0x38c>)
 8000bcc:	f009 f86c 	bl	8009ca8 <HAL_UART_Transmit>
     Error_Handler();
 8000bd0:	f000 f902 	bl	8000dd8 <Error_Handler>
 }
 char buffer2[64] = {0};
 8000bd4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000bd8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8000bdc:	4618      	mov	r0, r3
 8000bde:	2340      	movs	r3, #64	@ 0x40
 8000be0:	461a      	mov	r2, r3
 8000be2:	2100      	movs	r1, #0
 8000be4:	f011 ff41 	bl	8012a6a <memset>
 lfs_file_read(&lfs, &file, buffer2, sizeof(buffer2));
 8000be8:	1d3a      	adds	r2, r7, #4
 8000bea:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000bee:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8000bf2:	2340      	movs	r3, #64	@ 0x40
 8000bf4:	f011 fc86 	bl	8012504 <lfs_file_read>
 lfs_file_close(&lfs, &file);
 8000bf8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000bfc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f011 fc52 	bl	80124ac <lfs_file_close>
 HAL_UART_Transmit(&huart1, (uint8_t*)"Read content: ", 14, HAL_MAX_DELAY);
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	220e      	movs	r2, #14
 8000c0e:	4930      	ldr	r1, [pc, #192]	@ (8000cd0 <main+0x3bc>)
 8000c10:	4823      	ldr	r0, [pc, #140]	@ (8000ca0 <main+0x38c>)
 8000c12:	f009 f849 	bl	8009ca8 <HAL_UART_Transmit>
 HAL_UART_Transmit(&huart1, (uint8_t*)buffer2, strlen(buffer2), HAL_MAX_DELAY);
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fb37 	bl	800028c <strlen>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	1d39      	adds	r1, r7, #4
 8000c24:	f04f 33ff 	mov.w	r3, #4294967295
 8000c28:	481d      	ldr	r0, [pc, #116]	@ (8000ca0 <main+0x38c>)
 8000c2a:	f009 f83d 	bl	8009ca8 <HAL_UART_Transmit>

 // Supprimer encore
  err = lfs_remove(&lfs, "test.txt");
 8000c2e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000c32:	491d      	ldr	r1, [pc, #116]	@ (8000ca8 <main+0x394>)
 8000c34:	4618      	mov	r0, r3
 8000c36:	f011 fbef 	bl	8012418 <lfs_remove>
 8000c3a:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
 if (err == 0) {
 8000c3e:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d107      	bne.n	8000c56 <main+0x342>
     HAL_UART_Transmit(&huart1, (uint8_t*)"\r\nFile removed again successfully.\r\n", 35, HAL_MAX_DELAY);
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4a:	2223      	movs	r2, #35	@ 0x23
 8000c4c:	4921      	ldr	r1, [pc, #132]	@ (8000cd4 <main+0x3c0>)
 8000c4e:	4814      	ldr	r0, [pc, #80]	@ (8000ca0 <main+0x38c>)
 8000c50:	f009 f82a 	bl	8009ca8 <HAL_UART_Transmit>
 8000c54:	e008      	b.n	8000c68 <main+0x354>
 } else {
     HAL_UART_Transmit(&huart1, (uint8_t*)"\r\nFinal remove failed.\r\n", 24, HAL_MAX_DELAY);
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	2218      	movs	r2, #24
 8000c5c:	491e      	ldr	r1, [pc, #120]	@ (8000cd8 <main+0x3c4>)
 8000c5e:	4810      	ldr	r0, [pc, #64]	@ (8000ca0 <main+0x38c>)
 8000c60:	f009 f822 	bl	8009ca8 <HAL_UART_Transmit>
     Error_Handler();
 8000c64:	f000 f8b8 	bl	8000dd8 <Error_Handler>
 }

 // Vérifier que le fichier n'existe plus
 err = lfs_file_open(&lfs, &file2, "test.txt", LFS_O_RDONLY);
 8000c68:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8000c6c:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8000c70:	2301      	movs	r3, #1
 8000c72:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca8 <main+0x394>)
 8000c74:	f011 fbe6 	bl	8012444 <lfs_file_open>
 8000c78:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
 if (err == LFS_ERR_NOENT) {
 8000c7c:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000c80:	f113 0f02 	cmn.w	r3, #2
 8000c84:	d12c      	bne.n	8000ce0 <main+0x3cc>
     HAL_UART_Transmit(&huart1, (uint8_t*)"Confirmed: file no longer exists.\r\n", 35, HAL_MAX_DELAY);
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8a:	2223      	movs	r2, #35	@ 0x23
 8000c8c:	4913      	ldr	r1, [pc, #76]	@ (8000cdc <main+0x3c8>)
 8000c8e:	4804      	ldr	r0, [pc, #16]	@ (8000ca0 <main+0x38c>)
 8000c90:	f009 f80a 	bl	8009ca8 <HAL_UART_Transmit>
     blink_led(2);
 8000c94:	2002      	movs	r0, #2
 8000c96:	f7ff fe15 	bl	80008c4 <blink_led>
 8000c9a:	e036      	b.n	8000d0a <main+0x3f6>
 8000c9c:	080136c8 	.word	0x080136c8
 8000ca0:	200000e4 	.word	0x200000e4
 8000ca4:	080136f0 	.word	0x080136f0
 8000ca8:	08013708 	.word	0x08013708
 8000cac:	08013714 	.word	0x08013714
 8000cb0:	08013724 	.word	0x08013724
 8000cb4:	08013730 	.word	0x08013730
 8000cb8:	0801374c 	.word	0x0801374c
 8000cbc:	0801376c 	.word	0x0801376c
 8000cc0:	08013788 	.word	0x08013788
 8000cc4:	0801379c 	.word	0x0801379c
 8000cc8:	080137b0 	.word	0x080137b0
 8000ccc:	080137c8 	.word	0x080137c8
 8000cd0:	080137d8 	.word	0x080137d8
 8000cd4:	080137e8 	.word	0x080137e8
 8000cd8:	08013810 	.word	0x08013810
 8000cdc:	0801382c 	.word	0x0801382c
 } else {
     HAL_UART_Transmit(&huart1, (uint8_t*)"ERROR: File still exists.\r\n", 27, HAL_MAX_DELAY);
 8000ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce4:	221b      	movs	r2, #27
 8000ce6:	490a      	ldr	r1, [pc, #40]	@ (8000d10 <main+0x3fc>)
 8000ce8:	480a      	ldr	r0, [pc, #40]	@ (8000d14 <main+0x400>)
 8000cea:	f008 ffdd 	bl	8009ca8 <HAL_UART_Transmit>
     lfs_file_close(&lfs, &file2);
 8000cee:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8000cf2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f011 fbd7 	bl	80124ac <lfs_file_close>
     blink_led(4);
 8000cfe:	2004      	movs	r0, #4
 8000d00:	f7ff fde0 	bl	80008c4 <blink_led>
     Error_Handler();
 8000d04:	f000 f868 	bl	8000dd8 <Error_Handler>
 }

 /* Infinite loop */
 /* USER CODE BEGIN WHILE */
 while (1)
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	e7fd      	b.n	8000d0a <main+0x3f6>
 8000d0e:	bf00      	nop
 8000d10:	08013850 	.word	0x08013850
 8000d14:	200000e4 	.word	0x200000e4

08000d18 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b09c      	sub	sp, #112	@ 0x70
 8000d1c:	af00      	add	r7, sp, #0
 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 0320 	add.w	r3, r7, #32
 8000d22:	2250      	movs	r2, #80	@ 0x50
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f011 fe9f 	bl	8012a6a <memset>
 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
 8000d3c:	615a      	str	r2, [r3, #20]
 /** Configure the main internal regulator output voltage
 */
 __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d3e:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <SystemClock_Config+0xb8>)
 8000d40:	691b      	ldr	r3, [r3, #16]
 8000d42:	4a23      	ldr	r2, [pc, #140]	@ (8000dd0 <SystemClock_Config+0xb8>)
 8000d44:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000d48:	6113      	str	r3, [r2, #16]
 8000d4a:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <SystemClock_Config+0xb8>)
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
 while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d56:	bf00      	nop
 8000d58:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd0 <SystemClock_Config+0xb8>)
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	f003 0308 	and.w	r3, r3, #8
 8000d60:	2b08      	cmp	r3, #8
 8000d62:	d1f9      	bne.n	8000d58 <SystemClock_Config+0x40>
 /** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d64:	2302      	movs	r3, #2
 8000d66:	623b      	str	r3, [r7, #32]
 RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000d6c:	2308      	movs	r3, #8
 8000d6e:	633b      	str	r3, [r7, #48]	@ 0x30
 RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d70:	2340      	movs	r3, #64	@ 0x40
 8000d72:	637b      	str	r3, [r7, #52]	@ 0x34
 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	64bb      	str	r3, [r7, #72]	@ 0x48
 if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d78:	f107 0320 	add.w	r3, r7, #32
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f002 ff71 	bl	8003c64 <HAL_RCC_OscConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <SystemClock_Config+0x74>
 {
   Error_Handler();
 8000d88:	f000 f826 	bl	8000dd8 <Error_Handler>
 }
 /** Initializes the CPU, AHB and APB buses clocks
 */
 RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8c:	231f      	movs	r3, #31
 8000d8e:	60bb      	str	r3, [r7, #8]
                             |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                             |RCC_CLOCKTYPE_PCLK3;
 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	613b      	str	r3, [r7, #16]
 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61bb      	str	r3, [r7, #24]
 RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
 if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	2101      	movs	r1, #1
 8000daa:	4618      	mov	r0, r3
 8000dac:	f003 fb92 	bl	80044d4 <HAL_RCC_ClockConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0xa2>
 {
   Error_Handler();
 8000db6:	f000 f80f 	bl	8000dd8 <Error_Handler>
 }
 /** Configure the programming delay
 */
 __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 8000dba:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <SystemClock_Config+0xbc>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a05      	ldr	r2, [pc, #20]	@ (8000dd4 <SystemClock_Config+0xbc>)
 8000dc0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000dc4:	6013      	str	r3, [r2, #0]
}
 8000dc6:	bf00      	nop
 8000dc8:	3770      	adds	r7, #112	@ 0x70
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	44020800 	.word	0x44020800
 8000dd4:	40022000 	.word	0x40022000

08000dd8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ddc:	b672      	cpsid	i
}
 8000dde:	bf00      	nop
 __disable_irq();
 while (1)
 {
   HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_9);
 8000de0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000de4:	4803      	ldr	r0, [pc, #12]	@ (8000df4 <Error_Handler+0x1c>)
 8000de6:	f002 ff01 	bl	8003bec <HAL_GPIO_TogglePin>
   HAL_Delay(100);
 8000dea:	2064      	movs	r0, #100	@ 0x64
 8000dec:	f002 fb84 	bl	80034f8 <HAL_Delay>
   HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_9);
 8000df0:	bf00      	nop
 8000df2:	e7f5      	b.n	8000de0 <Error_Handler+0x8>
 8000df4:	42022000 	.word	0x42022000

08000df8 <MX_OCTOSPI1_Init>:

XSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END OCTOSPI1_Init 0 */

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e6c <MX_OCTOSPI1_Init+0x74>)
 8000dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8000e70 <MX_OCTOSPI1_Init+0x78>)
 8000e00:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThresholdByte = 1;
 8000e02:	4b1a      	ldr	r3, [pc, #104]	@ (8000e6c <MX_OCTOSPI1_Init+0x74>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	605a      	str	r2, [r3, #4]
  hospi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000e08:	4b18      	ldr	r3, [pc, #96]	@ (8000e6c <MX_OCTOSPI1_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 8000e0e:	4b17      	ldr	r3, [pc, #92]	@ (8000e6c <MX_OCTOSPI1_Init+0x74>)
 8000e10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000e14:	60da      	str	r2, [r3, #12]
  hospi1.Init.MemorySize = HAL_XSPI_SIZE_64B;
 8000e16:	4b15      	ldr	r3, [pc, #84]	@ (8000e6c <MX_OCTOSPI1_Init+0x74>)
 8000e18:	2202      	movs	r2, #2
 8000e1a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTimeCycle = 1;
 8000e1c:	4b13      	ldr	r3, [pc, #76]	@ (8000e6c <MX_OCTOSPI1_Init+0x74>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000e22:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <MX_OCTOSPI1_Init+0x74>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000e28:	4b10      	ldr	r3, [pc, #64]	@ (8000e6c <MX_OCTOSPI1_Init+0x74>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <MX_OCTOSPI1_Init+0x74>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 0;
 8000e34:	4b0d      	ldr	r3, [pc, #52]	@ (8000e6c <MX_OCTOSPI1_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <MX_OCTOSPI1_Init+0x74>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8000e40:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <MX_OCTOSPI1_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000e46:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <MX_OCTOSPI1_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_XSPI_DELAY_BLOCK_BYPASS;
 8000e4c:	4b07      	ldr	r3, [pc, #28]	@ (8000e6c <MX_OCTOSPI1_Init+0x74>)
 8000e4e:	2208      	movs	r2, #8
 8000e50:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.Refresh = 0;
 8000e52:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <MX_OCTOSPI1_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_XSPI_Init(&hospi1) != HAL_OK)
 8000e58:	4804      	ldr	r0, [pc, #16]	@ (8000e6c <MX_OCTOSPI1_Init+0x74>)
 8000e5a:	f009 fcf3 	bl	800a844 <HAL_XSPI_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_OCTOSPI1_Init+0x70>
  {
    Error_Handler();
 8000e64:	f7ff ffb8 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000084 	.word	0x20000084
 8000e70:	47001400 	.word	0x47001400

08000e74 <HAL_XSPI_MspInit>:

void HAL_XSPI_MspInit(XSPI_HandleTypeDef* xspiHandle)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b0d2      	sub	sp, #328	@ 0x148
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000e7e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000e82:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e94:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000e98:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	f011 fde0 	bl	8012a6a <memset>
  if(xspiHandle->Instance==OCTOSPI1)
 8000eaa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000eae:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4ac2      	ldr	r2, [pc, #776]	@ (80011c0 <HAL_XSPI_MspInit+0x34c>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	f040 817c 	bne.w	80011b6 <HAL_XSPI_MspInit+0x342>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000ebe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000ec2:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	f04f 0302 	mov.w	r3, #2
 8000ece:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_HCLK;
 8000ed2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000ed6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000eda:	2200      	movs	r2, #0
 8000edc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f003 fe37 	bl	8004b58 <HAL_RCCEx_PeriphCLKConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <HAL_XSPI_MspInit+0x80>
    {
      Error_Handler();
 8000ef0:	f7ff ff72 	bl	8000dd8 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000ef4:	4bb3      	ldr	r3, [pc, #716]	@ (80011c4 <HAL_XSPI_MspInit+0x350>)
 8000ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000efa:	4ab2      	ldr	r2, [pc, #712]	@ (80011c4 <HAL_XSPI_MspInit+0x350>)
 8000efc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000f00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000f04:	4baf      	ldr	r3, [pc, #700]	@ (80011c4 <HAL_XSPI_MspInit+0x350>)
 8000f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f0a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8000f0e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000f12:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000f1c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000f20:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f22:	4ba8      	ldr	r3, [pc, #672]	@ (80011c4 <HAL_XSPI_MspInit+0x350>)
 8000f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f28:	4aa6      	ldr	r2, [pc, #664]	@ (80011c4 <HAL_XSPI_MspInit+0x350>)
 8000f2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f2e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f32:	4ba4      	ldr	r3, [pc, #656]	@ (80011c4 <HAL_XSPI_MspInit+0x350>)
 8000f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f38:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8000f3c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000f40:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000f4a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000f4e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f50:	4b9c      	ldr	r3, [pc, #624]	@ (80011c4 <HAL_XSPI_MspInit+0x350>)
 8000f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f56:	4a9b      	ldr	r2, [pc, #620]	@ (80011c4 <HAL_XSPI_MspInit+0x350>)
 8000f58:	f043 0320 	orr.w	r3, r3, #32
 8000f5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f60:	4b98      	ldr	r3, [pc, #608]	@ (80011c4 <HAL_XSPI_MspInit+0x350>)
 8000f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f66:	f003 0220 	and.w	r2, r3, #32
 8000f6a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000f6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000f78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000f7c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7e:	4b91      	ldr	r3, [pc, #580]	@ (80011c4 <HAL_XSPI_MspInit+0x350>)
 8000f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f84:	4a8f      	ldr	r2, [pc, #572]	@ (80011c4 <HAL_XSPI_MspInit+0x350>)
 8000f86:	f043 0304 	orr.w	r3, r3, #4
 8000f8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f8e:	4b8d      	ldr	r3, [pc, #564]	@ (80011c4 <HAL_XSPI_MspInit+0x350>)
 8000f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f94:	f003 0204 	and.w	r2, r3, #4
 8000f98:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000f9c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000fa6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000faa:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fac:	4b85      	ldr	r3, [pc, #532]	@ (80011c4 <HAL_XSPI_MspInit+0x350>)
 8000fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fb2:	4a84      	ldr	r2, [pc, #528]	@ (80011c4 <HAL_XSPI_MspInit+0x350>)
 8000fb4:	f043 0308 	orr.w	r3, r3, #8
 8000fb8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fbc:	4b81      	ldr	r3, [pc, #516]	@ (80011c4 <HAL_XSPI_MspInit+0x350>)
 8000fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fc2:	f003 0208 	and.w	r2, r3, #8
 8000fc6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000fca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000fd4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000fd8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	4b7a      	ldr	r3, [pc, #488]	@ (80011c4 <HAL_XSPI_MspInit+0x350>)
 8000fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fe0:	4a78      	ldr	r2, [pc, #480]	@ (80011c4 <HAL_XSPI_MspInit+0x350>)
 8000fe2:	f043 0302 	orr.w	r3, r3, #2
 8000fe6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fea:	4b76      	ldr	r3, [pc, #472]	@ (80011c4 <HAL_XSPI_MspInit+0x350>)
 8000fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ff0:	f003 0202 	and.w	r2, r3, #2
 8000ff4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000ff8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001002:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001006:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001008:	4b6e      	ldr	r3, [pc, #440]	@ (80011c4 <HAL_XSPI_MspInit+0x350>)
 800100a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800100e:	4a6d      	ldr	r2, [pc, #436]	@ (80011c4 <HAL_XSPI_MspInit+0x350>)
 8001010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001014:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001018:	4b6a      	ldr	r3, [pc, #424]	@ (80011c4 <HAL_XSPI_MspInit+0x350>)
 800101a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800101e:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8001022:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001026:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001030:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001034:	681b      	ldr	r3, [r3, #0]
    PB1     ------> OCTOSPI1_IO0
    PH3     ------> OCTOSPI1_IO5
    PB2     ------> OCTOSPI1_DQS
    PH2     ------> OCTOSPI1_IO4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001036:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800103a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 8001050:	2309      	movs	r3, #9
 8001052:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001056:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800105a:	4619      	mov	r1, r3
 800105c:	485a      	ldr	r0, [pc, #360]	@ (80011c8 <HAL_XSPI_MspInit+0x354>)
 800105e:	f002 fc4f 	bl	8003900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001062:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001066:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 800107c:	2309      	movs	r3, #9
 800107e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001082:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001086:	4619      	mov	r1, r3
 8001088:	4850      	ldr	r0, [pc, #320]	@ (80011cc <HAL_XSPI_MspInit+0x358>)
 800108a:	f002 fc39 	bl	8003900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800108e:	2340      	movs	r3, #64	@ 0x40
 8001090:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80010a6:	230a      	movs	r3, #10
 80010a8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ac:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80010b0:	4619      	mov	r1, r3
 80010b2:	4845      	ldr	r0, [pc, #276]	@ (80011c8 <HAL_XSPI_MspInit+0x354>)
 80010b4:	f002 fc24 	bl	8003900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010b8:	2304      	movs	r3, #4
 80010ba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 80010d0:	2309      	movs	r3, #9
 80010d2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d6:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80010da:	4619      	mov	r1, r3
 80010dc:	483c      	ldr	r0, [pc, #240]	@ (80011d0 <HAL_XSPI_MspInit+0x35c>)
 80010de:	f002 fc0f 	bl	8003900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80010e2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80010e6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f6:	2303      	movs	r3, #3
 80010f8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 80010fc:	2309      	movs	r3, #9
 80010fe:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001102:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001106:	4619      	mov	r1, r3
 8001108:	4832      	ldr	r0, [pc, #200]	@ (80011d4 <HAL_XSPI_MspInit+0x360>)
 800110a:	f002 fbf9 	bl	8003900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800110e:	2301      	movs	r3, #1
 8001110:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001126:	230a      	movs	r3, #10
 8001128:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112c:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001130:	4619      	mov	r1, r3
 8001132:	4827      	ldr	r0, [pc, #156]	@ (80011d0 <HAL_XSPI_MspInit+0x35c>)
 8001134:	f002 fbe4 	bl	8003900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001138:	2302      	movs	r3, #2
 800113a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPI1;
 8001150:	2306      	movs	r3, #6
 8001152:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001156:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800115a:	4619      	mov	r1, r3
 800115c:	481e      	ldr	r0, [pc, #120]	@ (80011d8 <HAL_XSPI_MspInit+0x364>)
 800115e:	f002 fbcf 	bl	8003900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8001162:	230c      	movs	r3, #12
 8001164:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 800117a:	2309      	movs	r3, #9
 800117c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001180:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001184:	4619      	mov	r1, r3
 8001186:	4815      	ldr	r0, [pc, #84]	@ (80011dc <HAL_XSPI_MspInit+0x368>)
 8001188:	f002 fbba 	bl	8003900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800118c:	2304      	movs	r3, #4
 800118e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80011a4:	230a      	movs	r3, #10
 80011a6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80011ae:	4619      	mov	r1, r3
 80011b0:	4809      	ldr	r0, [pc, #36]	@ (80011d8 <HAL_XSPI_MspInit+0x364>)
 80011b2:	f002 fba5 	bl	8003900 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 80011b6:	bf00      	nop
 80011b8:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	47001400 	.word	0x47001400
 80011c4:	44020c00 	.word	0x44020c00
 80011c8:	42021800 	.word	0x42021800
 80011cc:	42021400 	.word	0x42021400
 80011d0:	42020800 	.word	0x42020800
 80011d4:	42020c00 	.word	0x42020c00
 80011d8:	42020400 	.word	0x42020400
 80011dc:	42021c00 	.word	0x42021c00

080011e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f2:	bf00      	nop
 80011f4:	e7fd      	b.n	80011f2 <NMI_Handler+0x4>
	...

080011f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_9, GPIO_PIN_SET); // Allume LED d'erreur
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001202:	480a      	ldr	r0, [pc, #40]	@ (800122c <HardFault_Handler+0x34>)
 8001204:	f002 fcda 	bl	8003bbc <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\nCRITICAL: Hard Fault Detected!\r\n", 34, HAL_MAX_DELAY);
 8001208:	f04f 33ff 	mov.w	r3, #4294967295
 800120c:	2222      	movs	r2, #34	@ 0x22
 800120e:	4908      	ldr	r1, [pc, #32]	@ (8001230 <HardFault_Handler+0x38>)
 8001210:	4808      	ldr	r0, [pc, #32]	@ (8001234 <HardFault_Handler+0x3c>)
 8001212:	f008 fd49 	bl	8009ca8 <HAL_UART_Transmit>
    while (1) {
        HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_9); // Fait clignoter la LED d'erreur
 8001216:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800121a:	4804      	ldr	r0, [pc, #16]	@ (800122c <HardFault_Handler+0x34>)
 800121c:	f002 fce6 	bl	8003bec <HAL_GPIO_TogglePin>
        HAL_Delay(100);
 8001220:	2064      	movs	r0, #100	@ 0x64
 8001222:	f002 f969 	bl	80034f8 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_9); // Fait clignoter la LED d'erreur
 8001226:	bf00      	nop
 8001228:	e7f5      	b.n	8001216 <HardFault_Handler+0x1e>
 800122a:	bf00      	nop
 800122c:	42022000 	.word	0x42022000
 8001230:	0801386c 	.word	0x0801386c
 8001234:	200000e4 	.word	0x200000e4

08001238 <MemManage_Handler>:
}
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <MemManage_Handler+0x4>

08001240 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <UsageFault_Handler+0x4>

08001250 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127e:	f002 f91b 	bl	80034b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}

08001286 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  return 1;
 800128a:	2301      	movs	r3, #1
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <_kill>:

int _kill(int pid, int sig)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012a0:	f011 fc62 	bl	8012b68 <__errno>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2216      	movs	r2, #22
 80012a8:	601a      	str	r2, [r3, #0]
  return -1;
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <_exit>:

void _exit (int status)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012be:	f04f 31ff 	mov.w	r1, #4294967295
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffe7 	bl	8001296 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <_exit+0x12>

080012cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	e00a      	b.n	80012f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012de:	f3af 8000 	nop.w
 80012e2:	4601      	mov	r1, r0
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	1c5a      	adds	r2, r3, #1
 80012e8:	60ba      	str	r2, [r7, #8]
 80012ea:	b2ca      	uxtb	r2, r1
 80012ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3301      	adds	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	dbf0      	blt.n	80012de <_read+0x12>
  }

  return len;
 80012fc:	687b      	ldr	r3, [r7, #4]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b086      	sub	sp, #24
 800130a:	af00      	add	r7, sp, #0
 800130c:	60f8      	str	r0, [r7, #12]
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	e009      	b.n	800132c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	60ba      	str	r2, [r7, #8]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3301      	adds	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	429a      	cmp	r2, r3
 8001332:	dbf1      	blt.n	8001318 <_write+0x12>
  }
  return len;
 8001334:	687b      	ldr	r3, [r7, #4]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <_close>:

int _close(int file)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001366:	605a      	str	r2, [r3, #4]
  return 0;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <_isatty>:

int _isatty(int file)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800137e:	2301      	movs	r3, #1
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b0:	4a14      	ldr	r2, [pc, #80]	@ (8001404 <_sbrk+0x5c>)
 80013b2:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <_sbrk+0x60>)
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013bc:	4b13      	ldr	r3, [pc, #76]	@ (800140c <_sbrk+0x64>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <_sbrk+0x64>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	@ (8001410 <_sbrk+0x68>)
 80013c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d207      	bcs.n	80013e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d8:	f011 fbc6 	bl	8012b68 <__errno>
 80013dc:	4603      	mov	r3, r0
 80013de:	220c      	movs	r2, #12
 80013e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	e009      	b.n	80013fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e8:	4b08      	ldr	r3, [pc, #32]	@ (800140c <_sbrk+0x64>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ee:	4b07      	ldr	r3, [pc, #28]	@ (800140c <_sbrk+0x64>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	4a05      	ldr	r2, [pc, #20]	@ (800140c <_sbrk+0x64>)
 80013f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fa:	68fb      	ldr	r3, [r7, #12]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200a0000 	.word	0x200a0000
 8001408:	00000400 	.word	0x00000400
 800140c:	200000e0 	.word	0x200000e0
 8001410:	20000328 	.word	0x20000328

08001414 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001418:	4b22      	ldr	r3, [pc, #136]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 800141a:	4a23      	ldr	r2, [pc, #140]	@ (80014a8 <MX_USART1_UART_Init+0x94>)
 800141c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800141e:	4b21      	ldr	r3, [pc, #132]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 8001420:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001424:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800142c:	4b1d      	ldr	r3, [pc, #116]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001432:	4b1c      	ldr	r3, [pc, #112]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001438:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 800143a:	220c      	movs	r2, #12
 800143c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143e:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001444:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800144a:	4b16      	ldr	r3, [pc, #88]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001450:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001456:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 8001458:	2200      	movs	r2, #0
 800145a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800145c:	4811      	ldr	r0, [pc, #68]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 800145e:	f008 fbd3 	bl	8009c08 <HAL_UART_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001468:	f7ff fcb6 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800146c:	2100      	movs	r1, #0
 800146e:	480d      	ldr	r0, [pc, #52]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 8001470:	f009 f8fe 	bl	800a670 <HAL_UARTEx_SetTxFifoThreshold>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800147a:	f7ff fcad 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800147e:	2100      	movs	r1, #0
 8001480:	4808      	ldr	r0, [pc, #32]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 8001482:	f009 f933 	bl	800a6ec <HAL_UARTEx_SetRxFifoThreshold>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800148c:	f7ff fca4 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001490:	4804      	ldr	r0, [pc, #16]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 8001492:	f009 f8b4 	bl	800a5fe <HAL_UARTEx_DisableFifoMode>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800149c:	f7ff fc9c 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200000e4 	.word	0x200000e4
 80014a8:	40013800 	.word	0x40013800

080014ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b0cc      	sub	sp, #304	@ 0x130
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014ba:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014d0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014d4:	4618      	mov	r0, r3
 80014d6:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80014da:	461a      	mov	r2, r3
 80014dc:	2100      	movs	r1, #0
 80014de:	f011 fac4 	bl	8012a6a <memset>
  if(uartHandle->Instance==USART1)
 80014e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a33      	ldr	r2, [pc, #204]	@ (80015bc <HAL_UART_MspInit+0x110>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d15d      	bne.n	80015b0 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014f8:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80014fc:	f04f 0201 	mov.w	r2, #1
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001508:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800150c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001510:	2200      	movs	r2, #0
 8001512:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4618      	mov	r0, r3
 800151a:	f003 fb1d 	bl	8004b58 <HAL_RCCEx_PeriphCLKConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8001524:	f7ff fc58 	bl	8000dd8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001528:	4b25      	ldr	r3, [pc, #148]	@ (80015c0 <HAL_UART_MspInit+0x114>)
 800152a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800152e:	4a24      	ldr	r2, [pc, #144]	@ (80015c0 <HAL_UART_MspInit+0x114>)
 8001530:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001534:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001538:	4b21      	ldr	r3, [pc, #132]	@ (80015c0 <HAL_UART_MspInit+0x114>)
 800153a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800153e:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001542:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001546:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001550:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001554:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	4b1a      	ldr	r3, [pc, #104]	@ (80015c0 <HAL_UART_MspInit+0x114>)
 8001558:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800155c:	4a18      	ldr	r2, [pc, #96]	@ (80015c0 <HAL_UART_MspInit+0x114>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001566:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <HAL_UART_MspInit+0x114>)
 8001568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800156c:	f003 0201 	and.w	r2, r3, #1
 8001570:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001574:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800157e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001582:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001584:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001588:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800159e:	2307      	movs	r3, #7
 80015a0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80015a8:	4619      	mov	r1, r3
 80015aa:	4806      	ldr	r0, [pc, #24]	@ (80015c4 <HAL_UART_MspInit+0x118>)
 80015ac:	f002 f9a8 	bl	8003900 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80015b0:	bf00      	nop
 80015b2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40013800 	.word	0x40013800
 80015c0:	44020c00 	.word	0x44020c00
 80015c4:	42020000 	.word	0x42020000

080015c8 <xspi_read>:
#include "main.h"

#define START_ADDRESS  0  // Point de départ de la mémoire utile

int xspi_read(const struct lfs_config *c, lfs_block_t block,
              lfs_off_t off, void *buffer, lfs_size_t size) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	603b      	str	r3, [r7, #0]
    uint32_t addr = block * c->block_size + off + START_ADDRESS;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	fb02 f303 	mul.w	r3, r2, r3
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	4413      	add	r3, r2
 80015e4:	617b      	str	r3, [r7, #20]

    if (BSP_OSPI_NOR_Read(0, (uint8_t*)buffer, addr, size) != BSP_ERROR_NONE) {
 80015e6:	6a3b      	ldr	r3, [r7, #32]
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	6839      	ldr	r1, [r7, #0]
 80015ec:	2000      	movs	r0, #0
 80015ee:	f000 ff4f 	bl	8002490 <BSP_OSPI_NOR_Read>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <xspi_read+0x36>
        return -1;
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295
 80015fc:	e000      	b.n	8001600 <xspi_read+0x38>
    }
    return 0;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <xspi_write>:

int xspi_write(const struct lfs_config *c, lfs_block_t block,
               lfs_off_t off, const void *buffer, lfs_size_t size) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	603b      	str	r3, [r7, #0]
    uint32_t addr = block * c->block_size + off + START_ADDRESS;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	4413      	add	r3, r2
 8001624:	617b      	str	r3, [r7, #20]

    if (BSP_OSPI_NOR_Write(0, (uint8_t*)buffer, addr, size) != BSP_ERROR_NONE) {
 8001626:	6a3b      	ldr	r3, [r7, #32]
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	6839      	ldr	r1, [r7, #0]
 800162c:	2000      	movs	r0, #0
 800162e:	f000 ff85 	bl	800253c <BSP_OSPI_NOR_Write>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <xspi_write+0x36>
        return -1;
 8001638:	f04f 33ff 	mov.w	r3, #4294967295
 800163c:	e000      	b.n	8001640 <xspi_write+0x38>
    }
    return 0;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <xspi_erase>:

int xspi_erase(const struct lfs_config *c, lfs_block_t block) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
    uint32_t addr = block * c->block_size + START_ADDRESS;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69da      	ldr	r2, [r3, #28]
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	fb02 f303 	mul.w	r3, r2, r3
 800165c:	60fb      	str	r3, [r7, #12]

    // ✅ Correction : passage du troisième argument (type d'effacement)
    if (BSP_OSPI_NOR_Erase_Block(0, addr, BSP_OSPI_NOR_ERASE_4K) != BSP_ERROR_NONE) {
 800165e:	2200      	movs	r2, #0
 8001660:	68f9      	ldr	r1, [r7, #12]
 8001662:	2000      	movs	r0, #0
 8001664:	f001 f850 	bl	8002708 <BSP_OSPI_NOR_Erase_Block>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d002      	beq.n	8001674 <xspi_erase+0x2c>
        return -1;
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
 8001672:	e003      	b.n	800167c <xspi_erase+0x34>
    }
    HAL_Delay(10);
 8001674:	200a      	movs	r0, #10
 8001676:	f001 ff3f 	bl	80034f8 <HAL_Delay>
    return 0;
 800167a:	2300      	movs	r3, #0

}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <xspi_sync>:

int xspi_sync(const struct lfs_config *c) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
    // ⚠️ Ajoute un délai pour s'assurer que les opérations sont terminées physiquement
    HAL_Delay(10);
 800168c:	200a      	movs	r0, #10
 800168e:	f001 ff33 	bl	80034f8 <HAL_Delay>

    // Optionnel : ajoute une opération de lecture "dummy" pour forcer le vidage du buffer
    uint8_t dummy;
    BSP_OSPI_NOR_Read(0, &dummy, 0, 1);
 8001692:	f107 010f 	add.w	r1, r7, #15
 8001696:	2301      	movs	r3, #1
 8001698:	2200      	movs	r2, #0
 800169a:	2000      	movs	r0, #0
 800169c:	f000 fef8 	bl	8002490 <BSP_OSPI_NOR_Read>

    return 0;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016ac:	480d      	ldr	r0, [pc, #52]	@ (80016e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016b0:	f001 fde8 	bl	8003284 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b4:	480c      	ldr	r0, [pc, #48]	@ (80016e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80016b6:	490d      	ldr	r1, [pc, #52]	@ (80016ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80016b8:	4a0d      	ldr	r2, [pc, #52]	@ (80016f0 <LoopForever+0xe>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016bc:	e002      	b.n	80016c4 <LoopCopyDataInit>

080016be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c2:	3304      	adds	r3, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c8:	d3f9      	bcc.n	80016be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ca:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016cc:	4c0a      	ldr	r4, [pc, #40]	@ (80016f8 <LoopForever+0x16>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d0:	e001      	b.n	80016d6 <LoopFillZerobss>

080016d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d4:	3204      	adds	r2, #4

080016d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d8:	d3fb      	bcc.n	80016d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016da:	f011 fa4b 	bl	8012b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016de:	f7ff f919 	bl	8000914 <main>

080016e2 <LoopForever>:

LoopForever:
    b LoopForever
 80016e2:	e7fe      	b.n	80016e2 <LoopForever>
  ldr   r0, =_estack
 80016e4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80016e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80016f0:	080148bc 	.word	0x080148bc
  ldr r2, =_sbss
 80016f4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80016f8:	20000328 	.word	0x20000328

080016fc <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <ADC1_IRQHandler>

080016fe <MX25LM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800170c:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001714:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE / MX25LM51245G_SECTOR_64K);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800171c:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001724:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE / MX25LM51245G_SUBSECTOR_4K);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800172c:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001734:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE / MX25LM51245G_SUBSECTOR_4K);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800173c:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001744:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE / MX25LM51245G_PAGE_SIZE);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800174c:	621a      	str	r2, [r3, #32]

  return MX25LM51245G_OK;
 800174e:	2300      	movs	r3, #0
};
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <MX25LM51245G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(XSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode,
                                         MX25LM51245G_Transfer_t Rate)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b09c      	sub	sp, #112	@ 0x70
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	70fb      	strb	r3, [r7, #3]
 8001768:	4613      	mov	r3, r2
 800176a:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef  s_command = {0};
 800176c:	f107 0320 	add.w	r3, r7, #32
 8001770:	2250      	movs	r2, #80	@ 0x50
 8001772:	2100      	movs	r1, #0
 8001774:	4618      	mov	r0, r3
 8001776:	f011 f978 	bl	8012a6a <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d105      	bne.n	800179c <MX25LM51245G_AutoPollingMemReady+0x40>
 8001790:	78bb      	ldrb	r3, [r7, #2]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d102      	bne.n	800179c <MX25LM51245G_AutoPollingMemReady+0x40>
  {
    return MX25LM51245G_ERROR;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	e08d      	b.n	80018b8 <MX25LM51245G_AutoPollingMemReady+0x15c>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <MX25LM51245G_AutoPollingMemReady+0x52>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <MX25LM51245G_AutoPollingMemReady+0x54>
 80017ae:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 80017b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80017b2:	78bb      	ldrb	r3, [r7, #2]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d101      	bne.n	80017bc <MX25LM51245G_AutoPollingMemReady+0x60>
 80017b8:	2308      	movs	r3, #8
 80017ba:	e000      	b.n	80017be <MX25LM51245G_AutoPollingMemReady+0x62>
 80017bc:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 80017be:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <MX25LM51245G_AutoPollingMemReady+0x6e>
 80017c6:	2300      	movs	r3, #0
 80017c8:	e000      	b.n	80017cc <MX25LM51245G_AutoPollingMemReady+0x70>
 80017ca:	2310      	movs	r3, #16
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
 80017cc:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? MX25LM51245G_READ_STATUS_REG_CMD
                                 : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <MX25LM51245G_AutoPollingMemReady+0x7c>
 80017d4:	2305      	movs	r3, #5
 80017d6:	e001      	b.n	80017dc <MX25LM51245G_AutoPollingMemReady+0x80>
 80017d8:	f240 53fa 	movw	r3, #1530	@ 0x5fa
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 80017dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <MX25LM51245G_AutoPollingMemReady+0x8c>
 80017e4:	2300      	movs	r3, #0
 80017e6:	e001      	b.n	80017ec <MX25LM51245G_AutoPollingMemReady+0x90>
 80017e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AddressDTRMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 80017ee:	78bb      	ldrb	r3, [r7, #2]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d102      	bne.n	80017fa <MX25LM51245G_AutoPollingMemReady+0x9e>
 80017f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017f8:	e000      	b.n	80017fc <MX25LM51245G_AutoPollingMemReady+0xa0>
 80017fa:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
 80017fc:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 80017fe:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001802:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Address            = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8001808:	2300      	movs	r3, #0
 800180a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 800180c:	78fb      	ldrb	r3, [r7, #3]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d102      	bne.n	8001818 <MX25LM51245G_AutoPollingMemReady+0xbc>
 8001812:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001816:	e001      	b.n	800181c <MX25LM51245G_AutoPollingMemReady+0xc0>
 8001818:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800181c:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DataDTRMode        = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 800181e:	78bb      	ldrb	r3, [r7, #2]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d102      	bne.n	800182a <MX25LM51245G_AutoPollingMemReady+0xce>
 8001824:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001828:	e000      	b.n	800182c <MX25LM51245G_AutoPollingMemReady+0xd0>
 800182a:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25LM51245G_DTR_TRANSFER)
 800182c:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25LM51245G_DTR_TRANSFER)
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d006      	beq.n	8001842 <MX25LM51245G_AutoPollingMemReady+0xe6>
 8001834:	78bb      	ldrb	r3, [r7, #2]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d101      	bne.n	800183e <MX25LM51245G_AutoPollingMemReady+0xe2>
 800183a:	2305      	movs	r3, #5
 800183c:	e002      	b.n	8001844 <MX25LM51245G_AutoPollingMemReady+0xe8>
 800183e:	2304      	movs	r3, #4
 8001840:	e000      	b.n	8001844 <MX25LM51245G_AutoPollingMemReady+0xe8>
 8001842:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE)
 8001844:	667b      	str	r3, [r7, #100]	@ 0x64
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8001846:	78bb      	ldrb	r3, [r7, #2]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <MX25LM51245G_AutoPollingMemReady+0xf4>
 800184c:	2302      	movs	r3, #2
 800184e:	e000      	b.n	8001852 <MX25LM51245G_AutoPollingMemReady+0xf6>
 8001850:	2301      	movs	r3, #1
 8001852:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 8001854:	78bb      	ldrb	r3, [r7, #2]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d102      	bne.n	8001860 <MX25LM51245G_AutoPollingMemReady+0x104>
 800185a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800185e:	e000      	b.n	8001862 <MX25LM51245G_AutoPollingMemReady+0x106>
 8001860:	2300      	movs	r3, #0
 8001862:	66bb      	str	r3, [r7, #104]	@ 0x68
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8001864:	2300      	movs	r3, #0
 8001866:	66fb      	str	r3, [r7, #108]	@ 0x6c

  s_config.MatchValue         = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
  s_config.MatchMask          = MX25LM51245G_SR_WIP;
 800186c:	2301      	movs	r3, #1
 800186e:	613b      	str	r3, [r7, #16]
  s_config.MatchMode          = HAL_XSPI_MATCH_MODE_AND;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  s_config.IntervalTime      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8001874:	2310      	movs	r3, #16
 8001876:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
 8001878:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800187c:	61bb      	str	r3, [r7, #24]

  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800187e:	f107 0320 	add.w	r3, r7, #32
 8001882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001886:	4619      	mov	r1, r3
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f009 f8b3 	bl	800a9f4 <HAL_XSPI_Command>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <MX25LM51245G_AutoPollingMemReady+0x13e>
  {
    return MX25LM51245G_ERROR;
 8001894:	f04f 33ff 	mov.w	r3, #4294967295
 8001898:	e00e      	b.n	80018b8 <MX25LM51245G_AutoPollingMemReady+0x15c>
  }

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a2:	4619      	mov	r1, r3
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f009 fa4b 	bl	800ad40 <HAL_XSPI_AutoPolling>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d002      	beq.n	80018b6 <MX25LM51245G_AutoPollingMemReady+0x15a>
  {
    return MX25LM51245G_ERROR;
 80018b0:	f04f 33ff 	mov.w	r3, #4294967295
 80018b4:	e000      	b.n	80018b8 <MX25LM51245G_AutoPollingMemReady+0x15c>
  }

  return MX25LM51245G_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3770      	adds	r7, #112	@ 0x70
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <MX25LM51245G_ReadSTR>:
  * @param  Size Size of data to read
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_ReadSTR(XSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode,
                             MX25LM51245G_AddressSize_t AddressSize, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b098      	sub	sp, #96	@ 0x60
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	460b      	mov	r3, r1
 80018cc:	72fb      	strb	r3, [r7, #11]
 80018ce:	4613      	mov	r3, r2
 80018d0:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
 80018d2:	f107 0310 	add.w	r3, r7, #16
 80018d6:	2250      	movs	r2, #80	@ 0x50
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f011 f8c5 	bl	8012a6a <memset>

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 80018e0:	7afb      	ldrb	r3, [r7, #11]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d105      	bne.n	80018f2 <MX25LM51245G_ReadSTR+0x32>
 80018e6:	7abb      	ldrb	r3, [r7, #10]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d102      	bne.n	80018f2 <MX25LM51245G_ReadSTR+0x32>
  {
    return MX25LM51245G_ERROR;
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
 80018f0:	e06b      	b.n	80019ca <MX25LM51245G_ReadSTR+0x10a>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 80018fa:	7afb      	ldrb	r3, [r7, #11]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <MX25LM51245G_ReadSTR+0x44>
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <MX25LM51245G_ReadSTR+0x46>
 8001904:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 8001906:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 800190c:	7afb      	ldrb	r3, [r7, #11]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <MX25LM51245G_ReadSTR+0x56>
 8001912:	2300      	movs	r3, #0
 8001914:	e000      	b.n	8001918 <MX25LM51245G_ReadSTR+0x58>
 8001916:	2310      	movs	r3, #16
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
 8001918:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25LM51245G_3BYTES_SIZE)
                                    ? MX25LM51245G_FAST_READ_CMD
                                    : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD)
                                 : MX25LM51245G_OCTA_READ_CMD;
 800191a:	7afb      	ldrb	r3, [r7, #11]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d106      	bne.n	800192e <MX25LM51245G_ReadSTR+0x6e>
 8001920:	7abb      	ldrb	r3, [r7, #10]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <MX25LM51245G_ReadSTR+0x6a>
 8001926:	230b      	movs	r3, #11
 8001928:	e003      	b.n	8001932 <MX25LM51245G_ReadSTR+0x72>
 800192a:	230c      	movs	r3, #12
 800192c:	e001      	b.n	8001932 <MX25LM51245G_ReadSTR+0x72>
 800192e:	f64e 4313 	movw	r3, #60435	@ 0xec13
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 8001932:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_ADDRESS_1_LINE
                                 : HAL_XSPI_ADDRESS_8_LINES;
 8001934:	7afb      	ldrb	r3, [r7, #11]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d102      	bne.n	8001940 <MX25LM51245G_ReadSTR+0x80>
 800193a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800193e:	e001      	b.n	8001944 <MX25LM51245G_ReadSTR+0x84>
 8001940:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE)
 8001944:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressWidth        = (AddressSize == MX25LM51245G_3BYTES_SIZE)
                                 ? HAL_XSPI_ADDRESS_24_BITS
                                 : HAL_XSPI_ADDRESS_32_BITS;
 800194a:	7abb      	ldrb	r3, [r7, #10]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <MX25LM51245G_ReadSTR+0x96>
 8001950:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001954:	e001      	b.n	800195a <MX25LM51245G_ReadSTR+0x9a>
 8001956:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.AddressWidth        = (AddressSize == MX25LM51245G_3BYTES_SIZE)
 800195a:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = ReadAddr;
 800195c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800195e:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8001960:	2300      	movs	r3, #0
 8001962:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8001964:	7afb      	ldrb	r3, [r7, #11]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d102      	bne.n	8001970 <MX25LM51245G_ReadSTR+0xb0>
 800196a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800196e:	e001      	b.n	8001974 <MX25LM51245G_ReadSTR+0xb4>
 8001970:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001974:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_DISABLE;
 8001976:	2300      	movs	r3, #0
 8001978:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 800197a:	7afb      	ldrb	r3, [r7, #11]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <MX25LM51245G_ReadSTR+0xc4>
 8001980:	2308      	movs	r3, #8
 8001982:	e000      	b.n	8001986 <MX25LM51245G_ReadSTR+0xc6>
 8001984:	2306      	movs	r3, #6
 8001986:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength             = Size;
 8001988:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800198a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8001990:	2300      	movs	r3, #0
 8001992:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001994:	f107 0310 	add.w	r3, r7, #16
 8001998:	f241 3288 	movw	r2, #5000	@ 0x1388
 800199c:	4619      	mov	r1, r3
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f009 f828 	bl	800a9f4 <HAL_XSPI_Command>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <MX25LM51245G_ReadSTR+0xf0>
  {
    return MX25LM51245G_ERROR;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	e00c      	b.n	80019ca <MX25LM51245G_ReadSTR+0x10a>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, pData, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80019b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f009 f91f 	bl	800abfa <HAL_XSPI_Receive>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <MX25LM51245G_ReadSTR+0x108>
  {
    return MX25LM51245G_ERROR;
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295
 80019c6:	e000      	b.n	80019ca <MX25LM51245G_ReadSTR+0x10a>
  }

  return MX25LM51245G_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3760      	adds	r7, #96	@ 0x60
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <MX25LM51245G_ReadDTR>:
  * @param  Size Size of data to read
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_ReadDTR(XSPI_HandleTypeDef *Ctx, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b098      	sub	sp, #96	@ 0x60
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	603b      	str	r3, [r7, #0]
  XSPI_RegularCmdTypeDef s_command = {0};
 80019e0:	f107 0310 	add.w	r3, r7, #16
 80019e4:	2250      	movs	r2, #80	@ 0x50
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f011 f83e 	bl	8012a6a <memset>

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 80019f6:	2304      	movs	r3, #4
 80019f8:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
 80019fa:	2308      	movs	r3, #8
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionWidth    = HAL_XSPI_INSTRUCTION_16_BITS;
 80019fe:	2310      	movs	r3, #16
 8001a00:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8001a02:	f64e 6311 	movw	r3, #60945	@ 0xee11
 8001a06:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 8001a08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8001a0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a12:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 8001a14:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a18:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = ReadAddr;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
 8001a22:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001a26:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
 8001a28:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001a2c:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8001a2e:	2306      	movs	r3, #6
 8001a30:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength             = Size;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
 8001a36:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001a3a:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a40:	f107 0310 	add.w	r3, r7, #16
 8001a44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a48:	4619      	mov	r1, r3
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f008 ffd2 	bl	800a9f4 <HAL_XSPI_Command>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d002      	beq.n	8001a5c <MX25LM51245G_ReadDTR+0x8a>
  {
    return MX25LM51245G_ERROR;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	e00c      	b.n	8001a76 <MX25LM51245G_ReadDTR+0xa4>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, pData, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f009 f8c9 	bl	800abfa <HAL_XSPI_Receive>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <MX25LM51245G_ReadDTR+0xa2>
  {
    return MX25LM51245G_ERROR;
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a72:	e000      	b.n	8001a76 <MX25LM51245G_ReadDTR+0xa4>
  }

  return MX25LM51245G_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3760      	adds	r7, #96	@ 0x60
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <MX25LM51245G_PageProgram>:
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_PageProgram(XSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode,
                                 MX25LM51245G_AddressSize_t AddressSize, uint8_t *pData, uint32_t WriteAddr,
                                 uint32_t Size)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b098      	sub	sp, #96	@ 0x60
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	72fb      	strb	r3, [r7, #11]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
 8001a90:	f107 0310 	add.w	r3, r7, #16
 8001a94:	2250      	movs	r2, #80	@ 0x50
 8001a96:	2100      	movs	r1, #0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f010 ffe6 	bl	8012a6a <memset>

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8001a9e:	7afb      	ldrb	r3, [r7, #11]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d105      	bne.n	8001ab0 <MX25LM51245G_PageProgram+0x32>
 8001aa4:	7abb      	ldrb	r3, [r7, #10]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <MX25LM51245G_PageProgram+0x32>
  {
    return MX25LM51245G_ERROR;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	e066      	b.n	8001b7e <MX25LM51245G_PageProgram+0x100>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8001ab8:	7afb      	ldrb	r3, [r7, #11]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <MX25LM51245G_PageProgram+0x44>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <MX25LM51245G_PageProgram+0x46>
 8001ac2:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 8001ac4:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8001aca:	7afb      	ldrb	r3, [r7, #11]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <MX25LM51245G_PageProgram+0x56>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	e000      	b.n	8001ad6 <MX25LM51245G_PageProgram+0x58>
 8001ad4:	2310      	movs	r3, #16
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
 8001ad6:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25LM51245G_3BYTES_SIZE)
                                    ? MX25LM51245G_PAGE_PROG_CMD
                                    : MX25LM51245G_4_BYTE_PAGE_PROG_CMD)
                                 : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8001ad8:	7afb      	ldrb	r3, [r7, #11]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <MX25LM51245G_PageProgram+0x6e>
 8001ade:	7abb      	ldrb	r3, [r7, #10]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <MX25LM51245G_PageProgram+0x6a>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e003      	b.n	8001af0 <MX25LM51245G_PageProgram+0x72>
 8001ae8:	2312      	movs	r3, #18
 8001aea:	e001      	b.n	8001af0 <MX25LM51245G_PageProgram+0x72>
 8001aec:	f241 23ed 	movw	r3, #4845	@ 0x12ed
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 8001af0:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_ADDRESS_1_LINE
                                 : HAL_XSPI_ADDRESS_8_LINES;
 8001af2:	7afb      	ldrb	r3, [r7, #11]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <MX25LM51245G_PageProgram+0x80>
 8001af8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001afc:	e001      	b.n	8001b02 <MX25LM51245G_PageProgram+0x84>
 8001afe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE)
 8001b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressWidth        = (AddressSize == MX25LM51245G_3BYTES_SIZE)
                                 ? HAL_XSPI_ADDRESS_24_BITS
                                 : HAL_XSPI_ADDRESS_32_BITS;
 8001b08:	7abb      	ldrb	r3, [r7, #10]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d102      	bne.n	8001b14 <MX25LM51245G_PageProgram+0x96>
 8001b0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b12:	e001      	b.n	8001b18 <MX25LM51245G_PageProgram+0x9a>
 8001b14:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.AddressWidth        = (AddressSize == MX25LM51245G_3BYTES_SIZE)
 8001b18:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = WriteAddr;
 8001b1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8001b22:	7afb      	ldrb	r3, [r7, #11]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d102      	bne.n	8001b2e <MX25LM51245G_PageProgram+0xb0>
 8001b28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b2c:	e001      	b.n	8001b32 <MX25LM51245G_PageProgram+0xb4>
 8001b2e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001b32:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength             = Size;
 8001b3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8001b44:	2300      	movs	r3, #0
 8001b46:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b50:	4619      	mov	r1, r3
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f008 ff4e 	bl	800a9f4 <HAL_XSPI_Command>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <MX25LM51245G_PageProgram+0xe6>
  {
    return MX25LM51245G_ERROR;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	e00c      	b.n	8001b7e <MX25LM51245G_PageProgram+0x100>
  }

  /* Transmission of the data */
  if (HAL_XSPI_Transmit(Ctx, pData, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f008 ffd2 	bl	800ab14 <HAL_XSPI_Transmit>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <MX25LM51245G_PageProgram+0xfe>
  {
    return MX25LM51245G_ERROR;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7a:	e000      	b.n	8001b7e <MX25LM51245G_PageProgram+0x100>
  }

  return MX25LM51245G_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3760      	adds	r7, #96	@ 0x60
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <MX25LM51245G_PageProgramDTR>:
  * @param  Size Size of data to write. Range 1 ~ MX25LM51245G_PAGE_SIZE
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_PageProgramDTR(XSPI_HandleTypeDef *Ctx, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b098      	sub	sp, #96	@ 0x60
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	603b      	str	r3, [r7, #0]
  XSPI_RegularCmdTypeDef s_command = {0};
 8001b94:	f107 0310 	add.w	r3, r7, #16
 8001b98:	2250      	movs	r2, #80	@ 0x50
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f010 ff64 	bl	8012a6a <memset>

  /* Initialize the program command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 8001baa:	2304      	movs	r3, #4
 8001bac:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
 8001bae:	2308      	movs	r3, #8
 8001bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionWidth    = HAL_XSPI_INSTRUCTION_16_BITS;
 8001bb2:	2310      	movs	r3, #16
 8001bb4:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8001bb6:	f241 23ed 	movw	r3, #4845	@ 0x12ed
 8001bba:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 8001bbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8001bc2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001bc6:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 8001bc8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001bcc:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = WriteAddr;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
 8001bd6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001bda:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
 8001bdc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001be0:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = 0U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength             = Size;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001bf2:	f107 0310 	add.w	r3, r7, #16
 8001bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f008 fef9 	bl	800a9f4 <HAL_XSPI_Command>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <MX25LM51245G_PageProgramDTR+0x88>
  {
    return MX25LM51245G_ERROR;
 8001c08:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0c:	e00c      	b.n	8001c28 <MX25LM51245G_PageProgramDTR+0xa2>
  }

  /* Transmission of the data */
  if (HAL_XSPI_Transmit(Ctx, pData, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c12:	68b9      	ldr	r1, [r7, #8]
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f008 ff7d 	bl	800ab14 <HAL_XSPI_Transmit>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <MX25LM51245G_PageProgramDTR+0xa0>
  {
    return MX25LM51245G_ERROR;
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295
 8001c24:	e000      	b.n	8001c28 <MX25LM51245G_PageProgramDTR+0xa2>
  }

  return MX25LM51245G_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3760      	adds	r7, #96	@ 0x60
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <MX25LM51245G_BlockErase>:
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_BlockErase(XSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate,
                                MX25LM51245G_AddressSize_t AddressSize, uint32_t BlockAddress,
                                MX25LM51245G_Erase_t BlockSize)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b096      	sub	sp, #88	@ 0x58
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	4608      	mov	r0, r1
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4603      	mov	r3, r0
 8001c40:	70fb      	strb	r3, [r7, #3]
 8001c42:	460b      	mov	r3, r1
 8001c44:	70bb      	strb	r3, [r7, #2]
 8001c46:	4613      	mov	r3, r2
 8001c48:	707b      	strb	r3, [r7, #1]
  XSPI_RegularCmdTypeDef s_command = {0};
 8001c4a:	f107 0308 	add.w	r3, r7, #8
 8001c4e:	2250      	movs	r2, #80	@ 0x50
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f010 ff09 	bl	8012a6a <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d105      	bne.n	8001c6a <MX25LM51245G_BlockErase+0x3a>
 8001c5e:	78bb      	ldrb	r3, [r7, #2]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d102      	bne.n	8001c6a <MX25LM51245G_BlockErase+0x3a>
  {
    return MX25LM51245G_ERROR;
 8001c64:	f04f 33ff 	mov.w	r3, #4294967295
 8001c68:	e079      	b.n	8001d5e <MX25LM51245G_BlockErase+0x12e>
  }

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d105      	bne.n	8001c7c <MX25LM51245G_BlockErase+0x4c>
 8001c70:	787b      	ldrb	r3, [r7, #1]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d102      	bne.n	8001c7c <MX25LM51245G_BlockErase+0x4c>
  {
    return MX25LM51245G_ERROR;
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7a:	e070      	b.n	8001d5e <MX25LM51245G_BlockErase+0x12e>
  }

  /* Initialize the erase command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8001c84:	78fb      	ldrb	r3, [r7, #3]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <MX25LM51245G_BlockErase+0x5e>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <MX25LM51245G_BlockErase+0x60>
 8001c8e:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 8001c90:	617b      	str	r3, [r7, #20]
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8001c92:	78bb      	ldrb	r3, [r7, #2]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <MX25LM51245G_BlockErase+0x6c>
 8001c98:	2308      	movs	r3, #8
 8001c9a:	e000      	b.n	8001c9e <MX25LM51245G_BlockErase+0x6e>
 8001c9c:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 8001c9e:	61fb      	str	r3, [r7, #28]
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <MX25LM51245G_BlockErase+0x7a>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e000      	b.n	8001cac <MX25LM51245G_BlockErase+0x7c>
 8001caa:	2310      	movs	r3, #16
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
 8001cac:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d102      	bne.n	8001cba <MX25LM51245G_BlockErase+0x8a>
 8001cb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cb8:	e001      	b.n	8001cbe <MX25LM51245G_BlockErase+0x8e>
 8001cba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressDTRMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 8001cc0:	78bb      	ldrb	r3, [r7, #2]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d102      	bne.n	8001ccc <MX25LM51245G_BlockErase+0x9c>
 8001cc6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001cca:	e000      	b.n	8001cce <MX25LM51245G_BlockErase+0x9e>
 8001ccc:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
 8001cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressWidth        = (AddressSize == MX25LM51245G_3BYTES_SIZE)
                                 ? HAL_XSPI_ADDRESS_24_BITS
                                 : HAL_XSPI_ADDRESS_32_BITS;
 8001cd0:	787b      	ldrb	r3, [r7, #1]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d102      	bne.n	8001cdc <MX25LM51245G_BlockErase+0xac>
 8001cd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cda:	e001      	b.n	8001ce0 <MX25LM51245G_BlockErase+0xb0>
 8001cdc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.AddressWidth        = (AddressSize == MX25LM51245G_3BYTES_SIZE)
 8001ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.Address            = BlockAddress;
 8001ce2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ce4:	623b      	str	r3, [r7, #32]
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DummyCycles        = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	657b      	str	r3, [r7, #84]	@ 0x54

  switch (Mode)
 8001cfa:	78fb      	ldrb	r3, [r7, #3]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d10b      	bne.n	8001d18 <MX25LM51245G_BlockErase+0xe8>
  {
    case MX25LM51245G_OPI_MODE :
      if (BlockSize == MX25LM51245G_ERASE_64K)
 8001d00:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d103      	bne.n	8001d10 <MX25LM51245G_BlockErase+0xe0>
      {
        s_command.Instruction = MX25LM51245G_OCTA_SECTOR_ERASE_64K_CMD;
 8001d08:	f64d 4323 	movw	r3, #56355	@ 0xdc23
 8001d0c:	613b      	str	r3, [r7, #16]
      }
      else
      {
        s_command.Instruction = MX25LM51245G_OCTA_SUBSECTOR_ERASE_4K_CMD;
      }
      break;
 8001d0e:	e017      	b.n	8001d40 <MX25LM51245G_BlockErase+0x110>
        s_command.Instruction = MX25LM51245G_OCTA_SUBSECTOR_ERASE_4K_CMD;
 8001d10:	f242 13de 	movw	r3, #8670	@ 0x21de
 8001d14:	613b      	str	r3, [r7, #16]
      break;
 8001d16:	e013      	b.n	8001d40 <MX25LM51245G_BlockErase+0x110>

    case MX25LM51245G_SPI_MODE :
    default:
      if (BlockSize == MX25LM51245G_ERASE_64K)
 8001d18:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d107      	bne.n	8001d30 <MX25LM51245G_BlockErase+0x100>
      {
        s_command.Instruction = (AddressSize == MX25LM51245G_3BYTES_SIZE)
                                ? MX25LM51245G_SECTOR_ERASE_64K_CMD
                                : MX25LM51245G_4_BYTE_SECTOR_ERASE_64K_CMD;
 8001d20:	787b      	ldrb	r3, [r7, #1]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <MX25LM51245G_BlockErase+0xfa>
 8001d26:	23d8      	movs	r3, #216	@ 0xd8
 8001d28:	e000      	b.n	8001d2c <MX25LM51245G_BlockErase+0xfc>
 8001d2a:	23dc      	movs	r3, #220	@ 0xdc
        s_command.Instruction = (AddressSize == MX25LM51245G_3BYTES_SIZE)
 8001d2c:	613b      	str	r3, [r7, #16]
      {
        s_command.Instruction = (AddressSize == MX25LM51245G_3BYTES_SIZE)
                                ? MX25LM51245G_SUBSECTOR_ERASE_4K_CMD
                                : MX25LM51245G_4_BYTE_SUBSECTOR_ERASE_4K_CMD;
      }
      break;
 8001d2e:	e006      	b.n	8001d3e <MX25LM51245G_BlockErase+0x10e>
                                : MX25LM51245G_4_BYTE_SUBSECTOR_ERASE_4K_CMD;
 8001d30:	787b      	ldrb	r3, [r7, #1]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <MX25LM51245G_BlockErase+0x10a>
 8001d36:	2320      	movs	r3, #32
 8001d38:	e000      	b.n	8001d3c <MX25LM51245G_BlockErase+0x10c>
 8001d3a:	2321      	movs	r3, #33	@ 0x21
        s_command.Instruction = (AddressSize == MX25LM51245G_3BYTES_SIZE)
 8001d3c:	613b      	str	r3, [r7, #16]
      break;
 8001d3e:	bf00      	nop
  }

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d40:	f107 0308 	add.w	r3, r7, #8
 8001d44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d48:	4619      	mov	r1, r3
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f008 fe52 	bl	800a9f4 <HAL_XSPI_Command>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <MX25LM51245G_BlockErase+0x12c>
  {
    return MX25LM51245G_ERROR;
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5a:	e000      	b.n	8001d5e <MX25LM51245G_BlockErase+0x12e>
  }

  return MX25LM51245G_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3758      	adds	r7, #88	@ 0x58
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(XSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b09c      	sub	sp, #112	@ 0x70
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	70fb      	strb	r3, [r7, #3]
 8001d72:	4613      	mov	r3, r2
 8001d74:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef     s_command = {0};
 8001d76:	f107 0320 	add.w	r3, r7, #32
 8001d7a:	2250      	movs	r2, #80	@ 0x50
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f010 fe73 	bl	8012a6a <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
 8001d84:	f107 030c 	add.w	r3, r7, #12
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d105      	bne.n	8001da6 <MX25LM51245G_WriteEnable+0x40>
 8001d9a:	78bb      	ldrb	r3, [r7, #2]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d102      	bne.n	8001da6 <MX25LM51245G_WriteEnable+0x40>
  {
    return MX25LM51245G_ERROR;
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295
 8001da4:	e0ab      	b.n	8001efe <MX25LM51245G_WriteEnable+0x198>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <MX25LM51245G_WriteEnable+0x52>
 8001db4:	2301      	movs	r3, #1
 8001db6:	e000      	b.n	8001dba <MX25LM51245G_WriteEnable+0x54>
 8001db8:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 8001dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8001dbc:	78bb      	ldrb	r3, [r7, #2]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <MX25LM51245G_WriteEnable+0x60>
 8001dc2:	2308      	movs	r3, #8
 8001dc4:	e000      	b.n	8001dc8 <MX25LM51245G_WriteEnable+0x62>
 8001dc6:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 8001dc8:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <MX25LM51245G_WriteEnable+0x6e>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	e000      	b.n	8001dd6 <MX25LM51245G_WriteEnable+0x70>
 8001dd4:	2310      	movs	r3, #16
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
 8001dd6:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? MX25LM51245G_WRITE_ENABLE_CMD
                                 : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <MX25LM51245G_WriteEnable+0x7c>
 8001dde:	2306      	movs	r3, #6
 8001de0:	e001      	b.n	8001de6 <MX25LM51245G_WriteEnable+0x80>
 8001de2:	f240 63f9 	movw	r3, #1785	@ 0x6f9
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 8001de6:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DummyCycles        = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	66bb      	str	r3, [r7, #104]	@ 0x68
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e00:	f107 0320 	add.w	r3, r7, #32
 8001e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e08:	4619      	mov	r1, r3
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f008 fdf2 	bl	800a9f4 <HAL_XSPI_Command>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d002      	beq.n	8001e1c <MX25LM51245G_WriteEnable+0xb6>
  {
    return MX25LM51245G_ERROR;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1a:	e070      	b.n	8001efe <MX25LM51245G_WriteEnable+0x198>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE)
                             ? MX25LM51245G_READ_STATUS_REG_CMD
                             : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <MX25LM51245G_WriteEnable+0xc0>
 8001e22:	2305      	movs	r3, #5
 8001e24:	e001      	b.n	8001e2a <MX25LM51245G_WriteEnable+0xc4>
 8001e26:	f240 53fa 	movw	r3, #1530	@ 0x5fa
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE)
 8001e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <MX25LM51245G_WriteEnable+0xd0>
 8001e32:	2300      	movs	r3, #0
 8001e34:	e001      	b.n	8001e3a <MX25LM51245G_WriteEnable+0xd4>
 8001e36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AddressDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                             ? HAL_XSPI_ADDRESS_DTR_ENABLE
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
 8001e3c:	78bb      	ldrb	r3, [r7, #2]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d102      	bne.n	8001e48 <MX25LM51245G_WriteEnable+0xe2>
 8001e42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e46:	e000      	b.n	8001e4a <MX25LM51245G_WriteEnable+0xe4>
 8001e48:	2300      	movs	r3, #0
  s_command.AddressDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 8001e4a:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AddressWidth    = HAL_XSPI_ADDRESS_32_BITS;
 8001e4c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001e50:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Address        = 0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8001e56:	78fb      	ldrb	r3, [r7, #3]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <MX25LM51245G_WriteEnable+0xfc>
 8001e5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e60:	e001      	b.n	8001e66 <MX25LM51245G_WriteEnable+0x100>
 8001e62:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001e66:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DataDTRMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
 8001e68:	78bb      	ldrb	r3, [r7, #2]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d102      	bne.n	8001e74 <MX25LM51245G_WriteEnable+0x10e>
 8001e6e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001e72:	e000      	b.n	8001e76 <MX25LM51245G_WriteEnable+0x110>
 8001e74:	2300      	movs	r3, #0
 8001e76:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE)
                             ? 0U
                             : ((Rate == MX25LM51245G_DTR_TRANSFER)
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d006      	beq.n	8001e8c <MX25LM51245G_WriteEnable+0x126>
 8001e7e:	78bb      	ldrb	r3, [r7, #2]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <MX25LM51245G_WriteEnable+0x122>
 8001e84:	2305      	movs	r3, #5
 8001e86:	e002      	b.n	8001e8e <MX25LM51245G_WriteEnable+0x128>
 8001e88:	2304      	movs	r3, #4
 8001e8a:	e000      	b.n	8001e8e <MX25LM51245G_WriteEnable+0x128>
 8001e8c:	2300      	movs	r3, #0
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE)
 8001e8e:	667b      	str	r3, [r7, #100]	@ 0x64
                                ? DUMMY_CYCLES_REG_OCTAL_DTR
                                : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8001e90:	78bb      	ldrb	r3, [r7, #2]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <MX25LM51245G_WriteEnable+0x134>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e000      	b.n	8001e9c <MX25LM51245G_WriteEnable+0x136>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 8001e9e:	78bb      	ldrb	r3, [r7, #2]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d102      	bne.n	8001eaa <MX25LM51245G_WriteEnable+0x144>
 8001ea4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001ea8:	e000      	b.n	8001eac <MX25LM51245G_WriteEnable+0x146>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001eae:	f107 0320 	add.w	r3, r7, #32
 8001eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f008 fd9b 	bl	800a9f4 <HAL_XSPI_Command>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <MX25LM51245G_WriteEnable+0x164>
  {
    return MX25LM51245G_ERROR;
 8001ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec8:	e019      	b.n	8001efe <MX25LM51245G_WriteEnable+0x198>
  }

  s_config.MatchValue           = 2U;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	60fb      	str	r3, [r7, #12]
  s_config.MatchMask            = 2U;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_XSPI_MATCH_MODE_AND;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
  s_config.IntervalTime        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8001ed6:	2310      	movs	r3, #16
 8001ed8:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
 8001eda:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ede:	61bb      	str	r3, [r7, #24]

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ee8:	4619      	mov	r1, r3
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f008 ff28 	bl	800ad40 <HAL_XSPI_AutoPolling>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <MX25LM51245G_WriteEnable+0x196>
  {
    return MX25LM51245G_ERROR;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8001efa:	e000      	b.n	8001efe <MX25LM51245G_WriteEnable+0x198>
  }

  return MX25LM51245G_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3770      	adds	r7, #112	@ 0x70
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <MX25LM51245G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(XSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode,
                                       MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b098      	sub	sp, #96	@ 0x60
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	72fb      	strb	r3, [r7, #11]
 8001f14:	4613      	mov	r3, r2
 8001f16:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
 8001f18:	f107 0310 	add.w	r3, r7, #16
 8001f1c:	2250      	movs	r2, #80	@ 0x50
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f010 fda2 	bl	8012a6a <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8001f26:	7afb      	ldrb	r3, [r7, #11]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d105      	bne.n	8001f38 <MX25LM51245G_WriteCfg2Register+0x32>
 8001f2c:	7abb      	ldrb	r3, [r7, #10]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d102      	bne.n	8001f38 <MX25LM51245G_WriteCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295
 8001f36:	e077      	b.n	8002028 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8001f40:	7afb      	ldrb	r3, [r7, #11]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <MX25LM51245G_WriteCfg2Register+0x44>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <MX25LM51245G_WriteCfg2Register+0x46>
 8001f4a:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 8001f4c:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8001f4e:	7abb      	ldrb	r3, [r7, #10]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <MX25LM51245G_WriteCfg2Register+0x52>
 8001f54:	2308      	movs	r3, #8
 8001f56:	e000      	b.n	8001f5a <MX25LM51245G_WriteCfg2Register+0x54>
 8001f58:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 8001f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8001f5c:	7afb      	ldrb	r3, [r7, #11]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <MX25LM51245G_WriteCfg2Register+0x60>
 8001f62:	2300      	movs	r3, #0
 8001f64:	e000      	b.n	8001f68 <MX25LM51245G_WriteCfg2Register+0x62>
 8001f66:	2310      	movs	r3, #16
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
 8001f68:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? MX25LM51245G_WRITE_CFG_REG2_CMD
                                 : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8001f6a:	7afb      	ldrb	r3, [r7, #11]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <MX25LM51245G_WriteCfg2Register+0x6e>
 8001f70:	2372      	movs	r3, #114	@ 0x72
 8001f72:	e001      	b.n	8001f78 <MX25LM51245G_WriteCfg2Register+0x72>
 8001f74:	f247 238d 	movw	r3, #29325	@ 0x728d
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 8001f78:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 8001f7a:	7afb      	ldrb	r3, [r7, #11]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d102      	bne.n	8001f86 <MX25LM51245G_WriteCfg2Register+0x80>
 8001f80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f84:	e001      	b.n	8001f8a <MX25LM51245G_WriteCfg2Register+0x84>
 8001f86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDTRMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 8001f8c:	7abb      	ldrb	r3, [r7, #10]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d102      	bne.n	8001f98 <MX25LM51245G_WriteCfg2Register+0x92>
 8001f92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f96:	e000      	b.n	8001f9a <MX25LM51245G_WriteCfg2Register+0x94>
 8001f98:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
 8001f9a:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 8001f9c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001fa0:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = WriteAddr;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8001faa:	7afb      	ldrb	r3, [r7, #11]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d102      	bne.n	8001fb6 <MX25LM51245G_WriteCfg2Register+0xb0>
 8001fb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fb4:	e001      	b.n	8001fba <MX25LM51245G_WriteCfg2Register+0xb4>
 8001fb6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001fba:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDTRMode        = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 8001fbc:	7abb      	ldrb	r3, [r7, #10]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d102      	bne.n	8001fc8 <MX25LM51245G_WriteCfg2Register+0xc2>
 8001fc2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001fc6:	e000      	b.n	8001fca <MX25LM51245G_WriteCfg2Register+0xc4>
 8001fc8:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25LM51245G_DTR_TRANSFER)
 8001fca:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8001fd0:	7afb      	ldrb	r3, [r7, #11]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <MX25LM51245G_WriteCfg2Register+0xde>
 8001fd6:	7abb      	ldrb	r3, [r7, #10]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <MX25LM51245G_WriteCfg2Register+0xda>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e002      	b.n	8001fe6 <MX25LM51245G_WriteCfg2Register+0xe0>
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e000      	b.n	8001fe6 <MX25LM51245G_WriteCfg2Register+0xe0>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8001fec:	2300      	movs	r3, #0
 8001fee:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ff0:	f107 0310 	add.w	r3, r7, #16
 8001ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f008 fcfa 	bl	800a9f4 <HAL_XSPI_Command>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <MX25LM51245G_WriteCfg2Register+0x106>
  {
    return MX25LM51245G_ERROR;
 8002006:	f04f 33ff 	mov.w	r3, #4294967295
 800200a:	e00d      	b.n	8002028 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_XSPI_Transmit(Ctx, &Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800200c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002010:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f008 fd7d 	bl	800ab14 <HAL_XSPI_Transmit>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d002      	beq.n	8002026 <MX25LM51245G_WriteCfg2Register+0x120>
  {
    return MX25LM51245G_ERROR;
 8002020:	f04f 33ff 	mov.w	r3, #4294967295
 8002024:	e000      	b.n	8002028 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  return MX25LM51245G_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3760      	adds	r7, #96	@ 0x60
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <MX25LM51245G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(XSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode,
                                      MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b098      	sub	sp, #96	@ 0x60
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	460b      	mov	r3, r1
 800203c:	72fb      	strb	r3, [r7, #11]
 800203e:	4613      	mov	r3, r2
 8002040:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
 8002042:	f107 0310 	add.w	r3, r7, #16
 8002046:	2250      	movs	r2, #80	@ 0x50
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f010 fd0d 	bl	8012a6a <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8002050:	7afb      	ldrb	r3, [r7, #11]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d105      	bne.n	8002062 <MX25LM51245G_ReadCfg2Register+0x32>
 8002056:	7abb      	ldrb	r3, [r7, #10]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d102      	bne.n	8002062 <MX25LM51245G_ReadCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 800205c:	f04f 33ff 	mov.w	r3, #4294967295
 8002060:	e081      	b.n	8002166 <MX25LM51245G_ReadCfg2Register+0x136>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 800206a:	7afb      	ldrb	r3, [r7, #11]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <MX25LM51245G_ReadCfg2Register+0x44>
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <MX25LM51245G_ReadCfg2Register+0x46>
 8002074:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 8002076:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8002078:	7abb      	ldrb	r3, [r7, #10]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d101      	bne.n	8002082 <MX25LM51245G_ReadCfg2Register+0x52>
 800207e:	2308      	movs	r3, #8
 8002080:	e000      	b.n	8002084 <MX25LM51245G_ReadCfg2Register+0x54>
 8002082:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 8002084:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8002086:	7afb      	ldrb	r3, [r7, #11]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <MX25LM51245G_ReadCfg2Register+0x60>
 800208c:	2300      	movs	r3, #0
 800208e:	e000      	b.n	8002092 <MX25LM51245G_ReadCfg2Register+0x62>
 8002090:	2310      	movs	r3, #16
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
 8002092:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? MX25LM51245G_READ_CFG_REG2_CMD
                                 : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 8002094:	7afb      	ldrb	r3, [r7, #11]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <MX25LM51245G_ReadCfg2Register+0x6e>
 800209a:	2371      	movs	r3, #113	@ 0x71
 800209c:	e001      	b.n	80020a2 <MX25LM51245G_ReadCfg2Register+0x72>
 800209e:	f247 138e 	movw	r3, #29070	@ 0x718e
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 80020a2:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 80020a4:	7afb      	ldrb	r3, [r7, #11]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d102      	bne.n	80020b0 <MX25LM51245G_ReadCfg2Register+0x80>
 80020aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020ae:	e001      	b.n	80020b4 <MX25LM51245G_ReadCfg2Register+0x84>
 80020b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDTRMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 80020b6:	7abb      	ldrb	r3, [r7, #10]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d102      	bne.n	80020c2 <MX25LM51245G_ReadCfg2Register+0x92>
 80020bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020c0:	e000      	b.n	80020c4 <MX25LM51245G_ReadCfg2Register+0x94>
 80020c2:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
 80020c4:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 80020c6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80020ca:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = ReadAddr;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 80020d4:	7afb      	ldrb	r3, [r7, #11]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d102      	bne.n	80020e0 <MX25LM51245G_ReadCfg2Register+0xb0>
 80020da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020de:	e001      	b.n	80020e4 <MX25LM51245G_ReadCfg2Register+0xb4>
 80020e0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80020e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDTRMode        = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 80020e6:	7abb      	ldrb	r3, [r7, #10]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d102      	bne.n	80020f2 <MX25LM51245G_ReadCfg2Register+0xc2>
 80020ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80020f0:	e000      	b.n	80020f4 <MX25LM51245G_ReadCfg2Register+0xc4>
 80020f2:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25LM51245G_DTR_TRANSFER)
 80020f4:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25LM51245G_DTR_TRANSFER)
 80020f6:	7afb      	ldrb	r3, [r7, #11]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <MX25LM51245G_ReadCfg2Register+0xda>
 80020fc:	7abb      	ldrb	r3, [r7, #10]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <MX25LM51245G_ReadCfg2Register+0xd6>
 8002102:	2305      	movs	r3, #5
 8002104:	e002      	b.n	800210c <MX25LM51245G_ReadCfg2Register+0xdc>
 8002106:	2304      	movs	r3, #4
 8002108:	e000      	b.n	800210c <MX25LM51245G_ReadCfg2Register+0xdc>
 800210a:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE)
 800210c:	657b      	str	r3, [r7, #84]	@ 0x54
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800210e:	7abb      	ldrb	r3, [r7, #10]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <MX25LM51245G_ReadCfg2Register+0xe8>
 8002114:	2302      	movs	r3, #2
 8002116:	e000      	b.n	800211a <MX25LM51245G_ReadCfg2Register+0xea>
 8002118:	2301      	movs	r3, #1
 800211a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 800211c:	7abb      	ldrb	r3, [r7, #10]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d102      	bne.n	8002128 <MX25LM51245G_ReadCfg2Register+0xf8>
 8002122:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002126:	e000      	b.n	800212a <MX25LM51245G_ReadCfg2Register+0xfa>
 8002128:	2300      	movs	r3, #0
 800212a:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 800212c:	2300      	movs	r3, #0
 800212e:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002130:	f107 0310 	add.w	r3, r7, #16
 8002134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002138:	4619      	mov	r1, r3
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f008 fc5a 	bl	800a9f4 <HAL_XSPI_Command>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d002      	beq.n	800214c <MX25LM51245G_ReadCfg2Register+0x11c>
  {
    return MX25LM51245G_ERROR;
 8002146:	f04f 33ff 	mov.w	r3, #4294967295
 800214a:	e00c      	b.n	8002166 <MX25LM51245G_ReadCfg2Register+0x136>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800214c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002150:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f008 fd51 	bl	800abfa <HAL_XSPI_Receive>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <MX25LM51245G_ReadCfg2Register+0x134>
  {
    return MX25LM51245G_ERROR;
 800215e:	f04f 33ff 	mov.w	r3, #4294967295
 8002162:	e000      	b.n	8002166 <MX25LM51245G_ReadCfg2Register+0x136>
  }

  return MX25LM51245G_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3760      	adds	r7, #96	@ 0x60
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(XSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b096      	sub	sp, #88	@ 0x58
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	460b      	mov	r3, r1
 8002178:	70fb      	strb	r3, [r7, #3]
 800217a:	4613      	mov	r3, r2
 800217c:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
 800217e:	f107 0308 	add.w	r3, r7, #8
 8002182:	2250      	movs	r2, #80	@ 0x50
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f010 fc6f 	bl	8012a6a <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d105      	bne.n	800219e <MX25LM51245G_ResetEnable+0x30>
 8002192:	78bb      	ldrb	r3, [r7, #2]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d102      	bne.n	800219e <MX25LM51245G_ResetEnable+0x30>
  {
    return MX25LM51245G_ERROR;
 8002198:	f04f 33ff 	mov.w	r3, #4294967295
 800219c:	e03b      	b.n	8002216 <MX25LM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 800219e:	2300      	movs	r3, #0
 80021a0:	60bb      	str	r3, [r7, #8]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <MX25LM51245G_ResetEnable+0x42>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <MX25LM51245G_ResetEnable+0x44>
 80021b0:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 80021b2:	617b      	str	r3, [r7, #20]
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80021b4:	78bb      	ldrb	r3, [r7, #2]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <MX25LM51245G_ResetEnable+0x50>
 80021ba:	2308      	movs	r3, #8
 80021bc:	e000      	b.n	80021c0 <MX25LM51245G_ResetEnable+0x52>
 80021be:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 80021c0:	61fb      	str	r3, [r7, #28]
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 80021c2:	78fb      	ldrb	r3, [r7, #3]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <MX25LM51245G_ResetEnable+0x5e>
 80021c8:	2300      	movs	r3, #0
 80021ca:	e000      	b.n	80021ce <MX25LM51245G_ResetEnable+0x60>
 80021cc:	2310      	movs	r3, #16
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
 80021ce:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? MX25LM51245G_RESET_ENABLE_CMD
                                 : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <MX25LM51245G_ResetEnable+0x6c>
 80021d6:	2366      	movs	r3, #102	@ 0x66
 80021d8:	e001      	b.n	80021de <MX25LM51245G_ResetEnable+0x70>
 80021da:	f246 6399 	movw	r3, #26265	@ 0x6699
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 80021de:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DummyCycles        = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 80021f4:	2300      	movs	r3, #0
 80021f6:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021f8:	f107 0308 	add.w	r3, r7, #8
 80021fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002200:	4619      	mov	r1, r3
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f008 fbf6 	bl	800a9f4 <HAL_XSPI_Command>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <MX25LM51245G_ResetEnable+0xa6>
  {
    return MX25LM51245G_ERROR;
 800220e:	f04f 33ff 	mov.w	r3, #4294967295
 8002212:	e000      	b.n	8002216 <MX25LM51245G_ResetEnable+0xa8>
  }

  return MX25LM51245G_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3758      	adds	r7, #88	@ 0x58
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(XSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b096      	sub	sp, #88	@ 0x58
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	70fb      	strb	r3, [r7, #3]
 800222a:	4613      	mov	r3, r2
 800222c:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
 800222e:	f107 0308 	add.w	r3, r7, #8
 8002232:	2250      	movs	r2, #80	@ 0x50
 8002234:	2100      	movs	r1, #0
 8002236:	4618      	mov	r0, r3
 8002238:	f010 fc17 	bl	8012a6a <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d105      	bne.n	800224e <MX25LM51245G_ResetMemory+0x30>
 8002242:	78bb      	ldrb	r3, [r7, #2]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d102      	bne.n	800224e <MX25LM51245G_ResetMemory+0x30>
  {
    return MX25LM51245G_ERROR;
 8002248:	f04f 33ff 	mov.w	r3, #4294967295
 800224c:	e03b      	b.n	80022c6 <MX25LM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8002256:	78fb      	ldrb	r3, [r7, #3]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <MX25LM51245G_ResetMemory+0x42>
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <MX25LM51245G_ResetMemory+0x44>
 8002260:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 8002262:	617b      	str	r3, [r7, #20]
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8002264:	78bb      	ldrb	r3, [r7, #2]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <MX25LM51245G_ResetMemory+0x50>
 800226a:	2308      	movs	r3, #8
 800226c:	e000      	b.n	8002270 <MX25LM51245G_ResetMemory+0x52>
 800226e:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 8002270:	61fb      	str	r3, [r7, #28]
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <MX25LM51245G_ResetMemory+0x5e>
 8002278:	2300      	movs	r3, #0
 800227a:	e000      	b.n	800227e <MX25LM51245G_ResetMemory+0x60>
 800227c:	2310      	movs	r3, #16
  s_command.InstructionWidth    = (Mode == MX25LM51245G_SPI_MODE)
 800227e:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? MX25LM51245G_RESET_MEMORY_CMD
                                 : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <MX25LM51245G_ResetMemory+0x6c>
 8002286:	2399      	movs	r3, #153	@ 0x99
 8002288:	e001      	b.n	800228e <MX25LM51245G_ResetMemory+0x70>
 800228a:	f649 1366 	movw	r3, #39270	@ 0x9966
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 800228e:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 8002290:	2300      	movs	r3, #0
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8002294:	2300      	movs	r3, #0
 8002296:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 8002298:	2300      	movs	r3, #0
 800229a:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DummyCycles        = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 80022a4:	2300      	movs	r3, #0
 80022a6:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80022a8:	f107 0308 	add.w	r3, r7, #8
 80022ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b0:	4619      	mov	r1, r3
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f008 fb9e 	bl	800a9f4 <HAL_XSPI_Command>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <MX25LM51245G_ResetMemory+0xa6>
  {
    return MX25LM51245G_ERROR;
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
 80022c2:	e000      	b.n	80022c6 <MX25LM51245G_ResetMemory+0xa8>
  }

  return MX25LM51245G_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3758      	adds	r7, #88	@ 0x58
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b095      	sub	sp, #84	@ 0x54
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_InitTypeDef ospi_init;

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <BSP_OSPI_NOR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80022e0:	f06f 0301 	mvn.w	r3, #1
 80022e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022e6:	e083      	b.n	80023f0 <BSP_OSPI_NOR_Init+0x120>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 80022e8:	4944      	ldr	r1, [pc, #272]	@ (80023fc <BSP_OSPI_NOR_Init+0x12c>)
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	440b      	add	r3, r1
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d178      	bne.n	80023ec <BSP_OSPI_NOR_Init+0x11c>
    {
#if (USE_HAL_XSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	225c      	movs	r2, #92	@ 0x5c
 80022fe:	fb02 f303 	mul.w	r3, r2, r3
 8002302:	4a3f      	ldr	r2, [pc, #252]	@ (8002400 <BSP_OSPI_NOR_Init+0x130>)
 8002304:	4413      	add	r3, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f000 fb08 	bl	800291c <OSPI_NOR_MspInit>
        }
      }
#endif /* USE_HAL_XSPI_REGISTER_CALLBACKS */

      /* Get Flash information of one memory */
      (void)MX25LM51245G_GetFlashInfo(&pInfo);
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff f9f4 	bl	80016fe <MX25LM51245G_GetFlashInfo>

      /* Fill config structure */
      ospi_init.ClockPrescaler = 1;
 8002316:	2301      	movs	r3, #1
 8002318:	613b      	str	r3, [r7, #16]
      ospi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002320:	fa93 f3a3 	rbit	r3, r3
 8002324:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002328:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800232a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <BSP_OSPI_NOR_Init+0x64>
    return 32U;
 8002330:	2320      	movs	r3, #32
 8002332:	e003      	b.n	800233c <BSP_OSPI_NOR_Init+0x6c>
  return __builtin_clz(value);
 8002334:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	60fb      	str	r3, [r7, #12]
      ospi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
      ospi_init.TransferRate   = (uint32_t)Init->TransferRate;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	785b      	ldrb	r3, [r3, #1]
 8002346:	61bb      	str	r3, [r7, #24]

      /* STM32 OSPI interface initialization */
      if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_init) != HAL_OK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	225c      	movs	r2, #92	@ 0x5c
 800234c:	fb02 f303 	mul.w	r3, r2, r3
 8002350:	4a2b      	ldr	r2, [pc, #172]	@ (8002400 <BSP_OSPI_NOR_Init+0x130>)
 8002352:	4413      	add	r3, r2
 8002354:	f107 020c 	add.w	r2, r7, #12
 8002358:	4611      	mov	r1, r2
 800235a:	4618      	mov	r0, r3
 800235c:	f000 f852 	bl	8002404 <MX_OSPI_NOR_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <BSP_OSPI_NOR_Init+0x9e>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8002366:	f06f 0303 	mvn.w	r3, #3
 800236a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800236c:	e040      	b.n	80023f0 <BSP_OSPI_NOR_Init+0x120>
      }
      else
      {
        /* OSPI Delay Block enable */
        OSPI1_DLYB_Enable(Instance);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 ff62 	bl	8003238 <OSPI1_DLYB_Enable>

        /* OSPI memory reset */
        if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fc53 	bl	8002c20 <OSPI_NOR_ResetMemory>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <BSP_OSPI_NOR_Init+0xb8>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8002380:	f06f 0304 	mvn.w	r3, #4
 8002384:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002386:	e033      	b.n	80023f0 <BSP_OSPI_NOR_Init+0x120>
        }/* Check if memory is ready */
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	225c      	movs	r2, #92	@ 0x5c
 800238c:	fb02 f303 	mul.w	r3, r2, r3
 8002390:	4a1b      	ldr	r2, [pc, #108]	@ (8002400 <BSP_OSPI_NOR_Init+0x130>)
 8002392:	1898      	adds	r0, r3, r2
 8002394:	4919      	ldr	r1, [pc, #100]	@ (80023fc <BSP_OSPI_NOR_Init+0x12c>)
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	440b      	add	r3, r1
 80023a0:	3301      	adds	r3, #1
 80023a2:	7819      	ldrb	r1, [r3, #0]
 80023a4:	4c15      	ldr	r4, [pc, #84]	@ (80023fc <BSP_OSPI_NOR_Init+0x12c>)
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	4413      	add	r3, r2
 80023ae:	4423      	add	r3, r4
 80023b0:	3302      	adds	r3, #2
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	f7ff f9d1 	bl	800175c <MX25LM51245G_AutoPollingMemReady>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <BSP_OSPI_NOR_Init+0xf8>
                                                  Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80023c0:	f06f 0304 	mvn.w	r3, #4
 80023c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023c6:	e013      	b.n	80023f0 <BSP_OSPI_NOR_Init+0x120>
        }/* Configure the memory */
        else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	7819      	ldrb	r1, [r3, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	785b      	ldrb	r3, [r3, #1]
 80023d0:	461a      	mov	r2, r3
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 fa16 	bl	8002804 <BSP_OSPI_NOR_ConfigFlash>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <BSP_OSPI_NOR_Init+0x116>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80023de:	f06f 0304 	mvn.w	r3, #4
 80023e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023e4:	e004      	b.n	80023f0 <BSP_OSPI_NOR_Init+0x120>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023ea:	e001      	b.n	80023f0 <BSP_OSPI_NOR_Init+0x120>
        }
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  /* Return BSP status */
  return ret;
 80023f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3754      	adds	r7, #84	@ 0x54
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd90      	pop	{r4, r7, pc}
 80023fa:	bf00      	nop
 80023fc:	200001d4 	.word	0x200001d4
 8002400:	20000178 	.word	0x20000178

08002404 <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Init           OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(XSPI_HandleTypeDef *hospi, MX_OSPI_InitTypeDef *Init)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a1e      	ldr	r2, [pc, #120]	@ (800248c <MX_OSPI_NOR_Init+0x88>)
 8002412:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThresholdByte       = 1;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	605a      	str	r2, [r3, #4]
  hospi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
  hospi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTimeCycle = 2;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode               = HAL_XSPI_CLOCK_MODE_0;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize                = HAL_XSPI_WRAP_NOT_SUPPORTED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler          = Init->ClockPrescaler;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi->Init.SampleShifting          = Init->SampleShifting;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi->Init.ChipSelectBoundary      = 0;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	631a      	str	r2, [r3, #48]	@ 0x30

  if (Init->TransferRate == (uint32_t) BSP_OSPI_NOR_DTR_TRANSFER)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d108      	bne.n	8002470 <MX_OSPI_NOR_Init+0x6c>
  {
    hospi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002464:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800246c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800246e:	e005      	b.n	800247c <MX_OSPI_NOR_Init+0x78>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  return HAL_XSPI_Init(hospi);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f008 f9e1 	bl	800a844 <HAL_XSPI_Init>
 8002482:	4603      	mov	r3, r0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	47001400 	.word	0x47001400

08002490 <BSP_OSPI_NOR_Read>:
  * @param  ReadAddr  Read start address
  * @param  Size      Size of data to read
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Read(uint32_t Instance, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af02      	add	r7, sp, #8
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	603b      	str	r3, [r7, #0]
  int32_t ret;

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <BSP_OSPI_NOR_Read+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80024a4:	f06f 0301 	mvn.w	r3, #1
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	e03d      	b.n	8002528 <BSP_OSPI_NOR_Read+0x98>
  }
  else
  {
    if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80024ac:	4921      	ldr	r1, [pc, #132]	@ (8002534 <BSP_OSPI_NOR_Read+0xa4>)
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4613      	mov	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4413      	add	r3, r2
 80024b6:	440b      	add	r3, r1
 80024b8:	3302      	adds	r3, #2
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d11f      	bne.n	8002500 <BSP_OSPI_NOR_Read+0x70>
    {
      if (MX25LM51245G_ReadSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	225c      	movs	r2, #92	@ 0x5c
 80024c4:	fb02 f303 	mul.w	r3, r2, r3
 80024c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002538 <BSP_OSPI_NOR_Read+0xa8>)
 80024ca:	1898      	adds	r0, r3, r2
 80024cc:	4919      	ldr	r1, [pc, #100]	@ (8002534 <BSP_OSPI_NOR_Read+0xa4>)
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4613      	mov	r3, r2
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	4413      	add	r3, r2
 80024d6:	440b      	add	r3, r1
 80024d8:	3301      	adds	r3, #1
 80024da:	7819      	ldrb	r1, [r3, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	9301      	str	r3, [sp, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f7ff f9ea 	bl	80018c0 <MX25LM51245G_ReadSTR>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <BSP_OSPI_NOR_Read+0x6a>
                               MX25LM51245G_4BYTES_SIZE, pData, ReadAddr, Size) != MX25LM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80024f2:	f06f 0304 	mvn.w	r3, #4
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	e016      	b.n	8002528 <BSP_OSPI_NOR_Read+0x98>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	e013      	b.n	8002528 <BSP_OSPI_NOR_Read+0x98>
      }
    }
    else
    {
      if (MX25LM51245G_ReadDTR(&hospi_nor[Instance], pData, ReadAddr, Size) != MX25LM51245G_OK)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	225c      	movs	r2, #92	@ 0x5c
 8002504:	fb02 f303 	mul.w	r3, r2, r3
 8002508:	4a0b      	ldr	r2, [pc, #44]	@ (8002538 <BSP_OSPI_NOR_Read+0xa8>)
 800250a:	1898      	adds	r0, r3, r2
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	f7ff fa5e 	bl	80019d2 <MX25LM51245G_ReadDTR>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <BSP_OSPI_NOR_Read+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800251c:	f06f 0304 	mvn.w	r3, #4
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	e001      	b.n	8002528 <BSP_OSPI_NOR_Read+0x98>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8002528:	697b      	ldr	r3, [r7, #20]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200001d4 	.word	0x200001d4
 8002538:	20000178 	.word	0x20000178

0800253c <BSP_OSPI_NOR_Write>:
  * @param  WriteAddr Write start address
  * @param  Size      Size of data to write
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Write(uint32_t Instance, const uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 800253c:	b590      	push	{r4, r7, lr}
 800253e:	b08d      	sub	sp, #52	@ 0x34
 8002540:	af02      	add	r7, sp, #8
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800254a:	2300      	movs	r3, #0
 800254c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t current_size;
  uint32_t current_addr;
  uint32_t data_addr;

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <BSP_OSPI_NOR_Write+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002554:	f06f 0301 	mvn.w	r3, #1
 8002558:	627b      	str	r3, [r7, #36]	@ 0x24
 800255a:	e0cb      	b.n	80026f4 <BSP_OSPI_NOR_Write+0x1b8>
  }
  else
  {
    /* Calculation of the size between the write address and the end of the page */
    current_size = MX25LM51245G_PAGE_SIZE - (WriteAddr % MX25LM51245G_PAGE_SIZE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002564:	623b      	str	r3, [r7, #32]

    /* Check if the size of the data is less than the remaining place in the page */
    if (current_size > Size)
 8002566:	6a3a      	ldr	r2, [r7, #32]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d901      	bls.n	8002572 <BSP_OSPI_NOR_Write+0x36>
    {
      current_size = Size;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	623b      	str	r3, [r7, #32]
    }

    /* Initialize the address variables */
    current_addr = WriteAddr;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	61fb      	str	r3, [r7, #28]
    end_addr = WriteAddr + Size;
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	4413      	add	r3, r2
 800257c:	617b      	str	r3, [r7, #20]
    data_addr = (uint32_t)pData;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	61bb      	str	r3, [r7, #24]

    /* Perform the write page by page */
    do
    {
      /* Check if Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	225c      	movs	r2, #92	@ 0x5c
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	4a5d      	ldr	r2, [pc, #372]	@ (8002700 <BSP_OSPI_NOR_Write+0x1c4>)
 800258c:	1898      	adds	r0, r3, r2
 800258e:	495d      	ldr	r1, [pc, #372]	@ (8002704 <BSP_OSPI_NOR_Write+0x1c8>)
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	440b      	add	r3, r1
 800259a:	3301      	adds	r3, #1
 800259c:	7819      	ldrb	r1, [r3, #0]
 800259e:	4c59      	ldr	r4, [pc, #356]	@ (8002704 <BSP_OSPI_NOR_Write+0x1c8>)
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4613      	mov	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	4423      	add	r3, r4
 80025aa:	3302      	adds	r3, #2
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	f7ff f8d4 	bl	800175c <MX25LM51245G_AutoPollingMemReady>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <BSP_OSPI_NOR_Write+0x86>
                                           Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80025ba:	f06f 0304 	mvn.w	r3, #4
 80025be:	627b      	str	r3, [r7, #36]	@ 0x24
 80025c0:	e090      	b.n	80026e4 <BSP_OSPI_NOR_Write+0x1a8>
      }/* Enable write operations */
      else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	225c      	movs	r2, #92	@ 0x5c
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	4a4d      	ldr	r2, [pc, #308]	@ (8002700 <BSP_OSPI_NOR_Write+0x1c4>)
 80025cc:	1898      	adds	r0, r3, r2
 80025ce:	494d      	ldr	r1, [pc, #308]	@ (8002704 <BSP_OSPI_NOR_Write+0x1c8>)
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4613      	mov	r3, r2
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	4413      	add	r3, r2
 80025d8:	440b      	add	r3, r1
 80025da:	3301      	adds	r3, #1
 80025dc:	7819      	ldrb	r1, [r3, #0]
 80025de:	4c49      	ldr	r4, [pc, #292]	@ (8002704 <BSP_OSPI_NOR_Write+0x1c8>)
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4613      	mov	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	4423      	add	r3, r4
 80025ea:	3302      	adds	r3, #2
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	f7ff fbb9 	bl	8001d66 <MX25LM51245G_WriteEnable>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <BSP_OSPI_NOR_Write+0xc6>
                                        Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80025fa:	f06f 0304 	mvn.w	r3, #4
 80025fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002600:	e070      	b.n	80026e4 <BSP_OSPI_NOR_Write+0x1a8>
      }
      else
      {
        if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8002602:	4940      	ldr	r1, [pc, #256]	@ (8002704 <BSP_OSPI_NOR_Write+0x1c8>)
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4613      	mov	r3, r2
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	4413      	add	r3, r2
 800260c:	440b      	add	r3, r1
 800260e:	3302      	adds	r3, #2
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d11d      	bne.n	8002652 <BSP_OSPI_NOR_Write+0x116>
        {
          /* Issue page program command */
          if (MX25LM51245G_PageProgram(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	225c      	movs	r2, #92	@ 0x5c
 800261a:	fb02 f303 	mul.w	r3, r2, r3
 800261e:	4a38      	ldr	r2, [pc, #224]	@ (8002700 <BSP_OSPI_NOR_Write+0x1c4>)
 8002620:	1898      	adds	r0, r3, r2
 8002622:	4938      	ldr	r1, [pc, #224]	@ (8002704 <BSP_OSPI_NOR_Write+0x1c8>)
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4613      	mov	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	440b      	add	r3, r1
 800262e:	3301      	adds	r3, #1
 8002630:	7819      	ldrb	r1, [r3, #0]
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	9301      	str	r3, [sp, #4]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	4613      	mov	r3, r2
 800263e:	2201      	movs	r2, #1
 8002640:	f7ff fa1d 	bl	8001a7e <MX25LM51245G_PageProgram>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d014      	beq.n	8002674 <BSP_OSPI_NOR_Write+0x138>
                                       MX25LM51245G_4BYTES_SIZE, (uint8_t *)data_addr, current_addr,
                                       current_size) != MX25LM51245G_OK)
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800264a:	f06f 0304 	mvn.w	r3, #4
 800264e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002650:	e010      	b.n	8002674 <BSP_OSPI_NOR_Write+0x138>
          }
        }
        else
        {
          /* Issue page program command */
          if (MX25LM51245G_PageProgramDTR(&hospi_nor[Instance], (uint8_t *)data_addr, current_addr,
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	225c      	movs	r2, #92	@ 0x5c
 8002656:	fb02 f303 	mul.w	r3, r2, r3
 800265a:	4a29      	ldr	r2, [pc, #164]	@ (8002700 <BSP_OSPI_NOR_Write+0x1c4>)
 800265c:	1898      	adds	r0, r3, r2
 800265e:	69b9      	ldr	r1, [r7, #24]
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	f7ff fa8f 	bl	8001b86 <MX25LM51245G_PageProgramDTR>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <BSP_OSPI_NOR_Write+0x138>
                                          current_size) != MX25LM51245G_OK)
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800266e:	f06f 0304 	mvn.w	r3, #4
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24
          }
        }

        if (ret == BSP_ERROR_NONE)
 8002674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002676:	2b00      	cmp	r3, #0
 8002678:	d134      	bne.n	80026e4 <BSP_OSPI_NOR_Write+0x1a8>
        {
          /* Configure automatic polling mode to wait for end of program */
          if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	225c      	movs	r2, #92	@ 0x5c
 800267e:	fb02 f303 	mul.w	r3, r2, r3
 8002682:	4a1f      	ldr	r2, [pc, #124]	@ (8002700 <BSP_OSPI_NOR_Write+0x1c4>)
 8002684:	1898      	adds	r0, r3, r2
 8002686:	491f      	ldr	r1, [pc, #124]	@ (8002704 <BSP_OSPI_NOR_Write+0x1c8>)
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	440b      	add	r3, r1
 8002692:	3301      	adds	r3, #1
 8002694:	7819      	ldrb	r1, [r3, #0]
 8002696:	4c1b      	ldr	r4, [pc, #108]	@ (8002704 <BSP_OSPI_NOR_Write+0x1c8>)
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4613      	mov	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4413      	add	r3, r2
 80026a0:	4423      	add	r3, r4
 80026a2:	3302      	adds	r3, #2
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	f7ff f858 	bl	800175c <MX25LM51245G_AutoPollingMemReady>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <BSP_OSPI_NOR_Write+0x17e>
                                               Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80026b2:	f06f 0304 	mvn.w	r3, #4
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80026b8:	e014      	b.n	80026e4 <BSP_OSPI_NOR_Write+0x1a8>
          }
          else
          {
            /* Update the address and size variables for next page programming */
            current_addr += current_size;
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	4413      	add	r3, r2
 80026c0:	61fb      	str	r3, [r7, #28]
            data_addr += current_size;
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	4413      	add	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
            current_size = ((current_addr + MX25LM51245G_PAGE_SIZE) > end_addr)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
                           ? (end_addr - current_addr)
                           : MX25LM51245G_PAGE_SIZE;
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d203      	bcs.n	80026de <BSP_OSPI_NOR_Write+0x1a2>
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	e001      	b.n	80026e2 <BSP_OSPI_NOR_Write+0x1a6>
 80026de:	f44f 7380 	mov.w	r3, #256	@ 0x100
            current_size = ((current_addr + MX25LM51245G_PAGE_SIZE) > end_addr)
 80026e2:	623b      	str	r3, [r7, #32]
          }
        }
      }
    } while ((current_addr < end_addr) && (ret == BSP_ERROR_NONE));
 80026e4:	69fa      	ldr	r2, [r7, #28]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d203      	bcs.n	80026f4 <BSP_OSPI_NOR_Write+0x1b8>
 80026ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f43f af47 	beq.w	8002582 <BSP_OSPI_NOR_Write+0x46>
  }

  /* Return BSP status */
  return ret;
 80026f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	372c      	adds	r7, #44	@ 0x2c
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd90      	pop	{r4, r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000178 	.word	0x20000178
 8002704:	200001d4 	.word	0x200001d4

08002708 <BSP_OSPI_NOR_Erase_Block>:
  * @param  BlockAddress Block address to erase
  * @param  BlockSize    Erase Block size: MX25LM51245G_ERASE_4K or MX25LM51245G_ERASE_64K
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Erase_Block(uint32_t Instance, uint32_t BlockAddress, BSP_OSPI_NOR_Erase_t BlockSize)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b089      	sub	sp, #36	@ 0x24
 800270c:	af02      	add	r7, sp, #8
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	4613      	mov	r3, r2
 8002714:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <BSP_OSPI_NOR_Erase_Block+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800271c:	f06f 0301 	mvn.w	r3, #1
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	e065      	b.n	80027f0 <BSP_OSPI_NOR_Erase_Block+0xe8>
  }
  else
  {
    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	225c      	movs	r2, #92	@ 0x5c
 8002728:	fb02 f303 	mul.w	r3, r2, r3
 800272c:	4a33      	ldr	r2, [pc, #204]	@ (80027fc <BSP_OSPI_NOR_Erase_Block+0xf4>)
 800272e:	1898      	adds	r0, r3, r2
 8002730:	4933      	ldr	r1, [pc, #204]	@ (8002800 <BSP_OSPI_NOR_Erase_Block+0xf8>)
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4613      	mov	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4413      	add	r3, r2
 800273a:	440b      	add	r3, r1
 800273c:	3301      	adds	r3, #1
 800273e:	7819      	ldrb	r1, [r3, #0]
 8002740:	4c2f      	ldr	r4, [pc, #188]	@ (8002800 <BSP_OSPI_NOR_Erase_Block+0xf8>)
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	4613      	mov	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4413      	add	r3, r2
 800274a:	4423      	add	r3, r4
 800274c:	3302      	adds	r3, #2
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	f7ff f803 	bl	800175c <MX25LM51245G_AutoPollingMemReady>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <BSP_OSPI_NOR_Erase_Block+0x5c>
                                         Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800275c:	f06f 0304 	mvn.w	r3, #4
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	e045      	b.n	80027f0 <BSP_OSPI_NOR_Erase_Block+0xe8>
    }/* Enable write operations */
    else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	225c      	movs	r2, #92	@ 0x5c
 8002768:	fb02 f303 	mul.w	r3, r2, r3
 800276c:	4a23      	ldr	r2, [pc, #140]	@ (80027fc <BSP_OSPI_NOR_Erase_Block+0xf4>)
 800276e:	1898      	adds	r0, r3, r2
 8002770:	4923      	ldr	r1, [pc, #140]	@ (8002800 <BSP_OSPI_NOR_Erase_Block+0xf8>)
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	4613      	mov	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	440b      	add	r3, r1
 800277c:	3301      	adds	r3, #1
 800277e:	7819      	ldrb	r1, [r3, #0]
 8002780:	4c1f      	ldr	r4, [pc, #124]	@ (8002800 <BSP_OSPI_NOR_Erase_Block+0xf8>)
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4613      	mov	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	4423      	add	r3, r4
 800278c:	3302      	adds	r3, #2
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	f7ff fae8 	bl	8001d66 <MX25LM51245G_WriteEnable>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <BSP_OSPI_NOR_Erase_Block+0x9c>
                                      Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800279c:	f06f 0304 	mvn.w	r3, #4
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	e025      	b.n	80027f0 <BSP_OSPI_NOR_Erase_Block+0xe8>
    }/* Issue Block Erase command */
    else if (MX25LM51245G_BlockErase(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	225c      	movs	r2, #92	@ 0x5c
 80027a8:	fb02 f303 	mul.w	r3, r2, r3
 80027ac:	4a13      	ldr	r2, [pc, #76]	@ (80027fc <BSP_OSPI_NOR_Erase_Block+0xf4>)
 80027ae:	1898      	adds	r0, r3, r2
 80027b0:	4913      	ldr	r1, [pc, #76]	@ (8002800 <BSP_OSPI_NOR_Erase_Block+0xf8>)
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4613      	mov	r3, r2
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4413      	add	r3, r2
 80027ba:	440b      	add	r3, r1
 80027bc:	3301      	adds	r3, #1
 80027be:	7819      	ldrb	r1, [r3, #0]
 80027c0:	4c0f      	ldr	r4, [pc, #60]	@ (8002800 <BSP_OSPI_NOR_Erase_Block+0xf8>)
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	4423      	add	r3, r4
 80027cc:	3302      	adds	r3, #2
 80027ce:	781a      	ldrb	r2, [r3, #0]
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	9301      	str	r3, [sp, #4]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	2301      	movs	r3, #1
 80027da:	f7ff fa29 	bl	8001c30 <MX25LM51245G_BlockErase>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <BSP_OSPI_NOR_Erase_Block+0xe4>
                                     Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_4BYTES_SIZE,
                                     BlockAddress, BlockSize) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80027e4:	f06f 0304 	mvn.w	r3, #4
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	e001      	b.n	80027f0 <BSP_OSPI_NOR_Erase_Block+0xe8>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 80027f0:	697b      	ldr	r3, [r7, #20]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd90      	pop	{r4, r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000178 	.word	0x20000178
 8002800:	200001d4 	.word	0x200001d4

08002804 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	70fb      	strb	r3, [r7, #3]
 8002810:	4613      	mov	r3, r2
 8002812:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800281e:	f06f 0301 	mvn.w	r3, #1
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	e072      	b.n	800290c <BSP_OSPI_NOR_ConfigFlash+0x108>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8002826:	493c      	ldr	r1, [pc, #240]	@ (8002918 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	440b      	add	r3, r1
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d103      	bne.n	8002840 <BSP_OSPI_NOR_ConfigFlash+0x3c>
    {
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8002838:	f06f 0319 	mvn.w	r3, #25
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	e065      	b.n	800290c <BSP_OSPI_NOR_ConfigFlash+0x108>
    }
    else
    {
      /* Setup Flash interface ***************************************************/
      switch (Ospi_Nor_Ctx[Instance].InterfaceMode)
 8002840:	4935      	ldr	r1, [pc, #212]	@ (8002918 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	4413      	add	r3, r2
 800284a:	440b      	add	r3, r1
 800284c:	3301      	adds	r3, #1
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d12b      	bne.n	80028ac <BSP_OSPI_NOR_ConfigFlash+0xa8>
      {
        case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
          if ((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8002854:	78fb      	ldrb	r3, [r7, #3]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d10a      	bne.n	8002870 <BSP_OSPI_NOR_ConfigFlash+0x6c>
 800285a:	492f      	ldr	r1, [pc, #188]	@ (8002918 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	4413      	add	r3, r2
 8002864:	440b      	add	r3, r1
 8002866:	3302      	adds	r3, #2
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	78ba      	ldrb	r2, [r7, #2]
 800286c:	429a      	cmp	r2, r3
 800286e:	d02d      	beq.n	80028cc <BSP_OSPI_NOR_ConfigFlash+0xc8>
          {
            /* Exit OPI mode */
            ret = OSPI_NOR_ExitOPIMode(Instance);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 fc31 	bl	80030d8 <OSPI_NOR_ExitOPIMode>
 8002876:	60f8      	str	r0, [r7, #12]

            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d126      	bne.n	80028cc <BSP_OSPI_NOR_ConfigFlash+0xc8>
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d123      	bne.n	80028cc <BSP_OSPI_NOR_ConfigFlash+0xc8>
            {

              if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8002884:	4924      	ldr	r1, [pc, #144]	@ (8002918 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4413      	add	r3, r2
 800288e:	440b      	add	r3, r1
 8002890:	3302      	adds	r3, #2
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d104      	bne.n	80028a2 <BSP_OSPI_NOR_ConfigFlash+0x9e>
              {
                /* Enter DTR OPI mode */
                ret = OSPI_NOR_EnterDOPIMode(Instance);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 fa75 	bl	8002d88 <OSPI_NOR_EnterDOPIMode>
 800289e:	60f8      	str	r0, [r7, #12]
                /* Enter STR OPI mode */
                ret = OSPI_NOR_EnterSOPIMode(Instance);
              }
            }
          }
          break;
 80028a0:	e014      	b.n	80028cc <BSP_OSPI_NOR_ConfigFlash+0xc8>
                ret = OSPI_NOR_EnterSOPIMode(Instance);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fb56 	bl	8002f54 <OSPI_NOR_EnterSOPIMode>
 80028a8:	60f8      	str	r0, [r7, #12]
          break;
 80028aa:	e00f      	b.n	80028cc <BSP_OSPI_NOR_ConfigFlash+0xc8>

        case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
        default :
          if (Mode == BSP_OSPI_NOR_OPI_MODE)
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d10e      	bne.n	80028d0 <BSP_OSPI_NOR_ConfigFlash+0xcc>
          {
            if (Rate == BSP_OSPI_NOR_STR_TRANSFER)
 80028b2:	78bb      	ldrb	r3, [r7, #2]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d104      	bne.n	80028c2 <BSP_OSPI_NOR_ConfigFlash+0xbe>
            {
              /* Enter STR OPI mode */
              ret = OSPI_NOR_EnterSOPIMode(Instance);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 fb4b 	bl	8002f54 <OSPI_NOR_EnterSOPIMode>
 80028be:	60f8      	str	r0, [r7, #12]
            {
              /* Enter DTR OPI mode */
              ret = OSPI_NOR_EnterDOPIMode(Instance);
            }
          }
          break;
 80028c0:	e006      	b.n	80028d0 <BSP_OSPI_NOR_ConfigFlash+0xcc>
              ret = OSPI_NOR_EnterDOPIMode(Instance);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 fa60 	bl	8002d88 <OSPI_NOR_EnterDOPIMode>
 80028c8:	60f8      	str	r0, [r7, #12]
          break;
 80028ca:	e001      	b.n	80028d0 <BSP_OSPI_NOR_ConfigFlash+0xcc>
          break;
 80028cc:	bf00      	nop
 80028ce:	e000      	b.n	80028d2 <BSP_OSPI_NOR_ConfigFlash+0xce>
          break;
 80028d0:	bf00      	nop
      }

      /* Update OSPI context if all operations are well done */
      if (ret == BSP_ERROR_NONE)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d119      	bne.n	800290c <BSP_OSPI_NOR_ConfigFlash+0x108>
      {
        /* Update current status parameter *****************************************/
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 80028d8:	490f      	ldr	r1, [pc, #60]	@ (8002918 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4413      	add	r3, r2
 80028e2:	440b      	add	r3, r1
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 80028e8:	490b      	ldr	r1, [pc, #44]	@ (8002918 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	4413      	add	r3, r2
 80028f2:	440b      	add	r3, r1
 80028f4:	3301      	adds	r3, #1
 80028f6:	78fa      	ldrb	r2, [r7, #3]
 80028f8:	701a      	strb	r2, [r3, #0]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 80028fa:	4907      	ldr	r1, [pc, #28]	@ (8002918 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	4413      	add	r3, r2
 8002904:	440b      	add	r3, r1
 8002906:	3302      	adds	r3, #2
 8002908:	78ba      	ldrb	r2, [r7, #2]
 800290a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800290c:	68fb      	ldr	r3, [r7, #12]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	200001d4 	.word	0x200001d4

0800291c <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(XSPI_HandleTypeDef *hospi)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b094      	sub	sp, #80	@ 0x50
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_NOR_CLK_ENABLE();
 8002924:	4bb7      	ldr	r3, [pc, #732]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002926:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800292a:	4ab6      	ldr	r2, [pc, #728]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 800292c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002930:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002934:	4bb3      	ldr	r3, [pc, #716]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002936:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800293a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800293e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

  /* Reset the OctoSPI memory interface */
  OSPI_NOR_FORCE_RESET();
 8002942:	4bb0      	ldr	r3, [pc, #704]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002944:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002946:	4aaf      	ldr	r2, [pc, #700]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002948:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800294c:	66d3      	str	r3, [r2, #108]	@ 0x6c
  OSPI_NOR_RELEASE_RESET();
 800294e:	4bad      	ldr	r3, [pc, #692]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002952:	4aac      	ldr	r2, [pc, #688]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002954:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002958:	66d3      	str	r3, [r2, #108]	@ 0x6c

  /* Enable GPIO clocks */
  OSPI_NOR_CLK_GPIO_CLK_ENABLE();
 800295a:	4baa      	ldr	r3, [pc, #680]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 800295c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002960:	4aa8      	ldr	r2, [pc, #672]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002962:	f043 0320 	orr.w	r3, r3, #32
 8002966:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800296a:	4ba6      	ldr	r3, [pc, #664]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 800296c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002970:	f003 0320 	and.w	r3, r3, #32
 8002974:	637b      	str	r3, [r7, #52]	@ 0x34
 8002976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
  OSPI_NOR_DQS_GPIO_CLK_ENABLE();
 8002978:	4ba2      	ldr	r3, [pc, #648]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 800297a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800297e:	4aa1      	ldr	r2, [pc, #644]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002988:	4b9e      	ldr	r3, [pc, #632]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	633b      	str	r3, [r7, #48]	@ 0x30
 8002994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  OSPI_NOR_CS_GPIO_CLK_ENABLE();
 8002996:	4b9b      	ldr	r3, [pc, #620]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002998:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800299c:	4a99      	ldr	r2, [pc, #612]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 800299e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029a6:	4b97      	ldr	r3, [pc, #604]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 80029a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  OSPI_NOR_D0_GPIO_CLK_ENABLE();
 80029b4:	4b93      	ldr	r3, [pc, #588]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029ba:	4a92      	ldr	r2, [pc, #584]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 80029bc:	f043 0302 	orr.w	r3, r3, #2
 80029c0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029c4:	4b8f      	ldr	r3, [pc, #572]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 80029c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  OSPI_NOR_D1_GPIO_CLK_ENABLE();
 80029d2:	4b8c      	ldr	r3, [pc, #560]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 80029d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029d8:	4a8a      	ldr	r2, [pc, #552]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 80029da:	f043 0308 	orr.w	r3, r3, #8
 80029de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029e2:	4b88      	ldr	r3, [pc, #544]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 80029e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  OSPI_NOR_D2_GPIO_CLK_ENABLE();
 80029f0:	4b84      	ldr	r3, [pc, #528]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 80029f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029f6:	4a83      	ldr	r2, [pc, #524]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 80029f8:	f043 0304 	orr.w	r3, r3, #4
 80029fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a00:	4b80      	ldr	r3, [pc, #512]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	623b      	str	r3, [r7, #32]
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
  OSPI_NOR_D3_GPIO_CLK_ENABLE();
 8002a0e:	4b7d      	ldr	r3, [pc, #500]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a14:	4a7b      	ldr	r2, [pc, #492]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002a16:	f043 0308 	orr.w	r3, r3, #8
 8002a1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a1e:	4b79      	ldr	r3, [pc, #484]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	69fb      	ldr	r3, [r7, #28]
  OSPI_NOR_D4_GPIO_CLK_ENABLE();
 8002a2c:	4b75      	ldr	r3, [pc, #468]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a32:	4a74      	ldr	r2, [pc, #464]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002a34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a38:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a3c:	4b71      	ldr	r3, [pc, #452]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a46:	61bb      	str	r3, [r7, #24]
 8002a48:	69bb      	ldr	r3, [r7, #24]
  OSPI_NOR_D5_GPIO_CLK_ENABLE();
 8002a4a:	4b6e      	ldr	r3, [pc, #440]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a50:	4a6c      	ldr	r2, [pc, #432]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a56:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a5a:	4b6a      	ldr	r3, [pc, #424]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	697b      	ldr	r3, [r7, #20]
  OSPI_NOR_D6_GPIO_CLK_ENABLE();
 8002a68:	4b66      	ldr	r3, [pc, #408]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a6e:	4a65      	ldr	r2, [pc, #404]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a74:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a78:	4b62      	ldr	r3, [pc, #392]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	693b      	ldr	r3, [r7, #16]
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8002a86:	4b5f      	ldr	r3, [pc, #380]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a8c:	4a5d      	ldr	r2, [pc, #372]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002a8e:	f043 0304 	orr.w	r3, r3, #4
 8002a92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a96:	4b5b      	ldr	r3, [pc, #364]	@ (8002c04 <OSPI_NOR_MspInit+0x2e8>)
 8002a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	68fb      	ldr	r3, [r7, #12]

  /* Activate HSLV */
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_NOR_CS_GPIO_PORT, OSPI_NOR_CS_PIN);
 8002aa4:	2140      	movs	r1, #64	@ 0x40
 8002aa6:	4858      	ldr	r0, [pc, #352]	@ (8002c08 <OSPI_NOR_MspInit+0x2ec>)
 8002aa8:	f001 f8ba 	bl	8003c20 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8002aac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002ab0:	4856      	ldr	r0, [pc, #344]	@ (8002c0c <OSPI_NOR_MspInit+0x2f0>)
 8002ab2:	f001 f8b5 	bl	8003c20 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_NOR_D0_GPIO_PORT, OSPI_NOR_D0_PIN);
 8002ab6:	2102      	movs	r1, #2
 8002ab8:	4855      	ldr	r0, [pc, #340]	@ (8002c10 <OSPI_NOR_MspInit+0x2f4>)
 8002aba:	f001 f8b1 	bl	8003c20 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_NOR_D1_GPIO_PORT, OSPI_NOR_D1_PIN);
 8002abe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ac2:	4854      	ldr	r0, [pc, #336]	@ (8002c14 <OSPI_NOR_MspInit+0x2f8>)
 8002ac4:	f001 f8ac 	bl	8003c20 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_NOR_D2_GPIO_PORT, OSPI_NOR_D3_PIN);
 8002ac8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002acc:	4852      	ldr	r0, [pc, #328]	@ (8002c18 <OSPI_NOR_MspInit+0x2fc>)
 8002ace:	f001 f8a7 	bl	8003c20 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_NOR_D3_GPIO_PORT, OSPI_NOR_D3_PIN);
 8002ad2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ad6:	484f      	ldr	r0, [pc, #316]	@ (8002c14 <OSPI_NOR_MspInit+0x2f8>)
 8002ad8:	f001 f8a2 	bl	8003c20 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_NOR_D4_GPIO_PORT, OSPI_NOR_D4_PIN);
 8002adc:	2104      	movs	r1, #4
 8002ade:	484f      	ldr	r0, [pc, #316]	@ (8002c1c <OSPI_NOR_MspInit+0x300>)
 8002ae0:	f001 f89e 	bl	8003c20 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_NOR_D5_GPIO_PORT, OSPI_NOR_D5_PIN);
 8002ae4:	2108      	movs	r1, #8
 8002ae6:	484d      	ldr	r0, [pc, #308]	@ (8002c1c <OSPI_NOR_MspInit+0x300>)
 8002ae8:	f001 f89a 	bl	8003c20 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_NOR_D6_GPIO_PORT, OSPI_NOR_D6_PIN);
 8002aec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002af0:	4845      	ldr	r0, [pc, #276]	@ (8002c08 <OSPI_NOR_MspInit+0x2ec>)
 8002af2:	f001 f895 	bl	8003c20 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_NOR_D7_GPIO_PORT, OSPI_NOR_D7_PIN);
 8002af6:	2101      	movs	r1, #1
 8002af8:	4847      	ldr	r0, [pc, #284]	@ (8002c18 <OSPI_NOR_MspInit+0x2fc>)
 8002afa:	f001 f891 	bl	8003c20 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_NOR_DQS_GPIO_PORT, OSPI_NOR_DQS_PIN);
 8002afe:	2104      	movs	r1, #4
 8002b00:	4843      	ldr	r0, [pc, #268]	@ (8002c10 <OSPI_NOR_MspInit+0x2f4>)
 8002b02:	f001 f88d 	bl	8003c20 <HAL_GPIO_EnableHighSPeedLowVoltage>

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_CS_PIN;
 8002b06:	2340      	movs	r3, #64	@ 0x40
 8002b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	643b      	str	r3, [r7, #64]	@ 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002b12:	2302      	movs	r3, #2
 8002b14:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8002b16:	230a      	movs	r3, #10
 8002b18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8002b1a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4839      	ldr	r0, [pc, #228]	@ (8002c08 <OSPI_NOR_MspInit+0x2ec>)
 8002b22:	f000 feed 	bl	8003900 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8002b26:	2304      	movs	r3, #4
 8002b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_DQS_PIN_AF;
 8002b2a:	230a      	movs	r3, #10
 8002b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8002b2e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b32:	4619      	mov	r1, r3
 8002b34:	4836      	ldr	r0, [pc, #216]	@ (8002c10 <OSPI_NOR_MspInit+0x2f4>)
 8002b36:	f000 fee3 	bl	8003900 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8002b3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8002b44:	2309      	movs	r3, #9
 8002b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8002b48:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	482f      	ldr	r0, [pc, #188]	@ (8002c0c <OSPI_NOR_MspInit+0x2f0>)
 8002b50:	f000 fed6 	bl	8003900 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8002b54:	2302      	movs	r3, #2
 8002b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D0_PIN_AF;
 8002b58:	2306      	movs	r3, #6
 8002b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8002b5c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b60:	4619      	mov	r1, r3
 8002b62:	482b      	ldr	r0, [pc, #172]	@ (8002c10 <OSPI_NOR_MspInit+0x2f4>)
 8002b64:	f000 fecc 	bl	8003900 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8002b68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D1_PIN_AF;
 8002b6e:	2309      	movs	r3, #9
 8002b70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8002b72:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b76:	4619      	mov	r1, r3
 8002b78:	4826      	ldr	r0, [pc, #152]	@ (8002c14 <OSPI_NOR_MspInit+0x2f8>)
 8002b7a:	f000 fec1 	bl	8003900 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D2_PIN;
 8002b7e:	2304      	movs	r3, #4
 8002b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D2_PIN_AF;
 8002b82:	2309      	movs	r3, #9
 8002b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8002b86:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4822      	ldr	r0, [pc, #136]	@ (8002c18 <OSPI_NOR_MspInit+0x2fc>)
 8002b8e:	f000 feb7 	bl	8003900 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8002b92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D3_PIN_AF;
 8002b98:	2309      	movs	r3, #9
 8002b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8002b9c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	481c      	ldr	r0, [pc, #112]	@ (8002c14 <OSPI_NOR_MspInit+0x2f8>)
 8002ba4:	f000 feac 	bl	8003900 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8002ba8:	2304      	movs	r3, #4
 8002baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D4_PIN_AF;
 8002bac:	2309      	movs	r3, #9
 8002bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8002bb0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4819      	ldr	r0, [pc, #100]	@ (8002c1c <OSPI_NOR_MspInit+0x300>)
 8002bb8:	f000 fea2 	bl	8003900 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8002bbc:	2308      	movs	r3, #8
 8002bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D5_PIN_AF;
 8002bc0:	2309      	movs	r3, #9
 8002bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8002bc4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4814      	ldr	r0, [pc, #80]	@ (8002c1c <OSPI_NOR_MspInit+0x300>)
 8002bcc:	f000 fe98 	bl	8003900 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 8002bd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D6_PIN_AF;
 8002bd6:	2309      	movs	r3, #9
 8002bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 8002bda:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002bde:	4619      	mov	r1, r3
 8002be0:	4809      	ldr	r0, [pc, #36]	@ (8002c08 <OSPI_NOR_MspInit+0x2ec>)
 8002be2:	f000 fe8d 	bl	8003900 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8002be6:	2301      	movs	r3, #1
 8002be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D7_PIN_AF;
 8002bea:	230a      	movs	r3, #10
 8002bec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 8002bee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4808      	ldr	r0, [pc, #32]	@ (8002c18 <OSPI_NOR_MspInit+0x2fc>)
 8002bf6:	f000 fe83 	bl	8003900 <HAL_GPIO_Init>
}
 8002bfa:	bf00      	nop
 8002bfc:	3750      	adds	r7, #80	@ 0x50
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	44020c00 	.word	0x44020c00
 8002c08:	42021800 	.word	0x42021800
 8002c0c:	42021400 	.word	0x42021400
 8002c10:	42020400 	.word	0x42020400
 8002c14:	42020c00 	.word	0x42020c00
 8002c18:	42020800 	.word	0x42020800
 8002c1c:	42021c00 	.word	0x42021c00

08002c20 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory(uint32_t Instance)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]

  if (MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	225c      	movs	r2, #92	@ 0x5c
 8002c30:	fb02 f303 	mul.w	r3, r2, r3
 8002c34:	4a52      	ldr	r2, [pc, #328]	@ (8002d80 <OSPI_NOR_ResetMemory+0x160>)
 8002c36:	4413      	add	r3, r2
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fa96 	bl	800216e <MX25LM51245G_ResetEnable>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <OSPI_NOR_ResetMemory+0x30>
                               BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002c48:	f06f 0304 	mvn.w	r3, #4
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	e092      	b.n	8002d76 <OSPI_NOR_ResetMemory+0x156>
  }
  else if (MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	225c      	movs	r2, #92	@ 0x5c
 8002c54:	fb02 f303 	mul.w	r3, r2, r3
 8002c58:	4a49      	ldr	r2, [pc, #292]	@ (8002d80 <OSPI_NOR_ResetMemory+0x160>)
 8002c5a:	4413      	add	r3, r2
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2100      	movs	r1, #0
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fadc 	bl	800221e <MX25LM51245G_ResetMemory>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <OSPI_NOR_ResetMemory+0x54>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002c6c:	f06f 0304 	mvn.w	r3, #4
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	e080      	b.n	8002d76 <OSPI_NOR_ResetMemory+0x156>
  }
  else if (MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	225c      	movs	r2, #92	@ 0x5c
 8002c78:	fb02 f303 	mul.w	r3, r2, r3
 8002c7c:	4a40      	ldr	r2, [pc, #256]	@ (8002d80 <OSPI_NOR_ResetMemory+0x160>)
 8002c7e:	4413      	add	r3, r2
 8002c80:	2200      	movs	r2, #0
 8002c82:	2101      	movs	r1, #1
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff fa72 	bl	800216e <MX25LM51245G_ResetEnable>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <OSPI_NOR_ResetMemory+0x78>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002c90:	f06f 0304 	mvn.w	r3, #4
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	e06e      	b.n	8002d76 <OSPI_NOR_ResetMemory+0x156>
  }
  else if (MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	225c      	movs	r2, #92	@ 0x5c
 8002c9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ca0:	4a37      	ldr	r2, [pc, #220]	@ (8002d80 <OSPI_NOR_ResetMemory+0x160>)
 8002ca2:	4413      	add	r3, r2
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fab8 	bl	800221e <MX25LM51245G_ResetMemory>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <OSPI_NOR_ResetMemory+0x9c>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002cb4:	f06f 0304 	mvn.w	r3, #4
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	e05c      	b.n	8002d76 <OSPI_NOR_ResetMemory+0x156>
  }
  else if (MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	225c      	movs	r2, #92	@ 0x5c
 8002cc0:	fb02 f303 	mul.w	r3, r2, r3
 8002cc4:	4a2e      	ldr	r2, [pc, #184]	@ (8002d80 <OSPI_NOR_ResetMemory+0x160>)
 8002cc6:	4413      	add	r3, r2
 8002cc8:	2201      	movs	r2, #1
 8002cca:	2101      	movs	r1, #1
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fa4e 	bl	800216e <MX25LM51245G_ResetEnable>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <OSPI_NOR_ResetMemory+0xc0>
                                    BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002cd8:	f06f 0304 	mvn.w	r3, #4
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	e04a      	b.n	8002d76 <OSPI_NOR_ResetMemory+0x156>
  }
  else if (MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	225c      	movs	r2, #92	@ 0x5c
 8002ce4:	fb02 f303 	mul.w	r3, r2, r3
 8002ce8:	4a25      	ldr	r2, [pc, #148]	@ (8002d80 <OSPI_NOR_ResetMemory+0x160>)
 8002cea:	4413      	add	r3, r2
 8002cec:	2201      	movs	r2, #1
 8002cee:	2101      	movs	r1, #1
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fa94 	bl	800221e <MX25LM51245G_ResetMemory>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <OSPI_NOR_ResetMemory+0xe4>
                                    BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002cfc:	f06f 0304 	mvn.w	r3, #4
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	e038      	b.n	8002d76 <OSPI_NOR_ResetMemory+0x156>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;     /* After reset S/W setting to indirect access  */
 8002d04:	491f      	ldr	r1, [pc, #124]	@ (8002d84 <OSPI_NOR_ResetMemory+0x164>)
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	4413      	add	r3, r2
 8002d0e:	440b      	add	r3, r1
 8002d10:	2201      	movs	r2, #1
 8002d12:	701a      	strb	r2, [r3, #0]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;    /* After reset H/W back to SPI mode by default */
 8002d14:	491b      	ldr	r1, [pc, #108]	@ (8002d84 <OSPI_NOR_ResetMemory+0x164>)
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	440b      	add	r3, r1
 8002d20:	3301      	adds	r3, #1
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode        */
 8002d26:	4917      	ldr	r1, [pc, #92]	@ (8002d84 <OSPI_NOR_ResetMemory+0x164>)
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	4413      	add	r3, r2
 8002d30:	440b      	add	r3, r1
 8002d32:	3302      	adds	r3, #2
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]

    /* Wait SWreset CMD is effective and check that memory is ready */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	225c      	movs	r2, #92	@ 0x5c
 8002d3c:	fb02 f303 	mul.w	r3, r2, r3
 8002d40:	4a0f      	ldr	r2, [pc, #60]	@ (8002d80 <OSPI_NOR_ResetMemory+0x160>)
 8002d42:	1898      	adds	r0, r3, r2
 8002d44:	490f      	ldr	r1, [pc, #60]	@ (8002d84 <OSPI_NOR_ResetMemory+0x164>)
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4413      	add	r3, r2
 8002d4e:	440b      	add	r3, r1
 8002d50:	3301      	adds	r3, #1
 8002d52:	7819      	ldrb	r1, [r3, #0]
 8002d54:	4c0b      	ldr	r4, [pc, #44]	@ (8002d84 <OSPI_NOR_ResetMemory+0x164>)
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4413      	add	r3, r2
 8002d5e:	4423      	add	r3, r4
 8002d60:	3302      	adds	r3, #2
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	f7fe fcf9 	bl	800175c <MX25LM51245G_AutoPollingMemReady>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <OSPI_NOR_ResetMemory+0x156>
                                         Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002d70:	f06f 0304 	mvn.w	r3, #4
 8002d74:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 8002d76:	68fb      	ldr	r3, [r7, #12]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd90      	pop	{r4, r7, pc}
 8002d80:	20000178 	.word	0x20000178
 8002d84:	200001d4 	.word	0x200001d4

08002d88 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 8002d88:	b590      	push	{r4, r7, lr}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	225c      	movs	r2, #92	@ 0x5c
 8002d94:	fb02 f303 	mul.w	r3, r2, r3
 8002d98:	4a6c      	ldr	r2, [pc, #432]	@ (8002f4c <OSPI_NOR_EnterDOPIMode+0x1c4>)
 8002d9a:	1898      	adds	r0, r3, r2
 8002d9c:	496c      	ldr	r1, [pc, #432]	@ (8002f50 <OSPI_NOR_EnterDOPIMode+0x1c8>)
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	440b      	add	r3, r1
 8002da8:	3301      	adds	r3, #1
 8002daa:	7819      	ldrb	r1, [r3, #0]
 8002dac:	4c68      	ldr	r4, [pc, #416]	@ (8002f50 <OSPI_NOR_EnterDOPIMode+0x1c8>)
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4413      	add	r3, r2
 8002db6:	4423      	add	r3, r4
 8002db8:	3302      	adds	r3, #2
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	f7fe ffd2 	bl	8001d66 <MX25LM51245G_WriteEnable>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <OSPI_NOR_EnterDOPIMode+0x48>
                               Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002dc8:	f06f 0304 	mvn.w	r3, #4
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	e0b8      	b.n	8002f42 <OSPI_NOR_EnterDOPIMode+0x1ba>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	225c      	movs	r2, #92	@ 0x5c
 8002dd4:	fb02 f303 	mul.w	r3, r2, r3
 8002dd8:	4a5c      	ldr	r2, [pc, #368]	@ (8002f4c <OSPI_NOR_EnterDOPIMode+0x1c4>)
 8002dda:	1898      	adds	r0, r3, r2
 8002ddc:	495c      	ldr	r1, [pc, #368]	@ (8002f50 <OSPI_NOR_EnterDOPIMode+0x1c8>)
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4413      	add	r3, r2
 8002de6:	440b      	add	r3, r1
 8002de8:	3301      	adds	r3, #1
 8002dea:	7819      	ldrb	r1, [r3, #0]
 8002dec:	4c58      	ldr	r4, [pc, #352]	@ (8002f50 <OSPI_NOR_EnterDOPIMode+0x1c8>)
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	4413      	add	r3, r2
 8002df6:	4423      	add	r3, r4
 8002df8:	3302      	adds	r3, #2
 8002dfa:	781a      	ldrb	r2, [r3, #0]
 8002dfc:	2307      	movs	r3, #7
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e04:	f7ff f87f 	bl	8001f06 <MX25LM51245G_WriteCfg2Register>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <OSPI_NOR_EnterDOPIMode+0x8e>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR,
                                          MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002e0e:	f06f 0304 	mvn.w	r3, #4
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	e095      	b.n	8002f42 <OSPI_NOR_EnterDOPIMode+0x1ba>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	225c      	movs	r2, #92	@ 0x5c
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	4a4b      	ldr	r2, [pc, #300]	@ (8002f4c <OSPI_NOR_EnterDOPIMode+0x1c4>)
 8002e20:	1898      	adds	r0, r3, r2
 8002e22:	494b      	ldr	r1, [pc, #300]	@ (8002f50 <OSPI_NOR_EnterDOPIMode+0x1c8>)
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	4413      	add	r3, r2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3301      	adds	r3, #1
 8002e30:	7819      	ldrb	r1, [r3, #0]
 8002e32:	4c47      	ldr	r4, [pc, #284]	@ (8002f50 <OSPI_NOR_EnterDOPIMode+0x1c8>)
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	4413      	add	r3, r2
 8002e3c:	4423      	add	r3, r4
 8002e3e:	3302      	adds	r3, #2
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	f7fe ff8f 	bl	8001d66 <MX25LM51245G_WriteEnable>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <OSPI_NOR_EnterDOPIMode+0xce>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002e4e:	f06f 0304 	mvn.w	r3, #4
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	e075      	b.n	8002f42 <OSPI_NOR_EnterDOPIMode+0x1ba>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	225c      	movs	r2, #92	@ 0x5c
 8002e5a:	fb02 f303 	mul.w	r3, r2, r3
 8002e5e:	4a3b      	ldr	r2, [pc, #236]	@ (8002f4c <OSPI_NOR_EnterDOPIMode+0x1c4>)
 8002e60:	1898      	adds	r0, r3, r2
 8002e62:	493b      	ldr	r1, [pc, #236]	@ (8002f50 <OSPI_NOR_EnterDOPIMode+0x1c8>)
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	3301      	adds	r3, #1
 8002e70:	7819      	ldrb	r1, [r3, #0]
 8002e72:	4c37      	ldr	r4, [pc, #220]	@ (8002f50 <OSPI_NOR_EnterDOPIMode+0x1c8>)
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	4423      	add	r3, r4
 8002e7e:	3302      	adds	r3, #2
 8002e80:	781a      	ldrb	r2, [r3, #0]
 8002e82:	2302      	movs	r3, #2
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	2300      	movs	r3, #0
 8002e88:	f7ff f83d 	bl	8001f06 <MX25LM51245G_WriteCfg2Register>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <OSPI_NOR_EnterDOPIMode+0x112>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR,
                                          MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002e92:	f06f 0304 	mvn.w	r3, #4
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	e053      	b.n	8002f42 <OSPI_NOR_EnterDOPIMode+0x1ba>
  }
  else
  {
    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
 8002e9a:	4a2c      	ldr	r2, [pc, #176]	@ (8002f4c <OSPI_NOR_EnterDOPIMode+0x1c4>)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	215c      	movs	r1, #92	@ 0x5c
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	330c      	adds	r3, #12
 8002ea8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002eac:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 8002eae:	4a27      	ldr	r2, [pc, #156]	@ (8002f4c <OSPI_NOR_EnterDOPIMode+0x1c4>)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	215c      	movs	r1, #92	@ 0x5c
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	332c      	adds	r3, #44	@ 0x2c
 8002ebc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ec0:	601a      	str	r2, [r3, #0]
    if (HAL_XSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	225c      	movs	r2, #92	@ 0x5c
 8002ec6:	fb02 f303 	mul.w	r3, r2, r3
 8002eca:	4a20      	ldr	r2, [pc, #128]	@ (8002f4c <OSPI_NOR_EnterDOPIMode+0x1c4>)
 8002ecc:	4413      	add	r3, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f007 fcb8 	bl	800a844 <HAL_XSPI_Init>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <OSPI_NOR_EnterDOPIMode+0x15a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002eda:	f06f 0303 	mvn.w	r3, #3
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	e02f      	b.n	8002f42 <OSPI_NOR_EnterDOPIMode+0x1ba>
    }
    /* Check Flash busy ? */
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	225c      	movs	r2, #92	@ 0x5c
 8002ee6:	fb02 f303 	mul.w	r3, r2, r3
 8002eea:	4a18      	ldr	r2, [pc, #96]	@ (8002f4c <OSPI_NOR_EnterDOPIMode+0x1c4>)
 8002eec:	4413      	add	r3, r2
 8002eee:	2201      	movs	r2, #1
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fe fc32 	bl	800175c <MX25LM51245G_AutoPollingMemReady>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <OSPI_NOR_EnterDOPIMode+0x17e>
                                              BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002efe:	f06f 0304 	mvn.w	r3, #4
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	e01d      	b.n	8002f42 <OSPI_NOR_EnterDOPIMode+0x1ba>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	225c      	movs	r2, #92	@ 0x5c
 8002f0a:	fb02 f303 	mul.w	r3, r2, r3
 8002f0e:	4a0f      	ldr	r2, [pc, #60]	@ (8002f4c <OSPI_NOR_EnterDOPIMode+0x1c4>)
 8002f10:	1898      	adds	r0, r3, r2
 8002f12:	f107 0308 	add.w	r3, r7, #8
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	f7ff f887 	bl	8002030 <MX25LM51245G_ReadCfg2Register>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <OSPI_NOR_EnterDOPIMode+0x1a8>
                                           MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002f28:	f06f 0304 	mvn.w	r3, #4
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	e008      	b.n	8002f42 <OSPI_NOR_EnterDOPIMode+0x1ba>
    }
    else if (reg[0] != MX25LM51245G_CR2_DOPI)
 8002f30:	7a3b      	ldrb	r3, [r7, #8]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d003      	beq.n	8002f3e <OSPI_NOR_EnterDOPIMode+0x1b6>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002f36:	f06f 0304 	mvn.w	r3, #4
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	e001      	b.n	8002f42 <OSPI_NOR_EnterDOPIMode+0x1ba>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 8002f42:	68fb      	ldr	r3, [r7, #12]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd90      	pop	{r4, r7, pc}
 8002f4c:	20000178 	.word	0x20000178
 8002f50:	200001d4 	.word	0x200001d4

08002f54 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 8002f54:	b590      	push	{r4, r7, lr}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	225c      	movs	r2, #92	@ 0x5c
 8002f60:	fb02 f303 	mul.w	r3, r2, r3
 8002f64:	4a5a      	ldr	r2, [pc, #360]	@ (80030d0 <OSPI_NOR_EnterSOPIMode+0x17c>)
 8002f66:	1898      	adds	r0, r3, r2
 8002f68:	495a      	ldr	r1, [pc, #360]	@ (80030d4 <OSPI_NOR_EnterSOPIMode+0x180>)
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4413      	add	r3, r2
 8002f72:	440b      	add	r3, r1
 8002f74:	3301      	adds	r3, #1
 8002f76:	7819      	ldrb	r1, [r3, #0]
 8002f78:	4c56      	ldr	r4, [pc, #344]	@ (80030d4 <OSPI_NOR_EnterSOPIMode+0x180>)
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	4423      	add	r3, r4
 8002f84:	3302      	adds	r3, #2
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	f7fe feec 	bl	8001d66 <MX25LM51245G_WriteEnable>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <OSPI_NOR_EnterSOPIMode+0x48>
                               Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002f94:	f06f 0304 	mvn.w	r3, #4
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	e094      	b.n	80030c6 <OSPI_NOR_EnterSOPIMode+0x172>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	225c      	movs	r2, #92	@ 0x5c
 8002fa0:	fb02 f303 	mul.w	r3, r2, r3
 8002fa4:	4a4a      	ldr	r2, [pc, #296]	@ (80030d0 <OSPI_NOR_EnterSOPIMode+0x17c>)
 8002fa6:	1898      	adds	r0, r3, r2
 8002fa8:	494a      	ldr	r1, [pc, #296]	@ (80030d4 <OSPI_NOR_EnterSOPIMode+0x180>)
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4413      	add	r3, r2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	7819      	ldrb	r1, [r3, #0]
 8002fb8:	4c46      	ldr	r4, [pc, #280]	@ (80030d4 <OSPI_NOR_EnterSOPIMode+0x180>)
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4413      	add	r3, r2
 8002fc2:	4423      	add	r3, r4
 8002fc4:	3302      	adds	r3, #2
 8002fc6:	781a      	ldrb	r2, [r3, #0]
 8002fc8:	2307      	movs	r3, #7
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002fd0:	f7fe ff99 	bl	8001f06 <MX25LM51245G_WriteCfg2Register>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <OSPI_NOR_EnterSOPIMode+0x8e>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR,
                                          MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002fda:	f06f 0304 	mvn.w	r3, #4
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	e071      	b.n	80030c6 <OSPI_NOR_EnterSOPIMode+0x172>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	225c      	movs	r2, #92	@ 0x5c
 8002fe6:	fb02 f303 	mul.w	r3, r2, r3
 8002fea:	4a39      	ldr	r2, [pc, #228]	@ (80030d0 <OSPI_NOR_EnterSOPIMode+0x17c>)
 8002fec:	1898      	adds	r0, r3, r2
 8002fee:	4939      	ldr	r1, [pc, #228]	@ (80030d4 <OSPI_NOR_EnterSOPIMode+0x180>)
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	7819      	ldrb	r1, [r3, #0]
 8002ffe:	4c35      	ldr	r4, [pc, #212]	@ (80030d4 <OSPI_NOR_EnterSOPIMode+0x180>)
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4413      	add	r3, r2
 8003008:	4423      	add	r3, r4
 800300a:	3302      	adds	r3, #2
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	f7fe fea9 	bl	8001d66 <MX25LM51245G_WriteEnable>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <OSPI_NOR_EnterSOPIMode+0xce>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800301a:	f06f 0304 	mvn.w	r3, #4
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	e051      	b.n	80030c6 <OSPI_NOR_EnterSOPIMode+0x172>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	225c      	movs	r2, #92	@ 0x5c
 8003026:	fb02 f303 	mul.w	r3, r2, r3
 800302a:	4a29      	ldr	r2, [pc, #164]	@ (80030d0 <OSPI_NOR_EnterSOPIMode+0x17c>)
 800302c:	1898      	adds	r0, r3, r2
 800302e:	4929      	ldr	r1, [pc, #164]	@ (80030d4 <OSPI_NOR_EnterSOPIMode+0x180>)
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	4413      	add	r3, r2
 8003038:	440b      	add	r3, r1
 800303a:	3301      	adds	r3, #1
 800303c:	7819      	ldrb	r1, [r3, #0]
 800303e:	4c25      	ldr	r4, [pc, #148]	@ (80030d4 <OSPI_NOR_EnterSOPIMode+0x180>)
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	4413      	add	r3, r2
 8003048:	4423      	add	r3, r4
 800304a:	3302      	adds	r3, #2
 800304c:	781a      	ldrb	r2, [r3, #0]
 800304e:	2301      	movs	r3, #1
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	2300      	movs	r3, #0
 8003054:	f7fe ff57 	bl	8001f06 <MX25LM51245G_WriteCfg2Register>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <OSPI_NOR_EnterSOPIMode+0x112>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR,
                                          MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800305e:	f06f 0304 	mvn.w	r3, #4
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	e02f      	b.n	80030c6 <OSPI_NOR_EnterSOPIMode+0x172>
  }
  else
  {
    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	225c      	movs	r2, #92	@ 0x5c
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	4a18      	ldr	r2, [pc, #96]	@ (80030d0 <OSPI_NOR_EnterSOPIMode+0x17c>)
 8003070:	4413      	add	r3, r2
 8003072:	2200      	movs	r2, #0
 8003074:	2101      	movs	r1, #1
 8003076:	4618      	mov	r0, r3
 8003078:	f7fe fb70 	bl	800175c <MX25LM51245G_AutoPollingMemReady>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <OSPI_NOR_EnterSOPIMode+0x136>
                                         BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003082:	f06f 0304 	mvn.w	r3, #4
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	e01d      	b.n	80030c6 <OSPI_NOR_EnterSOPIMode+0x172>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	225c      	movs	r2, #92	@ 0x5c
 800308e:	fb02 f303 	mul.w	r3, r2, r3
 8003092:	4a0f      	ldr	r2, [pc, #60]	@ (80030d0 <OSPI_NOR_EnterSOPIMode+0x17c>)
 8003094:	1898      	adds	r0, r3, r2
 8003096:	f107 0308 	add.w	r3, r7, #8
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	2300      	movs	r3, #0
 800309e:	2200      	movs	r2, #0
 80030a0:	2101      	movs	r1, #1
 80030a2:	f7fe ffc5 	bl	8002030 <MX25LM51245G_ReadCfg2Register>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <OSPI_NOR_EnterSOPIMode+0x160>
                                           MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80030ac:	f06f 0304 	mvn.w	r3, #4
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	e008      	b.n	80030c6 <OSPI_NOR_EnterSOPIMode+0x172>
    }
    else if (reg[0] != MX25LM51245G_CR2_SOPI)
 80030b4:	7a3b      	ldrb	r3, [r7, #8]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d003      	beq.n	80030c2 <OSPI_NOR_EnterSOPIMode+0x16e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80030ba:	f06f 0304 	mvn.w	r3, #4
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	e001      	b.n	80030c6 <OSPI_NOR_EnterSOPIMode+0x172>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 80030c6:	68fb      	ldr	r3, [r7, #12]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd90      	pop	{r4, r7, pc}
 80030d0:	20000178 	.word	0x20000178
 80030d4:	200001d4 	.word	0x200001d4

080030d8 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode(uint32_t Instance)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b087      	sub	sp, #28
 80030dc:	af02      	add	r7, sp, #8
 80030de:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	225c      	movs	r2, #92	@ 0x5c
 80030e8:	fb02 f303 	mul.w	r3, r2, r3
 80030ec:	4a50      	ldr	r2, [pc, #320]	@ (8003230 <OSPI_NOR_ExitOPIMode+0x158>)
 80030ee:	1898      	adds	r0, r3, r2
 80030f0:	4950      	ldr	r1, [pc, #320]	@ (8003234 <OSPI_NOR_ExitOPIMode+0x15c>)
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	440b      	add	r3, r1
 80030fc:	3301      	adds	r3, #1
 80030fe:	7819      	ldrb	r1, [r3, #0]
 8003100:	4c4c      	ldr	r4, [pc, #304]	@ (8003234 <OSPI_NOR_ExitOPIMode+0x15c>)
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	4413      	add	r3, r2
 800310a:	4423      	add	r3, r4
 800310c:	3302      	adds	r3, #2
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	f7fe fe28 	bl	8001d66 <MX25LM51245G_WriteEnable>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <OSPI_NOR_ExitOPIMode+0x4c>
                               Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800311c:	f06f 0304 	mvn.w	r3, #4
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	e080      	b.n	8003226 <OSPI_NOR_ExitOPIMode+0x14e>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	727b      	strb	r3, [r7, #9]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	225c      	movs	r2, #92	@ 0x5c
 8003130:	fb02 f303 	mul.w	r3, r2, r3
 8003134:	4a3e      	ldr	r2, [pc, #248]	@ (8003230 <OSPI_NOR_ExitOPIMode+0x158>)
 8003136:	1898      	adds	r0, r3, r2
 8003138:	493e      	ldr	r1, [pc, #248]	@ (8003234 <OSPI_NOR_ExitOPIMode+0x15c>)
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	4413      	add	r3, r2
 8003142:	440b      	add	r3, r1
 8003144:	3301      	adds	r3, #1
 8003146:	7819      	ldrb	r1, [r3, #0]
 8003148:	4c3a      	ldr	r4, [pc, #232]	@ (8003234 <OSPI_NOR_ExitOPIMode+0x15c>)
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	4413      	add	r3, r2
 8003152:	4423      	add	r3, r4
 8003154:	3302      	adds	r3, #2
 8003156:	781a      	ldrb	r2, [r3, #0]
 8003158:	7a3b      	ldrb	r3, [r7, #8]
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	2300      	movs	r3, #0
 800315e:	f7fe fed2 	bl	8001f06 <MX25LM51245G_WriteCfg2Register>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <OSPI_NOR_ExitOPIMode+0x98>
                                       Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR,
                                       reg[0]) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003168:	f06f 0304 	mvn.w	r3, #4
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	e05a      	b.n	8003226 <OSPI_NOR_ExitOPIMode+0x14e>
    }
    else
    {
      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8003170:	4930      	ldr	r1, [pc, #192]	@ (8003234 <OSPI_NOR_ExitOPIMode+0x15c>)
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	4413      	add	r3, r2
 800317a:	440b      	add	r3, r1
 800317c:	3302      	adds	r3, #2
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d120      	bne.n	80031c6 <OSPI_NOR_ExitOPIMode+0xee>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
 8003184:	4a2a      	ldr	r2, [pc, #168]	@ (8003230 <OSPI_NOR_ExitOPIMode+0x158>)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	215c      	movs	r1, #92	@ 0x5c
 800318a:	fb01 f303 	mul.w	r3, r1, r3
 800318e:	4413      	add	r3, r2
 8003190:	330c      	adds	r3, #12
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8003196:	4a26      	ldr	r2, [pc, #152]	@ (8003230 <OSPI_NOR_ExitOPIMode+0x158>)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	215c      	movs	r1, #92	@ 0x5c
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	332c      	adds	r3, #44	@ 0x2c
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
        if (HAL_XSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	225c      	movs	r2, #92	@ 0x5c
 80031ac:	fb02 f303 	mul.w	r3, r2, r3
 80031b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003230 <OSPI_NOR_ExitOPIMode+0x158>)
 80031b2:	4413      	add	r3, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f007 fb45 	bl	800a844 <HAL_XSPI_Init>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <OSPI_NOR_ExitOPIMode+0xee>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80031c0:	f06f 0303 	mvn.w	r3, #3
 80031c4:	60fb      	str	r3, [r7, #12]
        }
      }

      if (ret == BSP_ERROR_NONE)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d12c      	bne.n	8003226 <OSPI_NOR_ExitOPIMode+0x14e>
      {
        /* Check Flash busy ? */
        if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	225c      	movs	r2, #92	@ 0x5c
 80031d0:	fb02 f303 	mul.w	r3, r2, r3
 80031d4:	4a16      	ldr	r2, [pc, #88]	@ (8003230 <OSPI_NOR_ExitOPIMode+0x158>)
 80031d6:	4413      	add	r3, r2
 80031d8:	2200      	movs	r2, #0
 80031da:	2100      	movs	r1, #0
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fe fabd 	bl	800175c <MX25LM51245G_AutoPollingMemReady>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <OSPI_NOR_ExitOPIMode+0x118>
                                             BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80031e8:	f06f 0304 	mvn.w	r3, #4
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	e01a      	b.n	8003226 <OSPI_NOR_ExitOPIMode+0x14e>
        }
        /* Check the configuration has been correctly done */
        else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER,
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	225c      	movs	r2, #92	@ 0x5c
 80031f4:	fb02 f303 	mul.w	r3, r2, r3
 80031f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003230 <OSPI_NOR_ExitOPIMode+0x158>)
 80031fa:	1898      	adds	r0, r3, r2
 80031fc:	f107 0308 	add.w	r3, r7, #8
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	2300      	movs	r3, #0
 8003204:	2200      	movs	r2, #0
 8003206:	2100      	movs	r1, #0
 8003208:	f7fe ff12 	bl	8002030 <MX25LM51245G_ReadCfg2Register>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <OSPI_NOR_ExitOPIMode+0x142>
                                               MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8003212:	f06f 0304 	mvn.w	r3, #4
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	e005      	b.n	8003226 <OSPI_NOR_ExitOPIMode+0x14e>
        }
        else if (reg[0] != 0U)
 800321a:	7a3b      	ldrb	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <OSPI_NOR_ExitOPIMode+0x14e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8003220:	f06f 0304 	mvn.w	r3, #4
 8003224:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8003226:	68fb      	ldr	r3, [r7, #12]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	bd90      	pop	{r4, r7, pc}
 8003230:	20000178 	.word	0x20000178
 8003234:	200001d4 	.word	0x200001d4

08003238 <OSPI1_DLYB_Enable>:
  * @brief  This function enables delay block.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static void OSPI1_DLYB_Enable(uint32_t Instance)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  HAL_XSPI_DLYB_CfgTypeDef  dlyb_cfg;

  (void)HAL_XSPI_DLYB_GetClockPeriod(&hospi_nor[Instance], &dlyb_cfg);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	225c      	movs	r2, #92	@ 0x5c
 8003244:	fb02 f303 	mul.w	r3, r2, r3
 8003248:	4a0d      	ldr	r2, [pc, #52]	@ (8003280 <OSPI1_DLYB_Enable+0x48>)
 800324a:	4413      	add	r3, r2
 800324c:	f107 0208 	add.w	r2, r7, #8
 8003250:	4611      	mov	r1, r2
 8003252:	4618      	mov	r0, r3
 8003254:	f007 fed0 	bl	800aff8 <HAL_XSPI_DLYB_GetClockPeriod>

  /*when DTR, PhaseSel is divided by 4 (emperic value)*/
  dlyb_cfg.PhaseSel /= 4U;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	089b      	lsrs	r3, r3, #2
 800325c:	60fb      	str	r3, [r7, #12]

  /*set delay block configuration*/
  (void)HAL_XSPI_DLYB_SetConfig(&hospi_nor[Instance], &dlyb_cfg);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	225c      	movs	r2, #92	@ 0x5c
 8003262:	fb02 f303 	mul.w	r3, r2, r3
 8003266:	4a06      	ldr	r2, [pc, #24]	@ (8003280 <OSPI1_DLYB_Enable+0x48>)
 8003268:	4413      	add	r3, r2
 800326a:	f107 0208 	add.w	r2, r7, #8
 800326e:	4611      	mov	r1, r2
 8003270:	4618      	mov	r0, r3
 8003272:	f007 fe85 	bl	800af80 <HAL_XSPI_DLYB_SetConfig>
}
 8003276:	bf00      	nop
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000178 	.word	0x20000178

08003284 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800328a:	4b35      	ldr	r3, [pc, #212]	@ (8003360 <SystemInit+0xdc>)
 800328c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003290:	4a33      	ldr	r2, [pc, #204]	@ (8003360 <SystemInit+0xdc>)
 8003292:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003296:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800329a:	4b32      	ldr	r3, [pc, #200]	@ (8003364 <SystemInit+0xe0>)
 800329c:	2201      	movs	r2, #1
 800329e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80032a0:	4b30      	ldr	r3, [pc, #192]	@ (8003364 <SystemInit+0xe0>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80032a6:	4b2f      	ldr	r3, [pc, #188]	@ (8003364 <SystemInit+0xe0>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80032ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003364 <SystemInit+0xe0>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	492c      	ldr	r1, [pc, #176]	@ (8003364 <SystemInit+0xe0>)
 80032b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003368 <SystemInit+0xe4>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80032b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003364 <SystemInit+0xe0>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80032be:	4b29      	ldr	r3, [pc, #164]	@ (8003364 <SystemInit+0xe0>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80032c4:	4b27      	ldr	r3, [pc, #156]	@ (8003364 <SystemInit+0xe0>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80032ca:	4b26      	ldr	r3, [pc, #152]	@ (8003364 <SystemInit+0xe0>)
 80032cc:	4a27      	ldr	r2, [pc, #156]	@ (800336c <SystemInit+0xe8>)
 80032ce:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80032d0:	4b24      	ldr	r3, [pc, #144]	@ (8003364 <SystemInit+0xe0>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80032d6:	4b23      	ldr	r3, [pc, #140]	@ (8003364 <SystemInit+0xe0>)
 80032d8:	4a24      	ldr	r2, [pc, #144]	@ (800336c <SystemInit+0xe8>)
 80032da:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80032dc:	4b21      	ldr	r3, [pc, #132]	@ (8003364 <SystemInit+0xe0>)
 80032de:	2200      	movs	r2, #0
 80032e0:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80032e2:	4b20      	ldr	r3, [pc, #128]	@ (8003364 <SystemInit+0xe0>)
 80032e4:	4a21      	ldr	r2, [pc, #132]	@ (800336c <SystemInit+0xe8>)
 80032e6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80032e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003364 <SystemInit+0xe0>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80032ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003364 <SystemInit+0xe0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003364 <SystemInit+0xe0>)
 80032f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80032fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003364 <SystemInit+0xe0>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003300:	4b17      	ldr	r3, [pc, #92]	@ (8003360 <SystemInit+0xdc>)
 8003302:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003306:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8003308:	4b19      	ldr	r3, [pc, #100]	@ (8003370 <SystemInit+0xec>)
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8003310:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8003318:	d003      	beq.n	8003322 <SystemInit+0x9e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003320:	d117      	bne.n	8003352 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8003322:	4b13      	ldr	r3, [pc, #76]	@ (8003370 <SystemInit+0xec>)
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d005      	beq.n	800333a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800332e:	4b10      	ldr	r3, [pc, #64]	@ (8003370 <SystemInit+0xec>)
 8003330:	4a10      	ldr	r2, [pc, #64]	@ (8003374 <SystemInit+0xf0>)
 8003332:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8003334:	4b0e      	ldr	r3, [pc, #56]	@ (8003370 <SystemInit+0xec>)
 8003336:	4a10      	ldr	r2, [pc, #64]	@ (8003378 <SystemInit+0xf4>)
 8003338:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800333a:	4b0d      	ldr	r3, [pc, #52]	@ (8003370 <SystemInit+0xec>)
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	4a0c      	ldr	r2, [pc, #48]	@ (8003370 <SystemInit+0xec>)
 8003340:	f043 0302 	orr.w	r3, r3, #2
 8003344:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8003346:	4b0a      	ldr	r3, [pc, #40]	@ (8003370 <SystemInit+0xec>)
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	4a09      	ldr	r2, [pc, #36]	@ (8003370 <SystemInit+0xec>)
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	61d3      	str	r3, [r2, #28]
  }
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	e000ed00 	.word	0xe000ed00
 8003364:	44020c00 	.word	0x44020c00
 8003368:	eae2eae3 	.word	0xeae2eae3
 800336c:	01010280 	.word	0x01010280
 8003370:	40022000 	.word	0x40022000
 8003374:	08192a3b 	.word	0x08192a3b
 8003378:	4c5d6e7f 	.word	0x4c5d6e7f

0800337c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003380:	2003      	movs	r0, #3
 8003382:	f000 f96c 	bl	800365e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003386:	f001 fa5d 	bl	8004844 <HAL_RCC_GetSysClockFreq>
 800338a:	4602      	mov	r2, r0
 800338c:	4b0c      	ldr	r3, [pc, #48]	@ (80033c0 <HAL_Init+0x44>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	f003 030f 	and.w	r3, r3, #15
 8003394:	490b      	ldr	r1, [pc, #44]	@ (80033c4 <HAL_Init+0x48>)
 8003396:	5ccb      	ldrb	r3, [r1, r3]
 8003398:	fa22 f303 	lsr.w	r3, r2, r3
 800339c:	4a0a      	ldr	r2, [pc, #40]	@ (80033c8 <HAL_Init+0x4c>)
 800339e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80033a0:	2004      	movs	r0, #4
 80033a2:	f000 f9a3 	bl	80036ec <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033a6:	200f      	movs	r0, #15
 80033a8:	f000 f810 	bl	80033cc <HAL_InitTick>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e002      	b.n	80033bc <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80033b6:	f7fd ff13 	bl	80011e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	44020c00 	.word	0x44020c00
 80033c4:	08014678 	.word	0x08014678
 80033c8:	20000000 	.word	0x20000000

080033cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80033d8:	4b33      	ldr	r3, [pc, #204]	@ (80034a8 <HAL_InitTick+0xdc>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e05c      	b.n	800349e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80033e4:	4b31      	ldr	r3, [pc, #196]	@ (80034ac <HAL_InitTick+0xe0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d10c      	bne.n	800340a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80033f0:	4b2f      	ldr	r3, [pc, #188]	@ (80034b0 <HAL_InitTick+0xe4>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4b2c      	ldr	r3, [pc, #176]	@ (80034a8 <HAL_InitTick+0xdc>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	4619      	mov	r1, r3
 80033fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003402:	fbb2 f3f3 	udiv	r3, r2, r3
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	e037      	b.n	800347a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800340a:	f000 f9c7 	bl	800379c <HAL_SYSTICK_GetCLKSourceConfig>
 800340e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d023      	beq.n	800345e <HAL_InitTick+0x92>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d82d      	bhi.n	8003478 <HAL_InitTick+0xac>
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_InitTick+0x5e>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d00d      	beq.n	8003444 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8003428:	e026      	b.n	8003478 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800342a:	4b21      	ldr	r3, [pc, #132]	@ (80034b0 <HAL_InitTick+0xe4>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	4b1e      	ldr	r3, [pc, #120]	@ (80034a8 <HAL_InitTick+0xdc>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	4619      	mov	r1, r3
 8003434:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003438:	fbb3 f3f1 	udiv	r3, r3, r1
 800343c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003440:	60fb      	str	r3, [r7, #12]
        break;
 8003442:	e01a      	b.n	800347a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003444:	4b18      	ldr	r3, [pc, #96]	@ (80034a8 <HAL_InitTick+0xdc>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	461a      	mov	r2, r3
 800344a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800344e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003452:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8003456:	fbb2 f3f3 	udiv	r3, r2, r3
 800345a:	60fb      	str	r3, [r7, #12]
        break;
 800345c:	e00d      	b.n	800347a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800345e:	4b12      	ldr	r3, [pc, #72]	@ (80034a8 <HAL_InitTick+0xdc>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003468:	fbb3 f3f2 	udiv	r3, r3, r2
 800346c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003470:	fbb2 f3f3 	udiv	r3, r2, r3
 8003474:	60fb      	str	r3, [r7, #12]
        break;
 8003476:	e000      	b.n	800347a <HAL_InitTick+0xae>
        break;
 8003478:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f914 	bl	80036a8 <HAL_SYSTICK_Config>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e009      	b.n	800349e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800348a:	2200      	movs	r2, #0
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	f04f 30ff 	mov.w	r0, #4294967295
 8003492:	f000 f8ef 	bl	8003674 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8003496:	4a07      	ldr	r2, [pc, #28]	@ (80034b4 <HAL_InitTick+0xe8>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000008 	.word	0x20000008
 80034ac:	e000e010 	.word	0xe000e010
 80034b0:	20000000 	.word	0x20000000
 80034b4:	20000004 	.word	0x20000004

080034b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034bc:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <HAL_IncTick+0x20>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	461a      	mov	r2, r3
 80034c2:	4b06      	ldr	r3, [pc, #24]	@ (80034dc <HAL_IncTick+0x24>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4413      	add	r3, r2
 80034c8:	4a04      	ldr	r2, [pc, #16]	@ (80034dc <HAL_IncTick+0x24>)
 80034ca:	6013      	str	r3, [r2, #0]
}
 80034cc:	bf00      	nop
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	20000008 	.word	0x20000008
 80034dc:	200001d8 	.word	0x200001d8

080034e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  return uwTick;
 80034e4:	4b03      	ldr	r3, [pc, #12]	@ (80034f4 <HAL_GetTick+0x14>)
 80034e6:	681b      	ldr	r3, [r3, #0]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	200001d8 	.word	0x200001d8

080034f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003500:	f7ff ffee 	bl	80034e0 <HAL_GetTick>
 8003504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d005      	beq.n	800351e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003512:	4b0a      	ldr	r3, [pc, #40]	@ (800353c <HAL_Delay+0x44>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4413      	add	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800351e:	bf00      	nop
 8003520:	f7ff ffde 	bl	80034e0 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	429a      	cmp	r2, r3
 800352e:	d8f7      	bhi.n	8003520 <HAL_Delay+0x28>
  {
  }
}
 8003530:	bf00      	nop
 8003532:	bf00      	nop
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000008 	.word	0x20000008

08003540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003550:	4b0c      	ldr	r3, [pc, #48]	@ (8003584 <__NVIC_SetPriorityGrouping+0x44>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800355c:	4013      	ands	r3, r2
 800355e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003568:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800356c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003572:	4a04      	ldr	r2, [pc, #16]	@ (8003584 <__NVIC_SetPriorityGrouping+0x44>)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	60d3      	str	r3, [r2, #12]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800358c:	4b04      	ldr	r3, [pc, #16]	@ (80035a0 <__NVIC_GetPriorityGrouping+0x18>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	0a1b      	lsrs	r3, r3, #8
 8003592:	f003 0307 	and.w	r3, r3, #7
}
 8003596:	4618      	mov	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	6039      	str	r1, [r7, #0]
 80035ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80035b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	db0a      	blt.n	80035ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	490c      	ldr	r1, [pc, #48]	@ (80035f0 <__NVIC_SetPriority+0x4c>)
 80035be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035c2:	0112      	lsls	r2, r2, #4
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	440b      	add	r3, r1
 80035c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035cc:	e00a      	b.n	80035e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	4908      	ldr	r1, [pc, #32]	@ (80035f4 <__NVIC_SetPriority+0x50>)
 80035d4:	88fb      	ldrh	r3, [r7, #6]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	3b04      	subs	r3, #4
 80035dc:	0112      	lsls	r2, r2, #4
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	440b      	add	r3, r1
 80035e2:	761a      	strb	r2, [r3, #24]
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	e000e100 	.word	0xe000e100
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b089      	sub	sp, #36	@ 0x24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f1c3 0307 	rsb	r3, r3, #7
 8003612:	2b04      	cmp	r3, #4
 8003614:	bf28      	it	cs
 8003616:	2304      	movcs	r3, #4
 8003618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3304      	adds	r3, #4
 800361e:	2b06      	cmp	r3, #6
 8003620:	d902      	bls.n	8003628 <NVIC_EncodePriority+0x30>
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3b03      	subs	r3, #3
 8003626:	e000      	b.n	800362a <NVIC_EncodePriority+0x32>
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800362c:	f04f 32ff 	mov.w	r2, #4294967295
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43da      	mvns	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	401a      	ands	r2, r3
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003640:	f04f 31ff 	mov.w	r1, #4294967295
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fa01 f303 	lsl.w	r3, r1, r3
 800364a:	43d9      	mvns	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003650:	4313      	orrs	r3, r2
         );
}
 8003652:	4618      	mov	r0, r3
 8003654:	3724      	adds	r7, #36	@ 0x24
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff ff6a 	bl	8003540 <__NVIC_SetPriorityGrouping>
}
 800366c:	bf00      	nop
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003682:	f7ff ff81 	bl	8003588 <__NVIC_GetPriorityGrouping>
 8003686:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	6978      	ldr	r0, [r7, #20]
 800368e:	f7ff ffb3 	bl	80035f8 <NVIC_EncodePriority>
 8003692:	4602      	mov	r2, r0
 8003694:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003698:	4611      	mov	r1, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff ff82 	bl	80035a4 <__NVIC_SetPriority>
}
 80036a0:	bf00      	nop
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036b8:	d301      	bcc.n	80036be <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80036ba:	2301      	movs	r3, #1
 80036bc:	e00d      	b.n	80036da <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80036be:	4a0a      	ldr	r2, [pc, #40]	@ (80036e8 <HAL_SYSTICK_Config+0x40>)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80036c6:	4b08      	ldr	r3, [pc, #32]	@ (80036e8 <HAL_SYSTICK_Config+0x40>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80036cc:	4b06      	ldr	r3, [pc, #24]	@ (80036e8 <HAL_SYSTICK_Config+0x40>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a05      	ldr	r2, [pc, #20]	@ (80036e8 <HAL_SYSTICK_Config+0x40>)
 80036d2:	f043 0303 	orr.w	r3, r3, #3
 80036d6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	e000e010 	.word	0xe000e010

080036ec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d844      	bhi.n	8003784 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80036fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003700 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80036fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003700:	08003723 	.word	0x08003723
 8003704:	08003741 	.word	0x08003741
 8003708:	08003763 	.word	0x08003763
 800370c:	08003785 	.word	0x08003785
 8003710:	08003715 	.word	0x08003715
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003714:	4b1f      	ldr	r3, [pc, #124]	@ (8003794 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1e      	ldr	r2, [pc, #120]	@ (8003794 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800371a:	f043 0304 	orr.w	r3, r3, #4
 800371e:	6013      	str	r3, [r2, #0]
      break;
 8003720:	e031      	b.n	8003786 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003722:	4b1c      	ldr	r3, [pc, #112]	@ (8003794 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1b      	ldr	r2, [pc, #108]	@ (8003794 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003728:	f023 0304 	bic.w	r3, r3, #4
 800372c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800372e:	4b1a      	ldr	r3, [pc, #104]	@ (8003798 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003730:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003734:	4a18      	ldr	r2, [pc, #96]	@ (8003798 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003736:	f023 030c 	bic.w	r3, r3, #12
 800373a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800373e:	e022      	b.n	8003786 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003740:	4b14      	ldr	r3, [pc, #80]	@ (8003794 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a13      	ldr	r2, [pc, #76]	@ (8003794 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003746:	f023 0304 	bic.w	r3, r3, #4
 800374a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800374c:	4b12      	ldr	r3, [pc, #72]	@ (8003798 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800374e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003752:	f023 030c 	bic.w	r3, r3, #12
 8003756:	4a10      	ldr	r2, [pc, #64]	@ (8003798 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003758:	f043 0304 	orr.w	r3, r3, #4
 800375c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003760:	e011      	b.n	8003786 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003762:	4b0c      	ldr	r3, [pc, #48]	@ (8003794 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a0b      	ldr	r2, [pc, #44]	@ (8003794 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003768:	f023 0304 	bic.w	r3, r3, #4
 800376c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800376e:	4b0a      	ldr	r3, [pc, #40]	@ (8003798 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003770:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003774:	f023 030c 	bic.w	r3, r3, #12
 8003778:	4a07      	ldr	r2, [pc, #28]	@ (8003798 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800377a:	f043 0308 	orr.w	r3, r3, #8
 800377e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003782:	e000      	b.n	8003786 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003784:	bf00      	nop
  }
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	e000e010 	.word	0xe000e010
 8003798:	44020c00 	.word	0x44020c00

0800379c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80037a2:	4b17      	ldr	r3, [pc, #92]	@ (8003800 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80037ae:	2304      	movs	r3, #4
 80037b0:	607b      	str	r3, [r7, #4]
 80037b2:	e01e      	b.n	80037f2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80037b4:	4b13      	ldr	r3, [pc, #76]	@ (8003804 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80037b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80037ba:	f003 030c 	and.w	r3, r3, #12
 80037be:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d00f      	beq.n	80037e6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d80f      	bhi.n	80037ec <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d003      	beq.n	80037e0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80037d8:	e008      	b.n	80037ec <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80037da:	2300      	movs	r3, #0
 80037dc:	607b      	str	r3, [r7, #4]
        break;
 80037de:	e008      	b.n	80037f2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80037e0:	2301      	movs	r3, #1
 80037e2:	607b      	str	r3, [r7, #4]
        break;
 80037e4:	e005      	b.n	80037f2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80037e6:	2302      	movs	r3, #2
 80037e8:	607b      	str	r3, [r7, #4]
        break;
 80037ea:	e002      	b.n	80037f2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80037ec:	2300      	movs	r3, #0
 80037ee:	607b      	str	r3, [r7, #4]
        break;
 80037f0:	bf00      	nop
    }
  }
  return systick_source;
 80037f2:	687b      	ldr	r3, [r7, #4]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	e000e010 	.word	0xe000e010
 8003804:	44020c00 	.word	0x44020c00

08003808 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003810:	f7ff fe66 	bl	80034e0 <HAL_GetTick>
 8003814:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e06b      	b.n	80038f8 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d008      	beq.n	800383e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2220      	movs	r2, #32
 8003830:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e05c      	b.n	80038f8 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 0204 	orr.w	r2, r2, #4
 800384c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2205      	movs	r2, #5
 8003852:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003856:	e020      	b.n	800389a <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003858:	f7ff fe42 	bl	80034e0 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b05      	cmp	r3, #5
 8003864:	d919      	bls.n	800389a <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386a:	f043 0210 	orr.w	r2, r3, #16
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2203      	movs	r2, #3
 8003876:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800387e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800388a:	2201      	movs	r2, #1
 800388c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e02e      	b.n	80038f8 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0d7      	beq.n	8003858 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695a      	ldr	r2, [r3, #20]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0202 	orr.w	r2, r2, #2
 80038b6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2204      	movs	r2, #4
 80038bc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80038c8:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d007      	beq.n	80038ee <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038e2:	2201      	movs	r2, #1
 80038e4:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2200      	movs	r2, #0
 80038ec:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800390e:	e142      	b.n	8003b96 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	2101      	movs	r1, #1
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	fa01 f303 	lsl.w	r3, r1, r3
 800391c:	4013      	ands	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 8134 	beq.w	8003b90 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b02      	cmp	r3, #2
 800392e:	d003      	beq.n	8003938 <HAL_GPIO_Init+0x38>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b12      	cmp	r3, #18
 8003936:	d125      	bne.n	8003984 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	08da      	lsrs	r2, r3, #3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3208      	adds	r2, #8
 8003940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003944:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	220f      	movs	r2, #15
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	43db      	mvns	r3, r3
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4013      	ands	r3, r2
 800395a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	f003 020f 	and.w	r2, r3, #15
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	08da      	lsrs	r2, r3, #3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3208      	adds	r2, #8
 800397e:	6979      	ldr	r1, [r7, #20]
 8003980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	2203      	movs	r2, #3
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	4013      	ands	r3, r2
 800399a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 0203 	and.w	r2, r3, #3
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d00b      	beq.n	80039d8 <HAL_GPIO_Init+0xd8>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d007      	beq.n	80039d8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039cc:	2b11      	cmp	r3, #17
 80039ce:	d003      	beq.n	80039d8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b12      	cmp	r3, #18
 80039d6:	d130      	bne.n	8003a3a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	2203      	movs	r2, #3
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	43db      	mvns	r3, r3
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4013      	ands	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a0e:	2201      	movs	r2, #1
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43db      	mvns	r3, r3
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	091b      	lsrs	r3, r3, #4
 8003a24:	f003 0201 	and.w	r2, r3, #1
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d109      	bne.n	8003a5a <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d11b      	bne.n	8003a8a <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d017      	beq.n	8003a8a <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	2203      	movs	r2, #3
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d07c      	beq.n	8003b90 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003a96:	4a47      	ldr	r2, [pc, #284]	@ (8003bb4 <HAL_GPIO_Init+0x2b4>)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	089b      	lsrs	r3, r3, #2
 8003a9c:	3318      	adds	r3, #24
 8003a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa2:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	220f      	movs	r2, #15
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	0a9a      	lsrs	r2, r3, #10
 8003abe:	4b3e      	ldr	r3, [pc, #248]	@ (8003bb8 <HAL_GPIO_Init+0x2b8>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	f002 0203 	and.w	r2, r2, #3
 8003ac8:	00d2      	lsls	r2, r2, #3
 8003aca:	4093      	lsls	r3, r2
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003ad2:	4938      	ldr	r1, [pc, #224]	@ (8003bb4 <HAL_GPIO_Init+0x2b4>)
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	089b      	lsrs	r3, r3, #2
 8003ad8:	3318      	adds	r3, #24
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003ae0:	4b34      	ldr	r3, [pc, #208]	@ (8003bb4 <HAL_GPIO_Init+0x2b4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4013      	ands	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003b04:	4a2b      	ldr	r2, [pc, #172]	@ (8003bb4 <HAL_GPIO_Init+0x2b4>)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8003bb4 <HAL_GPIO_Init+0x2b4>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	43db      	mvns	r3, r3
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	4013      	ands	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003b2e:	4a21      	ldr	r2, [pc, #132]	@ (8003bb4 <HAL_GPIO_Init+0x2b4>)
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003b34:	4b1f      	ldr	r3, [pc, #124]	@ (8003bb4 <HAL_GPIO_Init+0x2b4>)
 8003b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b3a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	4013      	ands	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003b5a:	4a16      	ldr	r2, [pc, #88]	@ (8003bb4 <HAL_GPIO_Init+0x2b4>)
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003b62:	4b14      	ldr	r3, [pc, #80]	@ (8003bb4 <HAL_GPIO_Init+0x2b4>)
 8003b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b68:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4013      	ands	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003b88:	4a0a      	ldr	r2, [pc, #40]	@ (8003bb4 <HAL_GPIO_Init+0x2b4>)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	3301      	adds	r3, #1
 8003b94:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f47f aeb5 	bne.w	8003910 <HAL_GPIO_Init+0x10>
  }
}
 8003ba6:	bf00      	nop
 8003ba8:	bf00      	nop
 8003baa:	371c      	adds	r7, #28
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	44022000 	.word	0x44022000
 8003bb8:	002f7f7f 	.word	0x002f7f7f

08003bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	807b      	strh	r3, [r7, #2]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bcc:	787b      	ldrb	r3, [r7, #1]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bd2:	887a      	ldrh	r2, [r7, #2]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bd8:	e002      	b.n	8003be0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bda:	887a      	ldrh	r2, [r7, #2]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bfe:	887a      	ldrh	r2, [r7, #2]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4013      	ands	r3, r2
 8003c04:	041a      	lsls	r2, r3, #16
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	43d9      	mvns	r1, r3
 8003c0a:	887b      	ldrh	r3, [r7, #2]
 8003c0c:	400b      	ands	r3, r1
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	619a      	str	r2, [r3, #24]
}
 8003c14:	bf00      	nop
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_GPIO_EnableHighSPeedLowVoltage>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_EnableHighSPeedLowVoltage(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Set HSLVR gpio pin */
  SET_BIT(GPIOx->HSLVR, GPIO_Pin);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c30:	887b      	ldrh	r3, [r7, #2]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003c48:	4b05      	ldr	r3, [pc, #20]	@ (8003c60 <HAL_ICACHE_Enable+0x1c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a04      	ldr	r2, [pc, #16]	@ (8003c60 <HAL_ICACHE_Enable+0x1c>)
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	40030400 	.word	0x40030400

08003c64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d102      	bne.n	8003c78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	f000 bc28 	b.w	80044c8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c78:	4b94      	ldr	r3, [pc, #592]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	f003 0318 	and.w	r3, r3, #24
 8003c80:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003c82:	4b92      	ldr	r3, [pc, #584]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0310 	and.w	r3, r3, #16
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d05b      	beq.n	8003d50 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d005      	beq.n	8003caa <HAL_RCC_OscConfig+0x46>
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	2b18      	cmp	r3, #24
 8003ca2:	d114      	bne.n	8003cce <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d111      	bne.n	8003cce <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d102      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f000 bc08 	b.w	80044c8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003cb8:	4b84      	ldr	r3, [pc, #528]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	041b      	lsls	r3, r3, #16
 8003cc6:	4981      	ldr	r1, [pc, #516]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003ccc:	e040      	b.n	8003d50 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d023      	beq.n	8003d1e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003cd6:	4b7d      	ldr	r3, [pc, #500]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a7c      	ldr	r2, [pc, #496]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce2:	f7ff fbfd 	bl	80034e0 <HAL_GetTick>
 8003ce6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003cea:	f7ff fbf9 	bl	80034e0 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e3e5      	b.n	80044c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003cfc:	4b73      	ldr	r3, [pc, #460]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003d08:	4b70      	ldr	r3, [pc, #448]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	041b      	lsls	r3, r3, #16
 8003d16:	496d      	ldr	r1, [pc, #436]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	618b      	str	r3, [r1, #24]
 8003d1c:	e018      	b.n	8003d50 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003d1e:	4b6b      	ldr	r3, [pc, #428]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a6a      	ldr	r2, [pc, #424]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003d24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2a:	f7ff fbd9 	bl	80034e0 <HAL_GetTick>
 8003d2e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003d32:	f7ff fbd5 	bl	80034e0 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e3c1      	b.n	80044c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003d44:	4b61      	ldr	r3, [pc, #388]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f0      	bne.n	8003d32 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80a0 	beq.w	8003e9e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	2b10      	cmp	r3, #16
 8003d62:	d005      	beq.n	8003d70 <HAL_RCC_OscConfig+0x10c>
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	2b18      	cmp	r3, #24
 8003d68:	d109      	bne.n	8003d7e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d106      	bne.n	8003d7e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f040 8092 	bne.w	8003e9e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e3a4      	b.n	80044c8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d86:	d106      	bne.n	8003d96 <HAL_RCC_OscConfig+0x132>
 8003d88:	4b50      	ldr	r3, [pc, #320]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a4f      	ldr	r2, [pc, #316]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003d8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	e058      	b.n	8003e48 <HAL_RCC_OscConfig+0x1e4>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d112      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x160>
 8003d9e:	4b4b      	ldr	r3, [pc, #300]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a4a      	ldr	r2, [pc, #296]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003da4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	4b48      	ldr	r3, [pc, #288]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a47      	ldr	r2, [pc, #284]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003db0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	4b45      	ldr	r3, [pc, #276]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a44      	ldr	r2, [pc, #272]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003dbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	e041      	b.n	8003e48 <HAL_RCC_OscConfig+0x1e4>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dcc:	d112      	bne.n	8003df4 <HAL_RCC_OscConfig+0x190>
 8003dce:	4b3f      	ldr	r3, [pc, #252]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a3e      	ldr	r2, [pc, #248]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003dd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	4b3c      	ldr	r3, [pc, #240]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a3b      	ldr	r2, [pc, #236]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003de0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	4b39      	ldr	r3, [pc, #228]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a38      	ldr	r2, [pc, #224]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	e029      	b.n	8003e48 <HAL_RCC_OscConfig+0x1e4>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003dfc:	d112      	bne.n	8003e24 <HAL_RCC_OscConfig+0x1c0>
 8003dfe:	4b33      	ldr	r3, [pc, #204]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a32      	ldr	r2, [pc, #200]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003e04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	4b30      	ldr	r3, [pc, #192]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a2f      	ldr	r2, [pc, #188]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003e10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	4b2d      	ldr	r3, [pc, #180]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a2c      	ldr	r2, [pc, #176]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	e011      	b.n	8003e48 <HAL_RCC_OscConfig+0x1e4>
 8003e24:	4b29      	ldr	r3, [pc, #164]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a28      	ldr	r2, [pc, #160]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003e2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	4b26      	ldr	r3, [pc, #152]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a25      	ldr	r2, [pc, #148]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003e36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	4b23      	ldr	r3, [pc, #140]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a22      	ldr	r2, [pc, #136]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003e42:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d013      	beq.n	8003e78 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e50:	f7ff fb46 	bl	80034e0 <HAL_GetTick>
 8003e54:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003e58:	f7ff fb42 	bl	80034e0 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b64      	cmp	r3, #100	@ 0x64
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e32e      	b.n	80044c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e6a:	4b18      	ldr	r3, [pc, #96]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0f0      	beq.n	8003e58 <HAL_RCC_OscConfig+0x1f4>
 8003e76:	e012      	b.n	8003e9e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7ff fb32 	bl	80034e0 <HAL_GetTick>
 8003e7c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003e80:	f7ff fb2e 	bl	80034e0 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b64      	cmp	r3, #100	@ 0x64
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e31a      	b.n	80044c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e92:	4b0e      	ldr	r3, [pc, #56]	@ (8003ecc <HAL_RCC_OscConfig+0x268>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 809a 	beq.w	8003fe0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_RCC_OscConfig+0x25a>
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	2b18      	cmp	r3, #24
 8003eb6:	d149      	bne.n	8003f4c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d146      	bne.n	8003f4c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d104      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e2fe      	b.n	80044c8 <HAL_RCC_OscConfig+0x864>
 8003eca:	bf00      	nop
 8003ecc:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d11c      	bne.n	8003f10 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003ed6:	4b9a      	ldr	r3, [pc, #616]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0218 	and.w	r2, r3, #24
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d014      	beq.n	8003f10 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003ee6:	4b96      	ldr	r3, [pc, #600]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 0218 	bic.w	r2, r3, #24
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	4993      	ldr	r1, [pc, #588]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003ef8:	f000 fdd0 	bl	8004a9c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003efc:	4b91      	ldr	r3, [pc, #580]	@ (8004144 <HAL_RCC_OscConfig+0x4e0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff fa63 	bl	80033cc <HAL_InitTick>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e2db      	b.n	80044c8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f10:	f7ff fae6 	bl	80034e0 <HAL_GetTick>
 8003f14:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003f18:	f7ff fae2 	bl	80034e0 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e2ce      	b.n	80044c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f2a:	4b85      	ldr	r3, [pc, #532]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003f36:	4b82      	ldr	r3, [pc, #520]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	041b      	lsls	r3, r3, #16
 8003f44:	497e      	ldr	r1, [pc, #504]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003f4a:	e049      	b.n	8003fe0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d02c      	beq.n	8003fae <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003f54:	4b7a      	ldr	r3, [pc, #488]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f023 0218 	bic.w	r2, r3, #24
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	4977      	ldr	r1, [pc, #476]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003f66:	4b76      	ldr	r3, [pc, #472]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a75      	ldr	r2, [pc, #468]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f72:	f7ff fab5 	bl	80034e0 <HAL_GetTick>
 8003f76:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003f7a:	f7ff fab1 	bl	80034e0 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e29d      	b.n	80044c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f8c:	4b6c      	ldr	r3, [pc, #432]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0f0      	beq.n	8003f7a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003f98:	4b69      	ldr	r3, [pc, #420]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	041b      	lsls	r3, r3, #16
 8003fa6:	4966      	ldr	r1, [pc, #408]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	610b      	str	r3, [r1, #16]
 8003fac:	e018      	b.n	8003fe0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fae:	4b64      	ldr	r3, [pc, #400]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a63      	ldr	r2, [pc, #396]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8003fb4:	f023 0301 	bic.w	r3, r3, #1
 8003fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fba:	f7ff fa91 	bl	80034e0 <HAL_GetTick>
 8003fbe:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003fc2:	f7ff fa8d 	bl	80034e0 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e279      	b.n	80044c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fd4:	4b5a      	ldr	r3, [pc, #360]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1f0      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0308 	and.w	r3, r3, #8
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d03c      	beq.n	8004066 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d01c      	beq.n	800402e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ff4:	4b52      	ldr	r3, [pc, #328]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8003ff6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ffa:	4a51      	ldr	r2, [pc, #324]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8003ffc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004000:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004004:	f7ff fa6c 	bl	80034e0 <HAL_GetTick>
 8004008:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800400c:	f7ff fa68 	bl	80034e0 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e254      	b.n	80044c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800401e:	4b48      	ldr	r3, [pc, #288]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8004020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004024:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0ef      	beq.n	800400c <HAL_RCC_OscConfig+0x3a8>
 800402c:	e01b      	b.n	8004066 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800402e:	4b44      	ldr	r3, [pc, #272]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8004030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004034:	4a42      	ldr	r2, [pc, #264]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8004036:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800403a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403e:	f7ff fa4f 	bl	80034e0 <HAL_GetTick>
 8004042:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004046:	f7ff fa4b 	bl	80034e0 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e237      	b.n	80044c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004058:	4b39      	ldr	r3, [pc, #228]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 800405a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800405e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1ef      	bne.n	8004046 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 80d2 	beq.w	8004218 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004074:	4b34      	ldr	r3, [pc, #208]	@ (8004148 <HAL_RCC_OscConfig+0x4e4>)
 8004076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d118      	bne.n	80040b2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004080:	4b31      	ldr	r3, [pc, #196]	@ (8004148 <HAL_RCC_OscConfig+0x4e4>)
 8004082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004084:	4a30      	ldr	r2, [pc, #192]	@ (8004148 <HAL_RCC_OscConfig+0x4e4>)
 8004086:	f043 0301 	orr.w	r3, r3, #1
 800408a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800408c:	f7ff fa28 	bl	80034e0 <HAL_GetTick>
 8004090:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004094:	f7ff fa24 	bl	80034e0 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e210      	b.n	80044c8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80040a6:	4b28      	ldr	r3, [pc, #160]	@ (8004148 <HAL_RCC_OscConfig+0x4e4>)
 80040a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d108      	bne.n	80040cc <HAL_RCC_OscConfig+0x468>
 80040ba:	4b21      	ldr	r3, [pc, #132]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 80040bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040ca:	e074      	b.n	80041b6 <HAL_RCC_OscConfig+0x552>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d118      	bne.n	8004106 <HAL_RCC_OscConfig+0x4a2>
 80040d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 80040d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040da:	4a19      	ldr	r2, [pc, #100]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 80040dc:	f023 0301 	bic.w	r3, r3, #1
 80040e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040e4:	4b16      	ldr	r3, [pc, #88]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 80040e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040ea:	4a15      	ldr	r2, [pc, #84]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 80040ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040f4:	4b12      	ldr	r3, [pc, #72]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 80040f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040fa:	4a11      	ldr	r2, [pc, #68]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 80040fc:	f023 0304 	bic.w	r3, r3, #4
 8004100:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004104:	e057      	b.n	80041b6 <HAL_RCC_OscConfig+0x552>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	2b05      	cmp	r3, #5
 800410c:	d11e      	bne.n	800414c <HAL_RCC_OscConfig+0x4e8>
 800410e:	4b0c      	ldr	r3, [pc, #48]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8004110:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004114:	4a0a      	ldr	r2, [pc, #40]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8004116:	f043 0304 	orr.w	r3, r3, #4
 800411a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800411e:	4b08      	ldr	r3, [pc, #32]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8004120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004124:	4a06      	ldr	r2, [pc, #24]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8004126:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800412a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800412e:	4b04      	ldr	r3, [pc, #16]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8004130:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004134:	4a02      	ldr	r2, [pc, #8]	@ (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8004136:	f043 0301 	orr.w	r3, r3, #1
 800413a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800413e:	e03a      	b.n	80041b6 <HAL_RCC_OscConfig+0x552>
 8004140:	44020c00 	.word	0x44020c00
 8004144:	20000004 	.word	0x20000004
 8004148:	44020800 	.word	0x44020800
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2b85      	cmp	r3, #133	@ 0x85
 8004152:	d118      	bne.n	8004186 <HAL_RCC_OscConfig+0x522>
 8004154:	4ba2      	ldr	r3, [pc, #648]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 8004156:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800415a:	4aa1      	ldr	r2, [pc, #644]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 800415c:	f043 0304 	orr.w	r3, r3, #4
 8004160:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004164:	4b9e      	ldr	r3, [pc, #632]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 8004166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800416a:	4a9d      	ldr	r2, [pc, #628]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 800416c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004170:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004174:	4b9a      	ldr	r3, [pc, #616]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 8004176:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800417a:	4a99      	ldr	r2, [pc, #612]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 800417c:	f043 0301 	orr.w	r3, r3, #1
 8004180:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004184:	e017      	b.n	80041b6 <HAL_RCC_OscConfig+0x552>
 8004186:	4b96      	ldr	r3, [pc, #600]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 8004188:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800418c:	4a94      	ldr	r2, [pc, #592]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 800418e:	f023 0301 	bic.w	r3, r3, #1
 8004192:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004196:	4b92      	ldr	r3, [pc, #584]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 8004198:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800419c:	4a90      	ldr	r2, [pc, #576]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 800419e:	f023 0304 	bic.w	r3, r3, #4
 80041a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80041a6:	4b8e      	ldr	r3, [pc, #568]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 80041a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041ac:	4a8c      	ldr	r2, [pc, #560]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 80041ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d016      	beq.n	80041ec <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041be:	f7ff f98f 	bl	80034e0 <HAL_GetTick>
 80041c2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041c4:	e00a      	b.n	80041dc <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c6:	f7ff f98b 	bl	80034e0 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e175      	b.n	80044c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041dc:	4b80      	ldr	r3, [pc, #512]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 80041de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0ed      	beq.n	80041c6 <HAL_RCC_OscConfig+0x562>
 80041ea:	e015      	b.n	8004218 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ec:	f7ff f978 	bl	80034e0 <HAL_GetTick>
 80041f0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041f2:	e00a      	b.n	800420a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f4:	f7ff f974 	bl	80034e0 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004202:	4293      	cmp	r3, r2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e15e      	b.n	80044c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800420a:	4b75      	ldr	r3, [pc, #468]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 800420c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1ed      	bne.n	80041f4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0320 	and.w	r3, r3, #32
 8004220:	2b00      	cmp	r3, #0
 8004222:	d036      	beq.n	8004292 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	2b00      	cmp	r3, #0
 800422a:	d019      	beq.n	8004260 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800422c:	4b6c      	ldr	r3, [pc, #432]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a6b      	ldr	r2, [pc, #428]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 8004232:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004236:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004238:	f7ff f952 	bl	80034e0 <HAL_GetTick>
 800423c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004240:	f7ff f94e 	bl	80034e0 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e13a      	b.n	80044c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004252:	4b63      	ldr	r3, [pc, #396]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0f0      	beq.n	8004240 <HAL_RCC_OscConfig+0x5dc>
 800425e:	e018      	b.n	8004292 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004260:	4b5f      	ldr	r3, [pc, #380]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a5e      	ldr	r2, [pc, #376]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 8004266:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800426a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426c:	f7ff f938 	bl	80034e0 <HAL_GetTick>
 8004270:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004274:	f7ff f934 	bl	80034e0 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e120      	b.n	80044c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004286:	4b56      	ldr	r3, [pc, #344]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f0      	bne.n	8004274 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 8115 	beq.w	80044c6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	2b18      	cmp	r3, #24
 80042a0:	f000 80af 	beq.w	8004402 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	f040 8086 	bne.w	80043ba <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80042ae:	4b4c      	ldr	r3, [pc, #304]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a4b      	ldr	r2, [pc, #300]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 80042b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ba:	f7ff f911 	bl	80034e0 <HAL_GetTick>
 80042be:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80042c2:	f7ff f90d 	bl	80034e0 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e0f9      	b.n	80044c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80042d4:	4b42      	ldr	r3, [pc, #264]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1f0      	bne.n	80042c2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80042e0:	4b3f      	ldr	r3, [pc, #252]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 80042e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80042e8:	f023 0303 	bic.w	r3, r3, #3
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80042f4:	0212      	lsls	r2, r2, #8
 80042f6:	430a      	orrs	r2, r1
 80042f8:	4939      	ldr	r1, [pc, #228]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	628b      	str	r3, [r1, #40]	@ 0x28
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004302:	3b01      	subs	r3, #1
 8004304:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430c:	3b01      	subs	r3, #1
 800430e:	025b      	lsls	r3, r3, #9
 8004310:	b29b      	uxth	r3, r3
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004318:	3b01      	subs	r3, #1
 800431a:	041b      	lsls	r3, r3, #16
 800431c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004326:	3b01      	subs	r3, #1
 8004328:	061b      	lsls	r3, r3, #24
 800432a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800432e:	492c      	ldr	r1, [pc, #176]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 8004330:	4313      	orrs	r3, r2
 8004332:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004334:	4b2a      	ldr	r3, [pc, #168]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 8004336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004338:	4a29      	ldr	r2, [pc, #164]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 800433a:	f023 0310 	bic.w	r3, r3, #16
 800433e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004344:	4a26      	ldr	r2, [pc, #152]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800434a:	4b25      	ldr	r3, [pc, #148]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 800434c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434e:	4a24      	ldr	r2, [pc, #144]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 8004350:	f043 0310 	orr.w	r3, r3, #16
 8004354:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004356:	4b22      	ldr	r3, [pc, #136]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 8004358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435a:	f023 020c 	bic.w	r2, r3, #12
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004362:	491f      	ldr	r1, [pc, #124]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 8004364:	4313      	orrs	r3, r2
 8004366:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004368:	4b1d      	ldr	r3, [pc, #116]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 800436a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436c:	f023 0220 	bic.w	r2, r3, #32
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004374:	491a      	ldr	r1, [pc, #104]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 8004376:	4313      	orrs	r3, r2
 8004378:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800437a:	4b19      	ldr	r3, [pc, #100]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 800437c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437e:	4a18      	ldr	r2, [pc, #96]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 8004380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004384:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004386:	4b16      	ldr	r3, [pc, #88]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a15      	ldr	r2, [pc, #84]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 800438c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004392:	f7ff f8a5 	bl	80034e0 <HAL_GetTick>
 8004396:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800439a:	f7ff f8a1 	bl	80034e0 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e08d      	b.n	80044c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80043ac:	4b0c      	ldr	r3, [pc, #48]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f0      	beq.n	800439a <HAL_RCC_OscConfig+0x736>
 80043b8:	e085      	b.n	80044c6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80043ba:	4b09      	ldr	r3, [pc, #36]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a08      	ldr	r2, [pc, #32]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 80043c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c6:	f7ff f88b 	bl	80034e0 <HAL_GetTick>
 80043ca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80043cc:	e00a      	b.n	80043e4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80043ce:	f7ff f887 	bl	80034e0 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d903      	bls.n	80043e4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e073      	b.n	80044c8 <HAL_RCC_OscConfig+0x864>
 80043e0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80043e4:	4b3a      	ldr	r3, [pc, #232]	@ (80044d0 <HAL_RCC_OscConfig+0x86c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1ee      	bne.n	80043ce <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80043f0:	4b37      	ldr	r3, [pc, #220]	@ (80044d0 <HAL_RCC_OscConfig+0x86c>)
 80043f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f4:	4a36      	ldr	r2, [pc, #216]	@ (80044d0 <HAL_RCC_OscConfig+0x86c>)
 80043f6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80043fa:	f023 0303 	bic.w	r3, r3, #3
 80043fe:	6293      	str	r3, [r2, #40]	@ 0x28
 8004400:	e061      	b.n	80044c6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004402:	4b33      	ldr	r3, [pc, #204]	@ (80044d0 <HAL_RCC_OscConfig+0x86c>)
 8004404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004406:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004408:	4b31      	ldr	r3, [pc, #196]	@ (80044d0 <HAL_RCC_OscConfig+0x86c>)
 800440a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800440c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004412:	2b01      	cmp	r3, #1
 8004414:	d031      	beq.n	800447a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f003 0203 	and.w	r2, r3, #3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004420:	429a      	cmp	r2, r3
 8004422:	d12a      	bne.n	800447a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	0a1b      	lsrs	r3, r3, #8
 8004428:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004430:	429a      	cmp	r2, r3
 8004432:	d122      	bne.n	800447a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004440:	429a      	cmp	r2, r3
 8004442:	d11a      	bne.n	800447a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	0a5b      	lsrs	r3, r3, #9
 8004448:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004450:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004452:	429a      	cmp	r2, r3
 8004454:	d111      	bne.n	800447a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	0c1b      	lsrs	r3, r3, #16
 800445a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004462:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004464:	429a      	cmp	r2, r3
 8004466:	d108      	bne.n	800447a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	0e1b      	lsrs	r3, r3, #24
 800446c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004474:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004476:	429a      	cmp	r2, r3
 8004478:	d001      	beq.n	800447e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e024      	b.n	80044c8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800447e:	4b14      	ldr	r3, [pc, #80]	@ (80044d0 <HAL_RCC_OscConfig+0x86c>)
 8004480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004482:	08db      	lsrs	r3, r3, #3
 8004484:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800448c:	429a      	cmp	r2, r3
 800448e:	d01a      	beq.n	80044c6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004490:	4b0f      	ldr	r3, [pc, #60]	@ (80044d0 <HAL_RCC_OscConfig+0x86c>)
 8004492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004494:	4a0e      	ldr	r2, [pc, #56]	@ (80044d0 <HAL_RCC_OscConfig+0x86c>)
 8004496:	f023 0310 	bic.w	r3, r3, #16
 800449a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449c:	f7ff f820 	bl	80034e0 <HAL_GetTick>
 80044a0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80044a2:	bf00      	nop
 80044a4:	f7ff f81c 	bl	80034e0 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d0f9      	beq.n	80044a4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b4:	4a06      	ldr	r2, [pc, #24]	@ (80044d0 <HAL_RCC_OscConfig+0x86c>)
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80044ba:	4b05      	ldr	r3, [pc, #20]	@ (80044d0 <HAL_RCC_OscConfig+0x86c>)
 80044bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044be:	4a04      	ldr	r2, [pc, #16]	@ (80044d0 <HAL_RCC_OscConfig+0x86c>)
 80044c0:	f043 0310 	orr.w	r3, r3, #16
 80044c4:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3720      	adds	r7, #32
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	44020c00 	.word	0x44020c00

080044d4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e19e      	b.n	8004826 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044e8:	4b83      	ldr	r3, [pc, #524]	@ (80046f8 <HAL_RCC_ClockConfig+0x224>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d910      	bls.n	8004518 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f6:	4b80      	ldr	r3, [pc, #512]	@ (80046f8 <HAL_RCC_ClockConfig+0x224>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f023 020f 	bic.w	r2, r3, #15
 80044fe:	497e      	ldr	r1, [pc, #504]	@ (80046f8 <HAL_RCC_ClockConfig+0x224>)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	4313      	orrs	r3, r2
 8004504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004506:	4b7c      	ldr	r3, [pc, #496]	@ (80046f8 <HAL_RCC_ClockConfig+0x224>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e186      	b.n	8004826 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b00      	cmp	r3, #0
 8004522:	d012      	beq.n	800454a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	695a      	ldr	r2, [r3, #20]
 8004528:	4b74      	ldr	r3, [pc, #464]	@ (80046fc <HAL_RCC_ClockConfig+0x228>)
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	0a1b      	lsrs	r3, r3, #8
 800452e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004532:	429a      	cmp	r2, r3
 8004534:	d909      	bls.n	800454a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004536:	4b71      	ldr	r3, [pc, #452]	@ (80046fc <HAL_RCC_ClockConfig+0x228>)
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	021b      	lsls	r3, r3, #8
 8004544:	496d      	ldr	r1, [pc, #436]	@ (80046fc <HAL_RCC_ClockConfig+0x228>)
 8004546:	4313      	orrs	r3, r2
 8004548:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d012      	beq.n	800457c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691a      	ldr	r2, [r3, #16]
 800455a:	4b68      	ldr	r3, [pc, #416]	@ (80046fc <HAL_RCC_ClockConfig+0x228>)
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	091b      	lsrs	r3, r3, #4
 8004560:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004564:	429a      	cmp	r2, r3
 8004566:	d909      	bls.n	800457c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004568:	4b64      	ldr	r3, [pc, #400]	@ (80046fc <HAL_RCC_ClockConfig+0x228>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	4961      	ldr	r1, [pc, #388]	@ (80046fc <HAL_RCC_ClockConfig+0x228>)
 8004578:	4313      	orrs	r3, r2
 800457a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d010      	beq.n	80045aa <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	4b5b      	ldr	r3, [pc, #364]	@ (80046fc <HAL_RCC_ClockConfig+0x228>)
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004594:	429a      	cmp	r2, r3
 8004596:	d908      	bls.n	80045aa <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004598:	4b58      	ldr	r3, [pc, #352]	@ (80046fc <HAL_RCC_ClockConfig+0x228>)
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	4955      	ldr	r1, [pc, #340]	@ (80046fc <HAL_RCC_ClockConfig+0x228>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d010      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	4b50      	ldr	r3, [pc, #320]	@ (80046fc <HAL_RCC_ClockConfig+0x228>)
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d908      	bls.n	80045d8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80045c6:	4b4d      	ldr	r3, [pc, #308]	@ (80046fc <HAL_RCC_ClockConfig+0x228>)
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	f023 020f 	bic.w	r2, r3, #15
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	494a      	ldr	r1, [pc, #296]	@ (80046fc <HAL_RCC_ClockConfig+0x228>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 8093 	beq.w	800470c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d107      	bne.n	80045fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80045ee:	4b43      	ldr	r3, [pc, #268]	@ (80046fc <HAL_RCC_ClockConfig+0x228>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d121      	bne.n	800463e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e113      	b.n	8004826 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b02      	cmp	r3, #2
 8004604:	d107      	bne.n	8004616 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004606:	4b3d      	ldr	r3, [pc, #244]	@ (80046fc <HAL_RCC_ClockConfig+0x228>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d115      	bne.n	800463e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e107      	b.n	8004826 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d107      	bne.n	800462e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800461e:	4b37      	ldr	r3, [pc, #220]	@ (80046fc <HAL_RCC_ClockConfig+0x228>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004626:	2b00      	cmp	r3, #0
 8004628:	d109      	bne.n	800463e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e0fb      	b.n	8004826 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800462e:	4b33      	ldr	r3, [pc, #204]	@ (80046fc <HAL_RCC_ClockConfig+0x228>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e0f3      	b.n	8004826 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800463e:	4b2f      	ldr	r3, [pc, #188]	@ (80046fc <HAL_RCC_ClockConfig+0x228>)
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	f023 0203 	bic.w	r2, r3, #3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	492c      	ldr	r1, [pc, #176]	@ (80046fc <HAL_RCC_ClockConfig+0x228>)
 800464c:	4313      	orrs	r3, r2
 800464e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004650:	f7fe ff46 	bl	80034e0 <HAL_GetTick>
 8004654:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b03      	cmp	r3, #3
 800465c:	d112      	bne.n	8004684 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800465e:	e00a      	b.n	8004676 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004660:	f7fe ff3e 	bl	80034e0 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e0d7      	b.n	8004826 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004676:	4b21      	ldr	r3, [pc, #132]	@ (80046fc <HAL_RCC_ClockConfig+0x228>)
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f003 0318 	and.w	r3, r3, #24
 800467e:	2b18      	cmp	r3, #24
 8004680:	d1ee      	bne.n	8004660 <HAL_RCC_ClockConfig+0x18c>
 8004682:	e043      	b.n	800470c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b02      	cmp	r3, #2
 800468a:	d112      	bne.n	80046b2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800468c:	e00a      	b.n	80046a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800468e:	f7fe ff27 	bl	80034e0 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f241 3288 	movw	r2, #5000	@ 0x1388
 800469c:	4293      	cmp	r3, r2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e0c0      	b.n	8004826 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80046a4:	4b15      	ldr	r3, [pc, #84]	@ (80046fc <HAL_RCC_ClockConfig+0x228>)
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	f003 0318 	and.w	r3, r3, #24
 80046ac:	2b10      	cmp	r3, #16
 80046ae:	d1ee      	bne.n	800468e <HAL_RCC_ClockConfig+0x1ba>
 80046b0:	e02c      	b.n	800470c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d122      	bne.n	8004700 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80046ba:	e00a      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80046bc:	f7fe ff10 	bl	80034e0 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e0a9      	b.n	8004826 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80046d2:	4b0a      	ldr	r3, [pc, #40]	@ (80046fc <HAL_RCC_ClockConfig+0x228>)
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f003 0318 	and.w	r3, r3, #24
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d1ee      	bne.n	80046bc <HAL_RCC_ClockConfig+0x1e8>
 80046de:	e015      	b.n	800470c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80046e0:	f7fe fefe 	bl	80034e0 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d906      	bls.n	8004700 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e097      	b.n	8004826 <HAL_RCC_ClockConfig+0x352>
 80046f6:	bf00      	nop
 80046f8:	40022000 	.word	0x40022000
 80046fc:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004700:	4b4b      	ldr	r3, [pc, #300]	@ (8004830 <HAL_RCC_ClockConfig+0x35c>)
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	f003 0318 	and.w	r3, r3, #24
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e9      	bne.n	80046e0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d010      	beq.n	800473a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	4b44      	ldr	r3, [pc, #272]	@ (8004830 <HAL_RCC_ClockConfig+0x35c>)
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	f003 030f 	and.w	r3, r3, #15
 8004724:	429a      	cmp	r2, r3
 8004726:	d208      	bcs.n	800473a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004728:	4b41      	ldr	r3, [pc, #260]	@ (8004830 <HAL_RCC_ClockConfig+0x35c>)
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	f023 020f 	bic.w	r2, r3, #15
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	493e      	ldr	r1, [pc, #248]	@ (8004830 <HAL_RCC_ClockConfig+0x35c>)
 8004736:	4313      	orrs	r3, r2
 8004738:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800473a:	4b3e      	ldr	r3, [pc, #248]	@ (8004834 <HAL_RCC_ClockConfig+0x360>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d210      	bcs.n	800476a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004748:	4b3a      	ldr	r3, [pc, #232]	@ (8004834 <HAL_RCC_ClockConfig+0x360>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f023 020f 	bic.w	r2, r3, #15
 8004750:	4938      	ldr	r1, [pc, #224]	@ (8004834 <HAL_RCC_ClockConfig+0x360>)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	4313      	orrs	r3, r2
 8004756:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004758:	4b36      	ldr	r3, [pc, #216]	@ (8004834 <HAL_RCC_ClockConfig+0x360>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 030f 	and.w	r3, r3, #15
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d001      	beq.n	800476a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e05d      	b.n	8004826 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	2b00      	cmp	r3, #0
 8004774:	d010      	beq.n	8004798 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	4b2d      	ldr	r3, [pc, #180]	@ (8004830 <HAL_RCC_ClockConfig+0x35c>)
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004782:	429a      	cmp	r2, r3
 8004784:	d208      	bcs.n	8004798 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004786:	4b2a      	ldr	r3, [pc, #168]	@ (8004830 <HAL_RCC_ClockConfig+0x35c>)
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	4927      	ldr	r1, [pc, #156]	@ (8004830 <HAL_RCC_ClockConfig+0x35c>)
 8004794:	4313      	orrs	r3, r2
 8004796:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d012      	beq.n	80047ca <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	4b21      	ldr	r3, [pc, #132]	@ (8004830 <HAL_RCC_ClockConfig+0x35c>)
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	091b      	lsrs	r3, r3, #4
 80047ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d209      	bcs.n	80047ca <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80047b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004830 <HAL_RCC_ClockConfig+0x35c>)
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	491a      	ldr	r1, [pc, #104]	@ (8004830 <HAL_RCC_ClockConfig+0x35c>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0310 	and.w	r3, r3, #16
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d012      	beq.n	80047fc <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695a      	ldr	r2, [r3, #20]
 80047da:	4b15      	ldr	r3, [pc, #84]	@ (8004830 <HAL_RCC_ClockConfig+0x35c>)
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	0a1b      	lsrs	r3, r3, #8
 80047e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d209      	bcs.n	80047fc <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80047e8:	4b11      	ldr	r3, [pc, #68]	@ (8004830 <HAL_RCC_ClockConfig+0x35c>)
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	021b      	lsls	r3, r3, #8
 80047f6:	490e      	ldr	r1, [pc, #56]	@ (8004830 <HAL_RCC_ClockConfig+0x35c>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80047fc:	f000 f822 	bl	8004844 <HAL_RCC_GetSysClockFreq>
 8004800:	4602      	mov	r2, r0
 8004802:	4b0b      	ldr	r3, [pc, #44]	@ (8004830 <HAL_RCC_ClockConfig+0x35c>)
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	490b      	ldr	r1, [pc, #44]	@ (8004838 <HAL_RCC_ClockConfig+0x364>)
 800480c:	5ccb      	ldrb	r3, [r1, r3]
 800480e:	fa22 f303 	lsr.w	r3, r2, r3
 8004812:	4a0a      	ldr	r2, [pc, #40]	@ (800483c <HAL_RCC_ClockConfig+0x368>)
 8004814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004816:	4b0a      	ldr	r3, [pc, #40]	@ (8004840 <HAL_RCC_ClockConfig+0x36c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f7fe fdd6 	bl	80033cc <HAL_InitTick>
 8004820:	4603      	mov	r3, r0
 8004822:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004824:	7afb      	ldrb	r3, [r7, #11]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	44020c00 	.word	0x44020c00
 8004834:	40022000 	.word	0x40022000
 8004838:	08014678 	.word	0x08014678
 800483c:	20000000 	.word	0x20000000
 8004840:	20000004 	.word	0x20000004

08004844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004844:	b480      	push	{r7}
 8004846:	b089      	sub	sp, #36	@ 0x24
 8004848:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800484a:	4b8c      	ldr	r3, [pc, #560]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x238>)
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f003 0318 	and.w	r3, r3, #24
 8004852:	2b08      	cmp	r3, #8
 8004854:	d102      	bne.n	800485c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004856:	4b8a      	ldr	r3, [pc, #552]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x23c>)
 8004858:	61fb      	str	r3, [r7, #28]
 800485a:	e107      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800485c:	4b87      	ldr	r3, [pc, #540]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x238>)
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	f003 0318 	and.w	r3, r3, #24
 8004864:	2b00      	cmp	r3, #0
 8004866:	d112      	bne.n	800488e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004868:	4b84      	ldr	r3, [pc, #528]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x238>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0320 	and.w	r3, r3, #32
 8004870:	2b00      	cmp	r3, #0
 8004872:	d009      	beq.n	8004888 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004874:	4b81      	ldr	r3, [pc, #516]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x238>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	08db      	lsrs	r3, r3, #3
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	4a81      	ldr	r2, [pc, #516]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0x240>)
 8004880:	fa22 f303 	lsr.w	r3, r2, r3
 8004884:	61fb      	str	r3, [r7, #28]
 8004886:	e0f1      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004888:	4b7e      	ldr	r3, [pc, #504]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0x240>)
 800488a:	61fb      	str	r3, [r7, #28]
 800488c:	e0ee      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800488e:	4b7b      	ldr	r3, [pc, #492]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x238>)
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	f003 0318 	and.w	r3, r3, #24
 8004896:	2b10      	cmp	r3, #16
 8004898:	d102      	bne.n	80048a0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800489a:	4b7b      	ldr	r3, [pc, #492]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0x244>)
 800489c:	61fb      	str	r3, [r7, #28]
 800489e:	e0e5      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048a0:	4b76      	ldr	r3, [pc, #472]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x238>)
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	f003 0318 	and.w	r3, r3, #24
 80048a8:	2b18      	cmp	r3, #24
 80048aa:	f040 80dd 	bne.w	8004a68 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80048ae:	4b73      	ldr	r3, [pc, #460]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x238>)
 80048b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80048b8:	4b70      	ldr	r3, [pc, #448]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x238>)
 80048ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048bc:	0a1b      	lsrs	r3, r3, #8
 80048be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80048c4:	4b6d      	ldr	r3, [pc, #436]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x238>)
 80048c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c8:	091b      	lsrs	r3, r3, #4
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80048d0:	4b6a      	ldr	r3, [pc, #424]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x238>)
 80048d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80048d4:	08db      	lsrs	r3, r3, #3
 80048d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	fb02 f303 	mul.w	r3, r2, r3
 80048e0:	ee07 3a90 	vmov	s15, r3
 80048e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 80b7 	beq.w	8004a62 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d003      	beq.n	8004902 <HAL_RCC_GetSysClockFreq+0xbe>
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d056      	beq.n	80049ae <HAL_RCC_GetSysClockFreq+0x16a>
 8004900:	e077      	b.n	80049f2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004902:	4b5e      	ldr	r3, [pc, #376]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x238>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b00      	cmp	r3, #0
 800490c:	d02d      	beq.n	800496a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800490e:	4b5b      	ldr	r3, [pc, #364]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x238>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	08db      	lsrs	r3, r3, #3
 8004914:	f003 0303 	and.w	r3, r3, #3
 8004918:	4a5a      	ldr	r2, [pc, #360]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0x240>)
 800491a:	fa22 f303 	lsr.w	r3, r2, r3
 800491e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	ee07 3a90 	vmov	s15, r3
 8004930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004934:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004938:	4b50      	ldr	r3, [pc, #320]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x238>)
 800493a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800493c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004940:	ee07 3a90 	vmov	s15, r3
 8004944:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004948:	ed97 6a02 	vldr	s12, [r7, #8]
 800494c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004a8c <HAL_RCC_GetSysClockFreq+0x248>
 8004950:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004954:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004958:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800495c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004964:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004968:	e065      	b.n	8004a36 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	ee07 3a90 	vmov	s15, r3
 8004970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004974:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004a90 <HAL_RCC_GetSysClockFreq+0x24c>
 8004978:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800497c:	4b3f      	ldr	r3, [pc, #252]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x238>)
 800497e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004984:	ee07 3a90 	vmov	s15, r3
 8004988:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800498c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004990:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004a8c <HAL_RCC_GetSysClockFreq+0x248>
 8004994:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004998:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800499c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80049ac:	e043      	b.n	8004a36 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	ee07 3a90 	vmov	s15, r3
 80049b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004a94 <HAL_RCC_GetSysClockFreq+0x250>
 80049bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049c0:	4b2e      	ldr	r3, [pc, #184]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x238>)
 80049c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80049d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80049d4:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004a8c <HAL_RCC_GetSysClockFreq+0x248>
 80049d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80049e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ec:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80049f0:	e021      	b.n	8004a36 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	ee07 3a90 	vmov	s15, r3
 80049f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004a98 <HAL_RCC_GetSysClockFreq+0x254>
 8004a00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a04:	4b1d      	ldr	r3, [pc, #116]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x238>)
 8004a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a0c:	ee07 3a90 	vmov	s15, r3
 8004a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a14:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a18:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004a8c <HAL_RCC_GetSysClockFreq+0x248>
 8004a1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a20:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a28:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a30:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004a34:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004a36:	4b11      	ldr	r3, [pc, #68]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x238>)
 8004a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a3a:	0a5b      	lsrs	r3, r3, #9
 8004a3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a40:	3301      	adds	r3, #1
 8004a42:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	ee07 3a90 	vmov	s15, r3
 8004a4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a4e:	edd7 6a06 	vldr	s13, [r7, #24]
 8004a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a5a:	ee17 3a90 	vmov	r3, s15
 8004a5e:	61fb      	str	r3, [r7, #28]
 8004a60:	e004      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004a62:	2300      	movs	r3, #0
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	e001      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004a68:	4b06      	ldr	r3, [pc, #24]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0x240>)
 8004a6a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004a6c:	69fb      	ldr	r3, [r7, #28]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3724      	adds	r7, #36	@ 0x24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	44020c00 	.word	0x44020c00
 8004a80:	003d0900 	.word	0x003d0900
 8004a84:	03d09000 	.word	0x03d09000
 8004a88:	017d7840 	.word	0x017d7840
 8004a8c:	46000000 	.word	0x46000000
 8004a90:	4c742400 	.word	0x4c742400
 8004a94:	4bbebc20 	.word	0x4bbebc20
 8004a98:	4a742400 	.word	0x4a742400

08004a9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004aa0:	f7ff fed0 	bl	8004844 <HAL_RCC_GetSysClockFreq>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	4b08      	ldr	r3, [pc, #32]	@ (8004ac8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004aaa:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004aae:	4907      	ldr	r1, [pc, #28]	@ (8004acc <HAL_RCC_GetHCLKFreq+0x30>)
 8004ab0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004ab2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aba:	4a05      	ldr	r2, [pc, #20]	@ (8004ad0 <HAL_RCC_GetHCLKFreq+0x34>)
 8004abc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004abe:	4b04      	ldr	r3, [pc, #16]	@ (8004ad0 <HAL_RCC_GetHCLKFreq+0x34>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	44020c00 	.word	0x44020c00
 8004acc:	08014678 	.word	0x08014678
 8004ad0:	20000000 	.word	0x20000000

08004ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004ad8:	f7ff ffe0 	bl	8004a9c <HAL_RCC_GetHCLKFreq>
 8004adc:	4602      	mov	r2, r0
 8004ade:	4b06      	ldr	r3, [pc, #24]	@ (8004af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	091b      	lsrs	r3, r3, #4
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	4904      	ldr	r1, [pc, #16]	@ (8004afc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004aea:	5ccb      	ldrb	r3, [r1, r3]
 8004aec:	f003 031f 	and.w	r3, r3, #31
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	44020c00 	.word	0x44020c00
 8004afc:	08014688 	.word	0x08014688

08004b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004b04:	f7ff ffca 	bl	8004a9c <HAL_RCC_GetHCLKFreq>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	4b06      	ldr	r3, [pc, #24]	@ (8004b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	0a1b      	lsrs	r3, r3, #8
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	4904      	ldr	r1, [pc, #16]	@ (8004b28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b16:	5ccb      	ldrb	r3, [r1, r3]
 8004b18:	f003 031f 	and.w	r3, r3, #31
 8004b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	44020c00 	.word	0x44020c00
 8004b28:	08014688 	.word	0x08014688

08004b2c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004b30:	f7ff ffb4 	bl	8004a9c <HAL_RCC_GetHCLKFreq>
 8004b34:	4602      	mov	r2, r0
 8004b36:	4b06      	ldr	r3, [pc, #24]	@ (8004b50 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	0b1b      	lsrs	r3, r3, #12
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	4904      	ldr	r1, [pc, #16]	@ (8004b54 <HAL_RCC_GetPCLK3Freq+0x28>)
 8004b42:	5ccb      	ldrb	r3, [r1, r3]
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	44020c00 	.word	0x44020c00
 8004b54:	08014688 	.word	0x08014688

08004b58 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b5c:	b0d8      	sub	sp, #352	@ 0x160
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b64:	2300      	movs	r3, #0
 8004b66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b78:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004b7c:	2500      	movs	r5, #0
 8004b7e:	ea54 0305 	orrs.w	r3, r4, r5
 8004b82:	d00b      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004b84:	4bcd      	ldr	r3, [pc, #820]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004b86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b8a:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004b8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b94:	4ac9      	ldr	r2, [pc, #804]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004b96:	430b      	orrs	r3, r1
 8004b98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	f002 0801 	and.w	r8, r2, #1
 8004ba8:	f04f 0900 	mov.w	r9, #0
 8004bac:	ea58 0309 	orrs.w	r3, r8, r9
 8004bb0:	d042      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004bb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb8:	2b05      	cmp	r3, #5
 8004bba:	d823      	bhi.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004c0d 	.word	0x08004c0d
 8004bc8:	08004bdd 	.word	0x08004bdd
 8004bcc:	08004bf1 	.word	0x08004bf1
 8004bd0:	08004c0d 	.word	0x08004c0d
 8004bd4:	08004c0d 	.word	0x08004c0d
 8004bd8:	08004c0d 	.word	0x08004c0d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004be0:	3308      	adds	r3, #8
 8004be2:	4618      	mov	r0, r3
 8004be4:	f004 fee0 	bl	80099a8 <RCCEx_PLL2_Config>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004bee:	e00e      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bf4:	3330      	adds	r3, #48	@ 0x30
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f004 ff6e 	bl	8009ad8 <RCCEx_PLL3_Config>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004c02:	e004      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004c0a:	e000      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8004c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c0e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10c      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004c16:	4ba9      	ldr	r3, [pc, #676]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004c1c:	f023 0107 	bic.w	r1, r3, #7
 8004c20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c26:	4aa5      	ldr	r2, [pc, #660]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004c2e:	e003      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c30:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c34:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c40:	f002 0a02 	and.w	sl, r2, #2
 8004c44:	f04f 0b00 	mov.w	fp, #0
 8004c48:	ea5a 030b 	orrs.w	r3, sl, fp
 8004c4c:	f000 8088 	beq.w	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004c50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c56:	2b28      	cmp	r3, #40	@ 0x28
 8004c58:	d868      	bhi.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c60 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c60:	08004d35 	.word	0x08004d35
 8004c64:	08004d2d 	.word	0x08004d2d
 8004c68:	08004d2d 	.word	0x08004d2d
 8004c6c:	08004d2d 	.word	0x08004d2d
 8004c70:	08004d2d 	.word	0x08004d2d
 8004c74:	08004d2d 	.word	0x08004d2d
 8004c78:	08004d2d 	.word	0x08004d2d
 8004c7c:	08004d2d 	.word	0x08004d2d
 8004c80:	08004d05 	.word	0x08004d05
 8004c84:	08004d2d 	.word	0x08004d2d
 8004c88:	08004d2d 	.word	0x08004d2d
 8004c8c:	08004d2d 	.word	0x08004d2d
 8004c90:	08004d2d 	.word	0x08004d2d
 8004c94:	08004d2d 	.word	0x08004d2d
 8004c98:	08004d2d 	.word	0x08004d2d
 8004c9c:	08004d2d 	.word	0x08004d2d
 8004ca0:	08004d19 	.word	0x08004d19
 8004ca4:	08004d2d 	.word	0x08004d2d
 8004ca8:	08004d2d 	.word	0x08004d2d
 8004cac:	08004d2d 	.word	0x08004d2d
 8004cb0:	08004d2d 	.word	0x08004d2d
 8004cb4:	08004d2d 	.word	0x08004d2d
 8004cb8:	08004d2d 	.word	0x08004d2d
 8004cbc:	08004d2d 	.word	0x08004d2d
 8004cc0:	08004d35 	.word	0x08004d35
 8004cc4:	08004d2d 	.word	0x08004d2d
 8004cc8:	08004d2d 	.word	0x08004d2d
 8004ccc:	08004d2d 	.word	0x08004d2d
 8004cd0:	08004d2d 	.word	0x08004d2d
 8004cd4:	08004d2d 	.word	0x08004d2d
 8004cd8:	08004d2d 	.word	0x08004d2d
 8004cdc:	08004d2d 	.word	0x08004d2d
 8004ce0:	08004d35 	.word	0x08004d35
 8004ce4:	08004d2d 	.word	0x08004d2d
 8004ce8:	08004d2d 	.word	0x08004d2d
 8004cec:	08004d2d 	.word	0x08004d2d
 8004cf0:	08004d2d 	.word	0x08004d2d
 8004cf4:	08004d2d 	.word	0x08004d2d
 8004cf8:	08004d2d 	.word	0x08004d2d
 8004cfc:	08004d2d 	.word	0x08004d2d
 8004d00:	08004d35 	.word	0x08004d35
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d08:	3308      	adds	r3, #8
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f004 fe4c 	bl	80099a8 <RCCEx_PLL2_Config>
 8004d10:	4603      	mov	r3, r0
 8004d12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8004d16:	e00e      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d1c:	3330      	adds	r3, #48	@ 0x30
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f004 feda 	bl	8009ad8 <RCCEx_PLL3_Config>
 8004d24:	4603      	mov	r3, r0
 8004d26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8004d2a:	e004      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004d32:	e000      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004d34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10c      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004d3e:	4b5f      	ldr	r3, [pc, #380]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004d40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004d44:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004d48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d4e:	4a5b      	ldr	r2, [pc, #364]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004d50:	430b      	orrs	r3, r1
 8004d52:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004d56:	e003      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d58:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d5c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d68:	f002 0304 	and.w	r3, r2, #4
 8004d6c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8004d70:	2300      	movs	r3, #0
 8004d72:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8004d76:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	d04e      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004d80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d86:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004d8a:	d02c      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004d8c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004d90:	d825      	bhi.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004d92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d96:	d028      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004d98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d9c:	d81f      	bhi.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004d9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004da0:	d025      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004da2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004da4:	d81b      	bhi.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004da6:	2b80      	cmp	r3, #128	@ 0x80
 8004da8:	d00f      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004daa:	2b80      	cmp	r3, #128	@ 0x80
 8004dac:	d817      	bhi.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d01f      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004db2:	2b40      	cmp	r3, #64	@ 0x40
 8004db4:	d113      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004db6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dba:	3308      	adds	r3, #8
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f004 fdf3 	bl	80099a8 <RCCEx_PLL2_Config>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004dc8:	e014      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004dca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dce:	3330      	adds	r3, #48	@ 0x30
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f004 fe81 	bl	8009ad8 <RCCEx_PLL3_Config>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004ddc:	e00a      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004de4:	e006      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004de6:	bf00      	nop
 8004de8:	e004      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004dea:	bf00      	nop
 8004dec:	e002      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004dee:	bf00      	nop
 8004df0:	e000      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004df4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10c      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004dfc:	4b2f      	ldr	r3, [pc, #188]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004dfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e02:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004e06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e0c:	4a2b      	ldr	r2, [pc, #172]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004e0e:	430b      	orrs	r3, r1
 8004e10:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004e14:	e003      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e1a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e26:	f002 0308 	and.w	r3, r2, #8
 8004e2a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8004e34:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	d056      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8004e3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e44:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004e48:	d031      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004e4a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004e4e:	d82a      	bhi.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004e50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e54:	d02d      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004e56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e5a:	d824      	bhi.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004e5c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004e60:	d029      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004e62:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004e66:	d81e      	bhi.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004e68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e6c:	d011      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004e6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e72:	d818      	bhi.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d023      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e7c:	d113      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e82:	3308      	adds	r3, #8
 8004e84:	4618      	mov	r0, r3
 8004e86:	f004 fd8f 	bl	80099a8 <RCCEx_PLL2_Config>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004e90:	e017      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e96:	3330      	adds	r3, #48	@ 0x30
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f004 fe1d 	bl	8009ad8 <RCCEx_PLL3_Config>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004ea4:	e00d      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004eac:	e009      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004eae:	bf00      	nop
 8004eb0:	e007      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004eb2:	bf00      	nop
 8004eb4:	e005      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004eb6:	bf00      	nop
 8004eb8:	e003      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004eba:	bf00      	nop
 8004ebc:	44020c00 	.word	0x44020c00
        break;
 8004ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ec2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10c      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004eca:	4bbb      	ldr	r3, [pc, #748]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004ecc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004ed0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004ed4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ed8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004eda:	4ab7      	ldr	r2, [pc, #732]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004edc:	430b      	orrs	r3, r1
 8004ede:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004ee2:	e003      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ee8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004eec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f002 0310 	and.w	r3, r2, #16
 8004ef8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8004efc:	2300      	movs	r3, #0
 8004efe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8004f02:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8004f06:	460b      	mov	r3, r1
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	d053      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004f0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f12:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004f16:	d031      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004f18:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004f1c:	d82a      	bhi.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004f1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f22:	d02d      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004f24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f28:	d824      	bhi.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004f2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f2e:	d029      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004f30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f34:	d81e      	bhi.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f3a:	d011      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004f3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f40:	d818      	bhi.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d020      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f4a:	d113      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f50:	3308      	adds	r3, #8
 8004f52:	4618      	mov	r0, r3
 8004f54:	f004 fd28 	bl	80099a8 <RCCEx_PLL2_Config>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8004f5e:	e014      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f64:	3330      	adds	r3, #48	@ 0x30
 8004f66:	4618      	mov	r0, r3
 8004f68:	f004 fdb6 	bl	8009ad8 <RCCEx_PLL3_Config>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8004f72:	e00a      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004f7a:	e006      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004f7c:	bf00      	nop
 8004f7e:	e004      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004f80:	bf00      	nop
 8004f82:	e002      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004f84:	bf00      	nop
 8004f86:	e000      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10c      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004f92:	4b89      	ldr	r3, [pc, #548]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004f94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004f98:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004f9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fa2:	4a85      	ldr	r2, [pc, #532]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004fa4:	430b      	orrs	r3, r1
 8004fa6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004faa:	e003      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004fb0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004fb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbc:	f002 0320 	and.w	r3, r2, #32
 8004fc0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8004fca:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	d053      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004fd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fda:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004fde:	d031      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004fe0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004fe4:	d82a      	bhi.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004fe6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fea:	d02d      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004fec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ff0:	d824      	bhi.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004ff2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004ff6:	d029      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004ff8:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004ffc:	d81e      	bhi.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004ffe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005002:	d011      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005008:	d818      	bhi.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800500a:	2b00      	cmp	r3, #0
 800500c:	d020      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800500e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005012:	d113      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005014:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005018:	3308      	adds	r3, #8
 800501a:	4618      	mov	r0, r3
 800501c:	f004 fcc4 	bl	80099a8 <RCCEx_PLL2_Config>
 8005020:	4603      	mov	r3, r0
 8005022:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005026:	e014      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005028:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800502c:	3330      	adds	r3, #48	@ 0x30
 800502e:	4618      	mov	r0, r3
 8005030:	f004 fd52 	bl	8009ad8 <RCCEx_PLL3_Config>
 8005034:	4603      	mov	r3, r0
 8005036:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800503a:	e00a      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005042:	e006      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005044:	bf00      	nop
 8005046:	e004      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005048:	bf00      	nop
 800504a:	e002      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800504c:	bf00      	nop
 800504e:	e000      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005052:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10c      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800505a:	4b57      	ldr	r3, [pc, #348]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800505c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005060:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8005064:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506a:	4a53      	ldr	r2, [pc, #332]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800506c:	430b      	orrs	r3, r1
 800506e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005072:	e003      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005074:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005078:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800507c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005084:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005088:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800508c:	2300      	movs	r3, #0
 800508e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005092:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8005096:	460b      	mov	r3, r1
 8005098:	4313      	orrs	r3, r2
 800509a:	d053      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 800509c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050a2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80050a6:	d031      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80050a8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80050ac:	d82a      	bhi.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80050ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050b2:	d02d      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80050b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050b8:	d824      	bhi.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80050ba:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80050be:	d029      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80050c0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80050c4:	d81e      	bhi.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80050c6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80050ca:	d011      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80050cc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80050d0:	d818      	bhi.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d020      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80050d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80050da:	d113      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050e0:	3308      	adds	r3, #8
 80050e2:	4618      	mov	r0, r3
 80050e4:	f004 fc60 	bl	80099a8 <RCCEx_PLL2_Config>
 80050e8:	4603      	mov	r3, r0
 80050ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80050ee:	e014      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050f4:	3330      	adds	r3, #48	@ 0x30
 80050f6:	4618      	mov	r0, r3
 80050f8:	f004 fcee 	bl	8009ad8 <RCCEx_PLL3_Config>
 80050fc:	4603      	mov	r3, r0
 80050fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8005102:	e00a      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800510a:	e006      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800510c:	bf00      	nop
 800510e:	e004      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005110:	bf00      	nop
 8005112:	e002      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005114:	bf00      	nop
 8005116:	e000      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800511a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10c      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8005122:	4b25      	ldr	r3, [pc, #148]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005124:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005128:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 800512c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005132:	4a21      	ldr	r2, [pc, #132]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005134:	430b      	orrs	r3, r1
 8005136:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800513a:	e003      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005140:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005144:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005150:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005154:	2300      	movs	r3, #0
 8005156:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800515a:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800515e:	460b      	mov	r3, r1
 8005160:	4313      	orrs	r3, r2
 8005162:	d055      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8005164:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005168:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800516a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800516e:	d033      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8005170:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005174:	d82c      	bhi.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005176:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800517a:	d02f      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x684>
 800517c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005180:	d826      	bhi.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005182:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005186:	d02b      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005188:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800518c:	d820      	bhi.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800518e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005192:	d013      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005194:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005198:	d81a      	bhi.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800519a:	2b00      	cmp	r3, #0
 800519c:	d022      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800519e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051a2:	d115      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051a8:	3308      	adds	r3, #8
 80051aa:	4618      	mov	r0, r3
 80051ac:	f004 fbfc 	bl	80099a8 <RCCEx_PLL2_Config>
 80051b0:	4603      	mov	r3, r0
 80051b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80051b6:	e016      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80051b8:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051c0:	3330      	adds	r3, #48	@ 0x30
 80051c2:	4618      	mov	r0, r3
 80051c4:	f004 fc88 	bl	8009ad8 <RCCEx_PLL3_Config>
 80051c8:	4603      	mov	r3, r0
 80051ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80051ce:	e00a      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80051d6:	e006      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80051d8:	bf00      	nop
 80051da:	e004      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80051dc:	bf00      	nop
 80051de:	e002      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80051e0:	bf00      	nop
 80051e2:	e000      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80051e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10c      	bne.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80051ee:	4bbb      	ldr	r3, [pc, #748]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80051f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80051f4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80051f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051fe:	4ab7      	ldr	r2, [pc, #732]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005200:	430b      	orrs	r3, r1
 8005202:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005206:	e003      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005208:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800520c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8005210:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800521c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005220:	2300      	movs	r3, #0
 8005222:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005226:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800522a:	460b      	mov	r3, r1
 800522c:	4313      	orrs	r3, r2
 800522e:	d053      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8005230:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005234:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005236:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800523a:	d031      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800523c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005240:	d82a      	bhi.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005242:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005246:	d02d      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8005248:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800524c:	d824      	bhi.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800524e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005252:	d029      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8005254:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005258:	d81e      	bhi.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800525a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800525e:	d011      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8005260:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005264:	d818      	bhi.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005266:	2b00      	cmp	r3, #0
 8005268:	d020      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x754>
 800526a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800526e:	d113      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005270:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005274:	3308      	adds	r3, #8
 8005276:	4618      	mov	r0, r3
 8005278:	f004 fb96 	bl	80099a8 <RCCEx_PLL2_Config>
 800527c:	4603      	mov	r3, r0
 800527e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005282:	e014      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005284:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005288:	3330      	adds	r3, #48	@ 0x30
 800528a:	4618      	mov	r0, r3
 800528c:	f004 fc24 	bl	8009ad8 <RCCEx_PLL3_Config>
 8005290:	4603      	mov	r3, r0
 8005292:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005296:	e00a      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800529e:	e006      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80052a0:	bf00      	nop
 80052a2:	e004      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80052a4:	bf00      	nop
 80052a6:	e002      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80052a8:	bf00      	nop
 80052aa:	e000      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80052ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10c      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80052b6:	4b89      	ldr	r3, [pc, #548]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80052b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80052bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80052c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052c6:	4a85      	ldr	r2, [pc, #532]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80052c8:	430b      	orrs	r3, r1
 80052ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80052ce:	e003      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80052d4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80052d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e0:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80052e4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80052e8:	2300      	movs	r3, #0
 80052ea:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80052ee:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80052f2:	460b      	mov	r3, r1
 80052f4:	4313      	orrs	r3, r2
 80052f6:	d055      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80052f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005300:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8005304:	d031      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x812>
 8005306:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800530a:	d82a      	bhi.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800530c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005310:	d02d      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x816>
 8005312:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005316:	d824      	bhi.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005318:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800531c:	d029      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800531e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005322:	d81e      	bhi.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005324:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005328:	d011      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800532a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800532e:	d818      	bhi.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005330:	2b00      	cmp	r3, #0
 8005332:	d020      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8005334:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005338:	d113      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800533a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800533e:	3308      	adds	r3, #8
 8005340:	4618      	mov	r0, r3
 8005342:	f004 fb31 	bl	80099a8 <RCCEx_PLL2_Config>
 8005346:	4603      	mov	r3, r0
 8005348:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800534c:	e014      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800534e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005352:	3330      	adds	r3, #48	@ 0x30
 8005354:	4618      	mov	r0, r3
 8005356:	f004 fbbf 	bl	8009ad8 <RCCEx_PLL3_Config>
 800535a:	4603      	mov	r3, r0
 800535c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005360:	e00a      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005368:	e006      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800536a:	bf00      	nop
 800536c:	e004      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800536e:	bf00      	nop
 8005370:	e002      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005372:	bf00      	nop
 8005374:	e000      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005378:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10d      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8005380:	4b56      	ldr	r3, [pc, #344]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005382:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005386:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 800538a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800538e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005392:	4a52      	ldr	r2, [pc, #328]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005394:	430b      	orrs	r3, r1
 8005396:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800539a:	e003      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800539c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80053a0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80053a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ac:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80053b0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80053b4:	2300      	movs	r3, #0
 80053b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80053ba:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80053be:	460b      	mov	r3, r1
 80053c0:	4313      	orrs	r3, r2
 80053c2:	d044      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80053c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053cc:	2b05      	cmp	r3, #5
 80053ce:	d823      	bhi.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80053d0:	a201      	add	r2, pc, #4	@ (adr r2, 80053d8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80053d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d6:	bf00      	nop
 80053d8:	08005421 	.word	0x08005421
 80053dc:	080053f1 	.word	0x080053f1
 80053e0:	08005405 	.word	0x08005405
 80053e4:	08005421 	.word	0x08005421
 80053e8:	08005421 	.word	0x08005421
 80053ec:	08005421 	.word	0x08005421
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053f4:	3308      	adds	r3, #8
 80053f6:	4618      	mov	r0, r3
 80053f8:	f004 fad6 	bl	80099a8 <RCCEx_PLL2_Config>
 80053fc:	4603      	mov	r3, r0
 80053fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8005402:	e00e      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005404:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005408:	3330      	adds	r3, #48	@ 0x30
 800540a:	4618      	mov	r0, r3
 800540c:	f004 fb64 	bl	8009ad8 <RCCEx_PLL3_Config>
 8005410:	4603      	mov	r3, r0
 8005412:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8005416:	e004      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800541e:	e000      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8005420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005422:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10d      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800542a:	4b2c      	ldr	r3, [pc, #176]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800542c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005430:	f023 0107 	bic.w	r1, r3, #7
 8005434:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005438:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800543c:	4a27      	ldr	r2, [pc, #156]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800543e:	430b      	orrs	r3, r1
 8005440:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005444:	e003      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005446:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800544a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800544e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005456:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800545a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800545e:	2300      	movs	r3, #0
 8005460:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005464:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005468:	460b      	mov	r3, r1
 800546a:	4313      	orrs	r3, r2
 800546c:	d04f      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800546e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005476:	2b50      	cmp	r3, #80	@ 0x50
 8005478:	d029      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x976>
 800547a:	2b50      	cmp	r3, #80	@ 0x50
 800547c:	d823      	bhi.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800547e:	2b40      	cmp	r3, #64	@ 0x40
 8005480:	d027      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8005482:	2b40      	cmp	r3, #64	@ 0x40
 8005484:	d81f      	bhi.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005486:	2b30      	cmp	r3, #48	@ 0x30
 8005488:	d025      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800548a:	2b30      	cmp	r3, #48	@ 0x30
 800548c:	d81b      	bhi.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800548e:	2b20      	cmp	r3, #32
 8005490:	d00f      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005492:	2b20      	cmp	r3, #32
 8005494:	d817      	bhi.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005496:	2b00      	cmp	r3, #0
 8005498:	d022      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800549a:	2b10      	cmp	r3, #16
 800549c:	d113      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800549e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054a2:	3308      	adds	r3, #8
 80054a4:	4618      	mov	r0, r3
 80054a6:	f004 fa7f 	bl	80099a8 <RCCEx_PLL2_Config>
 80054aa:	4603      	mov	r3, r0
 80054ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80054b0:	e017      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80054b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054b6:	3330      	adds	r3, #48	@ 0x30
 80054b8:	4618      	mov	r0, r3
 80054ba:	f004 fb0d 	bl	8009ad8 <RCCEx_PLL3_Config>
 80054be:	4603      	mov	r3, r0
 80054c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80054c4:	e00d      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80054cc:	e009      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80054ce:	bf00      	nop
 80054d0:	e007      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80054d2:	bf00      	nop
 80054d4:	e005      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80054d6:	bf00      	nop
 80054d8:	e003      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80054da:	bf00      	nop
 80054dc:	44020c00 	.word	0x44020c00
        break;
 80054e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10d      	bne.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80054ea:	4baf      	ldr	r3, [pc, #700]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80054ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80054f0:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80054f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fc:	4aaa      	ldr	r2, [pc, #680]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80054fe:	430b      	orrs	r3, r1
 8005500:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005504:	e003      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005506:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800550a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800550e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005516:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800551a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800551e:	2300      	movs	r3, #0
 8005520:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005524:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005528:	460b      	mov	r3, r1
 800552a:	4313      	orrs	r3, r2
 800552c:	d055      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800552e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005532:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005536:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800553a:	d031      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 800553c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005540:	d82a      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005542:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005546:	d02d      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005548:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800554c:	d824      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800554e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005552:	d029      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005554:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005558:	d81e      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800555a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800555e:	d011      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8005560:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005564:	d818      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005566:	2b00      	cmp	r3, #0
 8005568:	d020      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800556a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800556e:	d113      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005570:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005574:	3308      	adds	r3, #8
 8005576:	4618      	mov	r0, r3
 8005578:	f004 fa16 	bl	80099a8 <RCCEx_PLL2_Config>
 800557c:	4603      	mov	r3, r0
 800557e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005582:	e014      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005584:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005588:	3330      	adds	r3, #48	@ 0x30
 800558a:	4618      	mov	r0, r3
 800558c:	f004 faa4 	bl	8009ad8 <RCCEx_PLL3_Config>
 8005590:	4603      	mov	r3, r0
 8005592:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005596:	e00a      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800559e:	e006      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80055a0:	bf00      	nop
 80055a2:	e004      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80055a4:	bf00      	nop
 80055a6:	e002      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80055a8:	bf00      	nop
 80055aa:	e000      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80055ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10d      	bne.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80055b6:	4b7c      	ldr	r3, [pc, #496]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80055b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80055c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055c8:	4a77      	ldr	r2, [pc, #476]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80055ca:	430b      	orrs	r3, r1
 80055cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80055d0:	e003      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80055d6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80055e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055ea:	2300      	movs	r3, #0
 80055ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80055f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80055f4:	460b      	mov	r3, r1
 80055f6:	4313      	orrs	r3, r2
 80055f8:	d03d      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80055fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005602:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005606:	d01b      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8005608:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800560c:	d814      	bhi.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800560e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005612:	d017      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8005614:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005618:	d80e      	bhi.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800561a:	2b00      	cmp	r3, #0
 800561c:	d014      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800561e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005622:	d109      	bne.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005624:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005628:	3330      	adds	r3, #48	@ 0x30
 800562a:	4618      	mov	r0, r3
 800562c:	f004 fa54 	bl	8009ad8 <RCCEx_PLL3_Config>
 8005630:	4603      	mov	r3, r0
 8005632:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8005636:	e008      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800563e:	e004      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005640:	bf00      	nop
 8005642:	e002      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005644:	bf00      	nop
 8005646:	e000      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800564a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10d      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005652:	4b55      	ldr	r3, [pc, #340]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005654:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005658:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800565c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005664:	4a50      	ldr	r2, [pc, #320]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005666:	430b      	orrs	r3, r1
 8005668:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800566c:	e003      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800566e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005672:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005676:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800567a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005682:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005686:	2300      	movs	r3, #0
 8005688:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800568c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005690:	460b      	mov	r3, r1
 8005692:	4313      	orrs	r3, r2
 8005694:	d03d      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005696:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800569a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800569e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80056a2:	d01b      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xb84>
 80056a4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80056a8:	d814      	bhi.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80056aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80056ae:	d017      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80056b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80056b4:	d80e      	bhi.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d014      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80056ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80056be:	d109      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056c4:	3330      	adds	r3, #48	@ 0x30
 80056c6:	4618      	mov	r0, r3
 80056c8:	f004 fa06 	bl	8009ad8 <RCCEx_PLL3_Config>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80056d2:	e008      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80056da:	e004      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80056dc:	bf00      	nop
 80056de:	e002      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80056e0:	bf00      	nop
 80056e2:	e000      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80056e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10d      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80056ee:	4b2e      	ldr	r3, [pc, #184]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80056f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056f4:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80056f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005700:	4a29      	ldr	r2, [pc, #164]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005702:	430b      	orrs	r3, r1
 8005704:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005708:	e003      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800570e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005712:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800571e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005722:	2300      	movs	r3, #0
 8005724:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005728:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800572c:	460b      	mov	r3, r1
 800572e:	4313      	orrs	r3, r2
 8005730:	d040      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8005732:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005736:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800573a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800573e:	d01b      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8005740:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005744:	d814      	bhi.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005746:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800574a:	d017      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800574c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005750:	d80e      	bhi.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005752:	2b00      	cmp	r3, #0
 8005754:	d014      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005756:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800575a:	d109      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800575c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005760:	3330      	adds	r3, #48	@ 0x30
 8005762:	4618      	mov	r0, r3
 8005764:	f004 f9b8 	bl	8009ad8 <RCCEx_PLL3_Config>
 8005768:	4603      	mov	r3, r0
 800576a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 800576e:	e008      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005776:	e004      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005778:	bf00      	nop
 800577a:	e002      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800577c:	bf00      	nop
 800577e:	e000      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005782:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005786:	2b00      	cmp	r3, #0
 8005788:	d110      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800578a:	4b07      	ldr	r3, [pc, #28]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800578c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005790:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005794:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005798:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800579c:	4a02      	ldr	r2, [pc, #8]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800579e:	430b      	orrs	r3, r1
 80057a0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80057a4:	e006      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80057a6:	bf00      	nop
 80057a8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057b0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057bc:	2100      	movs	r1, #0
 80057be:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80057c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80057ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4313      	orrs	r3, r2
 80057d2:	d03d      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80057d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80057e0:	d01b      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80057e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80057e6:	d814      	bhi.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80057e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057ec:	d017      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80057ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057f2:	d80e      	bhi.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d014      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80057f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057fc:	d109      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005802:	3330      	adds	r3, #48	@ 0x30
 8005804:	4618      	mov	r0, r3
 8005806:	f004 f967 	bl	8009ad8 <RCCEx_PLL3_Config>
 800580a:	4603      	mov	r3, r0
 800580c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8005810:	e008      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005818:	e004      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800581a:	bf00      	nop
 800581c:	e002      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800581e:	bf00      	nop
 8005820:	e000      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005822:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005824:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10d      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800582c:	4bbe      	ldr	r3, [pc, #760]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800582e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005832:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005836:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800583a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800583e:	4aba      	ldr	r2, [pc, #744]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005840:	430b      	orrs	r3, r1
 8005842:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005846:	e003      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005848:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800584c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005850:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005858:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800585c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005860:	2300      	movs	r3, #0
 8005862:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005866:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800586a:	460b      	mov	r3, r1
 800586c:	4313      	orrs	r3, r2
 800586e:	d035      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005870:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005874:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005878:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800587c:	d015      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800587e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005882:	d80e      	bhi.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005884:	2b00      	cmp	r3, #0
 8005886:	d012      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8005888:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800588c:	d109      	bne.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800588e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005892:	3330      	adds	r3, #48	@ 0x30
 8005894:	4618      	mov	r0, r3
 8005896:	f004 f91f 	bl	8009ad8 <RCCEx_PLL3_Config>
 800589a:	4603      	mov	r3, r0
 800589c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80058a0:	e006      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80058a8:	e002      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80058aa:	bf00      	nop
 80058ac:	e000      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80058ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058b0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10d      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80058b8:	4b9b      	ldr	r3, [pc, #620]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80058ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058be:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80058c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80058ca:	4a97      	ldr	r2, [pc, #604]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80058cc:	430b      	orrs	r3, r1
 80058ce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80058d2:	e003      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80058d8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80058dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e4:	2100      	movs	r1, #0
 80058e6:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 80058ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058f6:	460b      	mov	r3, r1
 80058f8:	4313      	orrs	r3, r2
 80058fa:	d00e      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80058fc:	4b8a      	ldr	r3, [pc, #552]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	4a89      	ldr	r2, [pc, #548]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005902:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005906:	61d3      	str	r3, [r2, #28]
 8005908:	4b87      	ldr	r3, [pc, #540]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800590a:	69d9      	ldr	r1, [r3, #28]
 800590c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005910:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005914:	4a84      	ldr	r2, [pc, #528]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005916:	430b      	orrs	r3, r1
 8005918:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800591a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800591e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005922:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005926:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800592a:	2300      	movs	r3, #0
 800592c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005930:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005934:	460b      	mov	r3, r1
 8005936:	4313      	orrs	r3, r2
 8005938:	d055      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800593a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800593e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005942:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005946:	d031      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8005948:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800594c:	d82a      	bhi.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800594e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005952:	d02d      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005954:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005958:	d824      	bhi.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800595a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800595e:	d029      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005960:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005964:	d81e      	bhi.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005966:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800596a:	d011      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 800596c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005970:	d818      	bhi.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005972:	2b00      	cmp	r3, #0
 8005974:	d020      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800597a:	d113      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800597c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005980:	3308      	adds	r3, #8
 8005982:	4618      	mov	r0, r3
 8005984:	f004 f810 	bl	80099a8 <RCCEx_PLL2_Config>
 8005988:	4603      	mov	r3, r0
 800598a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800598e:	e014      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005990:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005994:	3330      	adds	r3, #48	@ 0x30
 8005996:	4618      	mov	r0, r3
 8005998:	f004 f89e 	bl	8009ad8 <RCCEx_PLL3_Config>
 800599c:	4603      	mov	r3, r0
 800599e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80059a2:	e00a      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80059aa:	e006      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80059ac:	bf00      	nop
 80059ae:	e004      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80059b0:	bf00      	nop
 80059b2:	e002      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80059b4:	bf00      	nop
 80059b6:	e000      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80059b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10d      	bne.n	80059de <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80059c2:	4b59      	ldr	r3, [pc, #356]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80059c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80059c8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80059cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059d4:	4a54      	ldr	r2, [pc, #336]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80059d6:	430b      	orrs	r3, r1
 80059d8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80059dc:	e003      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80059e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80059f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059f6:	2300      	movs	r3, #0
 80059f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059fc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4313      	orrs	r3, r2
 8005a04:	d055      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005a06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005a0e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005a12:	d031      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8005a14:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005a18:	d82a      	bhi.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005a1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a1e:	d02d      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8005a20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a24:	d824      	bhi.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005a26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a2a:	d029      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8005a2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a30:	d81e      	bhi.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005a32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a36:	d011      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8005a38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a3c:	d818      	bhi.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d020      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005a42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a46:	d113      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a4c:	3308      	adds	r3, #8
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f003 ffaa 	bl	80099a8 <RCCEx_PLL2_Config>
 8005a54:	4603      	mov	r3, r0
 8005a56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005a5a:	e014      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a60:	3330      	adds	r3, #48	@ 0x30
 8005a62:	4618      	mov	r0, r3
 8005a64:	f004 f838 	bl	8009ad8 <RCCEx_PLL3_Config>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005a6e:	e00a      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005a76:	e006      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005a78:	bf00      	nop
 8005a7a:	e004      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005a7c:	bf00      	nop
 8005a7e:	e002      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005a80:	bf00      	nop
 8005a82:	e000      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10d      	bne.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005a8e:	4b26      	ldr	r3, [pc, #152]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005a90:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005a94:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005a98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005aa0:	4a21      	ldr	r2, [pc, #132]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005aa2:	430b      	orrs	r3, r1
 8005aa4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005aa8:	e003      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aaa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005aae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8005ab2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aba:	2100      	movs	r1, #0
 8005abc:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8005ac0:	f003 0320 	and.w	r3, r3, #32
 8005ac4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ac8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005acc:	460b      	mov	r3, r1
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	d057      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8005ad2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ad6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005ada:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ade:	d033      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8005ae0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ae4:	d82c      	bhi.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005ae6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005aea:	d02f      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8005aec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005af0:	d826      	bhi.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005af2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005af6:	d02b      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8005af8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005afc:	d820      	bhi.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005afe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b02:	d013      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005b04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b08:	d81a      	bhi.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d022      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8005b0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b12:	d115      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b18:	3308      	adds	r3, #8
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f003 ff44 	bl	80099a8 <RCCEx_PLL2_Config>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005b26:	e016      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8005b28:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b30:	3330      	adds	r3, #48	@ 0x30
 8005b32:	4618      	mov	r0, r3
 8005b34:	f003 ffd0 	bl	8009ad8 <RCCEx_PLL3_Config>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005b3e:	e00a      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b46:	e006      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005b48:	bf00      	nop
 8005b4a:	e004      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005b4c:	bf00      	nop
 8005b4e:	e002      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005b50:	bf00      	nop
 8005b52:	e000      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10d      	bne.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8005b5e:	4bbb      	ldr	r3, [pc, #748]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005b60:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005b64:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005b68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b70:	4ab6      	ldr	r2, [pc, #728]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005b72:	430b      	orrs	r3, r1
 8005b74:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005b78:	e003      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b7e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8005b82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8005b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005b98:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	d055      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8005ba2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ba6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005baa:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8005bae:	d031      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005bb0:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8005bb4:	d82a      	bhi.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005bb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bba:	d02d      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8005bbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bc0:	d824      	bhi.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005bc2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005bc6:	d029      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8005bc8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005bcc:	d81e      	bhi.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005bce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bd2:	d011      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8005bd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bd8:	d818      	bhi.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d020      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8005bde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005be2:	d113      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005be4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005be8:	3308      	adds	r3, #8
 8005bea:	4618      	mov	r0, r3
 8005bec:	f003 fedc 	bl	80099a8 <RCCEx_PLL2_Config>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005bf6:	e014      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005bf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bfc:	3330      	adds	r3, #48	@ 0x30
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f003 ff6a 	bl	8009ad8 <RCCEx_PLL3_Config>
 8005c04:	4603      	mov	r3, r0
 8005c06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005c0a:	e00a      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005c12:	e006      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005c14:	bf00      	nop
 8005c16:	e004      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005c18:	bf00      	nop
 8005c1a:	e002      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005c1c:	bf00      	nop
 8005c1e:	e000      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10d      	bne.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8005c2a:	4b88      	ldr	r3, [pc, #544]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005c2c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005c30:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8005c34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c3c:	4a83      	ldr	r2, [pc, #524]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005c3e:	430b      	orrs	r3, r1
 8005c40:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005c44:	e003      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c46:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c4a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8005c4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	2100      	movs	r1, #0
 8005c58:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8005c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c64:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	d055      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8005c6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c76:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005c7a:	d031      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8005c7c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005c80:	d82a      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005c82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c86:	d02d      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8005c88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c8c:	d824      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005c8e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c92:	d029      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8005c94:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c98:	d81e      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005c9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c9e:	d011      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8005ca0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ca4:	d818      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d020      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8005caa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cae:	d113      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005cb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cb4:	3308      	adds	r3, #8
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f003 fe76 	bl	80099a8 <RCCEx_PLL2_Config>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005cc2:	e014      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005cc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cc8:	3330      	adds	r3, #48	@ 0x30
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f003 ff04 	bl	8009ad8 <RCCEx_PLL3_Config>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005cd6:	e00a      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005cde:	e006      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005ce0:	bf00      	nop
 8005ce2:	e004      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005ce4:	bf00      	nop
 8005ce6:	e002      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005ce8:	bf00      	nop
 8005cea:	e000      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10d      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8005cf6:	4b55      	ldr	r3, [pc, #340]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005cf8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005cfc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005d00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d08:	4a50      	ldr	r2, [pc, #320]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005d0a:	430b      	orrs	r3, r1
 8005d0c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005d10:	e003      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d16:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8005d1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	2100      	movs	r1, #0
 8005d24:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8005d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d30:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005d34:	460b      	mov	r3, r1
 8005d36:	4313      	orrs	r3, r2
 8005d38:	d055      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8005d3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d3e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d46:	d031      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8005d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d4c:	d82a      	bhi.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d52:	d02d      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8005d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d58:	d824      	bhi.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005d5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d5e:	d029      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8005d60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d64:	d81e      	bhi.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005d66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d6a:	d011      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8005d6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d70:	d818      	bhi.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d020      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8005d76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d7a:	d113      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d80:	3308      	adds	r3, #8
 8005d82:	4618      	mov	r0, r3
 8005d84:	f003 fe10 	bl	80099a8 <RCCEx_PLL2_Config>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8005d8e:	e014      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d94:	3330      	adds	r3, #48	@ 0x30
 8005d96:	4618      	mov	r0, r3
 8005d98:	f003 fe9e 	bl	8009ad8 <RCCEx_PLL3_Config>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8005da2:	e00a      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005daa:	e006      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005dac:	bf00      	nop
 8005dae:	e004      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005db0:	bf00      	nop
 8005db2:	e002      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005db4:	bf00      	nop
 8005db6:	e000      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10d      	bne.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8005dc2:	4b22      	ldr	r3, [pc, #136]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005dc4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005dc8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005dcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dd0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005dd6:	430b      	orrs	r3, r1
 8005dd8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005ddc:	e003      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dde:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005de2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005de6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dee:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005df2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005df6:	2300      	movs	r3, #0
 8005df8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005dfc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005e00:	460b      	mov	r3, r1
 8005e02:	4313      	orrs	r3, r2
 8005e04:	d055      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005e06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e0a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005e0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e12:	d035      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8005e14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e18:	d82e      	bhi.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005e1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e1e:	d031      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8005e20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e24:	d828      	bhi.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005e26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e2a:	d01b      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8005e2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e30:	d822      	bhi.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8005e36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e3a:	d009      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8005e3c:	e01c      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e3e:	4b03      	ldr	r3, [pc, #12]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e42:	4a02      	ldr	r2, [pc, #8]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e48:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005e4a:	e01c      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8005e4c:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e54:	3308      	adds	r3, #8
 8005e56:	4618      	mov	r0, r3
 8005e58:	f003 fda6 	bl	80099a8 <RCCEx_PLL2_Config>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005e62:	e010      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e68:	3330      	adds	r3, #48	@ 0x30
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f003 fe34 	bl	8009ad8 <RCCEx_PLL3_Config>
 8005e70:	4603      	mov	r3, r0
 8005e72:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005e76:	e006      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005e7e:	e002      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005e80:	bf00      	nop
 8005e82:	e000      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10d      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005e8e:	4bc3      	ldr	r3, [pc, #780]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e94:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005e98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005ea0:	4abe      	ldr	r2, [pc, #760]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005ea2:	430b      	orrs	r3, r1
 8005ea4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005ea8:	e003      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eaa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005eae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8005eb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eba:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005ebe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ec8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005ecc:	460b      	mov	r3, r1
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	d051      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005ed2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ed6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005eda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ede:	d033      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005ee0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ee4:	d82c      	bhi.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005ee6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005eea:	d02d      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005eec:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005ef0:	d826      	bhi.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005ef2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ef6:	d019      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8005ef8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005efc:	d820      	bhi.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8005f02:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005f06:	d007      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8005f08:	e01a      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f0a:	4ba4      	ldr	r3, [pc, #656]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0e:	4aa3      	ldr	r2, [pc, #652]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f14:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005f16:	e018      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f1c:	3308      	adds	r3, #8
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f003 fd42 	bl	80099a8 <RCCEx_PLL2_Config>
 8005f24:	4603      	mov	r3, r0
 8005f26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005f2a:	e00e      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f30:	3330      	adds	r3, #48	@ 0x30
 8005f32:	4618      	mov	r0, r3
 8005f34:	f003 fdd0 	bl	8009ad8 <RCCEx_PLL3_Config>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005f3e:	e004      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005f46:	e000      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8005f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f4a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10d      	bne.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005f52:	4b92      	ldr	r3, [pc, #584]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005f54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f58:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8005f5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f60:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005f64:	4a8d      	ldr	r2, [pc, #564]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005f66:	430b      	orrs	r3, r1
 8005f68:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005f6c:	e003      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f72:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005f76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005f82:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f84:	2300      	movs	r3, #0
 8005f86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f88:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	d032      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005f92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f96:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005f9a:	2b05      	cmp	r3, #5
 8005f9c:	d80f      	bhi.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8005f9e:	2b03      	cmp	r3, #3
 8005fa0:	d211      	bcs.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d911      	bls.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d109      	bne.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005faa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fae:	3308      	adds	r3, #8
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f003 fcf9 	bl	80099a8 <RCCEx_PLL2_Config>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005fbc:	e006      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005fc4:	e002      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005fc6:	bf00      	nop
 8005fc8:	e000      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fcc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10d      	bne.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005fd4:	4b71      	ldr	r3, [pc, #452]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005fd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005fda:	f023 0107 	bic.w	r1, r3, #7
 8005fde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fe2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005fe6:	4a6d      	ldr	r2, [pc, #436]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005fee:	e003      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ff4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005ff8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006000:	2100      	movs	r1, #0
 8006002:	6739      	str	r1, [r7, #112]	@ 0x70
 8006004:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006008:	677b      	str	r3, [r7, #116]	@ 0x74
 800600a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800600e:	460b      	mov	r3, r1
 8006010:	4313      	orrs	r3, r2
 8006012:	d024      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8006014:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006018:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800601c:	2b00      	cmp	r3, #0
 800601e:	d005      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8006020:	2b08      	cmp	r3, #8
 8006022:	d005      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800602a:	e002      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800602c:	bf00      	nop
 800602e:	e000      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006032:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10d      	bne.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800603a:	4b58      	ldr	r3, [pc, #352]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800603c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006040:	f023 0108 	bic.w	r1, r3, #8
 8006044:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006048:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800604c:	4a53      	ldr	r2, [pc, #332]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800604e:	430b      	orrs	r3, r1
 8006050:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006054:	e003      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006056:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800605a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800605e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006066:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800606a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800606c:	2300      	movs	r3, #0
 800606e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006070:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006074:	460b      	mov	r3, r1
 8006076:	4313      	orrs	r3, r2
 8006078:	f000 80b9 	beq.w	80061ee <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800607c:	4b48      	ldr	r3, [pc, #288]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800607e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006080:	4a47      	ldr	r2, [pc, #284]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006082:	f043 0301 	orr.w	r3, r3, #1
 8006086:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006088:	f7fd fa2a 	bl	80034e0 <HAL_GetTick>
 800608c:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006090:	e00b      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006092:	f7fd fa25 	bl	80034e0 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d903      	bls.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80060a8:	e005      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80060aa:	4b3d      	ldr	r3, [pc, #244]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80060ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0ed      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80060b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f040 8093 	bne.w	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060c0:	4b36      	ldr	r3, [pc, #216]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80060c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ca:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80060ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d023      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80060d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060da:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80060de:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d01b      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060e6:	4b2d      	ldr	r3, [pc, #180]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80060e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060f0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060f4:	4b29      	ldr	r3, [pc, #164]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80060f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060fa:	4a28      	ldr	r2, [pc, #160]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80060fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006100:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006104:	4b25      	ldr	r3, [pc, #148]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006106:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800610a:	4a24      	ldr	r2, [pc, #144]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800610c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006110:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006114:	4a21      	ldr	r2, [pc, #132]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006116:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800611a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800611e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	d019      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800612a:	f7fd f9d9 	bl	80034e0 <HAL_GetTick>
 800612e:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006132:	e00d      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006134:	f7fd f9d4 	bl	80034e0 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800613e:	1ad2      	subs	r2, r2, r3
 8006140:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006144:	429a      	cmp	r2, r3
 8006146:	d903      	bls.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 800614e:	e006      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006150:	4b12      	ldr	r3, [pc, #72]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006152:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0ea      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800615e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006162:	2b00      	cmp	r3, #0
 8006164:	d13a      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006166:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800616a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800616e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006172:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006176:	d115      	bne.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8006178:	4b08      	ldr	r3, [pc, #32]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006180:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006184:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006188:	091b      	lsrs	r3, r3, #4
 800618a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800618e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006192:	4a02      	ldr	r2, [pc, #8]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006194:	430b      	orrs	r3, r1
 8006196:	61d3      	str	r3, [r2, #28]
 8006198:	e00a      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800619a:	bf00      	nop
 800619c:	44020c00 	.word	0x44020c00
 80061a0:	44020800 	.word	0x44020800
 80061a4:	4b9f      	ldr	r3, [pc, #636]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	4a9e      	ldr	r2, [pc, #632]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80061aa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80061ae:	61d3      	str	r3, [r2, #28]
 80061b0:	4b9c      	ldr	r3, [pc, #624]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80061b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061b6:	4a9b      	ldr	r2, [pc, #620]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80061b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80061c0:	4b98      	ldr	r3, [pc, #608]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80061c2:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80061c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061ca:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80061ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061d2:	4a94      	ldr	r2, [pc, #592]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80061d4:	430b      	orrs	r3, r1
 80061d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80061da:	e008      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061dc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061e0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 80061e4:	e003      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80061ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80061fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80061fc:	2300      	movs	r3, #0
 80061fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8006200:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006204:	460b      	mov	r3, r1
 8006206:	4313      	orrs	r3, r2
 8006208:	d035      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800620a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800620e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006212:	2b30      	cmp	r3, #48	@ 0x30
 8006214:	d014      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8006216:	2b30      	cmp	r3, #48	@ 0x30
 8006218:	d80e      	bhi.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800621a:	2b20      	cmp	r3, #32
 800621c:	d012      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800621e:	2b20      	cmp	r3, #32
 8006220:	d80a      	bhi.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d010      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8006226:	2b10      	cmp	r3, #16
 8006228:	d106      	bne.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800622a:	4b7e      	ldr	r3, [pc, #504]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800622c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622e:	4a7d      	ldr	r2, [pc, #500]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006230:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006234:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8006236:	e008      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800623e:	e004      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006240:	bf00      	nop
 8006242:	e002      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006244:	bf00      	nop
 8006246:	e000      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800624a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10d      	bne.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006252:	4b74      	ldr	r3, [pc, #464]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006254:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006258:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800625c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006260:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006264:	4a6f      	ldr	r2, [pc, #444]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006266:	430b      	orrs	r3, r1
 8006268:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800626c:	e003      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006272:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006276:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800627a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627e:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006282:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006284:	2300      	movs	r3, #0
 8006286:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006288:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800628c:	460b      	mov	r3, r1
 800628e:	4313      	orrs	r3, r2
 8006290:	d033      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8006292:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006296:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800629e:	2b40      	cmp	r3, #64	@ 0x40
 80062a0:	d007      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80062a2:	e010      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062a4:	4b5f      	ldr	r3, [pc, #380]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80062a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a8:	4a5e      	ldr	r2, [pc, #376]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80062aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062ae:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80062b0:	e00d      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062b6:	3308      	adds	r3, #8
 80062b8:	4618      	mov	r0, r3
 80062ba:	f003 fb75 	bl	80099a8 <RCCEx_PLL2_Config>
 80062be:	4603      	mov	r3, r0
 80062c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80062c4:	e003      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80062cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10d      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80062d6:	4b53      	ldr	r3, [pc, #332]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80062d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80062dc:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80062e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062e4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80062e8:	4a4e      	ldr	r2, [pc, #312]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80062ea:	430b      	orrs	r3, r1
 80062ec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80062f0:	e003      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062f6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80062fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006302:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006306:	653b      	str	r3, [r7, #80]	@ 0x50
 8006308:	2300      	movs	r3, #0
 800630a:	657b      	str	r3, [r7, #84]	@ 0x54
 800630c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006310:	460b      	mov	r3, r1
 8006312:	4313      	orrs	r3, r2
 8006314:	d033      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8006316:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800631a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8006322:	2b80      	cmp	r3, #128	@ 0x80
 8006324:	d007      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8006326:	e010      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006328:	4b3e      	ldr	r3, [pc, #248]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800632a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800632c:	4a3d      	ldr	r2, [pc, #244]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800632e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006332:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8006334:	e00d      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006336:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800633a:	3308      	adds	r3, #8
 800633c:	4618      	mov	r0, r3
 800633e:	f003 fb33 	bl	80099a8 <RCCEx_PLL2_Config>
 8006342:	4603      	mov	r3, r0
 8006344:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8006348:	e003      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006352:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10d      	bne.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800635a:	4b32      	ldr	r3, [pc, #200]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800635c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006360:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006364:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006368:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800636c:	4a2d      	ldr	r2, [pc, #180]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800636e:	430b      	orrs	r3, r1
 8006370:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006374:	e003      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006376:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800637a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800637e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006386:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800638a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800638c:	2300      	movs	r3, #0
 800638e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006390:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006394:	460b      	mov	r3, r1
 8006396:	4313      	orrs	r3, r2
 8006398:	d04a      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800639a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800639e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	d827      	bhi.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80063a6:	a201      	add	r2, pc, #4	@ (adr r2, 80063ac <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80063a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ac:	080063c1 	.word	0x080063c1
 80063b0:	080063cf 	.word	0x080063cf
 80063b4:	080063e3 	.word	0x080063e3
 80063b8:	080063ff 	.word	0x080063ff
 80063bc:	080063ff 	.word	0x080063ff
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063c0:	4b18      	ldr	r3, [pc, #96]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80063c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c4:	4a17      	ldr	r2, [pc, #92]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80063c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063ca:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80063cc:	e018      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063d2:	3308      	adds	r3, #8
 80063d4:	4618      	mov	r0, r3
 80063d6:	f003 fae7 	bl	80099a8 <RCCEx_PLL2_Config>
 80063da:	4603      	mov	r3, r0
 80063dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80063e0:	e00e      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80063e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063e6:	3330      	adds	r3, #48	@ 0x30
 80063e8:	4618      	mov	r0, r3
 80063ea:	f003 fb75 	bl	8009ad8 <RCCEx_PLL3_Config>
 80063ee:	4603      	mov	r3, r0
 80063f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80063f4:	e004      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80063fc:	e000      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80063fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006400:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10f      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006408:	4b06      	ldr	r3, [pc, #24]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800640a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800640e:	f023 0107 	bic.w	r1, r3, #7
 8006412:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800641a:	4a02      	ldr	r2, [pc, #8]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800641c:	430b      	orrs	r3, r1
 800641e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006422:	e005      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8006424:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006428:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800642c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006430:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006438:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800643c:	643b      	str	r3, [r7, #64]	@ 0x40
 800643e:	2300      	movs	r3, #0
 8006440:	647b      	str	r3, [r7, #68]	@ 0x44
 8006442:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006446:	460b      	mov	r3, r1
 8006448:	4313      	orrs	r3, r2
 800644a:	f000 8081 	beq.w	8006550 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800644e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006452:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006456:	2b20      	cmp	r3, #32
 8006458:	d85f      	bhi.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800645a:	a201      	add	r2, pc, #4	@ (adr r2, 8006460 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 800645c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006460:	080064e5 	.word	0x080064e5
 8006464:	0800651b 	.word	0x0800651b
 8006468:	0800651b 	.word	0x0800651b
 800646c:	0800651b 	.word	0x0800651b
 8006470:	0800651b 	.word	0x0800651b
 8006474:	0800651b 	.word	0x0800651b
 8006478:	0800651b 	.word	0x0800651b
 800647c:	0800651b 	.word	0x0800651b
 8006480:	080064f3 	.word	0x080064f3
 8006484:	0800651b 	.word	0x0800651b
 8006488:	0800651b 	.word	0x0800651b
 800648c:	0800651b 	.word	0x0800651b
 8006490:	0800651b 	.word	0x0800651b
 8006494:	0800651b 	.word	0x0800651b
 8006498:	0800651b 	.word	0x0800651b
 800649c:	0800651b 	.word	0x0800651b
 80064a0:	08006507 	.word	0x08006507
 80064a4:	0800651b 	.word	0x0800651b
 80064a8:	0800651b 	.word	0x0800651b
 80064ac:	0800651b 	.word	0x0800651b
 80064b0:	0800651b 	.word	0x0800651b
 80064b4:	0800651b 	.word	0x0800651b
 80064b8:	0800651b 	.word	0x0800651b
 80064bc:	0800651b 	.word	0x0800651b
 80064c0:	08006523 	.word	0x08006523
 80064c4:	0800651b 	.word	0x0800651b
 80064c8:	0800651b 	.word	0x0800651b
 80064cc:	0800651b 	.word	0x0800651b
 80064d0:	0800651b 	.word	0x0800651b
 80064d4:	0800651b 	.word	0x0800651b
 80064d8:	0800651b 	.word	0x0800651b
 80064dc:	0800651b 	.word	0x0800651b
 80064e0:	08006523 	.word	0x08006523
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064e4:	4bab      	ldr	r3, [pc, #684]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80064e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e8:	4aaa      	ldr	r2, [pc, #680]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80064ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064ee:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80064f0:	e018      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064f6:	3308      	adds	r3, #8
 80064f8:	4618      	mov	r0, r3
 80064fa:	f003 fa55 	bl	80099a8 <RCCEx_PLL2_Config>
 80064fe:	4603      	mov	r3, r0
 8006500:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006504:	e00e      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006506:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800650a:	3330      	adds	r3, #48	@ 0x30
 800650c:	4618      	mov	r0, r3
 800650e:	f003 fae3 	bl	8009ad8 <RCCEx_PLL3_Config>
 8006512:	4603      	mov	r3, r0
 8006514:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006518:	e004      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006520:	e000      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8006522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006524:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10d      	bne.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800652c:	4b99      	ldr	r3, [pc, #612]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800652e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006532:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006536:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800653a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800653e:	4a95      	ldr	r2, [pc, #596]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006540:	430b      	orrs	r3, r1
 8006542:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006546:	e003      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006548:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800654c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006550:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006558:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800655c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800655e:	2300      	movs	r3, #0
 8006560:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006562:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006566:	460b      	mov	r3, r1
 8006568:	4313      	orrs	r3, r2
 800656a:	d04e      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800656c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006570:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006574:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006578:	d02e      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800657a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800657e:	d827      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006580:	2bc0      	cmp	r3, #192	@ 0xc0
 8006582:	d02b      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8006584:	2bc0      	cmp	r3, #192	@ 0xc0
 8006586:	d823      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006588:	2b80      	cmp	r3, #128	@ 0x80
 800658a:	d017      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 800658c:	2b80      	cmp	r3, #128	@ 0x80
 800658e:	d81f      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8006594:	2b40      	cmp	r3, #64	@ 0x40
 8006596:	d007      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8006598:	e01a      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800659a:	4b7e      	ldr	r3, [pc, #504]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800659c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800659e:	4a7d      	ldr	r2, [pc, #500]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80065a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065a4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80065a6:	e01a      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80065a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065ac:	3308      	adds	r3, #8
 80065ae:	4618      	mov	r0, r3
 80065b0:	f003 f9fa 	bl	80099a8 <RCCEx_PLL2_Config>
 80065b4:	4603      	mov	r3, r0
 80065b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80065ba:	e010      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80065bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065c0:	3330      	adds	r3, #48	@ 0x30
 80065c2:	4618      	mov	r0, r3
 80065c4:	f003 fa88 	bl	8009ad8 <RCCEx_PLL3_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80065ce:	e006      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80065d6:	e002      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80065d8:	bf00      	nop
 80065da:	e000      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80065dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10d      	bne.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80065e6:	4b6b      	ldr	r3, [pc, #428]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80065e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065ec:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80065f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80065f8:	4a66      	ldr	r2, [pc, #408]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80065fa:	430b      	orrs	r3, r1
 80065fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006600:	e003      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006602:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006606:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800660a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800660e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006612:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006616:	633b      	str	r3, [r7, #48]	@ 0x30
 8006618:	2300      	movs	r3, #0
 800661a:	637b      	str	r3, [r7, #52]	@ 0x34
 800661c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006620:	460b      	mov	r3, r1
 8006622:	4313      	orrs	r3, r2
 8006624:	d055      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8006626:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800662a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800662e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006632:	d031      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8006634:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006638:	d82a      	bhi.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800663a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800663e:	d02d      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8006640:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006644:	d824      	bhi.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006646:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800664a:	d029      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 800664c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006650:	d81e      	bhi.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006656:	d011      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8006658:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800665c:	d818      	bhi.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800665e:	2b00      	cmp	r3, #0
 8006660:	d020      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8006662:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006666:	d113      	bne.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006668:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800666c:	3308      	adds	r3, #8
 800666e:	4618      	mov	r0, r3
 8006670:	f003 f99a 	bl	80099a8 <RCCEx_PLL2_Config>
 8006674:	4603      	mov	r3, r0
 8006676:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800667a:	e014      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800667c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006680:	3330      	adds	r3, #48	@ 0x30
 8006682:	4618      	mov	r0, r3
 8006684:	f003 fa28 	bl	8009ad8 <RCCEx_PLL3_Config>
 8006688:	4603      	mov	r3, r0
 800668a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800668e:	e00a      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006696:	e006      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006698:	bf00      	nop
 800669a:	e004      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800669c:	bf00      	nop
 800669e:	e002      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80066a0:	bf00      	nop
 80066a2:	e000      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80066a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10d      	bne.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80066ae:	4b39      	ldr	r3, [pc, #228]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80066b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066b4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80066b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066bc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80066c0:	4a34      	ldr	r2, [pc, #208]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80066c2:	430b      	orrs	r3, r1
 80066c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80066c8:	e003      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066ce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80066d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80066de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066e0:	2300      	movs	r3, #0
 80066e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066e4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80066e8:	460b      	mov	r3, r1
 80066ea:	4313      	orrs	r3, r2
 80066ec:	d058      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80066ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066f6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80066fa:	d031      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 80066fc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006700:	d82a      	bhi.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006702:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006706:	d02d      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8006708:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800670c:	d824      	bhi.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800670e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006712:	d029      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8006714:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006718:	d81e      	bhi.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800671a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800671e:	d011      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8006720:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006724:	d818      	bhi.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d020      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800672a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800672e:	d113      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006730:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006734:	3308      	adds	r3, #8
 8006736:	4618      	mov	r0, r3
 8006738:	f003 f936 	bl	80099a8 <RCCEx_PLL2_Config>
 800673c:	4603      	mov	r3, r0
 800673e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006742:	e014      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006744:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006748:	3330      	adds	r3, #48	@ 0x30
 800674a:	4618      	mov	r0, r3
 800674c:	f003 f9c4 	bl	8009ad8 <RCCEx_PLL3_Config>
 8006750:	4603      	mov	r3, r0
 8006752:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006756:	e00a      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800675e:	e006      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006760:	bf00      	nop
 8006762:	e004      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006764:	bf00      	nop
 8006766:	e002      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006768:	bf00      	nop
 800676a:	e000      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800676c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800676e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006772:	2b00      	cmp	r3, #0
 8006774:	d110      	bne.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8006776:	4b07      	ldr	r3, [pc, #28]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800677c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006780:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006788:	4902      	ldr	r1, [pc, #8]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800678a:	4313      	orrs	r3, r2
 800678c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006790:	e006      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8006792:	bf00      	nop
 8006794:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006798:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800679c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80067a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	2100      	movs	r1, #0
 80067aa:	6239      	str	r1, [r7, #32]
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80067b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80067b6:	460b      	mov	r3, r1
 80067b8:	4313      	orrs	r3, r2
 80067ba:	d055      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80067bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067c4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80067c8:	d031      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 80067ca:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80067ce:	d82a      	bhi.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80067d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067d4:	d02d      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 80067d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067da:	d824      	bhi.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80067dc:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80067e0:	d029      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80067e2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80067e6:	d81e      	bhi.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80067e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067ec:	d011      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80067ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067f2:	d818      	bhi.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d020      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 80067f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067fc:	d113      	bne.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006802:	3308      	adds	r3, #8
 8006804:	4618      	mov	r0, r3
 8006806:	f003 f8cf 	bl	80099a8 <RCCEx_PLL2_Config>
 800680a:	4603      	mov	r3, r0
 800680c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006810:	e014      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006812:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006816:	3330      	adds	r3, #48	@ 0x30
 8006818:	4618      	mov	r0, r3
 800681a:	f003 f95d 	bl	8009ad8 <RCCEx_PLL3_Config>
 800681e:	4603      	mov	r3, r0
 8006820:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006824:	e00a      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800682c:	e006      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800682e:	bf00      	nop
 8006830:	e004      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006832:	bf00      	nop
 8006834:	e002      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006836:	bf00      	nop
 8006838:	e000      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800683a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800683c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10d      	bne.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8006844:	4b88      	ldr	r3, [pc, #544]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800684a:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 800684e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006852:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006856:	4984      	ldr	r1, [pc, #528]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006858:	4313      	orrs	r3, r2
 800685a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800685e:	e003      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006860:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006864:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006868:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	2100      	movs	r1, #0
 8006872:	61b9      	str	r1, [r7, #24]
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	61fb      	str	r3, [r7, #28]
 800687a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800687e:	460b      	mov	r3, r1
 8006880:	4313      	orrs	r3, r2
 8006882:	d03d      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8006884:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006888:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800688c:	2b03      	cmp	r3, #3
 800688e:	d81c      	bhi.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8006890:	a201      	add	r2, pc, #4	@ (adr r2, 8006898 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8006892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006896:	bf00      	nop
 8006898:	080068d3 	.word	0x080068d3
 800689c:	080068a9 	.word	0x080068a9
 80068a0:	080068b7 	.word	0x080068b7
 80068a4:	080068d3 	.word	0x080068d3
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a8:	4b6f      	ldr	r3, [pc, #444]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80068aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ac:	4a6e      	ldr	r2, [pc, #440]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80068ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068b2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80068b4:	e00e      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80068b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068ba:	3308      	adds	r3, #8
 80068bc:	4618      	mov	r0, r3
 80068be:	f003 f873 	bl	80099a8 <RCCEx_PLL2_Config>
 80068c2:	4603      	mov	r3, r0
 80068c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80068c8:	e004      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80068d0:	e000      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 80068d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068d4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10d      	bne.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80068dc:	4b62      	ldr	r3, [pc, #392]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80068de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068e2:	f023 0203 	bic.w	r2, r3, #3
 80068e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068ea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80068ee:	495e      	ldr	r1, [pc, #376]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80068f6:	e003      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068fc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006900:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006908:	2100      	movs	r1, #0
 800690a:	6139      	str	r1, [r7, #16]
 800690c:	f003 0304 	and.w	r3, r3, #4
 8006910:	617b      	str	r3, [r7, #20]
 8006912:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006916:	460b      	mov	r3, r1
 8006918:	4313      	orrs	r3, r2
 800691a:	d03a      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800691c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006920:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006928:	d00e      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800692a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800692e:	d815      	bhi.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8006930:	2b00      	cmp	r3, #0
 8006932:	d017      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8006934:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006938:	d110      	bne.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800693a:	4b4b      	ldr	r3, [pc, #300]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800693c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693e:	4a4a      	ldr	r2, [pc, #296]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006944:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006946:	e00e      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006948:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800694c:	3308      	adds	r3, #8
 800694e:	4618      	mov	r0, r3
 8006950:	f003 f82a 	bl	80099a8 <RCCEx_PLL2_Config>
 8006954:	4603      	mov	r3, r0
 8006956:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800695a:	e004      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006962:	e000      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8006964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006966:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10d      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800696e:	4b3e      	ldr	r3, [pc, #248]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006970:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006974:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006978:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800697c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006980:	4939      	ldr	r1, [pc, #228]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006982:	4313      	orrs	r3, r2
 8006984:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8006988:	e003      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800698e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006992:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699a:	2100      	movs	r1, #0
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	f003 0310 	and.w	r3, r3, #16
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80069a8:	460b      	mov	r3, r1
 80069aa:	4313      	orrs	r3, r2
 80069ac:	d038      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80069ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80069b6:	2b30      	cmp	r3, #48	@ 0x30
 80069b8:	d01b      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80069ba:	2b30      	cmp	r3, #48	@ 0x30
 80069bc:	d815      	bhi.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80069be:	2b10      	cmp	r3, #16
 80069c0:	d002      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 80069c2:	2b20      	cmp	r3, #32
 80069c4:	d007      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 80069c6:	e010      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c8:	4b27      	ldr	r3, [pc, #156]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80069ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069cc:	4a26      	ldr	r2, [pc, #152]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80069ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069d2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80069d4:	e00e      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80069d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069da:	3330      	adds	r3, #48	@ 0x30
 80069dc:	4618      	mov	r0, r3
 80069de:	f003 f87b 	bl	8009ad8 <RCCEx_PLL3_Config>
 80069e2:	4603      	mov	r3, r0
 80069e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80069e8:	e004      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80069f0:	e000      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 80069f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069f4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10d      	bne.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80069fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80069fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a02:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006a06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a0a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006a0e:	4916      	ldr	r1, [pc, #88]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006a16:	e003      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a18:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a1c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a28:	2100      	movs	r1, #0
 8006a2a:	6039      	str	r1, [r7, #0]
 8006a2c:	f003 0308 	and.w	r3, r3, #8
 8006a30:	607b      	str	r3, [r7, #4]
 8006a32:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006a36:	460b      	mov	r3, r1
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	d00c      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8006a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006a3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006a46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a4a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8006a4e:	4906      	ldr	r1, [pc, #24]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8006a56:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8006a60:	46bd      	mov	sp, r7
 8006a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a66:	bf00      	nop
 8006a68:	44020c00 	.word	0x44020c00

08006a6c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b08b      	sub	sp, #44	@ 0x2c
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006a74:	4bae      	ldr	r3, [pc, #696]	@ (8006d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a7c:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006a7e:	4bac      	ldr	r3, [pc, #688]	@ (8006d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a82:	f003 0303 	and.w	r3, r3, #3
 8006a86:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006a88:	4ba9      	ldr	r3, [pc, #676]	@ (8006d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a8c:	0a1b      	lsrs	r3, r3, #8
 8006a8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a92:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006a94:	4ba6      	ldr	r3, [pc, #664]	@ (8006d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a98:	091b      	lsrs	r3, r3, #4
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006aa0:	4ba3      	ldr	r3, [pc, #652]	@ (8006d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa4:	08db      	lsrs	r3, r3, #3
 8006aa6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	fb02 f303 	mul.w	r3, r2, r3
 8006ab0:	ee07 3a90 	vmov	s15, r3
 8006ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab8:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 8126 	beq.w	8006d10 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	d053      	beq.n	8006b72 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	d86f      	bhi.n	8006bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d003      	beq.n	8006ade <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d02b      	beq.n	8006b34 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006adc:	e068      	b.n	8006bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ade:	4b94      	ldr	r3, [pc, #592]	@ (8006d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	08db      	lsrs	r3, r3, #3
 8006ae4:	f003 0303 	and.w	r3, r3, #3
 8006ae8:	4a92      	ldr	r2, [pc, #584]	@ (8006d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006aea:	fa22 f303 	lsr.w	r3, r2, r3
 8006aee:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	ee07 3a90 	vmov	s15, r3
 8006af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	ee07 3a90 	vmov	s15, r3
 8006b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b12:	ed97 6a04 	vldr	s12, [r7, #16]
 8006b16:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b2e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006b32:	e068      	b.n	8006c06 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b3e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8006d3c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8006b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	ee07 3a90 	vmov	s15, r3
 8006b4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b50:	ed97 6a04 	vldr	s12, [r7, #16]
 8006b54:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006b58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b6c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006b70:	e049      	b.n	8006c06 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	ee07 3a90 	vmov	s15, r3
 8006b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b7c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8006b80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b8e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006b92:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006baa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006bae:	e02a      	b.n	8006c06 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006bb0:	4b5f      	ldr	r3, [pc, #380]	@ (8006d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	08db      	lsrs	r3, r3, #3
 8006bb6:	f003 0303 	and.w	r3, r3, #3
 8006bba:	4a5e      	ldr	r2, [pc, #376]	@ (8006d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc0:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	ee07 3a90 	vmov	s15, r3
 8006bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	ee07 3a90 	vmov	s15, r3
 8006bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	ee07 3a90 	vmov	s15, r3
 8006be0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006be4:	ed97 6a04 	vldr	s12, [r7, #16]
 8006be8:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006bec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bf4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c00:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006c04:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c06:	4b4a      	ldr	r3, [pc, #296]	@ (8006d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c12:	d121      	bne.n	8006c58 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006c14:	4b46      	ldr	r3, [pc, #280]	@ (8006d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d017      	beq.n	8006c50 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c20:	4b43      	ldr	r3, [pc, #268]	@ (8006d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c24:	0a5b      	lsrs	r3, r3, #9
 8006c26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c2a:	ee07 3a90 	vmov	s15, r3
 8006c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8006c32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c36:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006c3a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c46:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	e006      	b.n	8006c5e <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	e002      	b.n	8006c5e <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c5e:	4b34      	ldr	r3, [pc, #208]	@ (8006d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c6a:	d121      	bne.n	8006cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006c6c:	4b30      	ldr	r3, [pc, #192]	@ (8006d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d017      	beq.n	8006ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c78:	4b2d      	ldr	r3, [pc, #180]	@ (8006d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c7c:	0c1b      	lsrs	r3, r3, #16
 8006c7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c82:	ee07 3a90 	vmov	s15, r3
 8006c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006c8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c8e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006c92:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c9e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	605a      	str	r2, [r3, #4]
 8006ca6:	e006      	b.n	8006cb6 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	605a      	str	r2, [r3, #4]
 8006cae:	e002      	b.n	8006cb6 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8006d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cc2:	d121      	bne.n	8006d08 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8006d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d017      	beq.n	8006d00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006cd0:	4b17      	ldr	r3, [pc, #92]	@ (8006d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cd4:	0e1b      	lsrs	r3, r3, #24
 8006cd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cda:	ee07 3a90 	vmov	s15, r3
 8006cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8006ce2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ce6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006cea:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cf6:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006cfe:	e010      	b.n	8006d22 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	609a      	str	r2, [r3, #8]
}
 8006d06:	e00c      	b.n	8006d22 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	609a      	str	r2, [r3, #8]
}
 8006d0e:	e008      	b.n	8006d22 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	609a      	str	r2, [r3, #8]
}
 8006d22:	bf00      	nop
 8006d24:	372c      	adds	r7, #44	@ 0x2c
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	44020c00 	.word	0x44020c00
 8006d34:	03d09000 	.word	0x03d09000
 8006d38:	46000000 	.word	0x46000000
 8006d3c:	4a742400 	.word	0x4a742400
 8006d40:	4bbebc20 	.word	0x4bbebc20

08006d44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b08b      	sub	sp, #44	@ 0x2c
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006d4c:	4bae      	ldr	r3, [pc, #696]	@ (8007008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d54:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006d56:	4bac      	ldr	r3, [pc, #688]	@ (8007008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5a:	f003 0303 	and.w	r3, r3, #3
 8006d5e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8006d60:	4ba9      	ldr	r3, [pc, #676]	@ (8007008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d64:	0a1b      	lsrs	r3, r3, #8
 8006d66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d6a:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006d6c:	4ba6      	ldr	r3, [pc, #664]	@ (8007008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d70:	091b      	lsrs	r3, r3, #4
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006d78:	4ba3      	ldr	r3, [pc, #652]	@ (8007008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7c:	08db      	lsrs	r3, r3, #3
 8006d7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	fb02 f303 	mul.w	r3, r2, r3
 8006d88:	ee07 3a90 	vmov	s15, r3
 8006d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d90:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f000 8126 	beq.w	8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	d053      	beq.n	8006e4a <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	2b03      	cmp	r3, #3
 8006da6:	d86f      	bhi.n	8006e88 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d003      	beq.n	8006db6 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d02b      	beq.n	8006e0c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006db4:	e068      	b.n	8006e88 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006db6:	4b94      	ldr	r3, [pc, #592]	@ (8007008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	08db      	lsrs	r3, r3, #3
 8006dbc:	f003 0303 	and.w	r3, r3, #3
 8006dc0:	4a92      	ldr	r2, [pc, #584]	@ (800700c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc6:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	ee07 3a90 	vmov	s15, r3
 8006dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	ee07 3a90 	vmov	s15, r3
 8006dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ddc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	ee07 3a90 	vmov	s15, r3
 8006de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dea:	ed97 6a04 	vldr	s12, [r7, #16]
 8006dee:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007010 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e06:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006e0a:	e068      	b.n	8006ede <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	ee07 3a90 	vmov	s15, r3
 8006e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e16:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007014 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8006e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	ee07 3a90 	vmov	s15, r3
 8006e24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e28:	ed97 6a04 	vldr	s12, [r7, #16]
 8006e2c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007010 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006e30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e44:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006e48:	e049      	b.n	8006ede <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	ee07 3a90 	vmov	s15, r3
 8006e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e54:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007018 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8006e58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	ee07 3a90 	vmov	s15, r3
 8006e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e66:	ed97 6a04 	vldr	s12, [r7, #16]
 8006e6a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007010 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e82:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006e86:	e02a      	b.n	8006ede <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e88:	4b5f      	ldr	r3, [pc, #380]	@ (8007008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	08db      	lsrs	r3, r3, #3
 8006e8e:	f003 0303 	and.w	r3, r3, #3
 8006e92:	4a5e      	ldr	r2, [pc, #376]	@ (800700c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006e94:	fa22 f303 	lsr.w	r3, r2, r3
 8006e98:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	ee07 3a90 	vmov	s15, r3
 8006ea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	ee07 3a90 	vmov	s15, r3
 8006eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	ee07 3a90 	vmov	s15, r3
 8006eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ebc:	ed97 6a04 	vldr	s12, [r7, #16]
 8006ec0:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007010 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006ec4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ec8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ecc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ed0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ed8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006edc:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ede:	4b4a      	ldr	r3, [pc, #296]	@ (8007008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ee6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006eea:	d121      	bne.n	8006f30 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006eec:	4b46      	ldr	r3, [pc, #280]	@ (8007008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d017      	beq.n	8006f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006ef8:	4b43      	ldr	r3, [pc, #268]	@ (8007008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006efc:	0a5b      	lsrs	r3, r3, #9
 8006efe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8006f0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f0e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006f12:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f1e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	601a      	str	r2, [r3, #0]
 8006f26:	e006      	b.n	8006f36 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	e002      	b.n	8006f36 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f36:	4b34      	ldr	r3, [pc, #208]	@ (8007008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f42:	d121      	bne.n	8006f88 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006f44:	4b30      	ldr	r3, [pc, #192]	@ (8007008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d017      	beq.n	8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f50:	4b2d      	ldr	r3, [pc, #180]	@ (8007008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f54:	0c1b      	lsrs	r3, r3, #16
 8006f56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f5a:	ee07 3a90 	vmov	s15, r3
 8006f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006f62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f66:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006f6a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f76:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	605a      	str	r2, [r3, #4]
 8006f7e:	e006      	b.n	8006f8e <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	605a      	str	r2, [r3, #4]
 8006f86:	e002      	b.n	8006f8e <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8007008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f9a:	d121      	bne.n	8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8007008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d017      	beq.n	8006fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006fa8:	4b17      	ldr	r3, [pc, #92]	@ (8007008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fac:	0e1b      	lsrs	r3, r3, #24
 8006fae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8006fba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fbe:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006fc2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fce:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006fd6:	e010      	b.n	8006ffa <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	609a      	str	r2, [r3, #8]
}
 8006fde:	e00c      	b.n	8006ffa <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	609a      	str	r2, [r3, #8]
}
 8006fe6:	e008      	b.n	8006ffa <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	609a      	str	r2, [r3, #8]
}
 8006ffa:	bf00      	nop
 8006ffc:	372c      	adds	r7, #44	@ 0x2c
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	44020c00 	.word	0x44020c00
 800700c:	03d09000 	.word	0x03d09000
 8007010:	46000000 	.word	0x46000000
 8007014:	4a742400 	.word	0x4a742400
 8007018:	4bbebc20 	.word	0x4bbebc20

0800701c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800701c:	b480      	push	{r7}
 800701e:	b08b      	sub	sp, #44	@ 0x2c
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007024:	4bae      	ldr	r3, [pc, #696]	@ (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800702c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800702e:	4bac      	ldr	r3, [pc, #688]	@ (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007032:	f003 0303 	and.w	r3, r3, #3
 8007036:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8007038:	4ba9      	ldr	r3, [pc, #676]	@ (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800703a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800703c:	0a1b      	lsrs	r3, r3, #8
 800703e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007042:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007044:	4ba6      	ldr	r3, [pc, #664]	@ (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007048:	091b      	lsrs	r3, r3, #4
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007050:	4ba3      	ldr	r3, [pc, #652]	@ (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007054:	08db      	lsrs	r3, r3, #3
 8007056:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	fb02 f303 	mul.w	r3, r2, r3
 8007060:	ee07 3a90 	vmov	s15, r3
 8007064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007068:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	2b00      	cmp	r3, #0
 8007070:	f000 8126 	beq.w	80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	2b03      	cmp	r3, #3
 8007078:	d053      	beq.n	8007122 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	2b03      	cmp	r3, #3
 800707e:	d86f      	bhi.n	8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d003      	beq.n	800708e <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	2b02      	cmp	r3, #2
 800708a:	d02b      	beq.n	80070e4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800708c:	e068      	b.n	8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800708e:	4b94      	ldr	r3, [pc, #592]	@ (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	08db      	lsrs	r3, r3, #3
 8007094:	f003 0303 	and.w	r3, r3, #3
 8007098:	4a92      	ldr	r2, [pc, #584]	@ (80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800709a:	fa22 f303 	lsr.w	r3, r2, r3
 800709e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	ee07 3a90 	vmov	s15, r3
 80070a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	ee07 3a90 	vmov	s15, r3
 80070b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070c2:	ed97 6a04 	vldr	s12, [r7, #16]
 80070c6:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80070ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070de:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80070e2:	e068      	b.n	80071b6 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	ee07 3a90 	vmov	s15, r3
 80070ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ee:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80072ec <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80070f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	ee07 3a90 	vmov	s15, r3
 80070fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007100:	ed97 6a04 	vldr	s12, [r7, #16]
 8007104:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007108:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800710c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007110:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007114:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800711c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007120:	e049      	b.n	80071b6 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	ee07 3a90 	vmov	s15, r3
 8007128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8007130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	ee07 3a90 	vmov	s15, r3
 800713a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800713e:	ed97 6a04 	vldr	s12, [r7, #16]
 8007142:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800714a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800714e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800715a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800715e:	e02a      	b.n	80071b6 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007160:	4b5f      	ldr	r3, [pc, #380]	@ (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	08db      	lsrs	r3, r3, #3
 8007166:	f003 0303 	and.w	r3, r3, #3
 800716a:	4a5e      	ldr	r2, [pc, #376]	@ (80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800716c:	fa22 f303 	lsr.w	r3, r2, r3
 8007170:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	ee07 3a90 	vmov	s15, r3
 8007178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	ee07 3a90 	vmov	s15, r3
 8007182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	ee07 3a90 	vmov	s15, r3
 8007190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007194:	ed97 6a04 	vldr	s12, [r7, #16]
 8007198:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800719c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80071b4:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071b6:	4b4a      	ldr	r3, [pc, #296]	@ (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071c2:	d121      	bne.n	8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80071c4:	4b46      	ldr	r3, [pc, #280]	@ (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80071c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d017      	beq.n	8007200 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80071d0:	4b43      	ldr	r3, [pc, #268]	@ (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80071d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071d4:	0a5b      	lsrs	r3, r3, #9
 80071d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80071e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071e6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80071ea:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80071ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071f6:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	e006      	b.n	800720e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]
 8007206:	e002      	b.n	800720e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800720e:	4b34      	ldr	r3, [pc, #208]	@ (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007216:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800721a:	d121      	bne.n	8007260 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800721c:	4b30      	ldr	r3, [pc, #192]	@ (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800721e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d017      	beq.n	8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007228:	4b2d      	ldr	r3, [pc, #180]	@ (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800722a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800722c:	0c1b      	lsrs	r3, r3, #16
 800722e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800723a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800723e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007242:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800724a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800724e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	605a      	str	r2, [r3, #4]
 8007256:	e006      	b.n	8007266 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	605a      	str	r2, [r3, #4]
 800725e:	e002      	b.n	8007266 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007266:	4b1e      	ldr	r3, [pc, #120]	@ (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800726e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007272:	d121      	bne.n	80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007274:	4b1a      	ldr	r3, [pc, #104]	@ (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007278:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d017      	beq.n	80072b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007280:	4b17      	ldr	r3, [pc, #92]	@ (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007284:	0e1b      	lsrs	r3, r3, #24
 8007286:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8007292:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007296:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800729a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800729e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072a6:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80072ae:	e010      	b.n	80072d2 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	609a      	str	r2, [r3, #8]
}
 80072b6:	e00c      	b.n	80072d2 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	609a      	str	r2, [r3, #8]
}
 80072be:	e008      	b.n	80072d2 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	609a      	str	r2, [r3, #8]
}
 80072d2:	bf00      	nop
 80072d4:	372c      	adds	r7, #44	@ 0x2c
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	44020c00 	.word	0x44020c00
 80072e4:	03d09000 	.word	0x03d09000
 80072e8:	46000000 	.word	0x46000000
 80072ec:	4a742400 	.word	0x4a742400
 80072f0:	4bbebc20 	.word	0x4bbebc20

080072f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80072f4:	b590      	push	{r4, r7, lr}
 80072f6:	b08f      	sub	sp, #60	@ 0x3c
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80072fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007302:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8007306:	4321      	orrs	r1, r4
 8007308:	d150      	bne.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800730a:	4b26      	ldr	r3, [pc, #152]	@ (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800730c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007310:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007314:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007316:	4b23      	ldr	r3, [pc, #140]	@ (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007318:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800731c:	f003 0302 	and.w	r3, r3, #2
 8007320:	2b02      	cmp	r3, #2
 8007322:	d108      	bne.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007326:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800732a:	d104      	bne.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800732c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007330:	637b      	str	r3, [r7, #52]	@ 0x34
 8007332:	f002 bb2a 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007336:	4b1b      	ldr	r3, [pc, #108]	@ (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800733c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007340:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007344:	d108      	bne.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8007346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007348:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800734c:	d104      	bne.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800734e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007352:	637b      	str	r3, [r7, #52]	@ 0x34
 8007354:	f002 bb19 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8007358:	4b12      	ldr	r3, [pc, #72]	@ (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007360:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007364:	d119      	bne.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8007366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007368:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800736c:	d115      	bne.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800736e:	4b0d      	ldr	r3, [pc, #52]	@ (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8007376:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800737a:	d30a      	bcc.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800737c:	4b09      	ldr	r3, [pc, #36]	@ (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	0a1b      	lsrs	r3, r3, #8
 8007382:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007386:	4a08      	ldr	r2, [pc, #32]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007388:	fbb2 f3f3 	udiv	r3, r2, r3
 800738c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800738e:	f002 bafc 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8007392:	2300      	movs	r3, #0
 8007394:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007396:	f002 baf8 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800739a:	2300      	movs	r3, #0
 800739c:	637b      	str	r3, [r7, #52]	@ 0x34
 800739e:	f002 baf4 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80073a2:	bf00      	nop
 80073a4:	44020c00 	.word	0x44020c00
 80073a8:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80073ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073b0:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 80073b4:	ea50 0104 	orrs.w	r1, r0, r4
 80073b8:	f001 8275 	beq.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80073bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073c0:	2801      	cmp	r0, #1
 80073c2:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 80073c6:	f082 82dd 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80073ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073ce:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 80073d2:	ea50 0104 	orrs.w	r1, r0, r4
 80073d6:	f001 816c 	beq.w	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80073da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073de:	2801      	cmp	r0, #1
 80073e0:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80073e4:	f082 82ce 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80073e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073ec:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 80073f0:	ea50 0104 	orrs.w	r1, r0, r4
 80073f4:	f001 8602 	beq.w	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80073f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073fc:	2801      	cmp	r0, #1
 80073fe:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8007402:	f082 82bf 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007406:	e9d7 0100 	ldrd	r0, r1, [r7]
 800740a:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 800740e:	ea50 0104 	orrs.w	r1, r0, r4
 8007412:	f001 854c 	beq.w	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8007416:	e9d7 0100 	ldrd	r0, r1, [r7]
 800741a:	2801      	cmp	r0, #1
 800741c:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8007420:	f082 82b0 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007424:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007428:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 800742c:	ea50 0104 	orrs.w	r1, r0, r4
 8007430:	f001 849e 	beq.w	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8007434:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007438:	2801      	cmp	r0, #1
 800743a:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 800743e:	f082 82a1 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007442:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007446:	f1a1 0420 	sub.w	r4, r1, #32
 800744a:	ea50 0104 	orrs.w	r1, r0, r4
 800744e:	f001 83e8 	beq.w	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8007452:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007456:	2801      	cmp	r0, #1
 8007458:	f171 0120 	sbcs.w	r1, r1, #32
 800745c:	f082 8292 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007460:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007464:	f1a1 0410 	sub.w	r4, r1, #16
 8007468:	ea50 0104 	orrs.w	r1, r0, r4
 800746c:	f002 8256 	beq.w	800991c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007470:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007474:	2801      	cmp	r0, #1
 8007476:	f171 0110 	sbcs.w	r1, r1, #16
 800747a:	f082 8283 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800747e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007482:	f1a1 0408 	sub.w	r4, r1, #8
 8007486:	ea50 0104 	orrs.w	r1, r0, r4
 800748a:	f002 81cc 	beq.w	8009826 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800748e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007492:	2801      	cmp	r0, #1
 8007494:	f171 0108 	sbcs.w	r1, r1, #8
 8007498:	f082 8274 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800749c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074a0:	1f0c      	subs	r4, r1, #4
 80074a2:	ea50 0104 	orrs.w	r1, r0, r4
 80074a6:	f001 8648 	beq.w	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 80074aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074ae:	2801      	cmp	r0, #1
 80074b0:	f171 0104 	sbcs.w	r1, r1, #4
 80074b4:	f082 8266 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80074b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074bc:	1e8c      	subs	r4, r1, #2
 80074be:	ea50 0104 	orrs.w	r1, r0, r4
 80074c2:	f002 8143 	beq.w	800974c <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80074c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074ca:	2801      	cmp	r0, #1
 80074cc:	f171 0102 	sbcs.w	r1, r1, #2
 80074d0:	f082 8258 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80074d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074d8:	1e4c      	subs	r4, r1, #1
 80074da:	ea50 0104 	orrs.w	r1, r0, r4
 80074de:	f002 80ce 	beq.w	800967e <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80074e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074e6:	2801      	cmp	r0, #1
 80074e8:	f171 0101 	sbcs.w	r1, r1, #1
 80074ec:	f082 824a 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80074f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074f4:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80074f8:	4321      	orrs	r1, r4
 80074fa:	f002 8059 	beq.w	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80074fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007502:	4cd9      	ldr	r4, [pc, #868]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007504:	42a0      	cmp	r0, r4
 8007506:	f171 0100 	sbcs.w	r1, r1, #0
 800750a:	f082 823b 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800750e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007512:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8007516:	4321      	orrs	r1, r4
 8007518:	f001 87d9 	beq.w	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800751c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007520:	4cd2      	ldr	r4, [pc, #840]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8007522:	42a0      	cmp	r0, r4
 8007524:	f171 0100 	sbcs.w	r1, r1, #0
 8007528:	f082 822c 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800752c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007530:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8007534:	4321      	orrs	r1, r4
 8007536:	f001 8751 	beq.w	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800753a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800753e:	4ccc      	ldr	r4, [pc, #816]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007540:	42a0      	cmp	r0, r4
 8007542:	f171 0100 	sbcs.w	r1, r1, #0
 8007546:	f082 821d 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800754a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800754e:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8007552:	4321      	orrs	r1, r4
 8007554:	f001 869a 	beq.w	800928c <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8007558:	e9d7 0100 	ldrd	r0, r1, [r7]
 800755c:	4cc5      	ldr	r4, [pc, #788]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800755e:	42a0      	cmp	r0, r4
 8007560:	f171 0100 	sbcs.w	r1, r1, #0
 8007564:	f082 820e 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800756c:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8007570:	4321      	orrs	r1, r4
 8007572:	f001 8612 	beq.w	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8007576:	e9d7 0100 	ldrd	r0, r1, [r7]
 800757a:	4cbf      	ldr	r4, [pc, #764]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800757c:	42a0      	cmp	r0, r4
 800757e:	f171 0100 	sbcs.w	r1, r1, #0
 8007582:	f082 81ff 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007586:	e9d7 0100 	ldrd	r0, r1, [r7]
 800758a:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800758e:	4321      	orrs	r1, r4
 8007590:	f002 817e 	beq.w	8009890 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8007594:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007598:	4cb8      	ldr	r4, [pc, #736]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800759a:	42a0      	cmp	r0, r4
 800759c:	f171 0100 	sbcs.w	r1, r1, #0
 80075a0:	f082 81f0 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80075a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075a8:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 80075ac:	4321      	orrs	r1, r4
 80075ae:	f000 829e 	beq.w	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 80075b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075b6:	4cb2      	ldr	r4, [pc, #712]	@ (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80075b8:	42a0      	cmp	r0, r4
 80075ba:	f171 0100 	sbcs.w	r1, r1, #0
 80075be:	f082 81e1 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80075c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075c6:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 80075ca:	4321      	orrs	r1, r4
 80075cc:	f000 826d 	beq.w	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80075d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075d4:	4cab      	ldr	r4, [pc, #684]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80075d6:	42a0      	cmp	r0, r4
 80075d8:	f171 0100 	sbcs.w	r1, r1, #0
 80075dc:	f082 81d2 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80075e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075e4:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80075e8:	4321      	orrs	r1, r4
 80075ea:	f001 800d 	beq.w	8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 80075ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075f2:	4ca5      	ldr	r4, [pc, #660]	@ (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80075f4:	42a0      	cmp	r0, r4
 80075f6:	f171 0100 	sbcs.w	r1, r1, #0
 80075fa:	f082 81c3 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80075fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007602:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8007606:	4321      	orrs	r1, r4
 8007608:	f000 81d0 	beq.w	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800760c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007610:	4c9e      	ldr	r4, [pc, #632]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007612:	42a0      	cmp	r0, r4
 8007614:	f171 0100 	sbcs.w	r1, r1, #0
 8007618:	f082 81b4 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800761c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007620:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8007624:	4321      	orrs	r1, r4
 8007626:	f000 8142 	beq.w	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800762a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800762e:	4c98      	ldr	r4, [pc, #608]	@ (8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007630:	42a0      	cmp	r0, r4
 8007632:	f171 0100 	sbcs.w	r1, r1, #0
 8007636:	f082 81a5 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800763a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800763e:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8007642:	4321      	orrs	r1, r4
 8007644:	f001 824e 	beq.w	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8007648:	e9d7 0100 	ldrd	r0, r1, [r7]
 800764c:	4c91      	ldr	r4, [pc, #580]	@ (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800764e:	42a0      	cmp	r0, r4
 8007650:	f171 0100 	sbcs.w	r1, r1, #0
 8007654:	f082 8196 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007658:	e9d7 0100 	ldrd	r0, r1, [r7]
 800765c:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8007660:	4321      	orrs	r1, r4
 8007662:	f001 8197 	beq.w	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8007666:	e9d7 0100 	ldrd	r0, r1, [r7]
 800766a:	4c8b      	ldr	r4, [pc, #556]	@ (8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800766c:	42a0      	cmp	r0, r4
 800766e:	f171 0100 	sbcs.w	r1, r1, #0
 8007672:	f082 8187 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007676:	e9d7 0100 	ldrd	r0, r1, [r7]
 800767a:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800767e:	4321      	orrs	r1, r4
 8007680:	f001 8154 	beq.w	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8007684:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007688:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 800768c:	f171 0100 	sbcs.w	r1, r1, #0
 8007690:	f082 8178 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007694:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007698:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 800769c:	4321      	orrs	r1, r4
 800769e:	f001 80b7 	beq.w	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80076a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076a6:	f248 0401 	movw	r4, #32769	@ 0x8001
 80076aa:	42a0      	cmp	r0, r4
 80076ac:	f171 0100 	sbcs.w	r1, r1, #0
 80076b0:	f082 8168 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80076b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076b8:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 80076bc:	4321      	orrs	r1, r4
 80076be:	f001 8064 	beq.w	800878a <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 80076c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076c6:	f244 0401 	movw	r4, #16385	@ 0x4001
 80076ca:	42a0      	cmp	r0, r4
 80076cc:	f171 0100 	sbcs.w	r1, r1, #0
 80076d0:	f082 8158 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80076d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076d8:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 80076dc:	4321      	orrs	r1, r4
 80076de:	f001 8011 	beq.w	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 80076e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076e6:	f242 0401 	movw	r4, #8193	@ 0x2001
 80076ea:	42a0      	cmp	r0, r4
 80076ec:	f171 0100 	sbcs.w	r1, r1, #0
 80076f0:	f082 8148 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80076f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076f8:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 80076fc:	4321      	orrs	r1, r4
 80076fe:	f000 871e 	beq.w	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8007702:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007706:	f241 0401 	movw	r4, #4097	@ 0x1001
 800770a:	42a0      	cmp	r0, r4
 800770c:	f171 0100 	sbcs.w	r1, r1, #0
 8007710:	f082 8138 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007714:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007718:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 800771c:	4321      	orrs	r1, r4
 800771e:	f000 86a8 	beq.w	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8007722:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007726:	f640 0401 	movw	r4, #2049	@ 0x801
 800772a:	42a0      	cmp	r0, r4
 800772c:	f171 0100 	sbcs.w	r1, r1, #0
 8007730:	f082 8128 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007734:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007738:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 800773c:	4321      	orrs	r1, r4
 800773e:	f000 8632 	beq.w	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8007742:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007746:	f240 4401 	movw	r4, #1025	@ 0x401
 800774a:	42a0      	cmp	r0, r4
 800774c:	f171 0100 	sbcs.w	r1, r1, #0
 8007750:	f082 8118 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007754:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007758:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 800775c:	4321      	orrs	r1, r4
 800775e:	f000 85b0 	beq.w	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8007762:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007766:	f240 2401 	movw	r4, #513	@ 0x201
 800776a:	42a0      	cmp	r0, r4
 800776c:	f171 0100 	sbcs.w	r1, r1, #0
 8007770:	f082 8108 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007774:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007778:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 800777c:	4321      	orrs	r1, r4
 800777e:	f000 8535 	beq.w	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8007782:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007786:	f240 1401 	movw	r4, #257	@ 0x101
 800778a:	42a0      	cmp	r0, r4
 800778c:	f171 0100 	sbcs.w	r1, r1, #0
 8007790:	f082 80f8 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007794:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007798:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 800779c:	4321      	orrs	r1, r4
 800779e:	f000 84ba 	beq.w	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 80077a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077a6:	2881      	cmp	r0, #129	@ 0x81
 80077a8:	f171 0100 	sbcs.w	r1, r1, #0
 80077ac:	f082 80ea 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80077b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077b4:	2821      	cmp	r0, #33	@ 0x21
 80077b6:	f171 0100 	sbcs.w	r1, r1, #0
 80077ba:	d26f      	bcs.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80077bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077c0:	4301      	orrs	r1, r0
 80077c2:	f002 80df 	beq.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80077c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077ca:	1e42      	subs	r2, r0, #1
 80077cc:	f141 33ff 	adc.w	r3, r1, #4294967295
 80077d0:	2a20      	cmp	r2, #32
 80077d2:	f173 0100 	sbcs.w	r1, r3, #0
 80077d6:	f082 80d5 	bcs.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80077da:	2a1f      	cmp	r2, #31
 80077dc:	f202 80d2 	bhi.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80077e0:	a101      	add	r1, pc, #4	@ (adr r1, 80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80077e2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80077e6:	bf00      	nop
 80077e8:	08007b49 	.word	0x08007b49
 80077ec:	08007c15 	.word	0x08007c15
 80077f0:	08009985 	.word	0x08009985
 80077f4:	08007cd5 	.word	0x08007cd5
 80077f8:	08009985 	.word	0x08009985
 80077fc:	08009985 	.word	0x08009985
 8007800:	08009985 	.word	0x08009985
 8007804:	08007da5 	.word	0x08007da5
 8007808:	08009985 	.word	0x08009985
 800780c:	08009985 	.word	0x08009985
 8007810:	08009985 	.word	0x08009985
 8007814:	08009985 	.word	0x08009985
 8007818:	08009985 	.word	0x08009985
 800781c:	08009985 	.word	0x08009985
 8007820:	08009985 	.word	0x08009985
 8007824:	08007e87 	.word	0x08007e87
 8007828:	08009985 	.word	0x08009985
 800782c:	08009985 	.word	0x08009985
 8007830:	08009985 	.word	0x08009985
 8007834:	08009985 	.word	0x08009985
 8007838:	08009985 	.word	0x08009985
 800783c:	08009985 	.word	0x08009985
 8007840:	08009985 	.word	0x08009985
 8007844:	08009985 	.word	0x08009985
 8007848:	08009985 	.word	0x08009985
 800784c:	08009985 	.word	0x08009985
 8007850:	08009985 	.word	0x08009985
 8007854:	08009985 	.word	0x08009985
 8007858:	08009985 	.word	0x08009985
 800785c:	08009985 	.word	0x08009985
 8007860:	08009985 	.word	0x08009985
 8007864:	08007f5d 	.word	0x08007f5d
 8007868:	80000001 	.word	0x80000001
 800786c:	40000001 	.word	0x40000001
 8007870:	20000001 	.word	0x20000001
 8007874:	10000001 	.word	0x10000001
 8007878:	08000001 	.word	0x08000001
 800787c:	04000001 	.word	0x04000001
 8007880:	00800001 	.word	0x00800001
 8007884:	00400001 	.word	0x00400001
 8007888:	00200001 	.word	0x00200001
 800788c:	00100001 	.word	0x00100001
 8007890:	00080001 	.word	0x00080001
 8007894:	00040001 	.word	0x00040001
 8007898:	00020001 	.word	0x00020001
 800789c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078a0:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80078a4:	430b      	orrs	r3, r1
 80078a6:	f000 83c4 	beq.w	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80078aa:	f002 b86b 	b.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80078ae:	4ba1      	ldr	r3, [pc, #644]	@ (8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80078b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078b4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80078b8:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80078ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80078c0:	d036      	beq.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80078c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80078c8:	d86b      	bhi.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80078ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80078d0:	d02b      	beq.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80078d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80078d8:	d863      	bhi.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80078da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078e0:	d01b      	beq.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80078e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078e8:	d85b      	bhi.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80078ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d004      	beq.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 80078f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078f6:	d008      	beq.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 80078f8:	e053      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078fa:	f107 0320 	add.w	r3, r7, #32
 80078fe:	4618      	mov	r0, r3
 8007900:	f7ff f8b4 	bl	8006a6c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007906:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007908:	e04e      	b.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800790a:	f107 0314 	add.w	r3, r7, #20
 800790e:	4618      	mov	r0, r3
 8007910:	f7ff fa18 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007918:	e046      	b.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800791a:	f107 0308 	add.w	r3, r7, #8
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff fb7c 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007928:	e03e      	b.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800792a:	4b83      	ldr	r3, [pc, #524]	@ (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800792c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800792e:	e03b      	b.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007930:	4b80      	ldr	r3, [pc, #512]	@ (8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007932:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007936:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800793a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800793c:	4b7d      	ldr	r3, [pc, #500]	@ (8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0302 	and.w	r3, r3, #2
 8007944:	2b02      	cmp	r3, #2
 8007946:	d10c      	bne.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8007948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800794a:	2b00      	cmp	r3, #0
 800794c:	d109      	bne.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800794e:	4b79      	ldr	r3, [pc, #484]	@ (8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	08db      	lsrs	r3, r3, #3
 8007954:	f003 0303 	and.w	r3, r3, #3
 8007958:	4a78      	ldr	r2, [pc, #480]	@ (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800795a:	fa22 f303 	lsr.w	r3, r2, r3
 800795e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007960:	e01e      	b.n	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007962:	4b74      	ldr	r3, [pc, #464]	@ (8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800796a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800796e:	d106      	bne.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007976:	d102      	bne.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007978:	4b71      	ldr	r3, [pc, #452]	@ (8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800797a:	637b      	str	r3, [r7, #52]	@ 0x34
 800797c:	e010      	b.n	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800797e:	4b6d      	ldr	r3, [pc, #436]	@ (8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007986:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800798a:	d106      	bne.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800798c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800798e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007992:	d102      	bne.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007994:	4b6b      	ldr	r3, [pc, #428]	@ (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007996:	637b      	str	r3, [r7, #52]	@ 0x34
 8007998:	e002      	b.n	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800799a:	2300      	movs	r3, #0
 800799c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800799e:	e003      	b.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 80079a0:	e002      	b.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079a6:	bf00      	nop
          }
        }
        break;
 80079a8:	f001 bfef 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80079ac:	4b61      	ldr	r3, [pc, #388]	@ (8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80079ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80079b2:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 80079b6:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80079b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079be:	d036      	beq.n	8007a2e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 80079c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079c6:	d86b      	bhi.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80079c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ca:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80079ce:	d02b      	beq.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80079d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80079d6:	d863      	bhi.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80079d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079de:	d01b      	beq.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80079e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079e6:	d85b      	bhi.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80079e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d004      	beq.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80079ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80079f4:	d008      	beq.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 80079f6:	e053      	b.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079f8:	f107 0320 	add.w	r3, r7, #32
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7ff f835 	bl	8006a6c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a04:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a06:	e04e      	b.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a08:	f107 0314 	add.w	r3, r7, #20
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7ff f999 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a16:	e046      	b.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a18:	f107 0308 	add.w	r3, r7, #8
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7ff fafd 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a26:	e03e      	b.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007a28:	4b43      	ldr	r3, [pc, #268]	@ (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007a2a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a2c:	e03b      	b.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a2e:	4b41      	ldr	r3, [pc, #260]	@ (8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a34:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007a38:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a3a:	4b3e      	ldr	r3, [pc, #248]	@ (8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0302 	and.w	r3, r3, #2
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d10c      	bne.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8007a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d109      	bne.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a4c:	4b39      	ldr	r3, [pc, #228]	@ (8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	08db      	lsrs	r3, r3, #3
 8007a52:	f003 0303 	and.w	r3, r3, #3
 8007a56:	4a39      	ldr	r2, [pc, #228]	@ (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007a58:	fa22 f303 	lsr.w	r3, r2, r3
 8007a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a5e:	e01e      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a60:	4b34      	ldr	r3, [pc, #208]	@ (8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a6c:	d106      	bne.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a74:	d102      	bne.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007a76:	4b32      	ldr	r3, [pc, #200]	@ (8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a7a:	e010      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a88:	d106      	bne.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8007a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a90:	d102      	bne.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007a92:	4b2c      	ldr	r3, [pc, #176]	@ (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007a94:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a96:	e002      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007a9c:	e003      	b.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8007a9e:	e002      	b.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007aa4:	bf00      	nop
          }
        }
        break;
 8007aa6:	f001 bf70 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007aaa:	4b22      	ldr	r3, [pc, #136]	@ (8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007aac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ab4:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d108      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007abc:	f107 0320 	add.w	r3, r7, #32
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7fe ffd3 	bl	8006a6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007aca:	f001 bf5e 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8007ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad0:	2b40      	cmp	r3, #64	@ 0x40
 8007ad2:	d108      	bne.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ad4:	f107 0314 	add.w	r3, r7, #20
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7ff f933 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ae2:	f001 bf52 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007aea:	f001 bf4e 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8007aee:	4b11      	ldr	r3, [pc, #68]	@ (8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007af0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007af8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8007afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d108      	bne.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b00:	f107 0320 	add.w	r3, r7, #32
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fe ffb1 	bl	8006a6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b0e:	f001 bf3c 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8007b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b14:	2b80      	cmp	r3, #128	@ 0x80
 8007b16:	d108      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b18:	f107 0314 	add.w	r3, r7, #20
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7ff f911 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b26:	f001 bf30 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b2e:	f001 bf2c 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007b32:	bf00      	nop
 8007b34:	44020c00 	.word	0x44020c00
 8007b38:	00bb8000 	.word	0x00bb8000
 8007b3c:	03d09000 	.word	0x03d09000
 8007b40:	003d0900 	.word	0x003d0900
 8007b44:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007b48:	4b9d      	ldr	r3, [pc, #628]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007b4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007b4e:	f003 0307 	and.w	r3, r3, #7
 8007b52:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d104      	bne.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007b5a:	f7fc ffd1 	bl	8004b00 <HAL_RCC_GetPCLK2Freq>
 8007b5e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007b60:	f001 bf13 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8007b64:	4b96      	ldr	r3, [pc, #600]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b70:	d10a      	bne.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8007b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d107      	bne.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b78:	f107 0314 	add.w	r3, r7, #20
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7ff f8e1 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b86:	e043      	b.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8007b88:	4b8d      	ldr	r3, [pc, #564]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b94:	d10a      	bne.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8007b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d107      	bne.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b9c:	f107 0308 	add.w	r3, r7, #8
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7ff fa3b 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007baa:	e031      	b.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007bac:	4b84      	ldr	r3, [pc, #528]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0302 	and.w	r3, r3, #2
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d10c      	bne.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bba:	2b03      	cmp	r3, #3
 8007bbc:	d109      	bne.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007bbe:	4b80      	ldr	r3, [pc, #512]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	08db      	lsrs	r3, r3, #3
 8007bc4:	f003 0303 	and.w	r3, r3, #3
 8007bc8:	4a7e      	ldr	r2, [pc, #504]	@ (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007bca:	fa22 f303 	lsr.w	r3, r2, r3
 8007bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bd0:	e01e      	b.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8007bd2:	4b7b      	ldr	r3, [pc, #492]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bde:	d105      	bne.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8007be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be2:	2b04      	cmp	r3, #4
 8007be4:	d102      	bne.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8007be6:	4b78      	ldr	r3, [pc, #480]	@ (8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007be8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bea:	e011      	b.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007bec:	4b74      	ldr	r3, [pc, #464]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007bee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d106      	bne.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfc:	2b05      	cmp	r3, #5
 8007bfe:	d103      	bne.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8007c00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c06:	e003      	b.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c0c:	f001 bebd 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c10:	f001 bebb 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007c14:	4b6a      	ldr	r3, [pc, #424]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007c1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c1e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d104      	bne.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007c26:	f7fc ff55 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 8007c2a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007c2c:	f001 bead 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8007c30:	4b63      	ldr	r3, [pc, #396]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c3c:	d10a      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c40:	2b08      	cmp	r3, #8
 8007c42:	d107      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c44:	f107 0314 	add.w	r3, r7, #20
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7ff f87b 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c52:	e03d      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8007c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c56:	2b10      	cmp	r3, #16
 8007c58:	d108      	bne.n	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c5a:	f107 0308 	add.w	r3, r7, #8
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7ff f9dc 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c68:	f001 be8f 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007c6c:	4b54      	ldr	r3, [pc, #336]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0302 	and.w	r3, r3, #2
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d10c      	bne.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8007c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7a:	2b18      	cmp	r3, #24
 8007c7c:	d109      	bne.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c7e:	4b50      	ldr	r3, [pc, #320]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	08db      	lsrs	r3, r3, #3
 8007c84:	f003 0303 	and.w	r3, r3, #3
 8007c88:	4a4e      	ldr	r2, [pc, #312]	@ (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c90:	e01e      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8007c92:	4b4b      	ldr	r3, [pc, #300]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c9e:	d105      	bne.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca2:	2b20      	cmp	r3, #32
 8007ca4:	d102      	bne.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8007ca6:	4b48      	ldr	r3, [pc, #288]	@ (8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007caa:	e011      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007cac:	4b44      	ldr	r3, [pc, #272]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007cae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d106      	bne.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8007cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbc:	2b28      	cmp	r3, #40	@ 0x28
 8007cbe:	d103      	bne.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8007cc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cc6:	e003      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ccc:	f001 be5d 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007cd0:	f001 be5b 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007cd4:	4b3a      	ldr	r3, [pc, #232]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007cd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007cda:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007cde:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d104      	bne.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007ce6:	f7fc fef5 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 8007cea:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007cec:	f001 be4d 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8007cf0:	4b33      	ldr	r3, [pc, #204]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cfc:	d10a      	bne.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d00:	2b40      	cmp	r3, #64	@ 0x40
 8007d02:	d107      	bne.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d04:	f107 0314 	add.w	r3, r7, #20
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7ff f81b 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d12:	e045      	b.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8007d14:	4b2a      	ldr	r3, [pc, #168]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d20:	d10a      	bne.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8007d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d24:	2b80      	cmp	r3, #128	@ 0x80
 8007d26:	d107      	bne.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d28:	f107 0308 	add.w	r3, r7, #8
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7ff f975 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d36:	e033      	b.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007d38:	4b21      	ldr	r3, [pc, #132]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0302 	and.w	r3, r3, #2
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d10c      	bne.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8007d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d46:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d48:	d109      	bne.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	08db      	lsrs	r3, r3, #3
 8007d50:	f003 0303 	and.w	r3, r3, #3
 8007d54:	4a1b      	ldr	r2, [pc, #108]	@ (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007d56:	fa22 f303 	lsr.w	r3, r2, r3
 8007d5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d5c:	e020      	b.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8007d5e:	4b18      	ldr	r3, [pc, #96]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d6a:	d106      	bne.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d72:	d102      	bne.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8007d74:	4b14      	ldr	r3, [pc, #80]	@ (8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d78:	e012      	b.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007d7a:	4b11      	ldr	r3, [pc, #68]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d80:	f003 0302 	and.w	r3, r3, #2
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d107      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8007d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007d8e:	d103      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8007d90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d96:	e003      	b.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d9c:	f001 bdf5 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007da0:	f001 bdf3 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007da4:	4b06      	ldr	r3, [pc, #24]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007da6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007daa:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007dae:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10a      	bne.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007db6:	f7fc fe8d 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 8007dba:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007dbc:	f001 bde5 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007dc0:	44020c00 	.word	0x44020c00
 8007dc4:	03d09000 	.word	0x03d09000
 8007dc8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8007dcc:	4ba0      	ldr	r3, [pc, #640]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dd8:	d10b      	bne.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8007dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007de0:	d107      	bne.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007de2:	f107 0314 	add.w	r3, r7, #20
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fe ffac 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007df0:	e047      	b.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8007df2:	4b97      	ldr	r3, [pc, #604]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dfe:	d10b      	bne.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8007e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e06:	d107      	bne.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e08:	f107 0308 	add.w	r3, r7, #8
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7ff f905 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e16:	e034      	b.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007e18:	4b8d      	ldr	r3, [pc, #564]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0302 	and.w	r3, r3, #2
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d10d      	bne.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8007e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e26:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007e2a:	d109      	bne.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e2c:	4b88      	ldr	r3, [pc, #544]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	08db      	lsrs	r3, r3, #3
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	4a87      	ldr	r2, [pc, #540]	@ (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007e38:	fa22 f303 	lsr.w	r3, r2, r3
 8007e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e3e:	e020      	b.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8007e40:	4b83      	ldr	r3, [pc, #524]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e4c:	d106      	bne.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8007e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e54:	d102      	bne.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8007e56:	4b80      	ldr	r3, [pc, #512]	@ (8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e5a:	e012      	b.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007e5c:	4b7c      	ldr	r3, [pc, #496]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e62:	f003 0302 	and.w	r3, r3, #2
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d107      	bne.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8007e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007e70:	d103      	bne.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8007e72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e78:	e003      	b.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e7e:	f001 bd84 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e82:	f001 bd82 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007e86:	4b72      	ldr	r3, [pc, #456]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007e8c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007e90:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d104      	bne.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007e98:	f7fc fe1c 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 8007e9c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8007e9e:	f001 bd74 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8007ea2:	4b6b      	ldr	r3, [pc, #428]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007eaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007eae:	d10b      	bne.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8007eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eb6:	d107      	bne.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eb8:	f107 0314 	add.w	r3, r7, #20
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7fe ff41 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ec6:	e047      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8007ec8:	4b61      	ldr	r3, [pc, #388]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ed0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ed4:	d10b      	bne.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007edc:	d107      	bne.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ede:	f107 0308 	add.w	r3, r7, #8
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7ff f89a 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eec:	e034      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007eee:	4b58      	ldr	r3, [pc, #352]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d10d      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f00:	d109      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f02:	4b53      	ldr	r3, [pc, #332]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	08db      	lsrs	r3, r3, #3
 8007f08:	f003 0303 	and.w	r3, r3, #3
 8007f0c:	4a51      	ldr	r2, [pc, #324]	@ (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f12:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f14:	e020      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8007f16:	4b4e      	ldr	r3, [pc, #312]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f22:	d106      	bne.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8007f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f2a:	d102      	bne.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8007f2c:	4b4a      	ldr	r3, [pc, #296]	@ (8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007f2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f30:	e012      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007f32:	4b47      	ldr	r3, [pc, #284]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f38:	f003 0302 	and.w	r3, r3, #2
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d107      	bne.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8007f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f42:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007f46:	d103      	bne.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8007f48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f4e:	e003      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8007f50:	2300      	movs	r3, #0
 8007f52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f54:	f001 bd19 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f58:	f001 bd17 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007f5c:	4b3c      	ldr	r3, [pc, #240]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007f62:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8007f66:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8007f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d104      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007f6e:	f7fc fdb1 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 8007f72:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8007f74:	f001 bd09 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8007f78:	4b35      	ldr	r3, [pc, #212]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f84:	d10b      	bne.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8007f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f8c:	d107      	bne.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f8e:	f107 0314 	add.w	r3, r7, #20
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fe fed6 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f9c:	e047      	b.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8007f9e:	4b2c      	ldr	r3, [pc, #176]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007faa:	d10b      	bne.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8007fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fb2:	d107      	bne.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fb4:	f107 0308 	add.w	r3, r7, #8
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7ff f82f 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fc2:	e034      	b.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007fc4:	4b22      	ldr	r3, [pc, #136]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0302 	and.w	r3, r3, #2
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d10d      	bne.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007fd6:	d109      	bne.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	08db      	lsrs	r3, r3, #3
 8007fde:	f003 0303 	and.w	r3, r3, #3
 8007fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8007fe8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fea:	e020      	b.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007fec:	4b18      	ldr	r3, [pc, #96]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ff4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ff8:	d106      	bne.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008000:	d102      	bne.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8008002:	4b15      	ldr	r3, [pc, #84]	@ (8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008004:	637b      	str	r3, [r7, #52]	@ 0x34
 8008006:	e012      	b.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008008:	4b11      	ldr	r3, [pc, #68]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800800a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800800e:	f003 0302 	and.w	r3, r3, #2
 8008012:	2b02      	cmp	r3, #2
 8008014:	d107      	bne.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8008016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008018:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800801c:	d103      	bne.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800801e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008022:	637b      	str	r3, [r7, #52]	@ 0x34
 8008024:	e003      	b.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8008026:	2300      	movs	r3, #0
 8008028:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800802a:	f001 bcae 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800802e:	f001 bcac 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8008032:	4b07      	ldr	r3, [pc, #28]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008034:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008038:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 800803c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800803e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10b      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008044:	f7fc fd46 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 8008048:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800804a:	f001 bc9e 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800804e:	bf00      	nop
 8008050:	44020c00 	.word	0x44020c00
 8008054:	03d09000 	.word	0x03d09000
 8008058:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800805c:	4ba0      	ldr	r3, [pc, #640]	@ (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008064:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008068:	d10b      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800806a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008070:	d107      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008072:	f107 0314 	add.w	r3, r7, #20
 8008076:	4618      	mov	r0, r3
 8008078:	f7fe fe64 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008080:	e047      	b.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8008082:	4b97      	ldr	r3, [pc, #604]	@ (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800808a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800808e:	d10b      	bne.n	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8008090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008092:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008096:	d107      	bne.n	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008098:	f107 0308 	add.w	r3, r7, #8
 800809c:	4618      	mov	r0, r3
 800809e:	f7fe ffbd 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80080a6:	e034      	b.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80080a8:	4b8d      	ldr	r3, [pc, #564]	@ (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 0302 	and.w	r3, r3, #2
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d10d      	bne.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80080b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80080ba:	d109      	bne.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80080bc:	4b88      	ldr	r3, [pc, #544]	@ (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	08db      	lsrs	r3, r3, #3
 80080c2:	f003 0303 	and.w	r3, r3, #3
 80080c6:	4a87      	ldr	r2, [pc, #540]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80080c8:	fa22 f303 	lsr.w	r3, r2, r3
 80080cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80080ce:	e020      	b.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80080d0:	4b83      	ldr	r3, [pc, #524]	@ (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080dc:	d106      	bne.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80080de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080e4:	d102      	bne.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80080e6:	4b80      	ldr	r3, [pc, #512]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80080e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80080ea:	e012      	b.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80080ec:	4b7c      	ldr	r3, [pc, #496]	@ (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80080ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080f2:	f003 0302 	and.w	r3, r3, #2
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d107      	bne.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80080fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008100:	d103      	bne.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8008102:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008106:	637b      	str	r3, [r7, #52]	@ 0x34
 8008108:	e003      	b.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800810e:	f001 bc3c 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008112:	f001 bc3a 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8008116:	4b72      	ldr	r3, [pc, #456]	@ (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008118:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800811c:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008120:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8008122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008124:	2b00      	cmp	r3, #0
 8008126:	d104      	bne.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008128:	f7fc fcd4 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 800812c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800812e:	f001 bc2c 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8008132:	4b6b      	ldr	r3, [pc, #428]	@ (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800813a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800813e:	d10b      	bne.n	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008142:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008146:	d107      	bne.n	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008148:	f107 0314 	add.w	r3, r7, #20
 800814c:	4618      	mov	r0, r3
 800814e:	f7fe fdf9 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	637b      	str	r3, [r7, #52]	@ 0x34
 8008156:	e047      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8008158:	4b61      	ldr	r3, [pc, #388]	@ (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008160:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008164:	d10b      	bne.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8008166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008168:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800816c:	d107      	bne.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800816e:	f107 0308 	add.w	r3, r7, #8
 8008172:	4618      	mov	r0, r3
 8008174:	f7fe ff52 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	637b      	str	r3, [r7, #52]	@ 0x34
 800817c:	e034      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800817e:	4b58      	ldr	r3, [pc, #352]	@ (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 0302 	and.w	r3, r3, #2
 8008186:	2b02      	cmp	r3, #2
 8008188:	d10d      	bne.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800818a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008190:	d109      	bne.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008192:	4b53      	ldr	r3, [pc, #332]	@ (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	08db      	lsrs	r3, r3, #3
 8008198:	f003 0303 	and.w	r3, r3, #3
 800819c:	4a51      	ldr	r2, [pc, #324]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800819e:	fa22 f303 	lsr.w	r3, r2, r3
 80081a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80081a4:	e020      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80081a6:	4b4e      	ldr	r3, [pc, #312]	@ (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081b2:	d106      	bne.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80081b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80081ba:	d102      	bne.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80081bc:	4b4a      	ldr	r3, [pc, #296]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80081be:	637b      	str	r3, [r7, #52]	@ 0x34
 80081c0:	e012      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80081c2:	4b47      	ldr	r3, [pc, #284]	@ (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80081c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081c8:	f003 0302 	and.w	r3, r3, #2
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d107      	bne.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80081d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80081d6:	d103      	bne.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80081d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80081de:	e003      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80081e0:	2300      	movs	r3, #0
 80081e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081e4:	f001 bbd1 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80081e8:	f001 bbcf 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80081ec:	4b3c      	ldr	r3, [pc, #240]	@ (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80081ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80081f2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80081f6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80081f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d104      	bne.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80081fe:	f7fc fc69 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 8008202:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8008204:	f001 bbc1 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8008208:	4b35      	ldr	r3, [pc, #212]	@ (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008210:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008214:	d10b      	bne.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8008216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008218:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800821c:	d107      	bne.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800821e:	f107 0314 	add.w	r3, r7, #20
 8008222:	4618      	mov	r0, r3
 8008224:	f7fe fd8e 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	637b      	str	r3, [r7, #52]	@ 0x34
 800822c:	e047      	b.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800822e:	4b2c      	ldr	r3, [pc, #176]	@ (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008236:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800823a:	d10b      	bne.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800823c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008242:	d107      	bne.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008244:	f107 0308 	add.w	r3, r7, #8
 8008248:	4618      	mov	r0, r3
 800824a:	f7fe fee7 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	637b      	str	r3, [r7, #52]	@ 0x34
 8008252:	e034      	b.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8008254:	4b22      	ldr	r3, [pc, #136]	@ (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0302 	and.w	r3, r3, #2
 800825c:	2b02      	cmp	r3, #2
 800825e:	d10d      	bne.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8008260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008262:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008266:	d109      	bne.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008268:	4b1d      	ldr	r3, [pc, #116]	@ (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	08db      	lsrs	r3, r3, #3
 800826e:	f003 0303 	and.w	r3, r3, #3
 8008272:	4a1c      	ldr	r2, [pc, #112]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008274:	fa22 f303 	lsr.w	r3, r2, r3
 8008278:	637b      	str	r3, [r7, #52]	@ 0x34
 800827a:	e020      	b.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800827c:	4b18      	ldr	r3, [pc, #96]	@ (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008288:	d106      	bne.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800828a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800828c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008290:	d102      	bne.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8008292:	4b15      	ldr	r3, [pc, #84]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008294:	637b      	str	r3, [r7, #52]	@ 0x34
 8008296:	e012      	b.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8008298:	4b11      	ldr	r3, [pc, #68]	@ (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800829a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800829e:	f003 0302 	and.w	r3, r3, #2
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d107      	bne.n	80082b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80082a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80082ac:	d103      	bne.n	80082b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80082ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80082b4:	e003      	b.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80082b6:	2300      	movs	r3, #0
 80082b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082ba:	f001 bb66 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80082be:	f001 bb64 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80082c2:	4b07      	ldr	r3, [pc, #28]	@ (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80082c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80082c8:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 80082cc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80082ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10b      	bne.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80082d4:	f7fc fbfe 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 80082d8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80082da:	f001 bb56 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80082de:	bf00      	nop
 80082e0:	44020c00 	.word	0x44020c00
 80082e4:	03d09000 	.word	0x03d09000
 80082e8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80082ec:	4ba1      	ldr	r3, [pc, #644]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082f8:	d10b      	bne.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80082fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008300:	d107      	bne.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008302:	f107 0314 	add.w	r3, r7, #20
 8008306:	4618      	mov	r0, r3
 8008308:	f7fe fd1c 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008310:	e047      	b.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8008312:	4b98      	ldr	r3, [pc, #608]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800831a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800831e:	d10b      	bne.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8008320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008322:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008326:	d107      	bne.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008328:	f107 0308 	add.w	r3, r7, #8
 800832c:	4618      	mov	r0, r3
 800832e:	f7fe fe75 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	637b      	str	r3, [r7, #52]	@ 0x34
 8008336:	e034      	b.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8008338:	4b8e      	ldr	r3, [pc, #568]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0302 	and.w	r3, r3, #2
 8008340:	2b02      	cmp	r3, #2
 8008342:	d10d      	bne.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8008344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008346:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800834a:	d109      	bne.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800834c:	4b89      	ldr	r3, [pc, #548]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	08db      	lsrs	r3, r3, #3
 8008352:	f003 0303 	and.w	r3, r3, #3
 8008356:	4a88      	ldr	r2, [pc, #544]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008358:	fa22 f303 	lsr.w	r3, r2, r3
 800835c:	637b      	str	r3, [r7, #52]	@ 0x34
 800835e:	e020      	b.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8008360:	4b84      	ldr	r3, [pc, #528]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800836c:	d106      	bne.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800836e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008370:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008374:	d102      	bne.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8008376:	4b81      	ldr	r3, [pc, #516]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008378:	637b      	str	r3, [r7, #52]	@ 0x34
 800837a:	e012      	b.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800837c:	4b7d      	ldr	r3, [pc, #500]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800837e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008382:	f003 0302 	and.w	r3, r3, #2
 8008386:	2b02      	cmp	r3, #2
 8008388:	d107      	bne.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800838a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8008390:	d103      	bne.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8008392:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008396:	637b      	str	r3, [r7, #52]	@ 0x34
 8008398:	e003      	b.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800839a:	2300      	movs	r3, #0
 800839c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800839e:	f001 baf4 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80083a2:	f001 baf2 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80083a6:	4b73      	ldr	r3, [pc, #460]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80083a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80083ac:	f003 0307 	and.w	r3, r3, #7
 80083b0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80083b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d104      	bne.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80083b8:	f7fc fb8c 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 80083bc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80083be:	f001 bae4 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80083c2:	4b6c      	ldr	r3, [pc, #432]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083ce:	d10a      	bne.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80083d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d107      	bne.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083d6:	f107 0314 	add.w	r3, r7, #20
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fe fcb2 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80083e4:	e043      	b.n	800846e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80083e6:	4b63      	ldr	r3, [pc, #396]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083f2:	d10a      	bne.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80083f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d107      	bne.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083fa:	f107 0308 	add.w	r3, r7, #8
 80083fe:	4618      	mov	r0, r3
 8008400:	f7fe fe0c 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	637b      	str	r3, [r7, #52]	@ 0x34
 8008408:	e031      	b.n	800846e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800840a:	4b5a      	ldr	r3, [pc, #360]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 0302 	and.w	r3, r3, #2
 8008412:	2b02      	cmp	r3, #2
 8008414:	d10c      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8008416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008418:	2b03      	cmp	r3, #3
 800841a:	d109      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800841c:	4b55      	ldr	r3, [pc, #340]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	08db      	lsrs	r3, r3, #3
 8008422:	f003 0303 	and.w	r3, r3, #3
 8008426:	4a54      	ldr	r2, [pc, #336]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008428:	fa22 f303 	lsr.w	r3, r2, r3
 800842c:	637b      	str	r3, [r7, #52]	@ 0x34
 800842e:	e01e      	b.n	800846e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8008430:	4b50      	ldr	r3, [pc, #320]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800843c:	d105      	bne.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800843e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008440:	2b04      	cmp	r3, #4
 8008442:	d102      	bne.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8008444:	4b4d      	ldr	r3, [pc, #308]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008446:	637b      	str	r3, [r7, #52]	@ 0x34
 8008448:	e011      	b.n	800846e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800844a:	4b4a      	ldr	r3, [pc, #296]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800844c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008450:	f003 0302 	and.w	r3, r3, #2
 8008454:	2b02      	cmp	r3, #2
 8008456:	d106      	bne.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8008458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845a:	2b05      	cmp	r3, #5
 800845c:	d103      	bne.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800845e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008462:	637b      	str	r3, [r7, #52]	@ 0x34
 8008464:	e003      	b.n	800846e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800846a:	f001 ba8e 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800846e:	f001 ba8c 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8008472:	4b40      	ldr	r3, [pc, #256]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008474:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008478:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800847c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800847e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008480:	2b00      	cmp	r3, #0
 8008482:	d104      	bne.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008484:	f7fc fb26 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 8008488:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800848a:	f001 ba7e 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800848e:	4b39      	ldr	r3, [pc, #228]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008496:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800849a:	d10a      	bne.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800849c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849e:	2b10      	cmp	r3, #16
 80084a0:	d107      	bne.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084a2:	f107 0314 	add.w	r3, r7, #20
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fe fc4c 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80084b0:	e043      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80084b2:	4b30      	ldr	r3, [pc, #192]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084be:	d10a      	bne.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80084c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c2:	2b20      	cmp	r3, #32
 80084c4:	d107      	bne.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084c6:	f107 0308 	add.w	r3, r7, #8
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fe fda6 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80084d4:	e031      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80084d6:	4b27      	ldr	r3, [pc, #156]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 0302 	and.w	r3, r3, #2
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d10c      	bne.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80084e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e4:	2b30      	cmp	r3, #48	@ 0x30
 80084e6:	d109      	bne.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084e8:	4b22      	ldr	r3, [pc, #136]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	08db      	lsrs	r3, r3, #3
 80084ee:	f003 0303 	and.w	r3, r3, #3
 80084f2:	4a21      	ldr	r2, [pc, #132]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80084f4:	fa22 f303 	lsr.w	r3, r2, r3
 80084f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80084fa:	e01e      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80084fc:	4b1d      	ldr	r3, [pc, #116]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008508:	d105      	bne.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800850a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850c:	2b40      	cmp	r3, #64	@ 0x40
 800850e:	d102      	bne.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8008510:	4b1a      	ldr	r3, [pc, #104]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008512:	637b      	str	r3, [r7, #52]	@ 0x34
 8008514:	e011      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8008516:	4b17      	ldr	r3, [pc, #92]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008518:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	2b02      	cmp	r3, #2
 8008522:	d106      	bne.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8008524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008526:	2b50      	cmp	r3, #80	@ 0x50
 8008528:	d103      	bne.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800852a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800852e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008530:	e003      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8008532:	2300      	movs	r3, #0
 8008534:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008536:	f001 ba28 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800853a:	f001 ba26 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800853e:	4b0d      	ldr	r3, [pc, #52]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008544:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008548:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800854a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854c:	2b00      	cmp	r3, #0
 800854e:	d104      	bne.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008550:	f7fc faec 	bl	8004b2c <HAL_RCC_GetPCLK3Freq>
 8008554:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008556:	f001 ba18 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800855a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008560:	d10e      	bne.n	8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008562:	f107 0314 	add.w	r3, r7, #20
 8008566:	4618      	mov	r0, r3
 8008568:	f7fe fbec 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008570:	f001 ba0b 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008574:	44020c00 	.word	0x44020c00
 8008578:	03d09000 	.word	0x03d09000
 800857c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8008580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008582:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008586:	d108      	bne.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008588:	f107 0308 	add.w	r3, r7, #8
 800858c:	4618      	mov	r0, r3
 800858e:	f7fe fd45 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008596:	f001 b9f8 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800859a:	4ba4      	ldr	r3, [pc, #656]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0302 	and.w	r3, r3, #2
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d10d      	bne.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 80085a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80085ac:	d109      	bne.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80085ae:	4b9f      	ldr	r3, [pc, #636]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	08db      	lsrs	r3, r3, #3
 80085b4:	f003 0303 	and.w	r3, r3, #3
 80085b8:	4a9d      	ldr	r2, [pc, #628]	@ (8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80085ba:	fa22 f303 	lsr.w	r3, r2, r3
 80085be:	637b      	str	r3, [r7, #52]	@ 0x34
 80085c0:	e020      	b.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80085c2:	4b9a      	ldr	r3, [pc, #616]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085ce:	d106      	bne.n	80085de <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 80085d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80085d6:	d102      	bne.n	80085de <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 80085d8:	4b96      	ldr	r3, [pc, #600]	@ (8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80085da:	637b      	str	r3, [r7, #52]	@ 0x34
 80085dc:	e012      	b.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80085de:	4b93      	ldr	r3, [pc, #588]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80085e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085e4:	f003 0302 	and.w	r3, r3, #2
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d107      	bne.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 80085ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ee:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80085f2:	d103      	bne.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 80085f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80085fa:	e003      	b.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008600:	f001 b9c3 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008604:	f001 b9c1 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008608:	4b88      	ldr	r3, [pc, #544]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800860a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800860e:	f003 0307 	and.w	r3, r3, #7
 8008612:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008616:	2b00      	cmp	r3, #0
 8008618:	d104      	bne.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800861a:	f7fc fa3f 	bl	8004a9c <HAL_RCC_GetHCLKFreq>
 800861e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8008620:	f001 b9b3 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008626:	2b01      	cmp	r3, #1
 8008628:	d104      	bne.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800862a:	f7fc f90b 	bl	8004844 <HAL_RCC_GetSysClockFreq>
 800862e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008630:	f001 b9ab 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8008634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008636:	2b02      	cmp	r3, #2
 8008638:	d108      	bne.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800863a:	f107 0314 	add.w	r3, r7, #20
 800863e:	4618      	mov	r0, r3
 8008640:	f7fe fb80 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008648:	f001 b99f 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800864c:	4b77      	ldr	r3, [pc, #476]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008654:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008658:	d105      	bne.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800865a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865c:	2b03      	cmp	r3, #3
 800865e:	d102      	bne.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8008660:	4b75      	ldr	r3, [pc, #468]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8008662:	637b      	str	r3, [r7, #52]	@ 0x34
 8008664:	e023      	b.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008666:	4b71      	ldr	r3, [pc, #452]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	2b02      	cmp	r3, #2
 8008670:	d10c      	bne.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8008672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008674:	2b04      	cmp	r3, #4
 8008676:	d109      	bne.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008678:	4b6c      	ldr	r3, [pc, #432]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	08db      	lsrs	r3, r3, #3
 800867e:	f003 0303 	and.w	r3, r3, #3
 8008682:	4a6b      	ldr	r2, [pc, #428]	@ (8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008684:	fa22 f303 	lsr.w	r3, r2, r3
 8008688:	637b      	str	r3, [r7, #52]	@ 0x34
 800868a:	e010      	b.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800868c:	4b67      	ldr	r3, [pc, #412]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008694:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008698:	d105      	bne.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800869a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869c:	2b05      	cmp	r3, #5
 800869e:	d102      	bne.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 80086a0:	4b64      	ldr	r3, [pc, #400]	@ (8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80086a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80086a4:	e003      	b.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086aa:	f001 b96e 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80086ae:	f001 b96c 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80086b2:	4b5e      	ldr	r3, [pc, #376]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80086b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80086b8:	f003 0308 	and.w	r3, r3, #8
 80086bc:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80086be:	4b5b      	ldr	r3, [pc, #364]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80086c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086c4:	f003 0302 	and.w	r3, r3, #2
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d106      	bne.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 80086cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d103      	bne.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 80086d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80086d8:	e012      	b.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80086da:	4b54      	ldr	r3, [pc, #336]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80086dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086e8:	d106      	bne.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 80086ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	d103      	bne.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 80086f0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80086f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80086f6:	e003      	b.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80086f8:	2300      	movs	r3, #0
 80086fa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80086fc:	f001 b945 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008700:	f001 b943 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008704:	4b49      	ldr	r3, [pc, #292]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008706:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800870a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800870e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008712:	2b00      	cmp	r3, #0
 8008714:	d104      	bne.n	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008716:	f7fc f9dd 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 800871a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800871c:	f001 b935 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8008720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008722:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008726:	d108      	bne.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008728:	f107 0308 	add.w	r3, r7, #8
 800872c:	4618      	mov	r0, r3
 800872e:	f7fe fc75 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008736:	f001 b928 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800873a:	4b3c      	ldr	r3, [pc, #240]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 0302 	and.w	r3, r3, #2
 8008742:	2b02      	cmp	r3, #2
 8008744:	d10d      	bne.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8008746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008748:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800874c:	d109      	bne.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800874e:	4b37      	ldr	r3, [pc, #220]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	08db      	lsrs	r3, r3, #3
 8008754:	f003 0303 	and.w	r3, r3, #3
 8008758:	4a35      	ldr	r2, [pc, #212]	@ (8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800875a:	fa22 f303 	lsr.w	r3, r2, r3
 800875e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008760:	e011      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8008762:	4b32      	ldr	r3, [pc, #200]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800876a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800876e:	d106      	bne.n	800877e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8008770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008772:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008776:	d102      	bne.n	800877e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8008778:	4b2e      	ldr	r3, [pc, #184]	@ (8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800877a:	637b      	str	r3, [r7, #52]	@ 0x34
 800877c:	e003      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800877e:	2300      	movs	r3, #0
 8008780:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008782:	f001 b902 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008786:	f001 b900 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800878a:	4b28      	ldr	r3, [pc, #160]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800878c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008790:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008794:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008798:	2b00      	cmp	r3, #0
 800879a:	d104      	bne.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800879c:	f7fc f99a 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 80087a0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80087a2:	f001 b8f2 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80087a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80087ac:	d108      	bne.n	80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087ae:	f107 0308 	add.w	r3, r7, #8
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fe fc32 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087bc:	f001 b8e5 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80087c0:	4b1a      	ldr	r3, [pc, #104]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 0302 	and.w	r3, r3, #2
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d10d      	bne.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 80087cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80087d2:	d109      	bne.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087d4:	4b15      	ldr	r3, [pc, #84]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	08db      	lsrs	r3, r3, #3
 80087da:	f003 0303 	and.w	r3, r3, #3
 80087de:	4a14      	ldr	r2, [pc, #80]	@ (8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80087e0:	fa22 f303 	lsr.w	r3, r2, r3
 80087e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80087e6:	e011      	b.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80087e8:	4b10      	ldr	r3, [pc, #64]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087f4:	d106      	bne.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 80087f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80087fc:	d102      	bne.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 80087fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008800:	637b      	str	r3, [r7, #52]	@ 0x34
 8008802:	e003      	b.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8008804:	2300      	movs	r3, #0
 8008806:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008808:	f001 b8bf 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800880c:	f001 b8bd 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008810:	4b06      	ldr	r3, [pc, #24]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008812:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008816:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800881a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800881c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10c      	bne.n	800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008822:	f7fc f983 	bl	8004b2c <HAL_RCC_GetPCLK3Freq>
 8008826:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008828:	f001 b8af 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800882c:	44020c00 	.word	0x44020c00
 8008830:	03d09000 	.word	0x03d09000
 8008834:	003d0900 	.word	0x003d0900
 8008838:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800883c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008842:	d108      	bne.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008844:	f107 0308 	add.w	r3, r7, #8
 8008848:	4618      	mov	r0, r3
 800884a:	f7fe fbe7 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008852:	f001 b89a 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8008856:	4b9f      	ldr	r3, [pc, #636]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b02      	cmp	r3, #2
 8008860:	d10d      	bne.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8008862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008864:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008868:	d109      	bne.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800886a:	4b9a      	ldr	r3, [pc, #616]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	08db      	lsrs	r3, r3, #3
 8008870:	f003 0303 	and.w	r3, r3, #3
 8008874:	4a98      	ldr	r2, [pc, #608]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008876:	fa22 f303 	lsr.w	r3, r2, r3
 800887a:	637b      	str	r3, [r7, #52]	@ 0x34
 800887c:	e011      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800887e:	4b95      	ldr	r3, [pc, #596]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008886:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800888a:	d106      	bne.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800888c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008892:	d102      	bne.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8008894:	4b91      	ldr	r3, [pc, #580]	@ (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008896:	637b      	str	r3, [r7, #52]	@ 0x34
 8008898:	e003      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800889a:	2300      	movs	r3, #0
 800889c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800889e:	f001 b874 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80088a2:	f001 b872 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80088a6:	4b8b      	ldr	r3, [pc, #556]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80088a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80088ac:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80088b0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 80088b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d104      	bne.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80088b8:	f7fc f938 	bl	8004b2c <HAL_RCC_GetPCLK3Freq>
 80088bc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80088be:	f001 b864 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80088c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088c8:	d108      	bne.n	80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088ca:	f107 0308 	add.w	r3, r7, #8
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fe fba4 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088d8:	f001 b857 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80088dc:	4b7d      	ldr	r3, [pc, #500]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0302 	and.w	r3, r3, #2
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d10d      	bne.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 80088e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80088ee:	d109      	bne.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088f0:	4b78      	ldr	r3, [pc, #480]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	08db      	lsrs	r3, r3, #3
 80088f6:	f003 0303 	and.w	r3, r3, #3
 80088fa:	4a77      	ldr	r2, [pc, #476]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80088fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008900:	637b      	str	r3, [r7, #52]	@ 0x34
 8008902:	e011      	b.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8008904:	4b73      	ldr	r3, [pc, #460]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800890c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008910:	d106      	bne.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8008912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008914:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008918:	d102      	bne.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800891a:	4b70      	ldr	r3, [pc, #448]	@ (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800891c:	637b      	str	r3, [r7, #52]	@ 0x34
 800891e:	e003      	b.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8008920:	2300      	movs	r3, #0
 8008922:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008924:	f001 b831 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008928:	f001 b82f 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800892c:	4b69      	ldr	r3, [pc, #420]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800892e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008932:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008936:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8008938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893a:	2b00      	cmp	r3, #0
 800893c:	d104      	bne.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800893e:	f7fc f8c9 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 8008942:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008944:	f001 b821 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8008948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800894e:	d108      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008950:	f107 0308 	add.w	r3, r7, #8
 8008954:	4618      	mov	r0, r3
 8008956:	f7fe fb61 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800895e:	f001 b814 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8008962:	4b5c      	ldr	r3, [pc, #368]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 0302 	and.w	r3, r3, #2
 800896a:	2b02      	cmp	r3, #2
 800896c:	d10e      	bne.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800896e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008970:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008974:	d10a      	bne.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008976:	4b57      	ldr	r3, [pc, #348]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	08db      	lsrs	r3, r3, #3
 800897c:	f003 0303 	and.w	r3, r3, #3
 8008980:	4a55      	ldr	r2, [pc, #340]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008982:	fa22 f303 	lsr.w	r3, r2, r3
 8008986:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008988:	f000 bfff 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008990:	f000 bffb 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008994:	4b4f      	ldr	r3, [pc, #316]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008996:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800899a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800899e:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80089a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80089a6:	d056      	beq.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 80089a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089aa:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80089ae:	f200 808b 	bhi.w	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80089b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089b8:	d03e      	beq.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 80089ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089c0:	f200 8082 	bhi.w	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80089c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089ca:	d027      	beq.n	8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 80089cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089d2:	d879      	bhi.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80089d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089da:	d017      	beq.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 80089dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089e2:	d871      	bhi.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80089e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d004      	beq.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 80089ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089f0:	d004      	beq.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 80089f2:	e069      	b.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80089f4:	f7fc f89a 	bl	8004b2c <HAL_RCC_GetPCLK3Freq>
 80089f8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80089fa:	e068      	b.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089fc:	f107 0314 	add.w	r3, r7, #20
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7fe f99f 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a0a:	e060      	b.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a0c:	f107 0308 	add.w	r3, r7, #8
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7fe fb03 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a1a:	e058      	b.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a22:	f003 0302 	and.w	r3, r3, #2
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	d103      	bne.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8008a2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a2e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008a30:	e04d      	b.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008a32:	2300      	movs	r3, #0
 8008a34:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a36:	e04a      	b.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008a38:	4b26      	ldr	r3, [pc, #152]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a46:	d103      	bne.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8008a48:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008a4c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008a4e:	e03e      	b.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a54:	e03b      	b.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a56:	4b1f      	ldr	r3, [pc, #124]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a5c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008a60:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a62:	4b1c      	ldr	r3, [pc, #112]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 0302 	and.w	r3, r3, #2
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d10c      	bne.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8008a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d109      	bne.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a74:	4b17      	ldr	r3, [pc, #92]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	08db      	lsrs	r3, r3, #3
 8008a7a:	f003 0303 	and.w	r3, r3, #3
 8008a7e:	4a16      	ldr	r2, [pc, #88]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008a80:	fa22 f303 	lsr.w	r3, r2, r3
 8008a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a86:	e01e      	b.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a88:	4b12      	ldr	r3, [pc, #72]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a94:	d106      	bne.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8008a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a9c:	d102      	bne.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aa2:	e010      	b.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008aac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ab0:	d106      	bne.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8008ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ab8:	d102      	bne.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008aba:	4b09      	ldr	r3, [pc, #36]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8008abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008abe:	e002      	b.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008ac4:	e003      	b.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8008ac6:	e002      	b.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008acc:	bf00      	nop
          }
        }
        break;
 8008ace:	f000 bf5c 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ad2:	bf00      	nop
 8008ad4:	44020c00 	.word	0x44020c00
 8008ad8:	03d09000 	.word	0x03d09000
 8008adc:	003d0900 	.word	0x003d0900
 8008ae0:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008ae4:	4b9e      	ldr	r3, [pc, #632]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008ae6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008aea:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008aee:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8008af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008af6:	d056      	beq.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8008af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008afe:	f200 808b 	bhi.w	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b08:	d03e      	beq.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b10:	f200 8082 	bhi.w	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b1a:	d027      	beq.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b22:	d879      	bhi.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b2a:	d017      	beq.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8008b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b32:	d871      	bhi.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d004      	beq.n	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b40:	d004      	beq.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8008b42:	e069      	b.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8008b44:	f7fb ffc6 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 8008b48:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008b4a:	e068      	b.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b4c:	f107 0314 	add.w	r3, r7, #20
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fe f8f7 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b5a:	e060      	b.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b5c:	f107 0308 	add.w	r3, r7, #8
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7fe fa5b 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b6a:	e058      	b.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008b6c:	4b7c      	ldr	r3, [pc, #496]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008b6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d103      	bne.n	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8008b7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b7e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008b80:	e04d      	b.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008b82:	2300      	movs	r3, #0
 8008b84:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b86:	e04a      	b.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008b88:	4b75      	ldr	r3, [pc, #468]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008b8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b96:	d103      	bne.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8008b98:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008b9c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008b9e:	e03e      	b.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ba4:	e03b      	b.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ba6:	4b6e      	ldr	r3, [pc, #440]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008ba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008bac:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bb2:	4b6b      	ldr	r3, [pc, #428]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 0302 	and.w	r3, r3, #2
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d10c      	bne.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8008bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d109      	bne.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008bc4:	4b66      	ldr	r3, [pc, #408]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	08db      	lsrs	r3, r3, #3
 8008bca:	f003 0303 	and.w	r3, r3, #3
 8008bce:	4a65      	ldr	r2, [pc, #404]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bd6:	e01e      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bd8:	4b61      	ldr	r3, [pc, #388]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008be0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008be4:	d106      	bne.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8008be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bec:	d102      	bne.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008bee:	4b5e      	ldr	r3, [pc, #376]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008bf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bf2:	e010      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bf4:	4b5a      	ldr	r3, [pc, #360]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c00:	d106      	bne.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8008c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c08:	d102      	bne.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008c0a:	4b58      	ldr	r3, [pc, #352]	@ (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c0e:	e002      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008c10:	2300      	movs	r3, #0
 8008c12:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008c14:	e003      	b.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8008c16:	e002      	b.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c1c:	bf00      	nop
          }
        }
        break;
 8008c1e:	f000 beb4 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8008c22:	4b4f      	ldr	r3, [pc, #316]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008c24:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008c28:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008c2c:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8008c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c34:	d056      	beq.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8008c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c3c:	f200 808b 	bhi.w	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c46:	d03e      	beq.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8008c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c4e:	f200 8082 	bhi.w	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c58:	d027      	beq.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c60:	d879      	bhi.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c68:	d017      	beq.n	8008c9a <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c70:	d871      	bhi.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d004      	beq.n	8008c82 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8008c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c7e:	d004      	beq.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8008c80:	e069      	b.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008c82:	f7fb ff53 	bl	8004b2c <HAL_RCC_GetPCLK3Freq>
 8008c86:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008c88:	e068      	b.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c8a:	f107 0314 	add.w	r3, r7, #20
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7fe f858 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c98:	e060      	b.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c9a:	f107 0308 	add.w	r3, r7, #8
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fe f9bc 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ca8:	e058      	b.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008caa:	4b2d      	ldr	r3, [pc, #180]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008cac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cb0:	f003 0302 	and.w	r3, r3, #2
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d103      	bne.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8008cb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cbc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008cbe:	e04d      	b.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008cc4:	e04a      	b.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008cc6:	4b26      	ldr	r3, [pc, #152]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008cc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ccc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cd4:	d103      	bne.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8008cd6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008cda:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008cdc:	e03e      	b.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ce2:	e03b      	b.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008ce6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008cea:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008cee:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 0302 	and.w	r3, r3, #2
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d10c      	bne.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8008cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d109      	bne.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d02:	4b17      	ldr	r3, [pc, #92]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	08db      	lsrs	r3, r3, #3
 8008d08:	f003 0303 	and.w	r3, r3, #3
 8008d0c:	4a15      	ldr	r2, [pc, #84]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d12:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d14:	e01e      	b.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d16:	4b12      	ldr	r3, [pc, #72]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d22:	d106      	bne.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8008d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d2a:	d102      	bne.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008d2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d30:	e010      	b.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d32:	4b0b      	ldr	r3, [pc, #44]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d3e:	d106      	bne.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8008d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d46:	d102      	bne.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008d48:	4b08      	ldr	r3, [pc, #32]	@ (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008d4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d4c:	e002      	b.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008d52:	e003      	b.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8008d54:	e002      	b.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8008d56:	2300      	movs	r3, #0
 8008d58:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d5a:	bf00      	nop
          }
        }
        break;
 8008d5c:	f000 be15 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d60:	44020c00 	.word	0x44020c00
 8008d64:	03d09000 	.word	0x03d09000
 8008d68:	003d0900 	.word	0x003d0900
 8008d6c:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8008d70:	4b9e      	ldr	r3, [pc, #632]	@ (8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008d72:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008d76:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8008d7a:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8008d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008d82:	d056      	beq.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8008d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d86:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008d8a:	f200 808b 	bhi.w	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d94:	d03e      	beq.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8008d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d9c:	f200 8082 	bhi.w	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008da6:	d027      	beq.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8008da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008daa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008dae:	d879      	bhi.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008db6:	d017      	beq.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8008db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008dbe:	d871      	bhi.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d004      	beq.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8008dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dcc:	d004      	beq.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8008dce:	e069      	b.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008dd0:	f7fb feac 	bl	8004b2c <HAL_RCC_GetPCLK3Freq>
 8008dd4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008dd6:	e068      	b.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dd8:	f107 0314 	add.w	r3, r7, #20
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7fd ffb1 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008de6:	e060      	b.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008de8:	f107 0308 	add.w	r3, r7, #8
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fe f915 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008df6:	e058      	b.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008df8:	4b7c      	ldr	r3, [pc, #496]	@ (8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008dfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008dfe:	f003 0302 	and.w	r3, r3, #2
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d103      	bne.n	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8008e06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e0a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008e0c:	e04d      	b.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e12:	e04a      	b.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008e14:	4b75      	ldr	r3, [pc, #468]	@ (8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e22:	d103      	bne.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8008e24:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008e28:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008e2a:	e03e      	b.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e30:	e03b      	b.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e32:	4b6e      	ldr	r3, [pc, #440]	@ (8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e38:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e3e:	4b6b      	ldr	r3, [pc, #428]	@ (8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f003 0302 	and.w	r3, r3, #2
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d10c      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8008e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d109      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e50:	4b66      	ldr	r3, [pc, #408]	@ (8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	08db      	lsrs	r3, r3, #3
 8008e56:	f003 0303 	and.w	r3, r3, #3
 8008e5a:	4a65      	ldr	r2, [pc, #404]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e60:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e62:	e01e      	b.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e64:	4b61      	ldr	r3, [pc, #388]	@ (8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e70:	d106      	bne.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8008e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e78:	d102      	bne.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008e7a:	4b5e      	ldr	r3, [pc, #376]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008e7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e7e:	e010      	b.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e80:	4b5a      	ldr	r3, [pc, #360]	@ (8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e8c:	d106      	bne.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8008e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e94:	d102      	bne.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008e96:	4b58      	ldr	r3, [pc, #352]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8008e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e9a:	e002      	b.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008ea0:	e003      	b.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8008ea2:	e002      	b.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ea8:	bf00      	nop
          }
        }
        break;
 8008eaa:	f000 bd6e 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8008eae:	4b4f      	ldr	r3, [pc, #316]	@ (8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008eb0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008eb4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008eb8:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8008eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ebc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008ec0:	d056      	beq.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008ec8:	f200 808b 	bhi.w	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ece:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ed2:	d03e      	beq.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008eda:	f200 8082 	bhi.w	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008ee4:	d027      	beq.n	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8008ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008eec:	d879      	bhi.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ef4:	d017      	beq.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008efc:	d871      	bhi.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d004      	beq.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8008f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f0a:	d004      	beq.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8008f0c:	e069      	b.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008f0e:	f7fb fe0d 	bl	8004b2c <HAL_RCC_GetPCLK3Freq>
 8008f12:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008f14:	e068      	b.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f16:	f107 0314 	add.w	r3, r7, #20
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fd ff12 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f24:	e060      	b.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f26:	f107 0308 	add.w	r3, r7, #8
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fe f876 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f34:	e058      	b.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008f36:	4b2d      	ldr	r3, [pc, #180]	@ (8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f3c:	f003 0302 	and.w	r3, r3, #2
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d103      	bne.n	8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8008f44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f48:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008f4a:	e04d      	b.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f50:	e04a      	b.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008f52:	4b26      	ldr	r3, [pc, #152]	@ (8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f60:	d103      	bne.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8008f62:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008f66:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008f68:	e03e      	b.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f6e:	e03b      	b.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f70:	4b1e      	ldr	r3, [pc, #120]	@ (8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f76:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0302 	and.w	r3, r3, #2
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d10c      	bne.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8008f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d109      	bne.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f8e:	4b17      	ldr	r3, [pc, #92]	@ (8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	08db      	lsrs	r3, r3, #3
 8008f94:	f003 0303 	and.w	r3, r3, #3
 8008f98:	4a15      	ldr	r2, [pc, #84]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fa0:	e01e      	b.n	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fa2:	4b12      	ldr	r3, [pc, #72]	@ (8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008faa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fae:	d106      	bne.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8008fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fb6:	d102      	bne.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008fba:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fbc:	e010      	b.n	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fca:	d106      	bne.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8008fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fd2:	d102      	bne.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008fd4:	4b08      	ldr	r3, [pc, #32]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8008fd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fd8:	e002      	b.n	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008fde:	e003      	b.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8008fe0:	e002      	b.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008fe6:	bf00      	nop
          }
        }
        break;
 8008fe8:	f000 bccf 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008fec:	44020c00 	.word	0x44020c00
 8008ff0:	03d09000 	.word	0x03d09000
 8008ff4:	003d0900 	.word	0x003d0900
 8008ff8:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8008ffc:	4b9e      	ldr	r3, [pc, #632]	@ (8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008ffe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009002:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009006:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8009008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800900e:	d056      	beq.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8009010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009012:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009016:	f200 808b 	bhi.w	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800901a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009020:	d03e      	beq.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8009022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009028:	f200 8082 	bhi.w	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800902c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009032:	d027      	beq.n	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8009034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009036:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800903a:	d879      	bhi.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800903c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800903e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009042:	d017      	beq.n	8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8009044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009046:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800904a:	d871      	bhi.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800904c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904e:	2b00      	cmp	r3, #0
 8009050:	d004      	beq.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8009052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009054:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009058:	d004      	beq.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800905a:	e069      	b.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800905c:	f7fb fd66 	bl	8004b2c <HAL_RCC_GetPCLK3Freq>
 8009060:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009062:	e068      	b.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009064:	f107 0314 	add.w	r3, r7, #20
 8009068:	4618      	mov	r0, r3
 800906a:	f7fd fe6b 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009072:	e060      	b.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009074:	f107 0308 	add.w	r3, r7, #8
 8009078:	4618      	mov	r0, r3
 800907a:	f7fd ffcf 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009082:	e058      	b.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009084:	4b7c      	ldr	r3, [pc, #496]	@ (8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009086:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800908a:	f003 0302 	and.w	r3, r3, #2
 800908e:	2b02      	cmp	r3, #2
 8009090:	d103      	bne.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8009092:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009096:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009098:	e04d      	b.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800909a:	2300      	movs	r3, #0
 800909c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800909e:	e04a      	b.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80090a0:	4b75      	ldr	r3, [pc, #468]	@ (8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80090a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090ae:	d103      	bne.n	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80090b0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80090b4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80090b6:	e03e      	b.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80090b8:	2300      	movs	r3, #0
 80090ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090bc:	e03b      	b.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090be:	4b6e      	ldr	r3, [pc, #440]	@ (8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80090c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090c4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80090c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090ca:	4b6b      	ldr	r3, [pc, #428]	@ (8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 0302 	and.w	r3, r3, #2
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d10c      	bne.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80090d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d109      	bne.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090dc:	4b66      	ldr	r3, [pc, #408]	@ (8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	08db      	lsrs	r3, r3, #3
 80090e2:	f003 0303 	and.w	r3, r3, #3
 80090e6:	4a65      	ldr	r2, [pc, #404]	@ (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80090e8:	fa22 f303 	lsr.w	r3, r2, r3
 80090ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80090ee:	e01e      	b.n	800912e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090f0:	4b61      	ldr	r3, [pc, #388]	@ (8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090fc:	d106      	bne.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 80090fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009104:	d102      	bne.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009106:	4b5e      	ldr	r3, [pc, #376]	@ (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009108:	637b      	str	r3, [r7, #52]	@ 0x34
 800910a:	e010      	b.n	800912e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800910c:	4b5a      	ldr	r3, [pc, #360]	@ (8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009114:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009118:	d106      	bne.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800911a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800911c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009120:	d102      	bne.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009122:	4b58      	ldr	r3, [pc, #352]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009124:	637b      	str	r3, [r7, #52]	@ 0x34
 8009126:	e002      	b.n	800912e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009128:	2300      	movs	r3, #0
 800912a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800912c:	e003      	b.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800912e:	e002      	b.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8009130:	2300      	movs	r3, #0
 8009132:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009134:	bf00      	nop
          }
        }
        break;
 8009136:	f000 bc28 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800913a:	4b4f      	ldr	r3, [pc, #316]	@ (8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800913c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009140:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009144:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8009146:	4b4c      	ldr	r3, [pc, #304]	@ (8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800914e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009152:	d106      	bne.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8009154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009156:	2b00      	cmp	r3, #0
 8009158:	d103      	bne.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800915a:	4b4a      	ldr	r3, [pc, #296]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800915c:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800915e:	f000 bc14 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8009162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009168:	d108      	bne.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800916a:	f107 0320 	add.w	r3, r7, #32
 800916e:	4618      	mov	r0, r3
 8009170:	f7fd fc7c 	bl	8006a6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009176:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009178:	f000 bc07 	b.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800917c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009182:	d107      	bne.n	8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009184:	f107 0314 	add.w	r3, r7, #20
 8009188:	4618      	mov	r0, r3
 800918a:	f7fd fddb 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009192:	e3fa      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009194:	2300      	movs	r3, #0
 8009196:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009198:	e3f7      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800919a:	4b37      	ldr	r3, [pc, #220]	@ (8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800919c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091a0:	f003 0307 	and.w	r3, r3, #7
 80091a4:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 80091a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a8:	2b04      	cmp	r3, #4
 80091aa:	d861      	bhi.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 80091ac:	a201      	add	r2, pc, #4	@ (adr r2, 80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 80091ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b2:	bf00      	nop
 80091b4:	080091c9 	.word	0x080091c9
 80091b8:	080091d9 	.word	0x080091d9
 80091bc:	080091e9 	.word	0x080091e9
 80091c0:	080091f9 	.word	0x080091f9
 80091c4:	080091ff 	.word	0x080091ff
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091c8:	f107 0320 	add.w	r3, r7, #32
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7fd fc4d 	bl	8006a6c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80091d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091d6:	e04e      	b.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091d8:	f107 0314 	add.w	r3, r7, #20
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fd fdb1 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091e6:	e046      	b.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091e8:	f107 0308 	add.w	r3, r7, #8
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7fd ff15 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091f6:	e03e      	b.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80091f8:	4b23      	ldr	r3, [pc, #140]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 80091fa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091fc:	e03b      	b.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091fe:	4b1e      	ldr	r3, [pc, #120]	@ (8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009200:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009204:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009208:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800920a:	4b1b      	ldr	r3, [pc, #108]	@ (8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 0302 	and.w	r3, r3, #2
 8009212:	2b02      	cmp	r3, #2
 8009214:	d10c      	bne.n	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8009216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009218:	2b00      	cmp	r3, #0
 800921a:	d109      	bne.n	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800921c:	4b16      	ldr	r3, [pc, #88]	@ (8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	08db      	lsrs	r3, r3, #3
 8009222:	f003 0303 	and.w	r3, r3, #3
 8009226:	4a15      	ldr	r2, [pc, #84]	@ (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009228:	fa22 f303 	lsr.w	r3, r2, r3
 800922c:	637b      	str	r3, [r7, #52]	@ 0x34
 800922e:	e01e      	b.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009230:	4b11      	ldr	r3, [pc, #68]	@ (8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800923c:	d106      	bne.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800923e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009244:	d102      	bne.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009246:	4b0e      	ldr	r3, [pc, #56]	@ (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009248:	637b      	str	r3, [r7, #52]	@ 0x34
 800924a:	e010      	b.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800924c:	4b0a      	ldr	r3, [pc, #40]	@ (8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009254:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009258:	d106      	bne.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800925a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800925c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009260:	d102      	bne.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009262:	4b08      	ldr	r3, [pc, #32]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009264:	637b      	str	r3, [r7, #52]	@ 0x34
 8009266:	e002      	b.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009268:	2300      	movs	r3, #0
 800926a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800926c:	e003      	b.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800926e:	e002      	b.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8009270:	2300      	movs	r3, #0
 8009272:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009274:	bf00      	nop
          }
        }
        break;
 8009276:	e388      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009278:	44020c00 	.word	0x44020c00
 800927c:	03d09000 	.word	0x03d09000
 8009280:	003d0900 	.word	0x003d0900
 8009284:	017d7840 	.word	0x017d7840
 8009288:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800928c:	4ba9      	ldr	r3, [pc, #676]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800928e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009292:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009296:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8009298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929a:	2b20      	cmp	r3, #32
 800929c:	f200 809a 	bhi.w	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 80092a0:	a201      	add	r2, pc, #4	@ (adr r2, 80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 80092a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a6:	bf00      	nop
 80092a8:	0800932d 	.word	0x0800932d
 80092ac:	080093d5 	.word	0x080093d5
 80092b0:	080093d5 	.word	0x080093d5
 80092b4:	080093d5 	.word	0x080093d5
 80092b8:	080093d5 	.word	0x080093d5
 80092bc:	080093d5 	.word	0x080093d5
 80092c0:	080093d5 	.word	0x080093d5
 80092c4:	080093d5 	.word	0x080093d5
 80092c8:	0800933d 	.word	0x0800933d
 80092cc:	080093d5 	.word	0x080093d5
 80092d0:	080093d5 	.word	0x080093d5
 80092d4:	080093d5 	.word	0x080093d5
 80092d8:	080093d5 	.word	0x080093d5
 80092dc:	080093d5 	.word	0x080093d5
 80092e0:	080093d5 	.word	0x080093d5
 80092e4:	080093d5 	.word	0x080093d5
 80092e8:	0800934d 	.word	0x0800934d
 80092ec:	080093d5 	.word	0x080093d5
 80092f0:	080093d5 	.word	0x080093d5
 80092f4:	080093d5 	.word	0x080093d5
 80092f8:	080093d5 	.word	0x080093d5
 80092fc:	080093d5 	.word	0x080093d5
 8009300:	080093d5 	.word	0x080093d5
 8009304:	080093d5 	.word	0x080093d5
 8009308:	0800935d 	.word	0x0800935d
 800930c:	080093d5 	.word	0x080093d5
 8009310:	080093d5 	.word	0x080093d5
 8009314:	080093d5 	.word	0x080093d5
 8009318:	080093d5 	.word	0x080093d5
 800931c:	080093d5 	.word	0x080093d5
 8009320:	080093d5 	.word	0x080093d5
 8009324:	080093d5 	.word	0x080093d5
 8009328:	08009363 	.word	0x08009363
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800932c:	f107 0320 	add.w	r3, r7, #32
 8009330:	4618      	mov	r0, r3
 8009332:	f7fd fb9b 	bl	8006a6c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009338:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800933a:	e04e      	b.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800933c:	f107 0314 	add.w	r3, r7, #20
 8009340:	4618      	mov	r0, r3
 8009342:	f7fd fcff 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800934a:	e046      	b.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800934c:	f107 0308 	add.w	r3, r7, #8
 8009350:	4618      	mov	r0, r3
 8009352:	f7fd fe63 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800935a:	e03e      	b.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800935c:	4b76      	ldr	r3, [pc, #472]	@ (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800935e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009360:	e03b      	b.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009362:	4b74      	ldr	r3, [pc, #464]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009364:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009368:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800936c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800936e:	4b71      	ldr	r3, [pc, #452]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 0302 	and.w	r3, r3, #2
 8009376:	2b02      	cmp	r3, #2
 8009378:	d10c      	bne.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800937a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800937c:	2b00      	cmp	r3, #0
 800937e:	d109      	bne.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009380:	4b6c      	ldr	r3, [pc, #432]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	08db      	lsrs	r3, r3, #3
 8009386:	f003 0303 	and.w	r3, r3, #3
 800938a:	4a6c      	ldr	r2, [pc, #432]	@ (800953c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800938c:	fa22 f303 	lsr.w	r3, r2, r3
 8009390:	637b      	str	r3, [r7, #52]	@ 0x34
 8009392:	e01e      	b.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009394:	4b67      	ldr	r3, [pc, #412]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800939c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093a0:	d106      	bne.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 80093a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093a8:	d102      	bne.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80093aa:	4b65      	ldr	r3, [pc, #404]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80093ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ae:	e010      	b.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093b0:	4b60      	ldr	r3, [pc, #384]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093bc:	d106      	bne.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 80093be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093c4:	d102      	bne.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80093c6:	4b5f      	ldr	r3, [pc, #380]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80093c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ca:	e002      	b.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80093cc:	2300      	movs	r3, #0
 80093ce:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80093d0:	e003      	b.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 80093d2:	e002      	b.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 80093d4:	2300      	movs	r3, #0
 80093d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093d8:	bf00      	nop
          }
        }
        break;
 80093da:	e2d6      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80093dc:	4b55      	ldr	r3, [pc, #340]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80093de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093e2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80093e6:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 80093e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093ee:	d031      	beq.n	8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 80093f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093f6:	d866      	bhi.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80093f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80093fc:	d027      	beq.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 80093fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009400:	2bc0      	cmp	r3, #192	@ 0xc0
 8009402:	d860      	bhi.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009406:	2b80      	cmp	r3, #128	@ 0x80
 8009408:	d019      	beq.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800940a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940c:	2b80      	cmp	r3, #128	@ 0x80
 800940e:	d85a      	bhi.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009412:	2b00      	cmp	r3, #0
 8009414:	d003      	beq.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8009416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009418:	2b40      	cmp	r3, #64	@ 0x40
 800941a:	d008      	beq.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800941c:	e053      	b.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800941e:	f107 0320 	add.w	r3, r7, #32
 8009422:	4618      	mov	r0, r3
 8009424:	f7fd fb22 	bl	8006a6c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800942a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800942c:	e04e      	b.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800942e:	f107 0314 	add.w	r3, r7, #20
 8009432:	4618      	mov	r0, r3
 8009434:	f7fd fc86 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800943c:	e046      	b.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800943e:	f107 0308 	add.w	r3, r7, #8
 8009442:	4618      	mov	r0, r3
 8009444:	f7fd fdea 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800944c:	e03e      	b.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800944e:	4b3a      	ldr	r3, [pc, #232]	@ (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8009450:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009452:	e03b      	b.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009454:	4b37      	ldr	r3, [pc, #220]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009456:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800945a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800945e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009460:	4b34      	ldr	r3, [pc, #208]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 0302 	and.w	r3, r3, #2
 8009468:	2b02      	cmp	r3, #2
 800946a:	d10c      	bne.n	8009486 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800946c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800946e:	2b00      	cmp	r3, #0
 8009470:	d109      	bne.n	8009486 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009472:	4b30      	ldr	r3, [pc, #192]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	08db      	lsrs	r3, r3, #3
 8009478:	f003 0303 	and.w	r3, r3, #3
 800947c:	4a2f      	ldr	r2, [pc, #188]	@ (800953c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800947e:	fa22 f303 	lsr.w	r3, r2, r3
 8009482:	637b      	str	r3, [r7, #52]	@ 0x34
 8009484:	e01e      	b.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009486:	4b2b      	ldr	r3, [pc, #172]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800948e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009492:	d106      	bne.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8009494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800949a:	d102      	bne.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800949c:	4b28      	ldr	r3, [pc, #160]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800949e:	637b      	str	r3, [r7, #52]	@ 0x34
 80094a0:	e010      	b.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094a2:	4b24      	ldr	r3, [pc, #144]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094ae:	d106      	bne.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 80094b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094b6:	d102      	bne.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80094b8:	4b22      	ldr	r3, [pc, #136]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80094ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80094bc:	e002      	b.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80094be:	2300      	movs	r3, #0
 80094c0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80094c2:	e003      	b.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 80094c4:	e002      	b.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 80094c6:	2300      	movs	r3, #0
 80094c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80094ca:	bf00      	nop
          }
        }
        break;
 80094cc:	e25d      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80094ce:	4b19      	ldr	r3, [pc, #100]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80094d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80094d4:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80094d8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80094da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d103      	bne.n	80094e8 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80094e0:	f7fb fb0e 	bl	8004b00 <HAL_RCC_GetPCLK2Freq>
 80094e4:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80094e6:	e250      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80094e8:	4b12      	ldr	r3, [pc, #72]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094f4:	d10b      	bne.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 80094f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094fc:	d107      	bne.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094fe:	f107 0314 	add.w	r3, r7, #20
 8009502:	4618      	mov	r0, r3
 8009504:	f7fd fc1e 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	637b      	str	r3, [r7, #52]	@ 0x34
 800950c:	e04f      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800950e:	4b09      	ldr	r3, [pc, #36]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009516:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800951a:	d115      	bne.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800951c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009522:	d111      	bne.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009524:	f107 0308 	add.w	r3, r7, #8
 8009528:	4618      	mov	r0, r3
 800952a:	f7fd fd77 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	637b      	str	r3, [r7, #52]	@ 0x34
 8009532:	e03c      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8009534:	44020c00 	.word	0x44020c00
 8009538:	00bb8000 	.word	0x00bb8000
 800953c:	03d09000 	.word	0x03d09000
 8009540:	003d0900 	.word	0x003d0900
 8009544:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8009548:	4b94      	ldr	r3, [pc, #592]	@ (800979c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 0302 	and.w	r3, r3, #2
 8009550:	2b02      	cmp	r3, #2
 8009552:	d10d      	bne.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8009554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009556:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800955a:	d109      	bne.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800955c:	4b8f      	ldr	r3, [pc, #572]	@ (800979c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	08db      	lsrs	r3, r3, #3
 8009562:	f003 0303 	and.w	r3, r3, #3
 8009566:	4a8e      	ldr	r2, [pc, #568]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009568:	fa22 f303 	lsr.w	r3, r2, r3
 800956c:	637b      	str	r3, [r7, #52]	@ 0x34
 800956e:	e01e      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8009570:	4b8a      	ldr	r3, [pc, #552]	@ (800979c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800957c:	d106      	bne.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800957e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009584:	d102      	bne.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8009586:	4b87      	ldr	r3, [pc, #540]	@ (80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009588:	637b      	str	r3, [r7, #52]	@ 0x34
 800958a:	e010      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800958c:	4b83      	ldr	r3, [pc, #524]	@ (800979c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009594:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009598:	d106      	bne.n	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800959a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80095a0:	d102      	bne.n	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 80095a2:	4b81      	ldr	r3, [pc, #516]	@ (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80095a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80095a6:	e002      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 80095a8:	2300      	movs	r3, #0
 80095aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095ac:	e1ed      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80095ae:	e1ec      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 80095b0:	4b7a      	ldr	r3, [pc, #488]	@ (800979c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80095b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095b6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80095ba:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 80095bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d103      	bne.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80095c2:	f7fb fab3 	bl	8004b2c <HAL_RCC_GetPCLK3Freq>
 80095c6:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80095c8:	e1df      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 80095ca:	4b74      	ldr	r3, [pc, #464]	@ (800979c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095d6:	d10b      	bne.n	80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 80095d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095de:	d107      	bne.n	80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095e0:	f107 0314 	add.w	r3, r7, #20
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7fd fbad 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80095ee:	e045      	b.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80095f0:	4b6a      	ldr	r3, [pc, #424]	@ (800979c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095fc:	d10b      	bne.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 80095fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009600:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009604:	d107      	bne.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009606:	f107 0308 	add.w	r3, r7, #8
 800960a:	4618      	mov	r0, r3
 800960c:	f7fd fd06 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	637b      	str	r3, [r7, #52]	@ 0x34
 8009614:	e032      	b.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8009616:	4b61      	ldr	r3, [pc, #388]	@ (800979c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 0302 	and.w	r3, r3, #2
 800961e:	2b02      	cmp	r3, #2
 8009620:	d10d      	bne.n	800963e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8009622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009624:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009628:	d109      	bne.n	800963e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800962a:	4b5c      	ldr	r3, [pc, #368]	@ (800979c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	08db      	lsrs	r3, r3, #3
 8009630:	f003 0303 	and.w	r3, r3, #3
 8009634:	4a5a      	ldr	r2, [pc, #360]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009636:	fa22 f303 	lsr.w	r3, r2, r3
 800963a:	637b      	str	r3, [r7, #52]	@ 0x34
 800963c:	e01e      	b.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800963e:	4b57      	ldr	r3, [pc, #348]	@ (800979c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009646:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800964a:	d106      	bne.n	800965a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800964c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009652:	d102      	bne.n	800965a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8009654:	4b53      	ldr	r3, [pc, #332]	@ (80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009656:	637b      	str	r3, [r7, #52]	@ 0x34
 8009658:	e010      	b.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800965a:	4b50      	ldr	r3, [pc, #320]	@ (800979c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009662:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009666:	d106      	bne.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8009668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800966e:	d102      	bne.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8009670:	4b4d      	ldr	r3, [pc, #308]	@ (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009672:	637b      	str	r3, [r7, #52]	@ 0x34
 8009674:	e002      	b.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8009676:	2300      	movs	r3, #0
 8009678:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800967a:	e186      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800967c:	e185      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800967e:	4b47      	ldr	r3, [pc, #284]	@ (800979c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009684:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8009688:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800968a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968c:	2b00      	cmp	r3, #0
 800968e:	d103      	bne.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009690:	f7fb fa36 	bl	8004b00 <HAL_RCC_GetPCLK2Freq>
 8009694:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009696:	e178      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8009698:	4b40      	ldr	r3, [pc, #256]	@ (800979c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096a4:	d10b      	bne.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 80096a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096ac:	d107      	bne.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096ae:	f107 0314 	add.w	r3, r7, #20
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7fd fb46 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80096bc:	e045      	b.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 80096be:	4b37      	ldr	r3, [pc, #220]	@ (800979c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096ca:	d10b      	bne.n	80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 80096cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096d2:	d107      	bne.n	80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096d4:	f107 0308 	add.w	r3, r7, #8
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fd fc9f 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80096e2:	e032      	b.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 80096e4:	4b2d      	ldr	r3, [pc, #180]	@ (800979c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 0302 	and.w	r3, r3, #2
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	d10d      	bne.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 80096f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80096f6:	d109      	bne.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096f8:	4b28      	ldr	r3, [pc, #160]	@ (800979c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	08db      	lsrs	r3, r3, #3
 80096fe:	f003 0303 	and.w	r3, r3, #3
 8009702:	4a27      	ldr	r2, [pc, #156]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009704:	fa22 f303 	lsr.w	r3, r2, r3
 8009708:	637b      	str	r3, [r7, #52]	@ 0x34
 800970a:	e01e      	b.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800970c:	4b23      	ldr	r3, [pc, #140]	@ (800979c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009718:	d106      	bne.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800971a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009720:	d102      	bne.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8009722:	4b20      	ldr	r3, [pc, #128]	@ (80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009724:	637b      	str	r3, [r7, #52]	@ 0x34
 8009726:	e010      	b.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8009728:	4b1c      	ldr	r3, [pc, #112]	@ (800979c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009730:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009734:	d106      	bne.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8009736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009738:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800973c:	d102      	bne.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800973e:	4b1a      	ldr	r3, [pc, #104]	@ (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009740:	637b      	str	r3, [r7, #52]	@ 0x34
 8009742:	e002      	b.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8009744:	2300      	movs	r3, #0
 8009746:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009748:	e11f      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800974a:	e11e      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800974c:	4b13      	ldr	r3, [pc, #76]	@ (800979c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800974e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009752:	f003 0303 	and.w	r3, r3, #3
 8009756:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8009758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800975a:	2b03      	cmp	r3, #3
 800975c:	d85f      	bhi.n	800981e <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800975e:	a201      	add	r2, pc, #4	@ (adr r2, 8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8009760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009764:	08009775 	.word	0x08009775
 8009768:	0800977d 	.word	0x0800977d
 800976c:	0800978d 	.word	0x0800978d
 8009770:	080097ad 	.word	0x080097ad
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8009774:	f7fb f992 	bl	8004a9c <HAL_RCC_GetHCLKFreq>
 8009778:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800977a:	e053      	b.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800977c:	f107 0320 	add.w	r3, r7, #32
 8009780:	4618      	mov	r0, r3
 8009782:	f7fd f973 	bl	8006a6c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009788:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800978a:	e04b      	b.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800978c:	f107 0314 	add.w	r3, r7, #20
 8009790:	4618      	mov	r0, r3
 8009792:	f7fd fad7 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800979a:	e043      	b.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800979c:	44020c00 	.word	0x44020c00
 80097a0:	03d09000 	.word	0x03d09000
 80097a4:	003d0900 	.word	0x003d0900
 80097a8:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097ac:	4b79      	ldr	r3, [pc, #484]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80097ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097b2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80097b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097b8:	4b76      	ldr	r3, [pc, #472]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f003 0302 	and.w	r3, r3, #2
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	d10c      	bne.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 80097c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d109      	bne.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80097ca:	4b72      	ldr	r3, [pc, #456]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	08db      	lsrs	r3, r3, #3
 80097d0:	f003 0303 	and.w	r3, r3, #3
 80097d4:	4a70      	ldr	r2, [pc, #448]	@ (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 80097d6:	fa22 f303 	lsr.w	r3, r2, r3
 80097da:	637b      	str	r3, [r7, #52]	@ 0x34
 80097dc:	e01e      	b.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097de:	4b6d      	ldr	r3, [pc, #436]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097ea:	d106      	bne.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 80097ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097f2:	d102      	bne.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80097f4:	4b69      	ldr	r3, [pc, #420]	@ (800999c <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 80097f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80097f8:	e010      	b.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097fa:	4b66      	ldr	r3, [pc, #408]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009802:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009806:	d106      	bne.n	8009816 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8009808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800980a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800980e:	d102      	bne.n	8009816 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009810:	4b63      	ldr	r3, [pc, #396]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8009812:	637b      	str	r3, [r7, #52]	@ 0x34
 8009814:	e002      	b.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009816:	2300      	movs	r3, #0
 8009818:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800981a:	e003      	b.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800981c:	e002      	b.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800981e:	2300      	movs	r3, #0
 8009820:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009822:	bf00      	nop
          }
        }
        break;
 8009824:	e0b1      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8009826:	4b5b      	ldr	r3, [pc, #364]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800982c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009830:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8009832:	4b58      	ldr	r3, [pc, #352]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009834:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009838:	f003 0302 	and.w	r3, r3, #2
 800983c:	2b02      	cmp	r3, #2
 800983e:	d106      	bne.n	800984e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8009840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009842:	2b00      	cmp	r3, #0
 8009844:	d103      	bne.n	800984e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8009846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800984a:	637b      	str	r3, [r7, #52]	@ 0x34
 800984c:	e01f      	b.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800984e:	4b51      	ldr	r3, [pc, #324]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009854:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009858:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800985c:	d106      	bne.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800985e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009860:	2b40      	cmp	r3, #64	@ 0x40
 8009862:	d103      	bne.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8009864:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009868:	637b      	str	r3, [r7, #52]	@ 0x34
 800986a:	e010      	b.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800986c:	4b49      	ldr	r3, [pc, #292]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009874:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009878:	d106      	bne.n	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800987a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987c:	2b80      	cmp	r3, #128	@ 0x80
 800987e:	d103      	bne.n	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8009880:	f248 0312 	movw	r3, #32786	@ 0x8012
 8009884:	637b      	str	r3, [r7, #52]	@ 0x34
 8009886:	e002      	b.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8009888:	2300      	movs	r3, #0
 800988a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800988c:	e07d      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800988e:	e07c      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009890:	4b40      	ldr	r3, [pc, #256]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009892:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009896:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800989a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800989c:	4b3d      	ldr	r3, [pc, #244]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80098a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098a8:	d105      	bne.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 80098aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d102      	bne.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 80098b0:	4b3c      	ldr	r3, [pc, #240]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80098b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80098b4:	e031      	b.n	800991a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80098b6:	4b37      	ldr	r3, [pc, #220]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098c2:	d10a      	bne.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 80098c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c6:	2b10      	cmp	r3, #16
 80098c8:	d107      	bne.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098ca:	f107 0320 	add.w	r3, r7, #32
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fd f8cc 	bl	8006a6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80098d8:	e01f      	b.n	800991a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80098da:	4b2e      	ldr	r3, [pc, #184]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80098dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098e0:	f003 0302 	and.w	r3, r3, #2
 80098e4:	2b02      	cmp	r3, #2
 80098e6:	d106      	bne.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 80098e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ea:	2b20      	cmp	r3, #32
 80098ec:	d103      	bne.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 80098ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80098f4:	e011      	b.n	800991a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80098f6:	4b27      	ldr	r3, [pc, #156]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80098f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009900:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009904:	d106      	bne.n	8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8009906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009908:	2b30      	cmp	r3, #48	@ 0x30
 800990a:	d103      	bne.n	8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800990c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009910:	637b      	str	r3, [r7, #52]	@ 0x34
 8009912:	e002      	b.n	800991a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009914:	2300      	movs	r3, #0
 8009916:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009918:	e037      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800991a:	e036      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800991c:	4b1d      	ldr	r3, [pc, #116]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800991e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009922:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009926:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8009928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992a:	2b10      	cmp	r3, #16
 800992c:	d107      	bne.n	800993e <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800992e:	f107 0320 	add.w	r3, r7, #32
 8009932:	4618      	mov	r0, r3
 8009934:	f7fd f89a 	bl	8006a6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800993c:	e025      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800993e:	4b15      	ldr	r3, [pc, #84]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009946:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800994a:	d10a      	bne.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800994c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994e:	2b20      	cmp	r3, #32
 8009950:	d107      	bne.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009952:	f107 0308 	add.w	r3, r7, #8
 8009956:	4618      	mov	r0, r3
 8009958:	f7fd fb60 	bl	800701c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009960:	e00f      	b.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8009962:	4b0c      	ldr	r3, [pc, #48]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800996a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800996e:	d105      	bne.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8009970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009972:	2b30      	cmp	r3, #48	@ 0x30
 8009974:	d102      	bne.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8009976:	4b0b      	ldr	r3, [pc, #44]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009978:	637b      	str	r3, [r7, #52]	@ 0x34
 800997a:	e002      	b.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800997c:	2300      	movs	r3, #0
 800997e:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8009980:	e003      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009982:	e002      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8009984:	2300      	movs	r3, #0
 8009986:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009988:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800998a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800998c:	4618      	mov	r0, r3
 800998e:	373c      	adds	r7, #60	@ 0x3c
 8009990:	46bd      	mov	sp, r7
 8009992:	bd90      	pop	{r4, r7, pc}
 8009994:	44020c00 	.word	0x44020c00
 8009998:	03d09000 	.word	0x03d09000
 800999c:	003d0900 	.word	0x003d0900
 80099a0:	017d7840 	.word	0x017d7840
 80099a4:	02dc6c00 	.word	0x02dc6c00

080099a8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80099b0:	4b48      	ldr	r3, [pc, #288]	@ (8009ad4 <RCCEx_PLL2_Config+0x12c>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a47      	ldr	r2, [pc, #284]	@ (8009ad4 <RCCEx_PLL2_Config+0x12c>)
 80099b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80099ba:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80099bc:	f7f9 fd90 	bl	80034e0 <HAL_GetTick>
 80099c0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80099c2:	e008      	b.n	80099d6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80099c4:	f7f9 fd8c 	bl	80034e0 <HAL_GetTick>
 80099c8:	4602      	mov	r2, r0
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	2b02      	cmp	r3, #2
 80099d0:	d901      	bls.n	80099d6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80099d2:	2303      	movs	r3, #3
 80099d4:	e07a      	b.n	8009acc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80099d6:	4b3f      	ldr	r3, [pc, #252]	@ (8009ad4 <RCCEx_PLL2_Config+0x12c>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1f0      	bne.n	80099c4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80099e2:	4b3c      	ldr	r3, [pc, #240]	@ (8009ad4 <RCCEx_PLL2_Config+0x12c>)
 80099e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80099ea:	f023 0303 	bic.w	r3, r3, #3
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	6811      	ldr	r1, [r2, #0]
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	6852      	ldr	r2, [r2, #4]
 80099f6:	0212      	lsls	r2, r2, #8
 80099f8:	430a      	orrs	r2, r1
 80099fa:	4936      	ldr	r1, [pc, #216]	@ (8009ad4 <RCCEx_PLL2_Config+0x12c>)
 80099fc:	4313      	orrs	r3, r2
 80099fe:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	3b01      	subs	r3, #1
 8009a06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	025b      	lsls	r3, r3, #9
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	431a      	orrs	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	691b      	ldr	r3, [r3, #16]
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	041b      	lsls	r3, r3, #16
 8009a1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009a22:	431a      	orrs	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	695b      	ldr	r3, [r3, #20]
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	061b      	lsls	r3, r3, #24
 8009a2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009a30:	4928      	ldr	r1, [pc, #160]	@ (8009ad4 <RCCEx_PLL2_Config+0x12c>)
 8009a32:	4313      	orrs	r3, r2
 8009a34:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009a36:	4b27      	ldr	r3, [pc, #156]	@ (8009ad4 <RCCEx_PLL2_Config+0x12c>)
 8009a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a3a:	f023 020c 	bic.w	r2, r3, #12
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	699b      	ldr	r3, [r3, #24]
 8009a42:	4924      	ldr	r1, [pc, #144]	@ (8009ad4 <RCCEx_PLL2_Config+0x12c>)
 8009a44:	4313      	orrs	r3, r2
 8009a46:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8009a48:	4b22      	ldr	r3, [pc, #136]	@ (8009ad4 <RCCEx_PLL2_Config+0x12c>)
 8009a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a4c:	f023 0220 	bic.w	r2, r3, #32
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	69db      	ldr	r3, [r3, #28]
 8009a54:	491f      	ldr	r1, [pc, #124]	@ (8009ad4 <RCCEx_PLL2_Config+0x12c>)
 8009a56:	4313      	orrs	r3, r2
 8009a58:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8009ad4 <RCCEx_PLL2_Config+0x12c>)
 8009a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a62:	491c      	ldr	r1, [pc, #112]	@ (8009ad4 <RCCEx_PLL2_Config+0x12c>)
 8009a64:	4313      	orrs	r3, r2
 8009a66:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8009a68:	4b1a      	ldr	r3, [pc, #104]	@ (8009ad4 <RCCEx_PLL2_Config+0x12c>)
 8009a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a6c:	4a19      	ldr	r2, [pc, #100]	@ (8009ad4 <RCCEx_PLL2_Config+0x12c>)
 8009a6e:	f023 0310 	bic.w	r3, r3, #16
 8009a72:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8009a74:	4b17      	ldr	r3, [pc, #92]	@ (8009ad4 <RCCEx_PLL2_Config+0x12c>)
 8009a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a78:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a7c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	6a12      	ldr	r2, [r2, #32]
 8009a84:	00d2      	lsls	r2, r2, #3
 8009a86:	4913      	ldr	r1, [pc, #76]	@ (8009ad4 <RCCEx_PLL2_Config+0x12c>)
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8009a8c:	4b11      	ldr	r3, [pc, #68]	@ (8009ad4 <RCCEx_PLL2_Config+0x12c>)
 8009a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a90:	4a10      	ldr	r2, [pc, #64]	@ (8009ad4 <RCCEx_PLL2_Config+0x12c>)
 8009a92:	f043 0310 	orr.w	r3, r3, #16
 8009a96:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8009a98:	4b0e      	ldr	r3, [pc, #56]	@ (8009ad4 <RCCEx_PLL2_Config+0x12c>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8009ad4 <RCCEx_PLL2_Config+0x12c>)
 8009a9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009aa2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009aa4:	f7f9 fd1c 	bl	80034e0 <HAL_GetTick>
 8009aa8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009aaa:	e008      	b.n	8009abe <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009aac:	f7f9 fd18 	bl	80034e0 <HAL_GetTick>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	1ad3      	subs	r3, r2, r3
 8009ab6:	2b02      	cmp	r3, #2
 8009ab8:	d901      	bls.n	8009abe <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009aba:	2303      	movs	r3, #3
 8009abc:	e006      	b.n	8009acc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009abe:	4b05      	ldr	r3, [pc, #20]	@ (8009ad4 <RCCEx_PLL2_Config+0x12c>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d0f0      	beq.n	8009aac <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8009aca:	2300      	movs	r3, #0

}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3710      	adds	r7, #16
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	44020c00 	.word	0x44020c00

08009ad8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009ae0:	4b48      	ldr	r3, [pc, #288]	@ (8009c04 <RCCEx_PLL3_Config+0x12c>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a47      	ldr	r2, [pc, #284]	@ (8009c04 <RCCEx_PLL3_Config+0x12c>)
 8009ae6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009aea:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009aec:	f7f9 fcf8 	bl	80034e0 <HAL_GetTick>
 8009af0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009af2:	e008      	b.n	8009b06 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009af4:	f7f9 fcf4 	bl	80034e0 <HAL_GetTick>
 8009af8:	4602      	mov	r2, r0
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	1ad3      	subs	r3, r2, r3
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d901      	bls.n	8009b06 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009b02:	2303      	movs	r3, #3
 8009b04:	e07a      	b.n	8009bfc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b06:	4b3f      	ldr	r3, [pc, #252]	@ (8009c04 <RCCEx_PLL3_Config+0x12c>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1f0      	bne.n	8009af4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009b12:	4b3c      	ldr	r3, [pc, #240]	@ (8009c04 <RCCEx_PLL3_Config+0x12c>)
 8009b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b16:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009b1a:	f023 0303 	bic.w	r3, r3, #3
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	6811      	ldr	r1, [r2, #0]
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	6852      	ldr	r2, [r2, #4]
 8009b26:	0212      	lsls	r2, r2, #8
 8009b28:	430a      	orrs	r2, r1
 8009b2a:	4936      	ldr	r1, [pc, #216]	@ (8009c04 <RCCEx_PLL3_Config+0x12c>)
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	630b      	str	r3, [r1, #48]	@ 0x30
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	3b01      	subs	r3, #1
 8009b36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	025b      	lsls	r3, r3, #9
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	431a      	orrs	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	691b      	ldr	r3, [r3, #16]
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	041b      	lsls	r3, r3, #16
 8009b4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009b52:	431a      	orrs	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	695b      	ldr	r3, [r3, #20]
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	061b      	lsls	r3, r3, #24
 8009b5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009b60:	4928      	ldr	r1, [pc, #160]	@ (8009c04 <RCCEx_PLL3_Config+0x12c>)
 8009b62:	4313      	orrs	r3, r2
 8009b64:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009b66:	4b27      	ldr	r3, [pc, #156]	@ (8009c04 <RCCEx_PLL3_Config+0x12c>)
 8009b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b6a:	f023 020c 	bic.w	r2, r3, #12
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	699b      	ldr	r3, [r3, #24]
 8009b72:	4924      	ldr	r1, [pc, #144]	@ (8009c04 <RCCEx_PLL3_Config+0x12c>)
 8009b74:	4313      	orrs	r3, r2
 8009b76:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8009b78:	4b22      	ldr	r3, [pc, #136]	@ (8009c04 <RCCEx_PLL3_Config+0x12c>)
 8009b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b7c:	f023 0220 	bic.w	r2, r3, #32
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	69db      	ldr	r3, [r3, #28]
 8009b84:	491f      	ldr	r1, [pc, #124]	@ (8009c04 <RCCEx_PLL3_Config+0x12c>)
 8009b86:	4313      	orrs	r3, r2
 8009b88:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8009c04 <RCCEx_PLL3_Config+0x12c>)
 8009b8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b92:	491c      	ldr	r1, [pc, #112]	@ (8009c04 <RCCEx_PLL3_Config+0x12c>)
 8009b94:	4313      	orrs	r3, r2
 8009b96:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8009b98:	4b1a      	ldr	r3, [pc, #104]	@ (8009c04 <RCCEx_PLL3_Config+0x12c>)
 8009b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b9c:	4a19      	ldr	r2, [pc, #100]	@ (8009c04 <RCCEx_PLL3_Config+0x12c>)
 8009b9e:	f023 0310 	bic.w	r3, r3, #16
 8009ba2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8009ba4:	4b17      	ldr	r3, [pc, #92]	@ (8009c04 <RCCEx_PLL3_Config+0x12c>)
 8009ba6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ba8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009bac:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	6a12      	ldr	r2, [r2, #32]
 8009bb4:	00d2      	lsls	r2, r2, #3
 8009bb6:	4913      	ldr	r1, [pc, #76]	@ (8009c04 <RCCEx_PLL3_Config+0x12c>)
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8009bbc:	4b11      	ldr	r3, [pc, #68]	@ (8009c04 <RCCEx_PLL3_Config+0x12c>)
 8009bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bc0:	4a10      	ldr	r2, [pc, #64]	@ (8009c04 <RCCEx_PLL3_Config+0x12c>)
 8009bc2:	f043 0310 	orr.w	r3, r3, #16
 8009bc6:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8009bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8009c04 <RCCEx_PLL3_Config+0x12c>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8009c04 <RCCEx_PLL3_Config+0x12c>)
 8009bce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bd2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009bd4:	f7f9 fc84 	bl	80034e0 <HAL_GetTick>
 8009bd8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bda:	e008      	b.n	8009bee <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009bdc:	f7f9 fc80 	bl	80034e0 <HAL_GetTick>
 8009be0:	4602      	mov	r2, r0
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	1ad3      	subs	r3, r2, r3
 8009be6:	2b02      	cmp	r3, #2
 8009be8:	d901      	bls.n	8009bee <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009bea:	2303      	movs	r3, #3
 8009bec:	e006      	b.n	8009bfc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bee:	4b05      	ldr	r3, [pc, #20]	@ (8009c04 <RCCEx_PLL3_Config+0x12c>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d0f0      	beq.n	8009bdc <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	44020c00 	.word	0x44020c00

08009c08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d101      	bne.n	8009c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	e042      	b.n	8009ca0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d106      	bne.n	8009c32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f7f7 fc3d 	bl	80014ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2224      	movs	r2, #36	@ 0x24
 8009c36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f022 0201 	bic.w	r2, r2, #1
 8009c48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d002      	beq.n	8009c58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fab4 	bl	800a1c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 f8c3 	bl	8009de4 <UART_SetConfig>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d101      	bne.n	8009c68 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	e01b      	b.n	8009ca0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	685a      	ldr	r2, [r3, #4]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009c76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	689a      	ldr	r2, [r3, #8]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009c86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f042 0201 	orr.w	r2, r2, #1
 8009c96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fb33 	bl	800a304 <UART_CheckIdleState>
 8009c9e:	4603      	mov	r3, r0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b08a      	sub	sp, #40	@ 0x28
 8009cac:	af02      	add	r7, sp, #8
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	603b      	str	r3, [r7, #0]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cbe:	2b20      	cmp	r3, #32
 8009cc0:	f040 808b 	bne.w	8009dda <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d002      	beq.n	8009cd0 <HAL_UART_Transmit+0x28>
 8009cca:	88fb      	ldrh	r3, [r7, #6]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d101      	bne.n	8009cd4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e083      	b.n	8009ddc <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cde:	2b80      	cmp	r3, #128	@ 0x80
 8009ce0:	d107      	bne.n	8009cf2 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	689a      	ldr	r2, [r3, #8]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009cf0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2221      	movs	r2, #33	@ 0x21
 8009cfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009d02:	f7f9 fbed 	bl	80034e0 <HAL_GetTick>
 8009d06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	88fa      	ldrh	r2, [r7, #6]
 8009d0c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	88fa      	ldrh	r2, [r7, #6]
 8009d14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d20:	d108      	bne.n	8009d34 <HAL_UART_Transmit+0x8c>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d104      	bne.n	8009d34 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	61bb      	str	r3, [r7, #24]
 8009d32:	e003      	b.n	8009d3c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009d3c:	e030      	b.n	8009da0 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	9300      	str	r3, [sp, #0]
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	2200      	movs	r2, #0
 8009d46:	2180      	movs	r1, #128	@ 0x80
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	f000 fb85 	bl	800a458 <UART_WaitOnFlagUntilTimeout>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d005      	beq.n	8009d60 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2220      	movs	r2, #32
 8009d58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	e03d      	b.n	8009ddc <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d10b      	bne.n	8009d7e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	881b      	ldrh	r3, [r3, #0]
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d74:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	3302      	adds	r3, #2
 8009d7a:	61bb      	str	r3, [r7, #24]
 8009d7c:	e007      	b.n	8009d8e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	781a      	ldrb	r2, [r3, #0]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	3b01      	subs	r3, #1
 8009d98:	b29a      	uxth	r2, r3
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d1c8      	bne.n	8009d3e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	2200      	movs	r2, #0
 8009db4:	2140      	movs	r1, #64	@ 0x40
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 fb4e 	bl	800a458 <UART_WaitOnFlagUntilTimeout>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d005      	beq.n	8009dce <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2220      	movs	r2, #32
 8009dc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	e006      	b.n	8009ddc <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2220      	movs	r2, #32
 8009dd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	e000      	b.n	8009ddc <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8009dda:	2302      	movs	r3, #2
  }
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3720      	adds	r7, #32
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009de8:	b094      	sub	sp, #80	@ 0x50
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009dee:	2300      	movs	r3, #0
 8009df0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	4b78      	ldr	r3, [pc, #480]	@ (8009fdc <UART_SetConfig+0x1f8>)
 8009dfa:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dfe:	689a      	ldr	r2, [r3, #8]
 8009e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	431a      	orrs	r2, r3
 8009e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e08:	695b      	ldr	r3, [r3, #20]
 8009e0a:	431a      	orrs	r2, r3
 8009e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e0e:	69db      	ldr	r3, [r3, #28]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4971      	ldr	r1, [pc, #452]	@ (8009fe0 <UART_SetConfig+0x1fc>)
 8009e1c:	4019      	ands	r1, r3
 8009e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e24:	430b      	orrs	r3, r1
 8009e26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e34:	68d9      	ldr	r1, [r3, #12]
 8009e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	ea40 0301 	orr.w	r3, r0, r1
 8009e3e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e42:	699b      	ldr	r3, [r3, #24]
 8009e44:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	4b64      	ldr	r3, [pc, #400]	@ (8009fdc <UART_SetConfig+0x1f8>)
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d009      	beq.n	8009e64 <UART_SetConfig+0x80>
 8009e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	4b63      	ldr	r3, [pc, #396]	@ (8009fe4 <UART_SetConfig+0x200>)
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d004      	beq.n	8009e64 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e5c:	6a1a      	ldr	r2, [r3, #32]
 8009e5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e60:	4313      	orrs	r3, r2
 8009e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009e6e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8009e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e78:	430b      	orrs	r3, r1
 8009e7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e82:	f023 000f 	bic.w	r0, r3, #15
 8009e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e88:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	ea40 0301 	orr.w	r3, r0, r1
 8009e92:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	4b53      	ldr	r3, [pc, #332]	@ (8009fe8 <UART_SetConfig+0x204>)
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d102      	bne.n	8009ea4 <UART_SetConfig+0xc0>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ea2:	e066      	b.n	8009f72 <UART_SetConfig+0x18e>
 8009ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	4b50      	ldr	r3, [pc, #320]	@ (8009fec <UART_SetConfig+0x208>)
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d102      	bne.n	8009eb4 <UART_SetConfig+0xd0>
 8009eae:	2302      	movs	r3, #2
 8009eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009eb2:	e05e      	b.n	8009f72 <UART_SetConfig+0x18e>
 8009eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	4b4d      	ldr	r3, [pc, #308]	@ (8009ff0 <UART_SetConfig+0x20c>)
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d102      	bne.n	8009ec4 <UART_SetConfig+0xe0>
 8009ebe:	2304      	movs	r3, #4
 8009ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ec2:	e056      	b.n	8009f72 <UART_SetConfig+0x18e>
 8009ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	4b4a      	ldr	r3, [pc, #296]	@ (8009ff4 <UART_SetConfig+0x210>)
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d102      	bne.n	8009ed4 <UART_SetConfig+0xf0>
 8009ece:	2308      	movs	r3, #8
 8009ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ed2:	e04e      	b.n	8009f72 <UART_SetConfig+0x18e>
 8009ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	4b47      	ldr	r3, [pc, #284]	@ (8009ff8 <UART_SetConfig+0x214>)
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d102      	bne.n	8009ee4 <UART_SetConfig+0x100>
 8009ede:	2310      	movs	r3, #16
 8009ee0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ee2:	e046      	b.n	8009f72 <UART_SetConfig+0x18e>
 8009ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	4b44      	ldr	r3, [pc, #272]	@ (8009ffc <UART_SetConfig+0x218>)
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d102      	bne.n	8009ef4 <UART_SetConfig+0x110>
 8009eee:	2320      	movs	r3, #32
 8009ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ef2:	e03e      	b.n	8009f72 <UART_SetConfig+0x18e>
 8009ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	4b41      	ldr	r3, [pc, #260]	@ (800a000 <UART_SetConfig+0x21c>)
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d102      	bne.n	8009f04 <UART_SetConfig+0x120>
 8009efe:	2340      	movs	r3, #64	@ 0x40
 8009f00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f02:	e036      	b.n	8009f72 <UART_SetConfig+0x18e>
 8009f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	4b3e      	ldr	r3, [pc, #248]	@ (800a004 <UART_SetConfig+0x220>)
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d102      	bne.n	8009f14 <UART_SetConfig+0x130>
 8009f0e:	2380      	movs	r3, #128	@ 0x80
 8009f10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f12:	e02e      	b.n	8009f72 <UART_SetConfig+0x18e>
 8009f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	4b3b      	ldr	r3, [pc, #236]	@ (800a008 <UART_SetConfig+0x224>)
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d103      	bne.n	8009f26 <UART_SetConfig+0x142>
 8009f1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009f22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f24:	e025      	b.n	8009f72 <UART_SetConfig+0x18e>
 8009f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	4b38      	ldr	r3, [pc, #224]	@ (800a00c <UART_SetConfig+0x228>)
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d103      	bne.n	8009f38 <UART_SetConfig+0x154>
 8009f30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f36:	e01c      	b.n	8009f72 <UART_SetConfig+0x18e>
 8009f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	4b34      	ldr	r3, [pc, #208]	@ (800a010 <UART_SetConfig+0x22c>)
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d103      	bne.n	8009f4a <UART_SetConfig+0x166>
 8009f42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f48:	e013      	b.n	8009f72 <UART_SetConfig+0x18e>
 8009f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	4b31      	ldr	r3, [pc, #196]	@ (800a014 <UART_SetConfig+0x230>)
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d103      	bne.n	8009f5c <UART_SetConfig+0x178>
 8009f54:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009f58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f5a:	e00a      	b.n	8009f72 <UART_SetConfig+0x18e>
 8009f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	4b1e      	ldr	r3, [pc, #120]	@ (8009fdc <UART_SetConfig+0x1f8>)
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d103      	bne.n	8009f6e <UART_SetConfig+0x18a>
 8009f66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f6c:	e001      	b.n	8009f72 <UART_SetConfig+0x18e>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	4b19      	ldr	r3, [pc, #100]	@ (8009fdc <UART_SetConfig+0x1f8>)
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d005      	beq.n	8009f88 <UART_SetConfig+0x1a4>
 8009f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	4b18      	ldr	r3, [pc, #96]	@ (8009fe4 <UART_SetConfig+0x200>)
 8009f82:	429a      	cmp	r2, r3
 8009f84:	f040 8094 	bne.w	800a0b0 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009f88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	623b      	str	r3, [r7, #32]
 8009f8e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009f90:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009f94:	f7fd f9ae 	bl	80072f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009f98:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f000 80f7 	beq.w	800a190 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fa6:	4a1c      	ldr	r2, [pc, #112]	@ (800a018 <UART_SetConfig+0x234>)
 8009fa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fac:	461a      	mov	r2, r3
 8009fae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fb4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb8:	685a      	ldr	r2, [r3, #4]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	005b      	lsls	r3, r3, #1
 8009fbe:	4413      	add	r3, r2
 8009fc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d305      	bcc.n	8009fd2 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d924      	bls.n	800a01c <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009fd8:	e069      	b.n	800a0ae <UART_SetConfig+0x2ca>
 8009fda:	bf00      	nop
 8009fdc:	44002400 	.word	0x44002400
 8009fe0:	cfff69f3 	.word	0xcfff69f3
 8009fe4:	54002400 	.word	0x54002400
 8009fe8:	40013800 	.word	0x40013800
 8009fec:	40004400 	.word	0x40004400
 8009ff0:	40004800 	.word	0x40004800
 8009ff4:	40004c00 	.word	0x40004c00
 8009ff8:	40005000 	.word	0x40005000
 8009ffc:	40006400 	.word	0x40006400
 800a000:	40007800 	.word	0x40007800
 800a004:	40007c00 	.word	0x40007c00
 800a008:	40008000 	.word	0x40008000
 800a00c:	40006800 	.word	0x40006800
 800a010:	40006c00 	.word	0x40006c00
 800a014:	40008400 	.word	0x40008400
 800a018:	08014690 	.word	0x08014690
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a01c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a01e:	2200      	movs	r2, #0
 800a020:	61bb      	str	r3, [r7, #24]
 800a022:	61fa      	str	r2, [r7, #28]
 800a024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a028:	4a64      	ldr	r2, [pc, #400]	@ (800a1bc <UART_SetConfig+0x3d8>)
 800a02a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a02e:	b29b      	uxth	r3, r3
 800a030:	2200      	movs	r2, #0
 800a032:	613b      	str	r3, [r7, #16]
 800a034:	617a      	str	r2, [r7, #20]
 800a036:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a03a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a03e:	f7f6 f92d 	bl	800029c <__aeabi_uldivmod>
 800a042:	4602      	mov	r2, r0
 800a044:	460b      	mov	r3, r1
 800a046:	4610      	mov	r0, r2
 800a048:	4619      	mov	r1, r3
 800a04a:	f04f 0200 	mov.w	r2, #0
 800a04e:	f04f 0300 	mov.w	r3, #0
 800a052:	020b      	lsls	r3, r1, #8
 800a054:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a058:	0202      	lsls	r2, r0, #8
 800a05a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a05c:	6849      	ldr	r1, [r1, #4]
 800a05e:	0849      	lsrs	r1, r1, #1
 800a060:	2000      	movs	r0, #0
 800a062:	460c      	mov	r4, r1
 800a064:	4605      	mov	r5, r0
 800a066:	eb12 0804 	adds.w	r8, r2, r4
 800a06a:	eb43 0905 	adc.w	r9, r3, r5
 800a06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	60bb      	str	r3, [r7, #8]
 800a076:	60fa      	str	r2, [r7, #12]
 800a078:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a07c:	4640      	mov	r0, r8
 800a07e:	4649      	mov	r1, r9
 800a080:	f7f6 f90c 	bl	800029c <__aeabi_uldivmod>
 800a084:	4602      	mov	r2, r0
 800a086:	460b      	mov	r3, r1
 800a088:	4613      	mov	r3, r2
 800a08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a08c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a08e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a092:	d308      	bcc.n	800a0a6 <UART_SetConfig+0x2c2>
 800a094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a096:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a09a:	d204      	bcs.n	800a0a6 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800a09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a0a2:	60da      	str	r2, [r3, #12]
 800a0a4:	e003      	b.n	800a0ae <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800a0ac:	e070      	b.n	800a190 <UART_SetConfig+0x3ac>
 800a0ae:	e06f      	b.n	800a190 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0b2:	69db      	ldr	r3, [r3, #28]
 800a0b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0b8:	d13c      	bne.n	800a134 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a0ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0bc:	2200      	movs	r2, #0
 800a0be:	603b      	str	r3, [r7, #0]
 800a0c0:	607a      	str	r2, [r7, #4]
 800a0c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0c6:	f7fd f915 	bl	80072f4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a0ca:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a0cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d05e      	beq.n	800a190 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0d6:	4a39      	ldr	r2, [pc, #228]	@ (800a1bc <UART_SetConfig+0x3d8>)
 800a0d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0dc:	461a      	mov	r2, r3
 800a0de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0e4:	005a      	lsls	r2, r3, #1
 800a0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	085b      	lsrs	r3, r3, #1
 800a0ec:	441a      	add	r2, r3
 800a0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0fa:	2b0f      	cmp	r3, #15
 800a0fc:	d916      	bls.n	800a12c <UART_SetConfig+0x348>
 800a0fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a104:	d212      	bcs.n	800a12c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a108:	b29b      	uxth	r3, r3
 800a10a:	f023 030f 	bic.w	r3, r3, #15
 800a10e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a112:	085b      	lsrs	r3, r3, #1
 800a114:	b29b      	uxth	r3, r3
 800a116:	f003 0307 	and.w	r3, r3, #7
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a11e:	4313      	orrs	r3, r2
 800a120:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800a122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a128:	60da      	str	r2, [r3, #12]
 800a12a:	e031      	b.n	800a190 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a132:	e02d      	b.n	800a190 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a134:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a136:	2200      	movs	r2, #0
 800a138:	469a      	mov	sl, r3
 800a13a:	4693      	mov	fp, r2
 800a13c:	4650      	mov	r0, sl
 800a13e:	4659      	mov	r1, fp
 800a140:	f7fd f8d8 	bl	80072f4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a144:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800a146:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d021      	beq.n	800a190 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a14c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a14e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a150:	4a1a      	ldr	r2, [pc, #104]	@ (800a1bc <UART_SetConfig+0x3d8>)
 800a152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a156:	461a      	mov	r2, r3
 800a158:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a15a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	085b      	lsrs	r3, r3, #1
 800a164:	441a      	add	r2, r3
 800a166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a172:	2b0f      	cmp	r3, #15
 800a174:	d909      	bls.n	800a18a <UART_SetConfig+0x3a6>
 800a176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a17c:	d205      	bcs.n	800a18a <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a17e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a180:	b29a      	uxth	r2, r3
 800a182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	60da      	str	r2, [r3, #12]
 800a188:	e002      	b.n	800a190 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a192:	2201      	movs	r2, #1
 800a194:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a19a:	2201      	movs	r2, #1
 800a19c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a1a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a1ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3750      	adds	r7, #80	@ 0x50
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1ba:	bf00      	nop
 800a1bc:	08014690 	.word	0x08014690

0800a1c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1cc:	f003 0308 	and.w	r3, r3, #8
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00a      	beq.n	800a1ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	430a      	orrs	r2, r1
 800a1e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ee:	f003 0301 	and.w	r3, r3, #1
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00a      	beq.n	800a20c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	430a      	orrs	r2, r1
 800a20a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a210:	f003 0302 	and.w	r3, r3, #2
 800a214:	2b00      	cmp	r3, #0
 800a216:	d00a      	beq.n	800a22e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	430a      	orrs	r2, r1
 800a22c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a232:	f003 0304 	and.w	r3, r3, #4
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00a      	beq.n	800a250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	430a      	orrs	r2, r1
 800a24e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a254:	f003 0310 	and.w	r3, r3, #16
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00a      	beq.n	800a272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	430a      	orrs	r2, r1
 800a270:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a276:	f003 0320 	and.w	r3, r3, #32
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00a      	beq.n	800a294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	430a      	orrs	r2, r1
 800a292:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d01a      	beq.n	800a2d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	430a      	orrs	r2, r1
 800a2b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2be:	d10a      	bne.n	800a2d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	430a      	orrs	r2, r1
 800a2d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d00a      	beq.n	800a2f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	430a      	orrs	r2, r1
 800a2f6:	605a      	str	r2, [r3, #4]
  }
}
 800a2f8:	bf00      	nop
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b098      	sub	sp, #96	@ 0x60
 800a308:	af02      	add	r7, sp, #8
 800a30a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a314:	f7f9 f8e4 	bl	80034e0 <HAL_GetTick>
 800a318:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f003 0308 	and.w	r3, r3, #8
 800a324:	2b08      	cmp	r3, #8
 800a326:	d12f      	bne.n	800a388 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a328:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a32c:	9300      	str	r3, [sp, #0]
 800a32e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a330:	2200      	movs	r2, #0
 800a332:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 f88e 	bl	800a458 <UART_WaitOnFlagUntilTimeout>
 800a33c:	4603      	mov	r3, r0
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d022      	beq.n	800a388 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a34a:	e853 3f00 	ldrex	r3, [r3]
 800a34e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a356:	653b      	str	r3, [r7, #80]	@ 0x50
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	461a      	mov	r2, r3
 800a35e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a360:	647b      	str	r3, [r7, #68]	@ 0x44
 800a362:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a364:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a366:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a368:	e841 2300 	strex	r3, r2, [r1]
 800a36c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a36e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1e6      	bne.n	800a342 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2220      	movs	r2, #32
 800a378:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a384:	2303      	movs	r3, #3
 800a386:	e063      	b.n	800a450 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f003 0304 	and.w	r3, r3, #4
 800a392:	2b04      	cmp	r3, #4
 800a394:	d149      	bne.n	800a42a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a396:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a39a:	9300      	str	r3, [sp, #0]
 800a39c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f857 	bl	800a458 <UART_WaitOnFlagUntilTimeout>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d03c      	beq.n	800a42a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b8:	e853 3f00 	ldrex	r3, [r3]
 800a3bc:	623b      	str	r3, [r7, #32]
   return(result);
 800a3be:	6a3b      	ldr	r3, [r7, #32]
 800a3c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a3d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3d6:	e841 2300 	strex	r3, r2, [r1]
 800a3da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1e6      	bne.n	800a3b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	3308      	adds	r3, #8
 800a3e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	e853 3f00 	ldrex	r3, [r3]
 800a3f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f023 0301 	bic.w	r3, r3, #1
 800a3f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	3308      	adds	r3, #8
 800a400:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a402:	61fa      	str	r2, [r7, #28]
 800a404:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a406:	69b9      	ldr	r1, [r7, #24]
 800a408:	69fa      	ldr	r2, [r7, #28]
 800a40a:	e841 2300 	strex	r3, r2, [r1]
 800a40e:	617b      	str	r3, [r7, #20]
   return(result);
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d1e5      	bne.n	800a3e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2220      	movs	r2, #32
 800a41a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a426:	2303      	movs	r3, #3
 800a428:	e012      	b.n	800a450 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2220      	movs	r2, #32
 800a42e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2220      	movs	r2, #32
 800a436:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2200      	movs	r2, #0
 800a44a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	3758      	adds	r7, #88	@ 0x58
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	603b      	str	r3, [r7, #0]
 800a464:	4613      	mov	r3, r2
 800a466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a468:	e04f      	b.n	800a50a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a470:	d04b      	beq.n	800a50a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a472:	f7f9 f835 	bl	80034e0 <HAL_GetTick>
 800a476:	4602      	mov	r2, r0
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	1ad3      	subs	r3, r2, r3
 800a47c:	69ba      	ldr	r2, [r7, #24]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d302      	bcc.n	800a488 <UART_WaitOnFlagUntilTimeout+0x30>
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d101      	bne.n	800a48c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a488:	2303      	movs	r3, #3
 800a48a:	e04e      	b.n	800a52a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f003 0304 	and.w	r3, r3, #4
 800a496:	2b00      	cmp	r3, #0
 800a498:	d037      	beq.n	800a50a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	2b80      	cmp	r3, #128	@ 0x80
 800a49e:	d034      	beq.n	800a50a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	2b40      	cmp	r3, #64	@ 0x40
 800a4a4:	d031      	beq.n	800a50a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	69db      	ldr	r3, [r3, #28]
 800a4ac:	f003 0308 	and.w	r3, r3, #8
 800a4b0:	2b08      	cmp	r3, #8
 800a4b2:	d110      	bne.n	800a4d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2208      	movs	r2, #8
 800a4ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f000 f838 	bl	800a532 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2208      	movs	r2, #8
 800a4c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e029      	b.n	800a52a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	69db      	ldr	r3, [r3, #28]
 800a4dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a4e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4e4:	d111      	bne.n	800a50a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a4ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	f000 f81e 	bl	800a532 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2220      	movs	r2, #32
 800a4fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2200      	movs	r2, #0
 800a502:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a506:	2303      	movs	r3, #3
 800a508:	e00f      	b.n	800a52a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	69da      	ldr	r2, [r3, #28]
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	4013      	ands	r3, r2
 800a514:	68ba      	ldr	r2, [r7, #8]
 800a516:	429a      	cmp	r2, r3
 800a518:	bf0c      	ite	eq
 800a51a:	2301      	moveq	r3, #1
 800a51c:	2300      	movne	r3, #0
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	461a      	mov	r2, r3
 800a522:	79fb      	ldrb	r3, [r7, #7]
 800a524:	429a      	cmp	r2, r3
 800a526:	d0a0      	beq.n	800a46a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3710      	adds	r7, #16
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a532:	b480      	push	{r7}
 800a534:	b095      	sub	sp, #84	@ 0x54
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a542:	e853 3f00 	ldrex	r3, [r3]
 800a546:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a54a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a54e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	461a      	mov	r2, r3
 800a556:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a558:	643b      	str	r3, [r7, #64]	@ 0x40
 800a55a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a55c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a55e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a560:	e841 2300 	strex	r3, r2, [r1]
 800a564:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d1e6      	bne.n	800a53a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	3308      	adds	r3, #8
 800a572:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a574:	6a3b      	ldr	r3, [r7, #32]
 800a576:	e853 3f00 	ldrex	r3, [r3]
 800a57a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a582:	f023 0301 	bic.w	r3, r3, #1
 800a586:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	3308      	adds	r3, #8
 800a58e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a590:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a592:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a594:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a598:	e841 2300 	strex	r3, r2, [r1]
 800a59c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d1e3      	bne.n	800a56c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d118      	bne.n	800a5de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	e853 3f00 	ldrex	r3, [r3]
 800a5b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	f023 0310 	bic.w	r3, r3, #16
 800a5c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5ca:	61bb      	str	r3, [r7, #24]
 800a5cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ce:	6979      	ldr	r1, [r7, #20]
 800a5d0:	69ba      	ldr	r2, [r7, #24]
 800a5d2:	e841 2300 	strex	r3, r2, [r1]
 800a5d6:	613b      	str	r3, [r7, #16]
   return(result);
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d1e6      	bne.n	800a5ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2220      	movs	r2, #32
 800a5e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a5f2:	bf00      	nop
 800a5f4:	3754      	adds	r7, #84	@ 0x54
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr

0800a5fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a5fe:	b480      	push	{r7}
 800a600:	b085      	sub	sp, #20
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d101      	bne.n	800a614 <HAL_UARTEx_DisableFifoMode+0x16>
 800a610:	2302      	movs	r3, #2
 800a612:	e027      	b.n	800a664 <HAL_UARTEx_DisableFifoMode+0x66>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2224      	movs	r2, #36	@ 0x24
 800a620:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f022 0201 	bic.w	r2, r2, #1
 800a63a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a642:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68fa      	ldr	r2, [r7, #12]
 800a650:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2220      	movs	r2, #32
 800a656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	3714      	adds	r7, #20
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a680:	2b01      	cmp	r3, #1
 800a682:	d101      	bne.n	800a688 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a684:	2302      	movs	r3, #2
 800a686:	e02d      	b.n	800a6e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2201      	movs	r2, #1
 800a68c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2224      	movs	r2, #36	@ 0x24
 800a694:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f022 0201 	bic.w	r2, r2, #1
 800a6ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	430a      	orrs	r2, r1
 800a6c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f84f 	bl	800a768 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	68fa      	ldr	r2, [r7, #12]
 800a6d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2220      	movs	r2, #32
 800a6d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d101      	bne.n	800a704 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a700:	2302      	movs	r3, #2
 800a702:	e02d      	b.n	800a760 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2224      	movs	r2, #36	@ 0x24
 800a710:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f022 0201 	bic.w	r2, r2, #1
 800a72a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	683a      	ldr	r2, [r7, #0]
 800a73c:	430a      	orrs	r2, r1
 800a73e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f811 	bl	800a768 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2220      	movs	r2, #32
 800a752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a774:	2b00      	cmp	r3, #0
 800a776:	d108      	bne.n	800a78a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a788:	e031      	b.n	800a7ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a78a:	2308      	movs	r3, #8
 800a78c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a78e:	2308      	movs	r3, #8
 800a790:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	0e5b      	lsrs	r3, r3, #25
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	f003 0307 	and.w	r3, r3, #7
 800a7a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	0f5b      	lsrs	r3, r3, #29
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	f003 0307 	and.w	r3, r3, #7
 800a7b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a7b2:	7bbb      	ldrb	r3, [r7, #14]
 800a7b4:	7b3a      	ldrb	r2, [r7, #12]
 800a7b6:	4911      	ldr	r1, [pc, #68]	@ (800a7fc <UARTEx_SetNbDataToProcess+0x94>)
 800a7b8:	5c8a      	ldrb	r2, [r1, r2]
 800a7ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a7be:	7b3a      	ldrb	r2, [r7, #12]
 800a7c0:	490f      	ldr	r1, [pc, #60]	@ (800a800 <UARTEx_SetNbDataToProcess+0x98>)
 800a7c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a7c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7c8:	b29a      	uxth	r2, r3
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
 800a7d2:	7b7a      	ldrb	r2, [r7, #13]
 800a7d4:	4909      	ldr	r1, [pc, #36]	@ (800a7fc <UARTEx_SetNbDataToProcess+0x94>)
 800a7d6:	5c8a      	ldrb	r2, [r1, r2]
 800a7d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a7dc:	7b7a      	ldrb	r2, [r7, #13]
 800a7de:	4908      	ldr	r1, [pc, #32]	@ (800a800 <UARTEx_SetNbDataToProcess+0x98>)
 800a7e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a7e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a7ee:	bf00      	nop
 800a7f0:	3714      	adds	r7, #20
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	080146a8 	.word	0x080146a8
 800a800:	080146b0 	.word	0x080146b0

0800a804 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f043 0201 	orr.w	r2, r3, #1
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	601a      	str	r2, [r3, #0]
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <LL_DLYB_Disable>:
  * @param  DLYBx DLYB Instance.
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Disable(DLYB_TypeDef *DLYBx)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(DLYBx->CR, DLYB_CR_DEN);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f023 0201 	bic.w	r2, r3, #1
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	601a      	str	r2, [r3, #0]
}
 800a838:	bf00      	nop
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af02      	add	r7, sp, #8
 800a84a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a84c:	2300      	movs	r3, #0
 800a84e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800a850:	f7f8 fe46 	bl	80034e0 <HAL_GetTick>
 800a854:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d102      	bne.n	800a862 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	73fb      	strb	r3, [r7, #15]
 800a860:	e0bc      	b.n	800a9dc <HAL_XSPI_Init+0x198>
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a60      	ldr	r2, [pc, #384]	@ (800a9e8 <HAL_XSPI_Init+0x1a4>)
 800a868:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a874:	2b00      	cmp	r3, #0
 800a876:	f040 80b1 	bne.w	800a9dc <HAL_XSPI_Init+0x198>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f7f6 fafa 	bl	8000e74 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 800a880:	f241 3188 	movw	r1, #5000	@ 0x1388
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 fb6c 	bl	800af62 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	689a      	ldr	r2, [r3, #8]
 800a890:	4b56      	ldr	r3, [pc, #344]	@ (800a9ec <HAL_XSPI_Init+0x1a8>)
 800a892:	4013      	ands	r3, r2
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	68d1      	ldr	r1, [r2, #12]
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	6912      	ldr	r2, [r2, #16]
 800a89c:	0412      	lsls	r2, r2, #16
 800a89e:	4311      	orrs	r1, r2
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	6952      	ldr	r2, [r2, #20]
 800a8a4:	3a01      	subs	r2, #1
 800a8a6:	0212      	lsls	r2, r2, #8
 800a8a8:	4311      	orrs	r1, r2
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	69d2      	ldr	r2, [r2, #28]
 800a8ae:	4311      	orrs	r1, r2
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	6812      	ldr	r2, [r2, #0]
 800a8b4:	430b      	orrs	r3, r1
 800a8b6:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a4a      	ldr	r2, [pc, #296]	@ (800a9e8 <HAL_XSPI_Init+0x1a4>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d004      	beq.n	800a8cc <HAL_XSPI_Init+0x88>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a4a      	ldr	r2, [pc, #296]	@ (800a9f0 <HAL_XSPI_Init+0x1ac>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d10a      	bne.n	800a8e2 <HAL_XSPI_Init+0x9e>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	f023 0108 	bic.w	r1, r3, #8
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	430a      	orrs	r2, r1
 800a8e0:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6a1a      	ldr	r2, [r3, #32]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	430a      	orrs	r2, r1
 800a8f6:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a906:	041a      	lsls	r2, r3, #16
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	430a      	orrs	r2, r1
 800a90e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a918:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	3b01      	subs	r3, #1
 800a92a:	021a      	lsls	r2, r3, #8
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	430a      	orrs	r2, r1
 800a932:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a938:	9300      	str	r3, [sp, #0]
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	2200      	movs	r2, #0
 800a93e:	2120      	movs	r1, #32
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 fb9b 	bl	800b07c <XSPI_WaitFlagStateUntilTimeout>
 800a946:	4603      	mov	r3, r0
 800a948:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800a94a:	7bfb      	ldrb	r3, [r7, #15]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d145      	bne.n	800a9dc <HAL_XSPI_Init+0x198>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	430a      	orrs	r2, r1
 800a964:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	689a      	ldr	r2, [r3, #8]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	430a      	orrs	r2, r1
 800a97a:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a984:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a990:	431a      	orrs	r2, r3
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	430a      	orrs	r2, r1
 800a998:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f042 0201 	orr.w	r2, r2, #1
 800a9aa:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	699b      	ldr	r3, [r3, #24]
 800a9b0:	2b02      	cmp	r3, #2
 800a9b2:	d107      	bne.n	800a9c4 <HAL_XSPI_Init+0x180>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	689a      	ldr	r2, [r3, #8]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f042 0202 	orr.w	r2, r2, #2
 800a9c2:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a9cc:	d103      	bne.n	800a9d6 <HAL_XSPI_Init+0x192>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	651a      	str	r2, [r3, #80]	@ 0x50
 800a9d4:	e002      	b.n	800a9dc <HAL_XSPI_Init+0x198>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2202      	movs	r2, #2
 800a9da:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
    }
  }
  return status;
 800a9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	47001400 	.word	0x47001400
 800a9ec:	f8e0c0fc 	.word	0xf8e0c0fc
 800a9f0:	57001400 	.word	0x57001400

0800a9f4 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *const pCmd, uint32_t Timeout)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b08a      	sub	sp, #40	@ 0x28
 800a9f8:	af02      	add	r7, sp, #8
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800aa00:	f7f8 fd6e 	bl	80034e0 <HAL_GetTick>
 800aa04:	61b8      	str	r0, [r7, #24]
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  assert_param(IS_XSPI_DATA_MODE(pCmd->DataMode));

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa0a:	2b00      	cmp	r3, #0

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
  assert_param(IS_XSPI_SIOO_MODE(pCmd->SIOOMode));

  /* Check the state of the driver */
  state = hxspi->State;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa10:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	d104      	bne.n	800aa22 <HAL_XSPI_Command+0x2e>
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aa20:	d115      	bne.n	800aa4e <HAL_XSPI_Command+0x5a>
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	2b14      	cmp	r3, #20
 800aa26:	d107      	bne.n	800aa38 <HAL_XSPI_Command+0x44>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d00e      	beq.n	800aa4e <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 800aa34:	2b03      	cmp	r3, #3
 800aa36:	d00a      	beq.n	800aa4e <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	2b24      	cmp	r3, #36	@ 0x24
 800aa3c:	d15e      	bne.n	800aafc <HAL_XSPI_Command+0x108>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d003      	beq.n	800aa4e <HAL_XSPI_Command+0x5a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 800aa4a:	2b03      	cmp	r3, #3
 800aa4c:	d156      	bne.n	800aafc <HAL_XSPI_Command+0x108>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	9300      	str	r3, [sp, #0]
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	2200      	movs	r2, #0
 800aa56:	2120      	movs	r1, #32
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	f000 fb0f 	bl	800b07c <XSPI_WaitFlagStateUntilTimeout>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800aa62:	7ffb      	ldrb	r3, [r7, #31]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d146      	bne.n	800aaf6 <HAL_XSPI_Command+0x102>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
 800aa6e:	68b9      	ldr	r1, [r7, #8]
 800aa70:	68f8      	ldr	r0, [r7, #12]
 800aa72:	f000 fb39 	bl	800b0e8 <XSPI_ConfigCmd>
 800aa76:	4603      	mov	r3, r0
 800aa78:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800aa7a:	7ffb      	ldrb	r3, [r7, #31]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d143      	bne.n	800ab08 <HAL_XSPI_Command+0x114>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10e      	bne.n	800aaa6 <HAL_XSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until BUSY flag is reset to go back in idle state. */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	9300      	str	r3, [sp, #0]
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	2120      	movs	r1, #32
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f000 faf2 	bl	800b07c <XSPI_WaitFlagStateUntilTimeout>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	77fb      	strb	r3, [r7, #31]

          /* Clear TC flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2202      	movs	r2, #2
 800aaa2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 800aaa4:	e030      	b.n	800ab08 <HAL_XSPI_Command+0x114>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d103      	bne.n	800aab6 <HAL_XSPI_Command+0xc2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2204      	movs	r2, #4
 800aab2:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800aab4:	e028      	b.n	800ab08 <HAL_XSPI_Command+0x114>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d10b      	bne.n	800aad6 <HAL_XSPI_Command+0xe2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aac2:	2b24      	cmp	r3, #36	@ 0x24
 800aac4:	d103      	bne.n	800aace <HAL_XSPI_Command+0xda>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2204      	movs	r2, #4
 800aaca:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800aacc:	e01c      	b.n	800ab08 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2214      	movs	r2, #20
 800aad2:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800aad4:	e018      	b.n	800ab08 <HAL_XSPI_Command+0x114>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2b02      	cmp	r3, #2
 800aadc:	d114      	bne.n	800ab08 <HAL_XSPI_Command+0x114>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aae2:	2b14      	cmp	r3, #20
 800aae4:	d103      	bne.n	800aaee <HAL_XSPI_Command+0xfa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2204      	movs	r2, #4
 800aaea:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800aaec:	e00c      	b.n	800ab08 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2224      	movs	r2, #36	@ 0x24
 800aaf2:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800aaf4:	e008      	b.n	800ab08 <HAL_XSPI_Command+0x114>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
 800aaf6:	2302      	movs	r3, #2
 800aaf8:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 800aafa:	e005      	b.n	800ab08 <HAL_XSPI_Command+0x114>
    }
  }
  else
  {
    status = HAL_ERROR;
 800aafc:	2301      	movs	r3, #1
 800aafe:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2210      	movs	r2, #16
 800ab04:	655a      	str	r2, [r3, #84]	@ 0x54
 800ab06:	e000      	b.n	800ab0a <HAL_XSPI_Command+0x116>
    if (status == HAL_OK)
 800ab08:	bf00      	nop
  }

  return status;
 800ab0a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3720      	adds	r7, #32
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, const uint8_t *pData, uint32_t Timeout)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b08a      	sub	sp, #40	@ 0x28
 800ab18:	af02      	add	r7, sp, #8
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ab20:	f7f8 fcde 	bl	80034e0 <HAL_GetTick>
 800ab24:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	3350      	adds	r3, #80	@ 0x50
 800ab2c:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d105      	bne.n	800ab40 <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800ab34:	2301      	movs	r3, #1
 800ab36:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2208      	movs	r2, #8
 800ab3c:	655a      	str	r2, [r3, #84]	@ 0x54
 800ab3e:	e057      	b.n	800abf0 <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab44:	2b04      	cmp	r3, #4
 800ab46:	d14e      	bne.n	800abe6 <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab4e:	1c5a      	adds	r2, r3, #1
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->XferSize  = hxspi->XferCount;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	641a      	str	r2, [r3, #64]	@ 0x40
      hxspi->pBuffPtr  = (uint8_t *)pData;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	68ba      	ldr	r2, [r7, #8]
 800ab60:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800ab70:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	9300      	str	r3, [sp, #0]
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	2201      	movs	r2, #1
 800ab7a:	2104      	movs	r1, #4
 800ab7c:	68f8      	ldr	r0, [r7, #12]
 800ab7e:	f000 fa7d 	bl	800b07c <XSPI_WaitFlagStateUntilTimeout>
 800ab82:	4603      	mov	r3, r0
 800ab84:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800ab86:	7ffb      	ldrb	r3, [r7, #31]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d113      	bne.n	800abb4 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab90:	781a      	ldrb	r2, [r3, #0]
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab9a:	1c5a      	adds	r2, r3, #1
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	63da      	str	r2, [r3, #60]	@ 0x3c
        hxspi->XferCount--;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aba4:	1e5a      	subs	r2, r3, #1
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	645a      	str	r2, [r3, #68]	@ 0x44
      } while (hxspi->XferCount > 0U);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1df      	bne.n	800ab72 <HAL_XSPI_Transmit+0x5e>
 800abb2:	e000      	b.n	800abb6 <HAL_XSPI_Transmit+0xa2>
          break;
 800abb4:	bf00      	nop

      if (status == HAL_OK)
 800abb6:	7ffb      	ldrb	r3, [r7, #31]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d119      	bne.n	800abf0 <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	9300      	str	r3, [sp, #0]
 800abc0:	69bb      	ldr	r3, [r7, #24]
 800abc2:	2201      	movs	r2, #1
 800abc4:	2102      	movs	r1, #2
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	f000 fa58 	bl	800b07c <XSPI_WaitFlagStateUntilTimeout>
 800abcc:	4603      	mov	r3, r0
 800abce:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800abd0:	7ffb      	ldrb	r3, [r7, #31]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d10c      	bne.n	800abf0 <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2202      	movs	r2, #2
 800abdc:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2202      	movs	r2, #2
 800abe2:	651a      	str	r2, [r3, #80]	@ 0x50
 800abe4:	e004      	b.n	800abf0 <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2210      	movs	r2, #16
 800abee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  return status;
 800abf0:	7ffb      	ldrb	r3, [r7, #31]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3720      	adds	r7, #32
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b08c      	sub	sp, #48	@ 0x30
 800abfe:	af02      	add	r7, sp, #8
 800ac00:	60f8      	str	r0, [r7, #12]
 800ac02:	60b9      	str	r1, [r7, #8]
 800ac04:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ac06:	f7f8 fc6b 	bl	80034e0 <HAL_GetTick>
 800ac0a:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	3350      	adds	r3, #80	@ 0x50
 800ac12:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac1a:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800ac24:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d106      	bne.n	800ac3a <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2208      	movs	r2, #8
 800ac36:	655a      	str	r2, [r3, #84]	@ 0x54
 800ac38:	e07c      	b.n	800ad34 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac3e:	2b04      	cmp	r3, #4
 800ac40:	d172      	bne.n	800ad28 <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac48:	1c5a      	adds	r2, r3, #1
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->XferSize  = hxspi->XferCount;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	641a      	str	r2, [r3, #64]	@ 0x40
      hxspi->pBuffPtr  = pData;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	68ba      	ldr	r2, [r7, #8]
 800ac5a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800ac6e:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ac78:	d104      	bne.n	800ac84 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	69ba      	ldr	r2, [r7, #24]
 800ac80:	649a      	str	r2, [r3, #72]	@ 0x48
 800ac82:	e011      	b.n	800aca8 <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800ac8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d004      	beq.n	800ac9e <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	69ba      	ldr	r2, [r7, #24]
 800ac9a:	649a      	str	r2, [r3, #72]	@ 0x48
 800ac9c:	e004      	b.n	800aca8 <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	697a      	ldr	r2, [r7, #20]
 800aca4:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	9300      	str	r3, [sp, #0]
 800acac:	6a3b      	ldr	r3, [r7, #32]
 800acae:	2201      	movs	r2, #1
 800acb0:	2106      	movs	r1, #6
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f000 f9e2 	bl	800b07c <XSPI_WaitFlagStateUntilTimeout>
 800acb8:	4603      	mov	r3, r0
 800acba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 800acbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d114      	bne.n	800acf0 <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acca:	69fa      	ldr	r2, [r7, #28]
 800accc:	7812      	ldrb	r2, [r2, #0]
 800acce:	b2d2      	uxtb	r2, r2
 800acd0:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acd6:	1c5a      	adds	r2, r3, #1
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	63da      	str	r2, [r3, #60]	@ 0x3c
        hxspi->XferCount--;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ace0:	1e5a      	subs	r2, r3, #1
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	645a      	str	r2, [r3, #68]	@ 0x44
      } while (hxspi->XferCount > 0U);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acea:	2b00      	cmp	r3, #0
 800acec:	d1dc      	bne.n	800aca8 <HAL_XSPI_Receive+0xae>
 800acee:	e000      	b.n	800acf2 <HAL_XSPI_Receive+0xf8>
          break;
 800acf0:	bf00      	nop

      if (status == HAL_OK)
 800acf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d11c      	bne.n	800ad34 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	6a3b      	ldr	r3, [r7, #32]
 800ad00:	2201      	movs	r2, #1
 800ad02:	2102      	movs	r1, #2
 800ad04:	68f8      	ldr	r0, [r7, #12]
 800ad06:	f000 f9b9 	bl	800b07c <XSPI_WaitFlagStateUntilTimeout>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 800ad10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d10d      	bne.n	800ad34 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	2202      	movs	r2, #2
 800ad1e:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2202      	movs	r2, #2
 800ad24:	651a      	str	r2, [r3, #80]	@ 0x50
 800ad26:	e005      	b.n	800ad34 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2210      	movs	r2, #16
 800ad32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  return status;
 800ad34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3728      	adds	r7, #40	@ 0x28
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, XSPI_AutoPollingTypeDef *const pCfg,
                                       uint32_t Timeout)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b08a      	sub	sp, #40	@ 0x28
 800ad44:	af02      	add	r7, sp, #8
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ad4c:	f7f8 fbc8 	bl	80034e0 <HAL_GetTick>
 800ad50:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hxspi->Instance->AR;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad58:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hxspi->Instance->IR;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800ad62:	613b      	str	r3, [r7, #16]
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad68:	2b04      	cmp	r3, #4
 800ad6a:	d167      	bne.n	800ae3c <HAL_XSPI_AutoPolling+0xfc>
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad74:	d162      	bne.n	800ae3c <HAL_XSPI_AutoPolling+0xfc>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	9300      	str	r3, [sp, #0]
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	2120      	movs	r1, #32
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f000 f97b 	bl	800b07c <XSPI_WaitFlagStateUntilTimeout>
 800ad86:	4603      	mov	r3, r0
 800ad88:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800ad8a:	7ffb      	ldrb	r3, [r7, #31]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d152      	bne.n	800ae36 <HAL_XSPI_AutoPolling+0xf6>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	6812      	ldr	r2, [r2, #0]
 800ad98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	68ba      	ldr	r2, [r7, #8]
 800ada2:	6852      	ldr	r2, [r2, #4]
 800ada4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	68ba      	ldr	r2, [r7, #8]
 800adae:	6912      	ldr	r2, [r2, #16]
 800adb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	6899      	ldr	r1, [r3, #8]
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	430b      	orrs	r3, r1
 800adc8:	431a      	orrs	r2, r3
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800add2:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800addc:	d104      	bne.n	800ade8 <HAL_XSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	697a      	ldr	r2, [r7, #20]
 800ade4:	649a      	str	r2, [r3, #72]	@ 0x48
 800ade6:	e011      	b.n	800ae0c <HAL_XSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800adf0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d004      	beq.n	800ae02 <HAL_XSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	697a      	ldr	r2, [r7, #20]
 800adfe:	649a      	str	r2, [r3, #72]	@ 0x48
 800ae00:	e004      	b.n	800ae0c <HAL_XSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	693a      	ldr	r2, [r7, #16]
 800ae08:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	9300      	str	r3, [sp, #0]
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	2201      	movs	r2, #1
 800ae14:	2108      	movs	r1, #8
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f000 f930 	bl	800b07c <XSPI_WaitFlagStateUntilTimeout>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800ae20:	7ffb      	ldrb	r3, [r7, #31]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d110      	bne.n	800ae48 <HAL_XSPI_AutoPolling+0x108>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2208      	movs	r2, #8
 800ae2c:	625a      	str	r2, [r3, #36]	@ 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2202      	movs	r2, #2
 800ae32:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800ae34:	e008      	b.n	800ae48 <HAL_XSPI_AutoPolling+0x108>
      }
    }
    else
    {
      status = HAL_BUSY;
 800ae36:	2302      	movs	r3, #2
 800ae38:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 800ae3a:	e005      	b.n	800ae48 <HAL_XSPI_AutoPolling+0x108>
    }
  }
  else
  {
    status = HAL_ERROR;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2210      	movs	r2, #16
 800ae44:	655a      	str	r2, [r3, #84]	@ 0x54
 800ae46:	e000      	b.n	800ae4a <HAL_XSPI_AutoPolling+0x10a>
    if (status == HAL_OK)
 800ae48:	bf00      	nop
  }

  return status;
 800ae4a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3720      	adds	r7, #32
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <HAL_XSPI_Abort>:
  * @brief  Abort the current operation, return to the indirect mode.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Abort(XSPI_HandleTypeDef *hxspi)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af02      	add	r7, sp, #8
 800ae5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800ae60:	f7f8 fb3e 	bl	80034e0 <HAL_GetTick>
 800ae64:	60b8      	str	r0, [r7, #8]

  /* Check if the state is not in reset state */
  if (hxspi->State != HAL_XSPI_STATE_RESET)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d06f      	beq.n	800af4e <HAL_XSPI_Abort+0xfa>
  {
    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f003 0304 	and.w	r3, r3, #4
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d021      	beq.n	800aec0 <HAL_XSPI_Abort+0x6c>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f022 0204 	bic.w	r2, r2, #4
 800ae8a:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmatx);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7f8 fcb9 	bl	8003808 <HAL_DMA_Abort>
 800ae96:	4603      	mov	r3, r0
 800ae98:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 800ae9a:	7bfb      	ldrb	r3, [r7, #15]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d002      	beq.n	800aea6 <HAL_XSPI_Abort+0x52>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2204      	movs	r2, #4
 800aea4:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Disable the DMA receive on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmarx);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7f8 fcac 	bl	8003808 <HAL_DMA_Abort>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 800aeb4:	7bfb      	ldrb	r3, [r7, #15]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d002      	beq.n	800aec0 <HAL_XSPI_Abort+0x6c>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2204      	movs	r2, #4
 800aebe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	6a1b      	ldr	r3, [r3, #32]
 800aec6:	f003 0320 	and.w	r3, r3, #32
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d033      	beq.n	800af36 <HAL_XSPI_Abort+0xe2>
    {
      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f042 0202 	orr.w	r2, r2, #2
 800aedc:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, hxspi->Timeout);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	2201      	movs	r2, #1
 800aee8:	2102      	movs	r1, #2
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 f8c6 	bl	800b07c <XSPI_WaitFlagStateUntilTimeout>
 800aef0:	4603      	mov	r3, r0
 800aef2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800aef4:	7bfb      	ldrb	r3, [r7, #15]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d12e      	bne.n	800af58 <HAL_XSPI_Abort+0x104>
      {
        /* Clear transfer complete flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2202      	movs	r2, #2
 800af00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af06:	9300      	str	r3, [sp, #0]
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	2200      	movs	r2, #0
 800af0c:	2120      	movs	r1, #32
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 f8b4 	bl	800b07c <XSPI_WaitFlagStateUntilTimeout>
 800af14:	4603      	mov	r3, r0
 800af16:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
 800af18:	7bfb      	ldrb	r3, [r7, #15]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d11c      	bne.n	800af58 <HAL_XSPI_Abort+0x104>
        {
          /* Return to indirect mode */
          CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800af2c:	601a      	str	r2, [r3, #0]

          hxspi->State = HAL_XSPI_STATE_READY;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2202      	movs	r2, #2
 800af32:	651a      	str	r2, [r3, #80]	@ 0x50
 800af34:	e010      	b.n	800af58 <HAL_XSPI_Abort+0x104>
      }
    }
    else
    {
      /* Return to indirect mode */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800af44:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2202      	movs	r2, #2
 800af4a:	651a      	str	r2, [r3, #80]	@ 0x50
 800af4c:	e004      	b.n	800af58 <HAL_XSPI_Abort+0x104>
    }
  }
  else
  {
    status = HAL_ERROR;
 800af4e:	2301      	movs	r3, #1
 800af50:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2210      	movs	r2, #16
 800af56:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  return status;
 800af58:	7bfb      	ldrb	r3, [r7, #15]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3710      	adds	r7, #16
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 800af62:	b480      	push	{r7}
 800af64:	b083      	sub	sp, #12
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
 800af6a:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	683a      	ldr	r2, [r7, #0]
 800af70:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <HAL_XSPI_DLYB_SetConfig>:
  * @param  hxspi   : XSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_XSPI_DLYB_SetConfig(XSPI_HandleTypeDef *hxspi, HAL_XSPI_DLYB_CfgTypeDef  *const pdlyb_cfg)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800af8a:	2301      	movs	r3, #1
 800af8c:	73fb      	strb	r3, [r7, #15]

  /* Enable XSPI Free Running Clock (mandatory) */
  SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	689a      	ldr	r2, [r3, #8]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f042 0202 	orr.w	r2, r2, #2
 800af9c:	609a      	str	r2, [r3, #8]

  /* Update XSPI state */
  hxspi->State = HAL_XSPI_STATE_BUSY_CMD;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2208      	movs	r2, #8
 800afa2:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hxspi->Instance == OCTOSPI1)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a11      	ldr	r2, [pc, #68]	@ (800aff0 <HAL_XSPI_DLYB_SetConfig+0x70>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d109      	bne.n	800afc2 <HAL_XSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 800afae:	4811      	ldr	r0, [pc, #68]	@ (800aff4 <HAL_XSPI_DLYB_SetConfig+0x74>)
 800afb0:	f7ff fc28 	bl	800a804 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 800afb4:	6839      	ldr	r1, [r7, #0]
 800afb6:	480f      	ldr	r0, [pc, #60]	@ (800aff4 <HAL_XSPI_DLYB_SetConfig+0x74>)
 800afb8:	f000 fa3e 	bl	800b438 <LL_DLYB_SetDelay>
    status = HAL_OK;
 800afbc:	2300      	movs	r3, #0
 800afbe:	73fb      	strb	r3, [r7, #15]
 800afc0:	e005      	b.n	800afce <HAL_XSPI_DLYB_SetConfig+0x4e>
  }
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afc6:	f043 0208 	orr.w	r2, r3, #8
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Abort the current XSPI operation if exist */
  (void)HAL_XSPI_Abort(hxspi);
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f7ff ff40 	bl	800ae54 <HAL_XSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	689a      	ldr	r2, [r3, #8]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f022 0202 	bic.w	r2, r2, #2
 800afe2:	609a      	str	r2, [r3, #8]

  return status;
 800afe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	47001400 	.word	0x47001400
 800aff4:	4600f000 	.word	0x4600f000

0800aff8 <HAL_XSPI_DLYB_GetClockPeriod>:
  * @param  hxspi   : XSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_XSPI_DLYB_GetClockPeriod(XSPI_HandleTypeDef *hxspi, HAL_XSPI_DLYB_CfgTypeDef  *const pdlyb_cfg)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b002:	2301      	movs	r3, #1
 800b004:	73fb      	strb	r3, [r7, #15]

  /* Enable XSPI Free Running Clock (mandatory) */
  SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	689a      	ldr	r2, [r3, #8]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f042 0202 	orr.w	r2, r2, #2
 800b014:	609a      	str	r2, [r3, #8]

  /* Update XSPI state */
  hxspi->State = HAL_XSPI_STATE_BUSY_CMD;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2208      	movs	r2, #8
 800b01a:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hxspi->Instance == OCTOSPI1)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a14      	ldr	r2, [pc, #80]	@ (800b074 <HAL_XSPI_DLYB_GetClockPeriod+0x7c>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d10f      	bne.n	800b046 <HAL_XSPI_DLYB_GetClockPeriod+0x4e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 800b026:	4814      	ldr	r0, [pc, #80]	@ (800b078 <HAL_XSPI_DLYB_GetClockPeriod+0x80>)
 800b028:	f7ff fbec 	bl	800a804 <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI1, pdlyb_cfg) == (uint32_t)SUCCESS)
 800b02c:	6839      	ldr	r1, [r7, #0]
 800b02e:	4812      	ldr	r0, [pc, #72]	@ (800b078 <HAL_XSPI_DLYB_GetClockPeriod+0x80>)
 800b030:	f000 fa22 	bl	800b478 <LL_DLYB_GetClockPeriod>
 800b034:	4603      	mov	r3, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d101      	bne.n	800b03e <HAL_XSPI_DLYB_GetClockPeriod+0x46>
    {
      status = HAL_OK;
 800b03a:	2300      	movs	r3, #0
 800b03c:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI1);
 800b03e:	480e      	ldr	r0, [pc, #56]	@ (800b078 <HAL_XSPI_DLYB_GetClockPeriod+0x80>)
 800b040:	f7ff fbf0 	bl	800a824 <LL_DLYB_Disable>
 800b044:	e005      	b.n	800b052 <HAL_XSPI_DLYB_GetClockPeriod+0x5a>
  }
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b04a:	f043 0208 	orr.w	r2, r3, #8
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Abort the current XSPI operation if exist */
  (void)HAL_XSPI_Abort(hxspi);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f7ff fefe 	bl	800ae54 <HAL_XSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	689a      	ldr	r2, [r3, #8]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f022 0202 	bic.w	r2, r2, #2
 800b066:	609a      	str	r2, [r3, #8]

  return status;
 800b068:	7bfb      	ldrb	r3, [r7, #15]
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	47001400 	.word	0x47001400
 800b078:	4600f000 	.word	0x4600f000

0800b07c <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	603b      	str	r3, [r7, #0]
 800b088:	4613      	mov	r3, r2
 800b08a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 800b08c:	e019      	b.n	800b0c2 <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b094:	d015      	beq.n	800b0c2 <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b096:	f7f8 fa23 	bl	80034e0 <HAL_GetTick>
 800b09a:	4602      	mov	r2, r0
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	1ad3      	subs	r3, r2, r3
 800b0a0:	69ba      	ldr	r2, [r7, #24]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d302      	bcc.n	800b0ac <XSPI_WaitFlagStateUntilTimeout+0x30>
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d10a      	bne.n	800b0c2 <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2202      	movs	r2, #2
 800b0b0:	651a      	str	r2, [r3, #80]	@ 0x50
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0b6:	f043 0201 	orr.w	r2, r3, #1
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_TIMEOUT;
 800b0be:	2303      	movs	r3, #3
 800b0c0:	e00e      	b.n	800b0e0 <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	6a1a      	ldr	r2, [r3, #32]
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	4013      	ands	r3, r2
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	bf14      	ite	ne
 800b0d0:	2301      	movne	r3, #1
 800b0d2:	2300      	moveq	r3, #0
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	79fb      	ldrb	r3, [r7, #7]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d1d7      	bne.n	800b08e <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3710      	adds	r7, #16
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *pCmd)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b089      	sub	sp, #36	@ 0x24
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800b104:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10a      	bne.n	800b124 <XSPI_ConfigCmd+0x3c>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	685a      	ldr	r2, [r3, #4]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	430a      	orrs	r2, r1
 800b122:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2b02      	cmp	r3, #2
 800b12a:	d114      	bne.n	800b156 <XSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800b134:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800b13e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800b148:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800b152:	60fb      	str	r3, [r7, #12]
 800b154:	e02c      	b.n	800b1b0 <XSPI_ConfigCmd+0xc8>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2b03      	cmp	r3, #3
 800b15c:	d114      	bne.n	800b188 <XSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800b166:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800b170:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b17a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800b184:	60fb      	str	r3, [r7, #12]
 800b186:	e013      	b.n	800b1b0 <XSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800b190:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800b19a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800b1a4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800b1ae:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (pCmd->DQSMode | pCmd->SIOOMode);
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1b8:	431a      	orrs	r2, r3
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	601a      	str	r2, [r3, #0]

  /* Workaround for Erratasheet: Memory-mapped write error response when DQS output is disabled */
  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	d105      	bne.n	800b1d2 <XSPI_ConfigCmd+0xea>
  {
    /* When doing memory-mapped writes, set the DQSE bit of the OCTOSPI_WCCR register,
       even for memories that have no DQS pin. */
    SET_BIT((*ccr_reg), XSPI_CCR_DQSE);
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d012      	beq.n	800b200 <XSPI_ConfigCmd+0x118>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1f2:	4319      	orrs	r1, r3
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1f8:	430b      	orrs	r3, r1
 800b1fa:	431a      	orrs	r2, r3
 800b1fc:	69bb      	ldr	r3, [r7, #24]
 800b1fe:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f023 021f 	bic.w	r2, r3, #31
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b20c:	431a      	orrs	r2, r3
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b216:	2b00      	cmp	r3, #0
 800b218:	d009      	beq.n	800b22e <XSPI_ConfigCmd+0x146>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d105      	bne.n	800b22e <XSPI_ConfigCmd+0x146>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	3a01      	subs	r2, #1
 800b22c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b232:	2b00      	cmp	r3, #0
 800b234:	d01e      	beq.n	800b274 <XSPI_ConfigCmd+0x18c>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b23a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b23e:	d10a      	bne.n	800b256 <XSPI_ConfigCmd+0x16e>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800b250:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 800b254:	e00e      	b.n	800b274 <XSPI_ConfigCmd+0x18c>
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b25a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b25e:	d109      	bne.n	800b274 <XSPI_ConfigCmd+0x18c>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800b270:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f000 8099 	beq.w	800b3b0 <XSPI_ConfigCmd+0x2c8>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	69db      	ldr	r3, [r3, #28]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d055      	beq.n	800b332 <XSPI_ConfigCmd+0x24a>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d01e      	beq.n	800b2cc <XSPI_ConfigCmd+0x1e4>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	4b68      	ldr	r3, [pc, #416]	@ (800b434 <XSPI_ConfigCmd+0x34c>)
 800b294:	4013      	ands	r3, r2
 800b296:	683a      	ldr	r2, [r7, #0]
 800b298:	68d1      	ldr	r1, [r2, #12]
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	6952      	ldr	r2, [r2, #20]
 800b29e:	4311      	orrs	r1, r2
 800b2a0:	683a      	ldr	r2, [r7, #0]
 800b2a2:	6912      	ldr	r2, [r2, #16]
 800b2a4:	4311      	orrs	r1, r2
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	69d2      	ldr	r2, [r2, #28]
 800b2aa:	4311      	orrs	r1, r2
 800b2ac:	683a      	ldr	r2, [r7, #0]
 800b2ae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b2b0:	4311      	orrs	r1, r2
 800b2b2:	683a      	ldr	r2, [r7, #0]
 800b2b4:	6a12      	ldr	r2, [r2, #32]
 800b2b6:	4311      	orrs	r1, r2
 800b2b8:	683a      	ldr	r2, [r7, #0]
 800b2ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b2bc:	4311      	orrs	r1, r2
 800b2be:	683a      	ldr	r2, [r7, #0]
 800b2c0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b2c2:	430a      	orrs	r2, r1
 800b2c4:	431a      	orrs	r2, r3
 800b2c6:	69bb      	ldr	r3, [r7, #24]
 800b2c8:	601a      	str	r2, [r3, #0]
 800b2ca:	e028      	b.n	800b31e <XSPI_ConfigCmd+0x236>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b2d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b2d8:	683a      	ldr	r2, [r7, #0]
 800b2da:	68d1      	ldr	r1, [r2, #12]
 800b2dc:	683a      	ldr	r2, [r7, #0]
 800b2de:	6952      	ldr	r2, [r2, #20]
 800b2e0:	4311      	orrs	r1, r2
 800b2e2:	683a      	ldr	r2, [r7, #0]
 800b2e4:	6912      	ldr	r2, [r2, #16]
 800b2e6:	4311      	orrs	r1, r2
 800b2e8:	683a      	ldr	r2, [r7, #0]
 800b2ea:	69d2      	ldr	r2, [r2, #28]
 800b2ec:	4311      	orrs	r1, r2
 800b2ee:	683a      	ldr	r2, [r7, #0]
 800b2f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b2f2:	4311      	orrs	r1, r2
 800b2f4:	683a      	ldr	r2, [r7, #0]
 800b2f6:	6a12      	ldr	r2, [r2, #32]
 800b2f8:	430a      	orrs	r2, r1
 800b2fa:	431a      	orrs	r2, r3
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b304:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b308:	d109      	bne.n	800b31e <XSPI_ConfigCmd+0x236>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 800b30e:	2b08      	cmp	r3, #8
 800b310:	d105      	bne.n	800b31e <XSPI_ConfigCmd+0x236>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	689a      	ldr	r2, [r3, #8]
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	683a      	ldr	r2, [r7, #0]
 800b32c:	6992      	ldr	r2, [r2, #24]
 800b32e:	649a      	str	r2, [r3, #72]	@ 0x48
 800b330:	e078      	b.n	800b424 <XSPI_ConfigCmd+0x33c>
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b336:	2b00      	cmp	r3, #0
 800b338:	d017      	beq.n	800b36a <XSPI_ConfigCmd+0x282>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800b342:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b346:	683a      	ldr	r2, [r7, #0]
 800b348:	68d1      	ldr	r1, [r2, #12]
 800b34a:	683a      	ldr	r2, [r7, #0]
 800b34c:	6952      	ldr	r2, [r2, #20]
 800b34e:	4311      	orrs	r1, r2
 800b350:	683a      	ldr	r2, [r7, #0]
 800b352:	6912      	ldr	r2, [r2, #16]
 800b354:	4311      	orrs	r1, r2
 800b356:	683a      	ldr	r2, [r7, #0]
 800b358:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b35a:	4311      	orrs	r1, r2
 800b35c:	683a      	ldr	r2, [r7, #0]
 800b35e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b360:	430a      	orrs	r2, r1
 800b362:	431a      	orrs	r2, r3
 800b364:	69bb      	ldr	r3, [r7, #24]
 800b366:	601a      	str	r2, [r3, #0]
 800b368:	e01d      	b.n	800b3a6 <XSPI_ConfigCmd+0x2be>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	68d9      	ldr	r1, [r3, #12]
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	695b      	ldr	r3, [r3, #20]
 800b37a:	4319      	orrs	r1, r3
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	430b      	orrs	r3, r1
 800b382:	431a      	orrs	r2, r3
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b38c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b390:	d109      	bne.n	800b3a6 <XSPI_ConfigCmd+0x2be>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 800b396:	2b08      	cmp	r3, #8
 800b398:	d105      	bne.n	800b3a6 <XSPI_ConfigCmd+0x2be>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	689a      	ldr	r2, [r3, #8]
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	601a      	str	r2, [r3, #0]
 800b3ae:	e039      	b.n	800b424 <XSPI_ConfigCmd+0x33c>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	69db      	ldr	r3, [r3, #28]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d030      	beq.n	800b41a <XSPI_ConfigCmd+0x332>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d017      	beq.n	800b3f0 <XSPI_ConfigCmd+0x308>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800b3c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b3cc:	683a      	ldr	r2, [r7, #0]
 800b3ce:	69d1      	ldr	r1, [r2, #28]
 800b3d0:	683a      	ldr	r2, [r7, #0]
 800b3d2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b3d4:	4311      	orrs	r1, r2
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	6a12      	ldr	r2, [r2, #32]
 800b3da:	4311      	orrs	r1, r2
 800b3dc:	683a      	ldr	r2, [r7, #0]
 800b3de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b3e0:	4311      	orrs	r1, r2
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b3e6:	430a      	orrs	r2, r1
 800b3e8:	431a      	orrs	r2, r3
 800b3ea:	69bb      	ldr	r3, [r7, #24]
 800b3ec:	601a      	str	r2, [r3, #0]
 800b3ee:	e00e      	b.n	800b40e <XSPI_ConfigCmd+0x326>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	69d9      	ldr	r1, [r3, #28]
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b400:	4319      	orrs	r1, r3
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	6a1b      	ldr	r3, [r3, #32]
 800b406:	430b      	orrs	r3, r1
 800b408:	431a      	orrs	r2, r3
 800b40a:	69bb      	ldr	r3, [r7, #24]
 800b40c:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	6992      	ldr	r2, [r2, #24]
 800b416:	649a      	str	r2, [r3, #72]	@ 0x48
 800b418:	e004      	b.n	800b424 <XSPI_ConfigCmd+0x33c>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800b41a:	2301      	movs	r3, #1
 800b41c:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2208      	movs	r2, #8
 800b422:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  return status;
 800b424:	7ffb      	ldrb	r3, [r7, #31]
}
 800b426:	4618      	mov	r0, r3
 800b428:	3724      	adds	r7, #36	@ 0x24
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop
 800b434:	f0ffc0c0 	.word	0xf0ffc0c0

0800b438 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f043 0202 	orr.w	r2, r3, #2
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	685a      	ldr	r2, [r3, #4]
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	021b      	lsls	r3, r3, #8
 800b458:	431a      	orrs	r2, r3
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f023 0202 	bic.w	r2, r3, #2
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	601a      	str	r2, [r3, #0]
}
 800b46a:	bf00      	nop
 800b46c:	370c      	adds	r7, #12
 800b46e:	46bd      	mov	sp, r7
 800b470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b474:	4770      	bx	lr
	...

0800b478 <LL_DLYB_GetClockPeriod>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: there is a valid period detected and stored in pdlyb_cfg.
  *          - ERROR: there is no valid period detected.
  */
uint32_t LL_DLYB_GetClockPeriod(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b086      	sub	sp, #24
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b482:	2300      	movs	r3, #0
 800b484:	617b      	str	r3, [r7, #20]

  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f043 0202 	orr.w	r2, r3, #2
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	601a      	str	r2, [r3, #0]

  /* Delay line length detection */
  while (i < DLYB_MAX_UNIT)
 800b492:	e02a      	b.n	800b4ea <LL_DLYB_GetClockPeriod+0x72>
  {
    /* Set the Delay of the UNIT(s)*/
    DLYBx->CFGR = DLYB_MAX_SELECT | (i << DLYB_CFGR_UNIT_Pos);
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	021b      	lsls	r3, r3, #8
 800b498:	f043 020c 	orr.w	r2, r3, #12
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	605a      	str	r2, [r3, #4]

    /* Waiting for a LNG valid value */
    tickstart =  HAL_GetTick();
 800b4a0:	f7f8 f81e 	bl	80034e0 <HAL_GetTick>
 800b4a4:	60f8      	str	r0, [r7, #12]
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 800b4a6:	e00c      	b.n	800b4c2 <LL_DLYB_GetClockPeriod+0x4a>
    {
      if ((HAL_GetTick() - tickstart) >=  DLYB_TIMEOUT)
 800b4a8:	f7f8 f81a 	bl	80034e0 <HAL_GetTick>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	1ad3      	subs	r3, r2, r3
 800b4b2:	2bfe      	cmp	r3, #254	@ 0xfe
 800b4b4:	d905      	bls.n	800b4c2 <LL_DLYB_GetClockPeriod+0x4a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	db01      	blt.n	800b4c2 <LL_DLYB_GetClockPeriod+0x4a>
        {
          return (uint32_t) HAL_TIMEOUT;
 800b4be:	2303      	movs	r3, #3
 800b4c0:	e042      	b.n	800b548 <LL_DLYB_GetClockPeriod+0xd0>
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	daee      	bge.n	800b4a8 <LL_DLYB_GetClockPeriod+0x30>
        }
      }
    }

    if ((DLYBx->CFGR & DLYB_LNG_10_0_MASK) != 0U)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	685a      	ldr	r2, [r3, #4]
 800b4ce:	4b20      	ldr	r3, [pc, #128]	@ (800b550 <LL_DLYB_GetClockPeriod+0xd8>)
 800b4d0:	4013      	ands	r3, r2
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d006      	beq.n	800b4e4 <LL_DLYB_GetClockPeriod+0x6c>
    {
      if ((DLYBx->CFGR & (DLYB_CFGR_LNG_11 | DLYB_CFGR_LNG_10)) != DLYB_LNG_11_10_MASK)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800b4de:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b4e2:	d106      	bne.n	800b4f2 <LL_DLYB_GetClockPeriod+0x7a>
      {
        /* Delay line length is configured to one input clock period*/
        break;
      }
    }
    i++;
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	617b      	str	r3, [r7, #20]
  while (i < DLYB_MAX_UNIT)
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	2b7f      	cmp	r3, #127	@ 0x7f
 800b4ee:	d9d1      	bls.n	800b494 <LL_DLYB_GetClockPeriod+0x1c>
 800b4f0:	e000      	b.n	800b4f4 <LL_DLYB_GetClockPeriod+0x7c>
        break;
 800b4f2:	bf00      	nop
  }

  if (DLYB_MAX_UNIT != i)
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	2b80      	cmp	r3, #128	@ 0x80
 800b4f8:	d022      	beq.n	800b540 <LL_DLYB_GetClockPeriod+0xc8>
  {
    /* Determine how many unit delays (nb) span one input clock period */
    lng = (DLYBx->CFGR & DLYB_CFGR_LNG) >> 16U;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	0c1b      	lsrs	r3, r3, #16
 800b500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b504:	60bb      	str	r3, [r7, #8]
    nb = 10U;
 800b506:	230a      	movs	r3, #10
 800b508:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 800b50a:	e002      	b.n	800b512 <LL_DLYB_GetClockPeriod+0x9a>
    {
      nb--;
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	3b01      	subs	r3, #1
 800b510:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d005      	beq.n	800b524 <LL_DLYB_GetClockPeriod+0xac>
 800b518:	68ba      	ldr	r2, [r7, #8]
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	fa22 f303 	lsr.w	r3, r2, r3
 800b520:	2b00      	cmp	r3, #0
 800b522:	d0f3      	beq.n	800b50c <LL_DLYB_GetClockPeriod+0x94>
    }
    if (nb != 0U)
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d00a      	beq.n	800b540 <LL_DLYB_GetClockPeriod+0xc8>
    {
      pdlyb_cfg->PhaseSel = nb ;
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	693a      	ldr	r2, [r7, #16]
 800b52e:	605a      	str	r2, [r3, #4]
      pdlyb_cfg->Units = i ;
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	697a      	ldr	r2, [r7, #20]
 800b534:	601a      	str	r2, [r3, #0]

      /* Disable the length sampling */
      DLYBx->CR = DLYB_CR_SEN;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2202      	movs	r2, #2
 800b53a:	601a      	str	r2, [r3, #0]

      return (uint32_t)SUCCESS;
 800b53c:	2300      	movs	r3, #0
 800b53e:	e003      	b.n	800b548 <LL_DLYB_GetClockPeriod+0xd0>
    }
  }

  /* Disable the length sampling */
  DLYBx->CR = DLYB_CR_SEN;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2202      	movs	r2, #2
 800b544:	601a      	str	r2, [r3, #0]

  return (uint32_t)ERROR;
 800b546:	2301      	movs	r3, #1

}
 800b548:	4618      	mov	r0, r3
 800b54a:	3718      	adds	r7, #24
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	07ff0000 	.word	0x07ff0000

0800b554 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 800b55e:	683a      	ldr	r2, [r7, #0]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4293      	cmp	r3, r2
 800b564:	bf38      	it	cc
 800b566:	4613      	movcc	r3, r2
}
 800b568:	4618      	mov	r0, r3
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800b57e:	683a      	ldr	r2, [r7, #0]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	4293      	cmp	r3, r2
 800b584:	bf28      	it	cs
 800b586:	4613      	movcs	r3, r2
}
 800b588:	4618      	mov	r0, r3
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	683a      	ldr	r2, [r7, #0]
 800b5a2:	fbb3 f2f2 	udiv	r2, r3, r2
 800b5a6:	6839      	ldr	r1, [r7, #0]
 800b5a8:	fb01 f202 	mul.w	r2, r1, r2
 800b5ac:	1a9b      	subs	r3, r3, r2
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	1ad3      	subs	r3, r2, r3
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	370c      	adds	r7, #12
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr

0800b5be <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b082      	sub	sp, #8
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
 800b5c6:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 800b5c8:	687a      	ldr	r2, [r7, #4]
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	6839      	ldr	r1, [r7, #0]
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7ff ffde 	bl	800b594 <lfs_aligndown>
 800b5d8:	4603      	mov	r3, r0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3708      	adds	r7, #8
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}

0800b5e2 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800b5e2:	b480      	push	{r7}
 800b5e4:	b083      	sub	sp, #12
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	fab3 f383 	clz	r3, r3
 800b5f2:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	370c      	adds	r7, #12
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr

0800b602 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800b602:	b480      	push	{r7}
 800b604:	b083      	sub	sp, #12
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	fa93 f3a3 	rbit	r3, r3
 800b610:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 800b614:	4618      	mov	r0, r3
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f7f4 fe4f 	bl	80002cc <__popcountsi2>
 800b62e:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 800b630:	4618      	mov	r0, r3
 800b632:	3708      	adds	r7, #8
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 800b638:	b480      	push	{r7}
 800b63a:	b083      	sub	sp, #12
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	1ad3      	subs	r3, r2, r3
}
 800b648:	4618      	mov	r0, r3
 800b64a:	370c      	adds	r7, #12
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 800b65c:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 800b65e:	4618      	mov	r0, r3
 800b660:	370c      	adds	r7, #12
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr

0800b66a <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b082      	sub	sp, #8
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f7ff ffee 	bl	800b654 <lfs_fromle32>
 800b678:	4603      	mov	r3, r0
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3708      	adds	r7, #8
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}

0800b682 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 800b682:	b480      	push	{r7}
 800b684:	b083      	sub	sp, #12
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 800b68e:	4618      	mov	r0, r3
 800b690:	370c      	adds	r7, #12
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr

0800b69a <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b082      	sub	sp, #8
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f7ff ffed 	bl	800b682 <lfs_frombe32>
 800b6a8:	4603      	mov	r3, r0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3708      	adds	r7, #8
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b082      	sub	sp, #8
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f006 ffde 	bl	801267c <malloc>
 800b6c0:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3708      	adds	r7, #8
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b082      	sub	sp, #8
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f006 ffda 	bl	801268c <free>
#else
    (void)p;
#endif
}
 800b6d8:	bf00      	nop
 800b6da:	3708      	adds	r7, #8
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b6f0:	601a      	str	r2, [r3, #0]
}
 800b6f2:	bf00      	nop
 800b6f4:	370c      	adds	r7, #12
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr

0800b6fe <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b082      	sub	sp, #8
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
 800b706:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	68d8      	ldr	r0, [r3, #12]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b712:	461a      	mov	r2, r3
 800b714:	21ff      	movs	r1, #255	@ 0xff
 800b716:	f007 f9a8 	bl	8012a6a <memset>
    pcache->block = LFS_BLOCK_NULL;
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	f04f 32ff 	mov.w	r2, #4294967295
 800b720:	601a      	str	r2, [r3, #0]
}
 800b722:	bf00      	nop
 800b724:	3708      	adds	r7, #8
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
	...

0800b72c <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 800b72c:	b5b0      	push	{r4, r5, r7, lr}
 800b72e:	b08a      	sub	sp, #40	@ 0x28
 800b730:	af02      	add	r7, sp, #8
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	607a      	str	r2, [r7, #4]
 800b738:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800b73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b73c:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 800b73e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b742:	441a      	add	r2, r3
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b748:	69db      	ldr	r3, [r3, #28]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d80a      	bhi.n	800b764 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b752:	2b00      	cmp	r3, #0
 800b754:	f000 8124 	beq.w	800b9a0 <lfs_bd_read+0x274>
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b75c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b75e:	429a      	cmp	r2, r3
 800b760:	f0c0 811e 	bcc.w	800b9a0 <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 800b764:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800b768:	e11f      	b.n	800b9aa <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800b76a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b76c:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d03f      	beq.n	800b7f4 <lfs_bd_read+0xc8>
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d13a      	bne.n	800b7f4 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	685a      	ldr	r2, [r3, #4]
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 800b788:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d232      	bcs.n	800b7f4 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b794:	429a      	cmp	r2, r3
 800b796:	d324      	bcc.n	800b7e2 <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	689a      	ldr	r2, [r3, #8]
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	6859      	ldr	r1, [r3, #4]
 800b7a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7a2:	1acb      	subs	r3, r1, r3
 800b7a4:	4413      	add	r3, r2
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	69b8      	ldr	r0, [r7, #24]
 800b7aa:	f7ff fee3 	bl	800b574 <lfs_min>
 800b7ae:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	68da      	ldr	r2, [r3, #12]
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b7ba:	1acb      	subs	r3, r1, r3
 800b7bc:	4413      	add	r3, r2
 800b7be:	69ba      	ldr	r2, [r7, #24]
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	69f8      	ldr	r0, [r7, #28]
 800b7c4:	f007 f9fd 	bl	8012bc2 <memcpy>

                data += diff;
 800b7c8:	69fa      	ldr	r2, [r7, #28]
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	61fb      	str	r3, [r7, #28]
                off += diff;
 800b7d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	4413      	add	r3, r2
 800b7d6:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800b7d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	1ad3      	subs	r3, r2, r3
 800b7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800b7e0:	e0de      	b.n	800b9a0 <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	685a      	ldr	r2, [r3, #4]
 800b7e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7e8:	1ad3      	subs	r3, r2, r3
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	69b8      	ldr	r0, [r7, #24]
 800b7ee:	f7ff fec1 	bl	800b574 <lfs_min>
 800b7f2:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d13a      	bne.n	800b874 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	685a      	ldr	r2, [r3, #4]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	689b      	ldr	r3, [r3, #8]
 800b806:	4413      	add	r3, r2
        if (block == rcache->block &&
 800b808:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d232      	bcs.n	800b874 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b814:	429a      	cmp	r2, r3
 800b816:	d324      	bcc.n	800b862 <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	689a      	ldr	r2, [r3, #8]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6859      	ldr	r1, [r3, #4]
 800b820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b822:	1acb      	subs	r3, r1, r3
 800b824:	4413      	add	r3, r2
 800b826:	4619      	mov	r1, r3
 800b828:	69b8      	ldr	r0, [r7, #24]
 800b82a:	f7ff fea3 	bl	800b574 <lfs_min>
 800b82e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	68da      	ldr	r2, [r3, #12]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b83a:	1acb      	subs	r3, r1, r3
 800b83c:	4413      	add	r3, r2
 800b83e:	69ba      	ldr	r2, [r7, #24]
 800b840:	4619      	mov	r1, r3
 800b842:	69f8      	ldr	r0, [r7, #28]
 800b844:	f007 f9bd 	bl	8012bc2 <memcpy>

                data += diff;
 800b848:	69fa      	ldr	r2, [r7, #28]
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	4413      	add	r3, r2
 800b84e:	61fb      	str	r3, [r7, #28]
                off += diff;
 800b850:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	4413      	add	r3, r2
 800b856:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800b858:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	1ad3      	subs	r3, r2, r3
 800b85e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800b860:	e09e      	b.n	800b9a0 <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	685a      	ldr	r2, [r3, #4]
 800b866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b868:	1ad3      	subs	r3, r2, r3
 800b86a:	4619      	mov	r1, r3
 800b86c:	69b8      	ldr	r0, [r7, #24]
 800b86e:	f7ff fe81 	bl	800b574 <lfs_min>
 800b872:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800b874:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d336      	bcc.n	800b8ea <lfs_bd_read+0x1be>
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b880:	695a      	ldr	r2, [r3, #20]
 800b882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b884:	fbb3 f1f2 	udiv	r1, r3, r2
 800b888:	fb01 f202 	mul.w	r2, r1, r2
 800b88c:	1a9b      	subs	r3, r3, r2
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d12b      	bne.n	800b8ea <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b896:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800b898:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d325      	bcc.n	800b8ea <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b8a2:	695b      	ldr	r3, [r3, #20]
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	69b8      	ldr	r0, [r7, #24]
 800b8a8:	f7ff fe74 	bl	800b594 <lfs_aligndown>
 800b8ac:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b8b2:	685c      	ldr	r4, [r3, #4]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800b8b8:	69bb      	ldr	r3, [r7, #24]
 800b8ba:	9300      	str	r3, [sp, #0]
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b8c2:	47a0      	blx	r4
 800b8c4:	6178      	str	r0, [r7, #20]
            if (err) {
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d001      	beq.n	800b8d0 <lfs_bd_read+0x1a4>
                return err;
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	e06c      	b.n	800b9aa <lfs_bd_read+0x27e>
            }

            data += diff;
 800b8d0:	69fa      	ldr	r2, [r7, #28]
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	61fb      	str	r3, [r7, #28]
            off += diff;
 800b8d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	4413      	add	r3, r2
 800b8de:	637b      	str	r3, [r7, #52]	@ 0x34
            size -= diff;
 800b8e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b8e2:	69bb      	ldr	r3, [r7, #24]
 800b8e4:	1ad3      	subs	r3, r2, r3
 800b8e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            continue;
 800b8e8:	e05a      	b.n	800b9a0 <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00a      	beq.n	800b908 <lfs_bd_read+0x1dc>
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d305      	bcc.n	800b908 <lfs_bd_read+0x1dc>
 800b8fc:	4b2d      	ldr	r3, [pc, #180]	@ (800b9b4 <lfs_bd_read+0x288>)
 800b8fe:	4a2e      	ldr	r2, [pc, #184]	@ (800b9b8 <lfs_bd_read+0x28c>)
 800b900:	216b      	movs	r1, #107	@ 0x6b
 800b902:	482e      	ldr	r0, [pc, #184]	@ (800b9bc <lfs_bd_read+0x290>)
 800b904:	f006 fe9c 	bl	8012640 <__assert_func>
        rcache->block = block;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b90c:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b912:	695b      	ldr	r3, [r3, #20]
 800b914:	4619      	mov	r1, r3
 800b916:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b918:	f7ff fe3c 	bl	800b594 <lfs_aligndown>
 800b91c:	4602      	mov	r2, r0
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 800b922:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b92c:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 800b92e:	4619      	mov	r1, r3
 800b930:	4610      	mov	r0, r2
 800b932:	f7ff fe44 	bl	800b5be <lfs_alignup>
 800b936:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b93c:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 800b93e:	4619      	mov	r1, r3
 800b940:	4610      	mov	r0, r2
 800b942:	f7ff fe17 	bl	800b574 <lfs_min>
 800b946:	4602      	mov	r2, r0
                - rcache->off,
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 800b94c:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(
 800b954:	4619      	mov	r1, r3
 800b956:	4610      	mov	r0, r2
 800b958:	f7ff fe0c 	bl	800b574 <lfs_min>
 800b95c:	4602      	mov	r2, r0
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b966:	685c      	ldr	r4, [r3, #4]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6819      	ldr	r1, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	9300      	str	r3, [sp, #0]
 800b97e:	462b      	mov	r3, r5
 800b980:	47a0      	blx	r4
 800b982:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	2b00      	cmp	r3, #0
 800b988:	dd05      	ble.n	800b996 <lfs_bd_read+0x26a>
 800b98a:	4b0d      	ldr	r3, [pc, #52]	@ (800b9c0 <lfs_bd_read+0x294>)
 800b98c:	4a0a      	ldr	r2, [pc, #40]	@ (800b9b8 <lfs_bd_read+0x28c>)
 800b98e:	2176      	movs	r1, #118	@ 0x76
 800b990:	480a      	ldr	r0, [pc, #40]	@ (800b9bc <lfs_bd_read+0x290>)
 800b992:	f006 fe55 	bl	8012640 <__assert_func>
        if (err) {
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d001      	beq.n	800b9a0 <lfs_bd_read+0x274>
            return err;
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	e004      	b.n	800b9aa <lfs_bd_read+0x27e>
    while (size > 0) {
 800b9a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	f47f aee1 	bne.w	800b76a <lfs_bd_read+0x3e>
        }
    }

    return 0;
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3720      	adds	r7, #32
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bdb0      	pop	{r4, r5, r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	08013890 	.word	0x08013890
 800b9b8:	080146b8 	.word	0x080146b8
 800b9bc:	080138c0 	.word	0x080138c0
 800b9c0:	080138e4 	.word	0x080138e4

0800b9c4 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b090      	sub	sp, #64	@ 0x40
 800b9c8:	af04      	add	r7, sp, #16
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	607a      	str	r2, [r7, #4]
 800b9d0:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800b9d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    lfs_size_t diff = 0;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	627b      	str	r3, [r7, #36]	@ 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 800b9da:	2300      	movs	r3, #0
 800b9dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b9de:	e039      	b.n	800ba54 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 800b9e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9e4:	1ad3      	subs	r3, r2, r3
 800b9e6:	2108      	movs	r1, #8
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7ff fdc3 	bl	800b574 <lfs_min>
 800b9ee:	6278      	str	r0, [r7, #36]	@ 0x24
        int err = lfs_bd_read(lfs,
 800b9f0:	683a      	ldr	r2, [r7, #0]
 800b9f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9f4:	1ad1      	subs	r1, r2, r3
 800b9f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9fa:	4413      	add	r3, r2
 800b9fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9fe:	9203      	str	r2, [sp, #12]
 800ba00:	f107 0214 	add.w	r2, r7, #20
 800ba04:	9202      	str	r2, [sp, #8]
 800ba06:	9301      	str	r3, [sp, #4]
 800ba08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba0a:	9300      	str	r3, [sp, #0]
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	68b9      	ldr	r1, [r7, #8]
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	f7ff fe8a 	bl	800b72c <lfs_bd_read>
 800ba18:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 800ba1a:	6a3b      	ldr	r3, [r7, #32]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d001      	beq.n	800ba24 <lfs_bd_cmp+0x60>
            return err;
 800ba20:	6a3b      	ldr	r3, [r7, #32]
 800ba22:	e01c      	b.n	800ba5e <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 800ba24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba28:	18d1      	adds	r1, r2, r3
 800ba2a:	f107 0314 	add.w	r3, r7, #20
 800ba2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba30:	4618      	mov	r0, r3
 800ba32:	f007 f80a 	bl	8012a4a <memcmp>
 800ba36:	61f8      	str	r0, [r7, #28]
        if (res) {
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d006      	beq.n	800ba4c <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 800ba3e:	69fb      	ldr	r3, [r7, #28]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	da01      	bge.n	800ba48 <lfs_bd_cmp+0x84>
 800ba44:	2301      	movs	r3, #1
 800ba46:	e00a      	b.n	800ba5e <lfs_bd_cmp+0x9a>
 800ba48:	2302      	movs	r3, #2
 800ba4a:	e008      	b.n	800ba5e <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 800ba4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba50:	4413      	add	r3, r2
 800ba52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d3c1      	bcc.n	800b9e0 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3730      	adds	r7, #48	@ 0x30
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}

0800ba66 <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b08e      	sub	sp, #56	@ 0x38
 800ba6a:	af04      	add	r7, sp, #16
 800ba6c:	60f8      	str	r0, [r7, #12]
 800ba6e:	60b9      	str	r1, [r7, #8]
 800ba70:	607a      	str	r2, [r7, #4]
 800ba72:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 800ba74:	2300      	movs	r3, #0
 800ba76:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 800ba78:	2300      	movs	r3, #0
 800ba7a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba7c:	e030      	b.n	800bae0 <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 800ba7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba82:	1ad3      	subs	r3, r2, r3
 800ba84:	2108      	movs	r1, #8
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7ff fd74 	bl	800b574 <lfs_min>
 800ba8c:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 800ba8e:	683a      	ldr	r2, [r7, #0]
 800ba90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba92:	1ad1      	subs	r1, r2, r3
 800ba94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ba96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba98:	4413      	add	r3, r2
 800ba9a:	6a3a      	ldr	r2, [r7, #32]
 800ba9c:	9203      	str	r2, [sp, #12]
 800ba9e:	f107 0214 	add.w	r2, r7, #20
 800baa2:	9202      	str	r2, [sp, #8]
 800baa4:	9301      	str	r3, [sp, #4]
 800baa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baa8:	9300      	str	r3, [sp, #0]
 800baaa:	460b      	mov	r3, r1
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	68b9      	ldr	r1, [r7, #8]
 800bab0:	68f8      	ldr	r0, [r7, #12]
 800bab2:	f7ff fe3b 	bl	800b72c <lfs_bd_read>
 800bab6:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d001      	beq.n	800bac2 <lfs_bd_crc+0x5c>
            return err;
 800babe:	69fb      	ldr	r3, [r7, #28]
 800bac0:	e013      	b.n	800baea <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 800bac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f107 0114 	add.w	r1, r7, #20
 800baca:	6a3a      	ldr	r2, [r7, #32]
 800bacc:	4618      	mov	r0, r3
 800bace:	f006 fd79 	bl	80125c4 <lfs_crc>
 800bad2:	4602      	mov	r2, r0
 800bad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bad6:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 800bad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bada:	6a3b      	ldr	r3, [r7, #32]
 800badc:	4413      	add	r3, r2
 800bade:	627b      	str	r3, [r7, #36]	@ 0x24
 800bae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d3ca      	bcc.n	800ba7e <lfs_bd_crc+0x18>
    }

    return 0;
 800bae8:	2300      	movs	r3, #0
}
 800baea:	4618      	mov	r0, r3
 800baec:	3728      	adds	r7, #40	@ 0x28
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
	...

0800baf4 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800baf4:	b5b0      	push	{r4, r5, r7, lr}
 800baf6:	b08c      	sub	sp, #48	@ 0x30
 800baf8:	af04      	add	r7, sp, #16
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	607a      	str	r2, [r7, #4]
 800bb00:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb0a:	d060      	beq.n	800bbce <lfs_bd_flush+0xda>
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f113 0f02 	cmn.w	r3, #2
 800bb14:	d05b      	beq.n	800bbce <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d305      	bcc.n	800bb2e <lfs_bd_flush+0x3a>
 800bb22:	4b2d      	ldr	r3, [pc, #180]	@ (800bbd8 <lfs_bd_flush+0xe4>)
 800bb24:	4a2d      	ldr	r2, [pc, #180]	@ (800bbdc <lfs_bd_flush+0xe8>)
 800bb26:	21b3      	movs	r1, #179	@ 0xb3
 800bb28:	482d      	ldr	r0, [pc, #180]	@ (800bbe0 <lfs_bd_flush+0xec>)
 800bb2a:	f006 fd89 	bl	8012640 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	689a      	ldr	r2, [r3, #8]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb36:	699b      	ldr	r3, [r3, #24]
 800bb38:	4619      	mov	r1, r3
 800bb3a:	4610      	mov	r0, r2
 800bb3c:	f7ff fd3f 	bl	800b5be <lfs_alignup>
 800bb40:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb46:	689c      	ldr	r4, [r3, #8]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	6819      	ldr	r1, [r3, #0]
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800bb58:	69fb      	ldr	r3, [r7, #28]
 800bb5a:	9300      	str	r3, [sp, #0]
 800bb5c:	462b      	mov	r3, r5
 800bb5e:	47a0      	blx	r4
 800bb60:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	dd05      	ble.n	800bb74 <lfs_bd_flush+0x80>
 800bb68:	4b1e      	ldr	r3, [pc, #120]	@ (800bbe4 <lfs_bd_flush+0xf0>)
 800bb6a:	4a1c      	ldr	r2, [pc, #112]	@ (800bbdc <lfs_bd_flush+0xe8>)
 800bb6c:	21b7      	movs	r1, #183	@ 0xb7
 800bb6e:	481c      	ldr	r0, [pc, #112]	@ (800bbe0 <lfs_bd_flush+0xec>)
 800bb70:	f006 fd66 	bl	8012640 <__assert_func>
        if (err) {
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d001      	beq.n	800bb7e <lfs_bd_flush+0x8a>
            return err;
 800bb7a:	69bb      	ldr	r3, [r7, #24]
 800bb7c:	e028      	b.n	800bbd0 <lfs_bd_flush+0xdc>
        }

        if (validate) {
 800bb7e:	78fb      	ldrb	r3, [r7, #3]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d020      	beq.n	800bbc6 <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 800bb84:	6879      	ldr	r1, [r7, #4]
 800bb86:	68f8      	ldr	r0, [r7, #12]
 800bb88:	f7ff fdaa 	bl	800b6e0 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68ba      	ldr	r2, [r7, #8]
 800bb92:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 800bb94:	68b9      	ldr	r1, [r7, #8]
 800bb96:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 800bb98:	69f8      	ldr	r0, [r7, #28]
 800bb9a:	9003      	str	r0, [sp, #12]
 800bb9c:	9102      	str	r1, [sp, #8]
 800bb9e:	9201      	str	r2, [sp, #4]
 800bba0:	9300      	str	r3, [sp, #0]
 800bba2:	69fb      	ldr	r3, [r7, #28]
 800bba4:	687a      	ldr	r2, [r7, #4]
 800bba6:	2100      	movs	r1, #0
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f7ff ff0b 	bl	800b9c4 <lfs_bd_cmp>
 800bbae:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	da01      	bge.n	800bbba <lfs_bd_flush+0xc6>
                return res;
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	e00a      	b.n	800bbd0 <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d002      	beq.n	800bbc6 <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 800bbc0:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800bbc4:	e004      	b.n	800bbd0 <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 800bbc6:	68b9      	ldr	r1, [r7, #8]
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f7ff fd98 	bl	800b6fe <lfs_cache_zero>
    }

    return 0;
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3720      	adds	r7, #32
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bdb0      	pop	{r4, r5, r7, pc}
 800bbd8:	080138f0 	.word	0x080138f0
 800bbdc:	080146c4 	.word	0x080146c4
 800bbe0:	080138c0 	.word	0x080138c0
 800bbe4:	080138e4 	.word	0x080138e4

0800bbe8 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b086      	sub	sp, #24
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	60f8      	str	r0, [r7, #12]
 800bbf0:	60b9      	str	r1, [r7, #8]
 800bbf2:	607a      	str	r2, [r7, #4]
 800bbf4:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 800bbf6:	6879      	ldr	r1, [r7, #4]
 800bbf8:	68f8      	ldr	r0, [r7, #12]
 800bbfa:	f7ff fd71 	bl	800b6e0 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800bbfe:	78fb      	ldrb	r3, [r7, #3]
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	68b9      	ldr	r1, [r7, #8]
 800bc04:	68f8      	ldr	r0, [r7, #12]
 800bc06:	f7ff ff75 	bl	800baf4 <lfs_bd_flush>
 800bc0a:	6178      	str	r0, [r7, #20]
    if (err) {
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d001      	beq.n	800bc16 <lfs_bd_sync+0x2e>
        return err;
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	e011      	b.n	800bc3a <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800bc20:	4610      	mov	r0, r2
 800bc22:	4798      	blx	r3
 800bc24:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	dd05      	ble.n	800bc38 <lfs_bd_sync+0x50>
 800bc2c:	4b05      	ldr	r3, [pc, #20]	@ (800bc44 <lfs_bd_sync+0x5c>)
 800bc2e:	4a06      	ldr	r2, [pc, #24]	@ (800bc48 <lfs_bd_sync+0x60>)
 800bc30:	21dd      	movs	r1, #221	@ 0xdd
 800bc32:	4806      	ldr	r0, [pc, #24]	@ (800bc4c <lfs_bd_sync+0x64>)
 800bc34:	f006 fd04 	bl	8012640 <__assert_func>
    return err;
 800bc38:	697b      	ldr	r3, [r7, #20]
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3718      	adds	r7, #24
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	080138e4 	.word	0x080138e4
 800bc48:	080146d4 	.word	0x080146d4
 800bc4c:	080138c0 	.word	0x080138c0

0800bc50 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b088      	sub	sp, #32
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	60b9      	str	r1, [r7, #8]
 800bc5a:	607a      	str	r2, [r7, #4]
 800bc5c:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 800bc5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc60:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 800bc62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc64:	f113 0f02 	cmn.w	r3, #2
 800bc68:	d00a      	beq.n	800bc80 <lfs_bd_prog+0x30>
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d305      	bcc.n	800bc80 <lfs_bd_prog+0x30>
 800bc74:	4b48      	ldr	r3, [pc, #288]	@ (800bd98 <lfs_bd_prog+0x148>)
 800bc76:	4a49      	ldr	r2, [pc, #292]	@ (800bd9c <lfs_bd_prog+0x14c>)
 800bc78:	21e8      	movs	r1, #232	@ 0xe8
 800bc7a:	4849      	ldr	r0, [pc, #292]	@ (800bda0 <lfs_bd_prog+0x150>)
 800bc7c:	f006 fce0 	bl	8012640 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800bc80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc84:	441a      	add	r2, r3
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bc8a:	69db      	ldr	r3, [r3, #28]
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d97a      	bls.n	800bd86 <lfs_bd_prog+0x136>
 800bc90:	4b44      	ldr	r3, [pc, #272]	@ (800bda4 <lfs_bd_prog+0x154>)
 800bc92:	4a42      	ldr	r2, [pc, #264]	@ (800bd9c <lfs_bd_prog+0x14c>)
 800bc94:	21e9      	movs	r1, #233	@ 0xe9
 800bc96:	4842      	ldr	r0, [pc, #264]	@ (800bda0 <lfs_bd_prog+0x150>)
 800bc98:	f006 fcd2 	bl	8012640 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d151      	bne.n	800bd4a <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 800bcaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d34c      	bcc.n	800bd4a <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	685a      	ldr	r2, [r3, #4]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bcb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcba:	4413      	add	r3, r2
                off >= pcache->off &&
 800bcbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d243      	bcs.n	800bd4a <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bcc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	6859      	ldr	r1, [r3, #4]
 800bccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcce:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 800bcd0:	4413      	add	r3, r2
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800bcd6:	f7ff fc4d 	bl	800b574 <lfs_min>
 800bcda:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	68da      	ldr	r2, [r3, #12]
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bce6:	1acb      	subs	r3, r1, r3
 800bce8:	4413      	add	r3, r2
 800bcea:	69ba      	ldr	r2, [r7, #24]
 800bcec:	69f9      	ldr	r1, [r7, #28]
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f006 ff67 	bl	8012bc2 <memcpy>

            data += diff;
 800bcf4:	69fa      	ldr	r2, [r7, #28]
 800bcf6:	69bb      	ldr	r3, [r7, #24]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	61fb      	str	r3, [r7, #28]
            off += diff;
 800bcfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	4413      	add	r3, r2
 800bd02:	62fb      	str	r3, [r7, #44]	@ 0x2c
            size -= diff;
 800bd04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd06:	69bb      	ldr	r3, [r7, #24]
 800bd08:	1ad3      	subs	r3, r2, r3
 800bd0a:	637b      	str	r3, [r7, #52]	@ 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	6898      	ldr	r0, [r3, #8]
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd16:	1ad3      	subs	r3, r2, r3
 800bd18:	4619      	mov	r1, r3
 800bd1a:	f7ff fc1b 	bl	800b554 <lfs_max>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	689a      	ldr	r2, [r3, #8]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d128      	bne.n	800bd84 <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800bd32:	78fb      	ldrb	r3, [r7, #3]
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	68b9      	ldr	r1, [r7, #8]
 800bd38:	68f8      	ldr	r0, [r7, #12]
 800bd3a:	f7ff fedb 	bl	800baf4 <lfs_bd_flush>
 800bd3e:	6178      	str	r0, [r7, #20]
                if (err) {
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d01e      	beq.n	800bd84 <lfs_bd_prog+0x134>
                    return err;
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	e021      	b.n	800bd8e <lfs_bd_prog+0x13e>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd52:	d006      	beq.n	800bd62 <lfs_bd_prog+0x112>
 800bd54:	4b14      	ldr	r3, [pc, #80]	@ (800bda8 <lfs_bd_prog+0x158>)
 800bd56:	4a11      	ldr	r2, [pc, #68]	@ (800bd9c <lfs_bd_prog+0x14c>)
 800bd58:	f44f 7183 	mov.w	r1, #262	@ 0x106
 800bd5c:	4810      	ldr	r0, [pc, #64]	@ (800bda0 <lfs_bd_prog+0x150>)
 800bd5e:	f006 fc6f 	bl	8012640 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd66:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd6c:	699b      	ldr	r3, [r3, #24]
 800bd6e:	4619      	mov	r1, r3
 800bd70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bd72:	f7ff fc0f 	bl	800b594 <lfs_aligndown>
 800bd76:	4602      	mov	r2, r0
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	609a      	str	r2, [r3, #8]
 800bd82:	e000      	b.n	800bd86 <lfs_bd_prog+0x136>
            continue;
 800bd84:	bf00      	nop
    while (size > 0) {
 800bd86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d187      	bne.n	800bc9c <lfs_bd_prog+0x4c>
    }

    return 0;
 800bd8c:	2300      	movs	r3, #0
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3720      	adds	r7, #32
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	08013914 	.word	0x08013914
 800bd9c:	080146e0 	.word	0x080146e0
 800bda0:	080138c0 	.word	0x080138c0
 800bda4:	0801394c 	.word	0x0801394c
 800bda8:	08013970 	.word	0x08013970

0800bdac <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdba:	683a      	ldr	r2, [r7, #0]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d306      	bcc.n	800bdce <lfs_bd_erase+0x22>
 800bdc0:	4b0f      	ldr	r3, [pc, #60]	@ (800be00 <lfs_bd_erase+0x54>)
 800bdc2:	4a10      	ldr	r2, [pc, #64]	@ (800be04 <lfs_bd_erase+0x58>)
 800bdc4:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800bdc8:	480f      	ldr	r0, [pc, #60]	@ (800be08 <lfs_bd_erase+0x5c>)
 800bdca:	f006 fc39 	bl	8012640 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bdd2:	68db      	ldr	r3, [r3, #12]
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800bdd8:	6839      	ldr	r1, [r7, #0]
 800bdda:	4610      	mov	r0, r2
 800bddc:	4798      	blx	r3
 800bdde:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	dd06      	ble.n	800bdf4 <lfs_bd_erase+0x48>
 800bde6:	4b09      	ldr	r3, [pc, #36]	@ (800be0c <lfs_bd_erase+0x60>)
 800bde8:	4a06      	ldr	r2, [pc, #24]	@ (800be04 <lfs_bd_erase+0x58>)
 800bdea:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800bdee:	4806      	ldr	r0, [pc, #24]	@ (800be08 <lfs_bd_erase+0x5c>)
 800bdf0:	f006 fc26 	bl	8012640 <__assert_func>
    return err;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3710      	adds	r7, #16
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	08013994 	.word	0x08013994
 800be04:	080146ec 	.word	0x080146ec
 800be08:	080138c0 	.word	0x080138c0
 800be0c:	080138e4 	.word	0x080138e4

0800be10 <lfs_path_namelen>:


/// Small type-level utilities ///

// some operations on paths
static inline lfs_size_t lfs_path_namelen(const char *path) {
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
    return strcspn(path, "/");
 800be18:	4904      	ldr	r1, [pc, #16]	@ (800be2c <lfs_path_namelen+0x1c>)
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f006 fe2d 	bl	8012a7a <strcspn>
 800be20:	4603      	mov	r3, r0
}
 800be22:	4618      	mov	r0, r3
 800be24:	3708      	adds	r7, #8
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
 800be2a:	bf00      	nop
 800be2c:	080139b0 	.word	0x080139b0

0800be30 <lfs_path_islast>:

static inline bool lfs_path_islast(const char *path) {
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
    lfs_size_t namelen = lfs_path_namelen(path);
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f7ff ffe9 	bl	800be10 <lfs_path_namelen>
 800be3e:	60f8      	str	r0, [r7, #12]
    return path[namelen + strspn(path + namelen, "/")] == '\0';
 800be40:	687a      	ldr	r2, [r7, #4]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	4413      	add	r3, r2
 800be46:	4909      	ldr	r1, [pc, #36]	@ (800be6c <lfs_path_islast+0x3c>)
 800be48:	4618      	mov	r0, r3
 800be4a:	f006 fe27 	bl	8012a9c <strspn>
 800be4e:	4602      	mov	r2, r0
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	4413      	add	r3, r2
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	4413      	add	r3, r2
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	bf0c      	ite	eq
 800be5e:	2301      	moveq	r3, #1
 800be60:	2300      	movne	r3, #0
 800be62:	b2db      	uxtb	r3, r3
}
 800be64:	4618      	mov	r0, r3
 800be66:	3710      	adds	r7, #16
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	080139b0 	.word	0x080139b0

0800be70 <lfs_path_isdir>:

static inline bool lfs_path_isdir(const char *path) {
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
    return path[lfs_path_namelen(path)] != '\0';
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f7ff ffc9 	bl	800be10 <lfs_path_namelen>
 800be7e:	4602      	mov	r2, r0
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	4413      	add	r3, r2
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	bf14      	ite	ne
 800be8a:	2301      	movne	r3, #1
 800be8c:	2300      	moveq	r3, #0
 800be8e:	b2db      	uxtb	r3, r3
}
 800be90:	4618      	mov	r0, r3
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <lfs_pair_swap>:

// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 800be98:	b480      	push	{r7}
 800be9a:	b085      	sub	sp, #20
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	685a      	ldr	r2, [r3, #4]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	3304      	adds	r3, #4
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	601a      	str	r2, [r3, #0]
}
 800beb6:	bf00      	nop
 800beb8:	3714      	adds	r7, #20
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr

0800bec2 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 800bec2:	b480      	push	{r7}
 800bec4:	b083      	sub	sp, #12
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed2:	d005      	beq.n	800bee0 <lfs_pair_isnull+0x1e>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	3304      	adds	r3, #4
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bede:	d101      	bne.n	800bee4 <lfs_pair_isnull+0x22>
 800bee0:	2301      	movs	r3, #1
 800bee2:	e000      	b.n	800bee6 <lfs_pair_isnull+0x24>
 800bee4:	2300      	movs	r3, #0
 800bee6:	f003 0301 	and.w	r3, r3, #1
 800beea:	b2db      	uxtb	r3, r3
}
 800beec:	4618      	mov	r0, r3
 800beee:	370c      	adds	r7, #12
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr

0800bef8 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d017      	beq.n	800bf3e <lfs_pair_cmp+0x46>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	3304      	adds	r3, #4
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	3304      	adds	r3, #4
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d00f      	beq.n	800bf3e <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	3304      	adds	r3, #4
 800bf26:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d008      	beq.n	800bf3e <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	3304      	adds	r3, #4
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d001      	beq.n	800bf3e <lfs_pair_cmp+0x46>
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e000      	b.n	800bf40 <lfs_pair_cmp+0x48>
 800bf3e:	2300      	movs	r3, #0
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d107      	bne.n	800bf72 <lfs_pair_issync+0x26>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	3304      	adds	r3, #4
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	3304      	adds	r3, #4
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d00d      	beq.n	800bf8e <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	3304      	adds	r3, #4
 800bf7a:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d108      	bne.n	800bf92 <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	3304      	adds	r3, #4
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d101      	bne.n	800bf92 <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800bf8e:	2301      	movs	r3, #1
 800bf90:	e000      	b.n	800bf94 <lfs_pair_issync+0x48>
 800bf92:	2300      	movs	r3, #0
 800bf94:	f003 0301 	and.w	r3, r3, #1
 800bf98:	b2db      	uxtb	r3, r3
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	370c      	adds	r7, #12
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr

0800bfa6 <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 800bfa6:	b590      	push	{r4, r7, lr}
 800bfa8:	b083      	sub	sp, #12
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7ff fb4e 	bl	800b654 <lfs_fromle32>
 800bfb8:	4602      	mov	r2, r0
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	3304      	adds	r3, #4
 800bfc2:	681a      	ldr	r2, [r3, #0]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	1d1c      	adds	r4, r3, #4
 800bfc8:	4610      	mov	r0, r2
 800bfca:	f7ff fb43 	bl	800b654 <lfs_fromle32>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	6023      	str	r3, [r4, #0]
}
 800bfd2:	bf00      	nop
 800bfd4:	370c      	adds	r7, #12
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd90      	pop	{r4, r7, pc}

0800bfda <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 800bfda:	b590      	push	{r4, r7, lr}
 800bfdc:	b083      	sub	sp, #12
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7ff fb3f 	bl	800b66a <lfs_tole32>
 800bfec:	4602      	mov	r2, r0
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	3304      	adds	r3, #4
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	1d1c      	adds	r4, r3, #4
 800bffc:	4610      	mov	r0, r2
 800bffe:	f7ff fb34 	bl	800b66a <lfs_tole32>
 800c002:	4603      	mov	r3, r0
 800c004:	6023      	str	r3, [r4, #0]
}
 800c006:	bf00      	nop
 800c008:	370c      	adds	r7, #12
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd90      	pop	{r4, r7, pc}

0800c00e <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 800c00e:	b480      	push	{r7}
 800c010:	b083      	sub	sp, #12
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	43db      	mvns	r3, r3
 800c01a:	0fdb      	lsrs	r3, r3, #31
 800c01c:	b2db      	uxtb	r3, r3
}
 800c01e:	4618      	mov	r0, r3
 800c020:	370c      	adds	r7, #12
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr

0800c02a <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800c02a:	b480      	push	{r7}
 800c02c:	b083      	sub	sp, #12
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	059b      	lsls	r3, r3, #22
 800c036:	159b      	asrs	r3, r3, #22
 800c038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c03c:	bf0c      	ite	eq
 800c03e:	2301      	moveq	r3, #1
 800c040:	2300      	movne	r3, #0
 800c042:	b2db      	uxtb	r3, r3
}
 800c044:	4618      	mov	r0, r3
 800c046:	370c      	adds	r7, #12
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr

0800c050 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	0d1b      	lsrs	r3, r3, #20
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c062:	b29b      	uxth	r3, r3
}
 800c064:	4618      	mov	r0, r3
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	0d1b      	lsrs	r3, r3, #20
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
 800c082:	b29b      	uxth	r3, r3
}
 800c084:	4618      	mov	r0, r3
 800c086:	370c      	adds	r7, #12
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	0d1b      	lsrs	r3, r3, #20
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c0a2:	b29b      	uxth	r3, r3
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	370c      	adds	r7, #12
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr

0800c0b0 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 800c0b0:	b480      	push	{r7}
 800c0b2:	b083      	sub	sp, #12
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	0d1b      	lsrs	r3, r3, #20
 800c0bc:	b2db      	uxtb	r3, r3
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	370c      	adds	r7, #12
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr

0800c0ca <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 800c0ca:	b580      	push	{r7, lr}
 800c0cc:	b082      	sub	sp, #8
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f7ff ffec 	bl	800c0b0 <lfs_tag_chunk>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	b25b      	sxtb	r3, r3
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3708      	adds	r7, #8
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	0a9b      	lsrs	r3, r3, #10
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c0f6:	b29b      	uxth	r3, r3
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800c112:	4618      	mov	r0, r3
 800c114:	370c      	adds	r7, #12
 800c116:	46bd      	mov	sp, r7
 800c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11c:	4770      	bx	lr

0800c11e <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800c11e:	b580      	push	{r7, lr}
 800c120:	b082      	sub	sp, #8
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f7ff ff7f 	bl	800c02a <lfs_tag_isdelete>
 800c12c:	4603      	mov	r3, r0
 800c12e:	461a      	mov	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	4413      	add	r3, r2
 800c134:	4618      	mov	r0, r3
 800c136:	f7ff ffe5 	bl	800c104 <lfs_tag_size>
 800c13a:	4603      	mov	r3, r0
 800c13c:	3304      	adds	r3, #4
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3708      	adds	r7, #8
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}

0800c146 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800c146:	b480      	push	{r7}
 800c148:	b083      	sub	sp, #12
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	6078      	str	r0, [r7, #4]
 800c14e:	6039      	str	r1, [r7, #0]
    a->tag ^= b->tag;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681a      	ldr	r2, [r3, #0]
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	405a      	eors	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	601a      	str	r2, [r3, #0]
    a->pair[0] ^= b->pair[0];
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	685a      	ldr	r2, [r3, #4]
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	405a      	eors	r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	605a      	str	r2, [r3, #4]
    a->pair[1] ^= b->pair[1];
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	689a      	ldr	r2, [r3, #8]
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	405a      	eors	r2, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	609a      	str	r2, [r3, #8]
}
 800c17a:	bf00      	nop
 800c17c:	370c      	adds	r7, #12
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr

0800c186 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 800c186:	b480      	push	{r7}
 800c188:	b083      	sub	sp, #12
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
    return a->tag == 0
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
            && a->pair[0] == 0
            && a->pair[1] == 0;
 800c192:	2b00      	cmp	r3, #0
 800c194:	d109      	bne.n	800c1aa <lfs_gstate_iszero+0x24>
            && a->pair[0] == 0
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d105      	bne.n	800c1aa <lfs_gstate_iszero+0x24>
            && a->pair[1] == 0;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d101      	bne.n	800c1aa <lfs_gstate_iszero+0x24>
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	e000      	b.n	800c1ac <lfs_gstate_iszero+0x26>
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	f003 0301 	and.w	r3, r3, #1
 800c1b0:	b2db      	uxtb	r3, r3
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	370c      	adds	r7, #12
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr

0800c1be <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 800c1be:	b580      	push	{r7, lr}
 800c1c0:	b082      	sub	sp, #8
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7ff ff9a 	bl	800c104 <lfs_tag_size>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	bf14      	ite	ne
 800c1d6:	2301      	movne	r3, #1
 800c1d8:	2300      	moveq	r3, #0
 800c1da:	b2db      	uxtb	r3, r3
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3708      	adds	r7, #8
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7ff ff87 	bl	800c104 <lfs_tag_size>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	b2db      	uxtb	r3, r3
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800c202:	b580      	push	{r7, lr}
 800c204:	b082      	sub	sp, #8
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4618      	mov	r0, r3
 800c210:	f7ff ff1e 	bl	800c050 <lfs_tag_type1>
 800c214:	4603      	mov	r3, r0
 800c216:	2b00      	cmp	r3, #0
 800c218:	bf14      	ite	ne
 800c21a:	2301      	movne	r3, #1
 800c21c:	2300      	moveq	r3, #0
 800c21e:	b2db      	uxtb	r3, r3
}
 800c220:	4618      	mov	r0, r3
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 800c228:	b580      	push	{r7, lr}
 800c22a:	b082      	sub	sp, #8
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4618      	mov	r0, r3
 800c236:	f7ff ff65 	bl	800c104 <lfs_tag_size>
 800c23a:	4603      	mov	r3, r0
 800c23c:	0a5b      	lsrs	r3, r3, #9
 800c23e:	2b00      	cmp	r3, #0
 800c240:	bf14      	ite	ne
 800c242:	2301      	movne	r3, #1
 800c244:	2300      	moveq	r3, #0
 800c246:	b2db      	uxtb	r3, r3
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3708      	adds	r7, #8
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4618      	mov	r0, r3
 800c260:	f7ff fef6 	bl	800c050 <lfs_tag_type1>
 800c264:	4603      	mov	r3, r0
 800c266:	2b00      	cmp	r3, #0
 800c268:	d00a      	beq.n	800c280 <lfs_gstate_hasmovehere+0x30>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	3304      	adds	r3, #4
 800c26e:	6839      	ldr	r1, [r7, #0]
 800c270:	4618      	mov	r0, r3
 800c272:	f7ff fe41 	bl	800bef8 <lfs_pair_cmp>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d101      	bne.n	800c280 <lfs_gstate_hasmovehere+0x30>
 800c27c:	2301      	movs	r3, #1
 800c27e:	e000      	b.n	800c282 <lfs_gstate_hasmovehere+0x32>
 800c280:	2300      	movs	r3, #0
 800c282:	f003 0301 	and.w	r3, r3, #1
 800c286:	b2db      	uxtb	r3, r3
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7ff f9d9 	bl	800b654 <lfs_fromle32>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7ff f9d1 	bl	800b654 <lfs_fromle32>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	689b      	ldr	r3, [r3, #8]
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7ff f9c9 	bl	800b654 <lfs_fromle32>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	609a      	str	r2, [r3, #8]
}
 800c2c8:	bf00      	nop
 800c2ca:	3708      	adds	r7, #8
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7ff f9c4 	bl	800b66a <lfs_tole32>
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f7ff f9bc 	bl	800b66a <lfs_tole32>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7ff f9b4 	bl	800b66a <lfs_tole32>
 800c302:	4602      	mov	r2, r0
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	609a      	str	r2, [r3, #8]
}
 800c308:	bf00      	nop
 800c30a:	3708      	adds	r7, #8
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7ff f999 	bl	800b654 <lfs_fromle32>
 800c322:	4602      	mov	r2, r0
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7ff f991 	bl	800b654 <lfs_fromle32>
 800c332:	4602      	mov	r2, r0
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	605a      	str	r2, [r3, #4]
}
 800c338:	bf00      	nop
 800c33a:	3708      	adds	r7, #8
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 800c340:	b580      	push	{r7, lr}
 800c342:	b082      	sub	sp, #8
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7ff f98c 	bl	800b66a <lfs_tole32>
 800c352:	4602      	mov	r2, r0
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7ff f984 	bl	800b66a <lfs_tole32>
 800c362:	4602      	mov	r2, r0
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	605a      	str	r2, [r3, #4]
}
 800c368:	bf00      	nop
 800c36a:	3708      	adds	r7, #8
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800c370:	b580      	push	{r7, lr}
 800c372:	b082      	sub	sp, #8
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7ff f969 	bl	800b654 <lfs_fromle32>
 800c382:	4602      	mov	r2, r0
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7ff f961 	bl	800b654 <lfs_fromle32>
 800c392:	4602      	mov	r2, r0
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	605a      	str	r2, [r3, #4]
}
 800c398:	bf00      	nop
 800c39a:	3708      	adds	r7, #8
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f7ff f95c 	bl	800b66a <lfs_tole32>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7ff f954 	bl	800b66a <lfs_tole32>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	605a      	str	r2, [r3, #4]
}
 800c3c8:	bf00      	nop
 800c3ca:	3708      	adds	r7, #8
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7ff f939 	bl	800b654 <lfs_fromle32>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f7ff f931 	bl	800b654 <lfs_fromle32>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	689b      	ldr	r3, [r3, #8]
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7ff f929 	bl	800b654 <lfs_fromle32>
 800c402:	4602      	mov	r2, r0
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	68db      	ldr	r3, [r3, #12]
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7ff f921 	bl	800b654 <lfs_fromle32>
 800c412:	4602      	mov	r2, r0
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	691b      	ldr	r3, [r3, #16]
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7ff f919 	bl	800b654 <lfs_fromle32>
 800c422:	4602      	mov	r2, r0
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	695b      	ldr	r3, [r3, #20]
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7ff f911 	bl	800b654 <lfs_fromle32>
 800c432:	4602      	mov	r2, r0
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	615a      	str	r2, [r3, #20]
}
 800c438:	bf00      	nop
 800c43a:	3708      	adds	r7, #8
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4618      	mov	r0, r3
 800c44e:	f7ff f90c 	bl	800b66a <lfs_tole32>
 800c452:	4602      	mov	r2, r0
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7ff f904 	bl	800b66a <lfs_tole32>
 800c462:	4602      	mov	r2, r0
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	689b      	ldr	r3, [r3, #8]
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7ff f8fc 	bl	800b66a <lfs_tole32>
 800c472:	4602      	mov	r2, r0
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	68db      	ldr	r3, [r3, #12]
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7ff f8f4 	bl	800b66a <lfs_tole32>
 800c482:	4602      	mov	r2, r0
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	691b      	ldr	r3, [r3, #16]
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7ff f8ec 	bl	800b66a <lfs_tole32>
 800c492:	4602      	mov	r2, r0
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	695b      	ldr	r3, [r3, #20]
 800c49c:	4618      	mov	r0, r3
 800c49e:	f7ff f8e4 	bl	800b66a <lfs_tole32>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	615a      	str	r2, [r3, #20]
}
 800c4a8:	bf00      	nop
 800c4aa:	3708      	adds	r7, #8
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 800c4b0:	b480      	push	{r7}
 800c4b2:	b085      	sub	sp, #20
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800c4ba:	1d3b      	adds	r3, r7, #4
 800c4bc:	60fb      	str	r3, [r7, #12]
 800c4be:	e009      	b.n	800c4d4 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	683a      	ldr	r2, [r7, #0]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d101      	bne.n	800c4ce <lfs_mlist_isopen+0x1e>
            return true;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e007      	b.n	800c4de <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	60fb      	str	r3, [r7, #12]
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1f1      	bne.n	800c4c0 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 800c4dc:	2300      	movs	r3, #0
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3714      	adds	r7, #20
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr

0800c4ea <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 800c4ea:	b480      	push	{r7}
 800c4ec:	b085      	sub	sp, #20
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
 800c4f2:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	3328      	adds	r3, #40	@ 0x28
 800c4f8:	60fb      	str	r3, [r7, #12]
 800c4fa:	e00d      	b.n	800c518 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	683a      	ldr	r2, [r7, #0]
 800c502:	429a      	cmp	r2, r3
 800c504:	d105      	bne.n	800c512 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	601a      	str	r2, [r3, #0]
            break;
 800c510:	e007      	b.n	800c522 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	60fb      	str	r3, [r7, #12]
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d1ed      	bne.n	800c4fc <lfs_mlist_remove+0x12>
        }
    }
}
 800c520:	bf00      	nop
 800c522:	bf00      	nop
 800c524:	3714      	adds	r7, #20
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr

0800c52e <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 800c52e:	b480      	push	{r7}
 800c530:	b083      	sub	sp, #12
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
 800c536:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	683a      	ldr	r2, [r7, #0]
 800c544:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800c546:	bf00      	nop
 800c548:	370c      	adds	r7, #12
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr
	...

0800c554 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 800c554:	b480      	push	{r7}
 800c556:	b083      	sub	sp, #12
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 800c55c:	4b03      	ldr	r3, [pc, #12]	@ (800c56c <lfs_fs_disk_version+0x18>)
    }
}
 800c55e:	4618      	mov	r0, r3
 800c560:	370c      	adds	r7, #12
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr
 800c56a:	bf00      	nop
 800c56c:	00020001 	.word	0x00020001

0800c570 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f7ff ffeb 	bl	800c554 <lfs_fs_disk_version>
 800c57e:	4603      	mov	r3, r0
 800c580:	0c1b      	lsrs	r3, r3, #16
 800c582:	b29b      	uxth	r3, r3

}
 800c584:	4618      	mov	r0, r3
 800c586:	3708      	adds	r7, #8
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}

0800c58c <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b082      	sub	sp, #8
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f7ff ffdd 	bl	800c554 <lfs_fs_disk_version>
 800c59a:	4603      	mov	r3, r0
 800c59c:	b29b      	uxth	r3, r3
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3708      	adds	r7, #8
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 800c5a6:	b480      	push	{r7}
 800c5a8:	b083      	sub	sp, #12
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	661a      	str	r2, [r3, #96]	@ 0x60
}
 800c5b6:	bf00      	nop
 800c5b8:	370c      	adds	r7, #12
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr

0800c5c2 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b082      	sub	sp, #8
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	659a      	str	r2, [r3, #88]	@ 0x58
    lfs->lookahead.next = 0;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f7ff ffe5 	bl	800c5a6 <lfs_alloc_ckpoint>
}
 800c5dc:	bf00      	nop
 800c5de:	3708      	adds	r7, #8
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 800c5e4:	b480      	push	{r7}
 800c5e6:	b085      	sub	sp, #20
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5f6:	683a      	ldr	r2, [r7, #0]
 800c5f8:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5fe:	4413      	add	r3, r2
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 800c604:	fbb3 f1f2 	udiv	r1, r3, r2
 800c608:	fb01 f202 	mul.w	r2, r1, r2
 800c60c:	1a9b      	subs	r3, r3, r2
 800c60e:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c614:	68ba      	ldr	r2, [r7, #8]
 800c616:	429a      	cmp	r2, r3
 800c618:	d212      	bcs.n	800c640 <lfs_alloc_lookahead+0x5c>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	08db      	lsrs	r3, r3, #3
 800c622:	441a      	add	r2, r3
 800c624:	7811      	ldrb	r1, [r2, #0]
 800c626:	68ba      	ldr	r2, [r7, #8]
 800c628:	f002 0207 	and.w	r2, r2, #7
 800c62c:	2001      	movs	r0, #1
 800c62e:	fa00 f202 	lsl.w	r2, r0, r2
 800c632:	b2d2      	uxtb	r2, r2
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 800c638:	4403      	add	r3, r0
 800c63a:	430a      	orrs	r2, r1
 800c63c:	b2d2      	uxtb	r2, r2
 800c63e:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3714      	adds	r7, #20
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr
	...

0800c650 <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c660:	4413      	add	r3, r2
            % lfs->block_count;
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800c666:	fbb3 f1f2 	udiv	r1, r3, r2
 800c66a:	fb01 f202 	mul.w	r2, r1, r2
 800c66e:	1a9a      	subs	r2, r3, r2
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs->lookahead.next = 0;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2200      	movs	r2, #0
 800c678:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c67e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    lfs->lookahead.size = lfs_min(
 800c680:	00da      	lsls	r2, r3, #3
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c686:	4619      	mov	r1, r3
 800c688:	4610      	mov	r0, r2
 800c68a:	f7fe ff73 	bl	800b574 <lfs_min>
 800c68e:	4602      	mov	r2, r0
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	659a      	str	r2, [r3, #88]	@ 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c69c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c69e:	461a      	mov	r2, r3
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	f006 f9e2 	bl	8012a6a <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	4909      	ldr	r1, [pc, #36]	@ (800c6d0 <lfs_alloc_scan+0x80>)
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f005 f8df 	bl	8011870 <lfs_fs_traverse_>
 800c6b2:	60f8      	str	r0, [r7, #12]
    if (err) {
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d004      	beq.n	800c6c4 <lfs_alloc_scan+0x74>
        lfs_alloc_drop(lfs);
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f7ff ff81 	bl	800c5c2 <lfs_alloc_drop>
        return err;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	e000      	b.n	800c6c6 <lfs_alloc_scan+0x76>
    }

    return 0;
 800c6c4:	2300      	movs	r3, #0
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3710      	adds	r7, #16
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	0800c5e5 	.word	0x0800c5e5

0800c6d4 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b086      	sub	sp, #24
 800c6d8:	af02      	add	r7, sp, #8
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 800c6de:	e04d      	b.n	800c77c <lfs_alloc+0xa8>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6e8:	08db      	lsrs	r3, r3, #3
 800c6ea:	4413      	add	r3, r2
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	461a      	mov	r2, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6f4:	f003 0307 	and.w	r3, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800c6f8:	fa22 f303 	lsr.w	r3, r2, r3
 800c6fc:	f003 0301 	and.w	r3, r3, #1
 800c700:	2b00      	cmp	r3, #0
 800c702:	d131      	bne.n	800c768 <lfs_alloc+0x94>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c70c:	4413      	add	r3, r2
                        % lfs->block_count;
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800c712:	fbb3 f1f2 	udiv	r1, r3, r2
 800c716:	fb01 f202 	mul.w	r2, r1, r2
 800c71a:	1a9a      	subs	r2, r3, r2
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c724:	1c5a      	adds	r2, r3, #1
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	65da      	str	r2, [r3, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c72e:	1e5a      	subs	r2, r3, #1
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	661a      	str	r2, [r3, #96]	@ 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d211      	bcs.n	800c764 <lfs_alloc+0x90>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c748:	08db      	lsrs	r3, r3, #3
 800c74a:	4413      	add	r3, r2
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	461a      	mov	r2, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c754:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800c758:	fa22 f303 	lsr.w	r3, r2, r3
 800c75c:	f003 0301 	and.w	r3, r3, #1
 800c760:	2b00      	cmp	r3, #0
 800c762:	d1dd      	bne.n	800c720 <lfs_alloc+0x4c>
                        return 0;
 800c764:	2300      	movs	r3, #0
 800c766:	e032      	b.n	800c7ce <lfs_alloc+0xfa>
                    }
                }
            }

            lfs->lookahead.next += 1;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c76c:	1c5a      	adds	r2, r3, #1
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	65da      	str	r2, [r3, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c776:	1e5a      	subs	r2, r3, #1
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	661a      	str	r2, [r3, #96]	@ 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c784:	429a      	cmp	r2, r3
 800c786:	d3ab      	bcc.n	800c6e0 <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d116      	bne.n	800c7be <lfs_alloc+0xea>
            LFS_ERROR("No more free space 0x%"PRIx32,
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c798:	4413      	add	r3, r2
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800c79e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c7a2:	fb01 f202 	mul.w	r2, r1, r2
 800c7a6:	1a9b      	subs	r3, r3, r2
 800c7a8:	4a0b      	ldr	r2, [pc, #44]	@ (800c7d8 <lfs_alloc+0x104>)
 800c7aa:	9200      	str	r2, [sp, #0]
 800c7ac:	f240 22bd 	movw	r2, #701	@ 0x2bd
 800c7b0:	490a      	ldr	r1, [pc, #40]	@ (800c7dc <lfs_alloc+0x108>)
 800c7b2:	480b      	ldr	r0, [pc, #44]	@ (800c7e0 <lfs_alloc+0x10c>)
 800c7b4:	f006 f8f4 	bl	80129a0 <iprintf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->block_count);
            return LFS_ERR_NOSPC;
 800c7b8:	f06f 031b 	mvn.w	r3, #27
 800c7bc:	e007      	b.n	800c7ce <lfs_alloc+0xfa>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f7ff ff46 	bl	800c650 <lfs_alloc_scan>
 800c7c4:	60f8      	str	r0, [r7, #12]
        if(err) {
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d088      	beq.n	800c6de <lfs_alloc+0xa>
            return err;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3710      	adds	r7, #16
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	080139e0 	.word	0x080139e0
 800c7dc:	080138c0 	.word	0x080138c0
 800c7e0:	080139b4 	.word	0x080139b4

0800c7e4 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 800c7e4:	b590      	push	{r4, r7, lr}
 800c7e6:	b08f      	sub	sp, #60	@ 0x3c
 800c7e8:	af04      	add	r7, sp, #16
 800c7ea:	60f8      	str	r0, [r7, #12]
 800c7ec:	60b9      	str	r1, [r7, #8]
 800c7ee:	607a      	str	r2, [r7, #4]
 800c7f0:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_tag_t ntag = dir->etag;
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	691b      	ldr	r3, [r3, #16]
 800c7fc:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 800c7fe:	2300      	movs	r3, #0
 800c800:	623b      	str	r3, [r7, #32]

    // synthetic moves
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	333c      	adds	r3, #60	@ 0x3c
 800c806:	68ba      	ldr	r2, [r7, #8]
 800c808:	4611      	mov	r1, r2
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7ff fd20 	bl	800c250 <lfs_gstate_hasmovehere>
 800c810:	4603      	mov	r3, r0
 800c812:	2b00      	cmp	r3, #0
 800c814:	f000 80ca 	beq.w	800c9ac <lfs_dir_getslice+0x1c8>
            lfs_tag_id(gmask) != 0) {
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f7ff fc63 	bl	800c0e4 <lfs_tag_id>
 800c81e:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800c820:	2b00      	cmp	r3, #0
 800c822:	f000 80c3 	beq.w	800c9ac <lfs_dir_getslice+0x1c8>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c82a:	4618      	mov	r0, r3
 800c82c:	f7ff fc5a 	bl	800c0e4 <lfs_tag_id>
 800c830:	4603      	mov	r3, r0
 800c832:	461c      	mov	r4, r3
 800c834:	6838      	ldr	r0, [r7, #0]
 800c836:	f7ff fc55 	bl	800c0e4 <lfs_tag_id>
 800c83a:	4603      	mov	r3, r0
 800c83c:	429c      	cmp	r4, r3
 800c83e:	d102      	bne.n	800c846 <lfs_dir_getslice+0x62>
            return LFS_ERR_NOENT;
 800c840:	f06f 0301 	mvn.w	r3, #1
 800c844:	e0be      	b.n	800c9c4 <lfs_dir_getslice+0x1e0>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7ff fc4a 	bl	800c0e4 <lfs_tag_id>
 800c850:	4603      	mov	r3, r0
 800c852:	461c      	mov	r4, r3
 800c854:	6838      	ldr	r0, [r7, #0]
 800c856:	f7ff fc45 	bl	800c0e4 <lfs_tag_id>
 800c85a:	4603      	mov	r3, r0
 800c85c:	429c      	cmp	r4, r3
 800c85e:	f080 80a5 	bcs.w	800c9ac <lfs_dir_getslice+0x1c8>
            gdiff -= LFS_MKTAG(0, 1, 0);
 800c862:	6a3b      	ldr	r3, [r7, #32]
 800c864:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800c868:	623b      	str	r3, [r7, #32]
        }
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800c86a:	e09f      	b.n	800c9ac <lfs_dir_getslice+0x1c8>
        off -= lfs_tag_dsize(ntag);
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	4618      	mov	r0, r3
 800c870:	f7ff fc55 	bl	800c11e <lfs_tag_dsize>
 800c874:	4602      	mov	r2, r0
 800c876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c878:	1a9b      	subs	r3, r3, r2
 800c87a:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_tag_t tag = ntag;
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 800c880:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 800c886:	2204      	movs	r2, #4
 800c888:	9203      	str	r2, [sp, #12]
 800c88a:	f107 0210 	add.w	r2, r7, #16
 800c88e:	9202      	str	r2, [sp, #8]
 800c890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c892:	9201      	str	r2, [sp, #4]
 800c894:	9300      	str	r3, [sp, #0]
 800c896:	2304      	movs	r3, #4
 800c898:	460a      	mov	r2, r1
 800c89a:	2100      	movs	r1, #0
 800c89c:	68f8      	ldr	r0, [r7, #12]
 800c89e:	f7fe ff45 	bl	800b72c <lfs_bd_read>
 800c8a2:	61b8      	str	r0, [r7, #24]
        if (err) {
 800c8a4:	69bb      	ldr	r3, [r7, #24]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d001      	beq.n	800c8ae <lfs_dir_getslice+0xca>
            return err;
 800c8aa:	69bb      	ldr	r3, [r7, #24]
 800c8ac:	e08a      	b.n	800c9c4 <lfs_dir_getslice+0x1e0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7fe fee6 	bl	800b682 <lfs_frombe32>
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	4053      	eors	r3, r2
 800c8bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c8c0:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f7ff fc0e 	bl	800c0e4 <lfs_tag_id>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d02b      	beq.n	800c926 <lfs_dir_getslice+0x142>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800c8ce:	69f8      	ldr	r0, [r7, #28]
 800c8d0:	f7ff fbbe 	bl	800c050 <lfs_tag_type1>
 800c8d4:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 800c8d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c8da:	d124      	bne.n	800c926 <lfs_dir_getslice+0x142>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 800c8dc:	69f8      	ldr	r0, [r7, #28]
 800c8de:	f7ff fc01 	bl	800c0e4 <lfs_tag_id>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	461c      	mov	r4, r3
 800c8e6:	6a3b      	ldr	r3, [r7, #32]
 800c8e8:	683a      	ldr	r2, [r7, #0]
 800c8ea:	1ad3      	subs	r3, r2, r3
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f7ff fbf9 	bl	800c0e4 <lfs_tag_id>
 800c8f2:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800c8f4:	429c      	cmp	r4, r3
 800c8f6:	d816      	bhi.n	800c926 <lfs_dir_getslice+0x142>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 800c8f8:	6a3b      	ldr	r3, [r7, #32]
 800c8fa:	683a      	ldr	r2, [r7, #0]
 800c8fc:	1ad2      	subs	r2, r2, r3
 800c8fe:	4b33      	ldr	r3, [pc, #204]	@ (800c9cc <lfs_dir_getslice+0x1e8>)
 800c900:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800c902:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c906:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c90a:	69fa      	ldr	r2, [r7, #28]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d102      	bne.n	800c916 <lfs_dir_getslice+0x132>
                // found where we were created
                return LFS_ERR_NOENT;
 800c910:	f06f 0301 	mvn.w	r3, #1
 800c914:	e056      	b.n	800c9c4 <lfs_dir_getslice+0x1e0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800c916:	69f8      	ldr	r0, [r7, #28]
 800c918:	f7ff fbd7 	bl	800c0ca <lfs_tag_splice>
 800c91c:	4603      	mov	r3, r0
 800c91e:	029a      	lsls	r2, r3, #10
 800c920:	6a3b      	ldr	r3, [r7, #32]
 800c922:	4413      	add	r3, r2
 800c924:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800c926:	687a      	ldr	r2, [r7, #4]
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	401a      	ands	r2, r3
 800c92c:	6a3b      	ldr	r3, [r7, #32]
 800c92e:	6839      	ldr	r1, [r7, #0]
 800c930:	1ac9      	subs	r1, r1, r3
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	400b      	ands	r3, r1
 800c936:	429a      	cmp	r2, r3
 800c938:	d138      	bne.n	800c9ac <lfs_dir_getslice+0x1c8>
            if (lfs_tag_isdelete(tag)) {
 800c93a:	69f8      	ldr	r0, [r7, #28]
 800c93c:	f7ff fb75 	bl	800c02a <lfs_tag_isdelete>
 800c940:	4603      	mov	r3, r0
 800c942:	2b00      	cmp	r3, #0
 800c944:	d002      	beq.n	800c94c <lfs_dir_getslice+0x168>
                return LFS_ERR_NOENT;
 800c946:	f06f 0301 	mvn.w	r3, #1
 800c94a:	e03b      	b.n	800c9c4 <lfs_dir_getslice+0x1e0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 800c94c:	69f8      	ldr	r0, [r7, #28]
 800c94e:	f7ff fbd9 	bl	800c104 <lfs_tag_size>
 800c952:	4603      	mov	r3, r0
 800c954:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c956:	4618      	mov	r0, r3
 800c958:	f7fe fe0c 	bl	800b574 <lfs_min>
 800c95c:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 800c95e:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c966:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c968:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 800c96a:	3204      	adds	r2, #4
 800c96c:	6979      	ldr	r1, [r7, #20]
 800c96e:	9103      	str	r1, [sp, #12]
 800c970:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c972:	9102      	str	r1, [sp, #8]
 800c974:	9201      	str	r2, [sp, #4]
 800c976:	9300      	str	r3, [sp, #0]
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	4602      	mov	r2, r0
 800c97c:	2100      	movs	r1, #0
 800c97e:	68f8      	ldr	r0, [r7, #12]
 800c980:	f7fe fed4 	bl	800b72c <lfs_bd_read>
 800c984:	61b8      	str	r0, [r7, #24]
            if (err) {
 800c986:	69bb      	ldr	r3, [r7, #24]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d001      	beq.n	800c990 <lfs_dir_getslice+0x1ac>
                return err;
 800c98c:	69bb      	ldr	r3, [r7, #24]
 800c98e:	e019      	b.n	800c9c4 <lfs_dir_getslice+0x1e0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 800c990:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	18d0      	adds	r0, r2, r3
 800c996:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	1ad3      	subs	r3, r2, r3
 800c99c:	461a      	mov	r2, r3
 800c99e:	2100      	movs	r1, #0
 800c9a0:	f006 f863 	bl	8012a6a <memset>

            return tag + gdiff;
 800c9a4:	6a3a      	ldr	r2, [r7, #32]
 800c9a6:	69fb      	ldr	r3, [r7, #28]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	e00b      	b.n	800c9c4 <lfs_dir_getslice+0x1e0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7ff fbb5 	bl	800c11e <lfs_tag_dsize>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	3304      	adds	r3, #4
 800c9b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	f4bf af56 	bcs.w	800c86c <lfs_dir_getslice+0x88>
        }
    }

    return LFS_ERR_NOENT;
 800c9c0:	f06f 0301 	mvn.w	r3, #1
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	372c      	adds	r7, #44	@ 0x2c
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd90      	pop	{r4, r7, pc}
 800c9cc:	000ffc00 	.word	0x000ffc00

0800c9d0 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b088      	sub	sp, #32
 800c9d4:	af04      	add	r7, sp, #16
 800c9d6:	60f8      	str	r0, [r7, #12]
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	607a      	str	r2, [r7, #4]
 800c9dc:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800c9de:	6838      	ldr	r0, [r7, #0]
 800c9e0:	f7ff fb90 	bl	800c104 <lfs_tag_size>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	9302      	str	r3, [sp, #8]
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	9301      	str	r3, [sp, #4]
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	9300      	str	r3, [sp, #0]
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	68b9      	ldr	r1, [r7, #8]
 800c9f6:	68f8      	ldr	r0, [r7, #12]
 800c9f8:	f7ff fef4 	bl	800c7e4 <lfs_dir_getslice>
 800c9fc:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3710      	adds	r7, #16
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}

0800ca06 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800ca06:	b580      	push	{r7, lr}
 800ca08:	b08c      	sub	sp, #48	@ 0x30
 800ca0a:	af04      	add	r7, sp, #16
 800ca0c:	60f8      	str	r0, [r7, #12]
 800ca0e:	60b9      	str	r1, [r7, #8]
 800ca10:	607a      	str	r2, [r7, #4]
 800ca12:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800ca14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca16:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 800ca18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca1c:	441a      	add	r2, r3
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca22:	69db      	ldr	r3, [r3, #28]
 800ca24:	429a      	cmp	r2, r3
 800ca26:	f240 80c0 	bls.w	800cbaa <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 800ca2a:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800ca2e:	e0c1      	b.n	800cbb4 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800ca30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca32:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d03f      	beq.n	800caba <lfs_dir_getread+0xb4>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f113 0f02 	cmn.w	r3, #2
 800ca42:	d13a      	bne.n	800caba <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	685a      	ldr	r2, [r3, #4]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	689b      	ldr	r3, [r3, #8]
 800ca4c:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800ca4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d232      	bcs.n	800caba <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d324      	bcc.n	800caa8 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	689a      	ldr	r2, [r3, #8]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6859      	ldr	r1, [r3, #4]
 800ca66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca68:	1acb      	subs	r3, r1, r3
 800ca6a:	4413      	add	r3, r2
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	69b8      	ldr	r0, [r7, #24]
 800ca70:	f7fe fd80 	bl	800b574 <lfs_min>
 800ca74:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	68da      	ldr	r2, [r3, #12]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ca80:	1acb      	subs	r3, r1, r3
 800ca82:	4413      	add	r3, r2
 800ca84:	69ba      	ldr	r2, [r7, #24]
 800ca86:	4619      	mov	r1, r3
 800ca88:	69f8      	ldr	r0, [r7, #28]
 800ca8a:	f006 f89a 	bl	8012bc2 <memcpy>

                data += diff;
 800ca8e:	69fa      	ldr	r2, [r7, #28]
 800ca90:	69bb      	ldr	r3, [r7, #24]
 800ca92:	4413      	add	r3, r2
 800ca94:	61fb      	str	r3, [r7, #28]
                off += diff;
 800ca96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca98:	69bb      	ldr	r3, [r7, #24]
 800ca9a:	4413      	add	r3, r2
 800ca9c:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800ca9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800caa0:	69bb      	ldr	r3, [r7, #24]
 800caa2:	1ad3      	subs	r3, r2, r3
 800caa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800caa6:	e080      	b.n	800cbaa <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	685a      	ldr	r2, [r3, #4]
 800caac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caae:	1ad3      	subs	r3, r2, r3
 800cab0:	4619      	mov	r1, r3
 800cab2:	69b8      	ldr	r0, [r7, #24]
 800cab4:	f7fe fd5e 	bl	800b574 <lfs_min>
 800cab8:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f113 0f02 	cmn.w	r3, #2
 800cac2:	d13a      	bne.n	800cb3a <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	685a      	ldr	r2, [r3, #4]
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	689b      	ldr	r3, [r3, #8]
 800cacc:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 800cace:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d232      	bcs.n	800cb3a <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	685b      	ldr	r3, [r3, #4]
 800cad8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cada:	429a      	cmp	r2, r3
 800cadc:	d324      	bcc.n	800cb28 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	689a      	ldr	r2, [r3, #8]
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	6859      	ldr	r1, [r3, #4]
 800cae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cae8:	1acb      	subs	r3, r1, r3
 800caea:	4413      	add	r3, r2
 800caec:	4619      	mov	r1, r3
 800caee:	69b8      	ldr	r0, [r7, #24]
 800caf0:	f7fe fd40 	bl	800b574 <lfs_min>
 800caf4:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	68da      	ldr	r2, [r3, #12]
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cb00:	1acb      	subs	r3, r1, r3
 800cb02:	4413      	add	r3, r2
 800cb04:	69ba      	ldr	r2, [r7, #24]
 800cb06:	4619      	mov	r1, r3
 800cb08:	69f8      	ldr	r0, [r7, #28]
 800cb0a:	f006 f85a 	bl	8012bc2 <memcpy>

                data += diff;
 800cb0e:	69fa      	ldr	r2, [r7, #28]
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	4413      	add	r3, r2
 800cb14:	61fb      	str	r3, [r7, #28]
                off += diff;
 800cb16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb18:	69bb      	ldr	r3, [r7, #24]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800cb1e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	1ad3      	subs	r3, r2, r3
 800cb24:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800cb26:	e040      	b.n	800cbaa <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	685a      	ldr	r2, [r3, #4]
 800cb2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb2e:	1ad3      	subs	r3, r2, r3
 800cb30:	4619      	mov	r1, r3
 800cb32:	69b8      	ldr	r0, [r7, #24]
 800cb34:	f7fe fd1e 	bl	800b574 <lfs_min>
 800cb38:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	f06f 0201 	mvn.w	r2, #1
 800cb40:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb46:	695b      	ldr	r3, [r3, #20]
 800cb48:	4619      	mov	r1, r3
 800cb4a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cb4c:	f7fe fd22 	bl	800b594 <lfs_aligndown>
 800cb50:	4602      	mov	r2, r0
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800cb56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb5a:	441a      	add	r2, r3
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb60:	695b      	ldr	r3, [r3, #20]
 800cb62:	4619      	mov	r1, r3
 800cb64:	4610      	mov	r0, r2
 800cb66:	f7fe fd2a 	bl	800b5be <lfs_alignup>
 800cb6a:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800cb72:	4619      	mov	r1, r3
 800cb74:	4610      	mov	r0, r2
 800cb76:	f7fe fcfd 	bl	800b574 <lfs_min>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800cb84:	683a      	ldr	r2, [r7, #0]
 800cb86:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800cb88:	6839      	ldr	r1, [r7, #0]
 800cb8a:	6889      	ldr	r1, [r1, #8]
 800cb8c:	9102      	str	r1, [sp, #8]
 800cb8e:	9201      	str	r2, [sp, #4]
 800cb90:	9300      	str	r3, [sp, #0]
 800cb92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb96:	68b9      	ldr	r1, [r7, #8]
 800cb98:	68f8      	ldr	r0, [r7, #12]
 800cb9a:	f7ff fe23 	bl	800c7e4 <lfs_dir_getslice>
 800cb9e:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	da01      	bge.n	800cbaa <lfs_dir_getread+0x1a4>
            return err;
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	e004      	b.n	800cbb4 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 800cbaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	f47f af3f 	bne.w	800ca30 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 800cbb2:	2300      	movs	r3, #0
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3720      	adds	r7, #32
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 800cbbc:	b590      	push	{r4, r7, lr}
 800cbbe:	b087      	sub	sp, #28
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d001      	beq.n	800cbda <lfs_dir_traverse_filter+0x1e>
 800cbd6:	4b24      	ldr	r3, [pc, #144]	@ (800cc68 <lfs_dir_traverse_filter+0xac>)
 800cbd8:	e000      	b.n	800cbdc <lfs_dir_traverse_filter+0x20>
 800cbda:	4b24      	ldr	r3, [pc, #144]	@ (800cc6c <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800cbdc:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	405a      	eors	r2, r3
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	4013      	ands	r3, r2
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d014      	beq.n	800cc18 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7ff fa19 	bl	800c02a <lfs_tag_isdelete>
 800cbf8:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d10c      	bne.n	800cc18 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	4a19      	ldr	r2, [pc, #100]	@ (800cc68 <lfs_dir_traverse_filter+0xac>)
 800cc02:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	6819      	ldr	r1, [r3, #0]
 800cc08:	4b19      	ldr	r3, [pc, #100]	@ (800cc70 <lfs_dir_traverse_filter+0xb4>)
 800cc0a:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800cc0c:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800cc10:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d104      	bne.n	800cc22 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	601a      	str	r2, [r3, #0]
        return true;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	e01e      	b.n	800cc60 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800cc22:	68b8      	ldr	r0, [r7, #8]
 800cc24:	f7ff fa14 	bl	800c050 <lfs_tag_type1>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc2e:	d116      	bne.n	800cc5e <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 800cc30:	68b8      	ldr	r0, [r7, #8]
 800cc32:	f7ff fa57 	bl	800c0e4 <lfs_tag_id>
 800cc36:	4603      	mov	r3, r0
 800cc38:	461c      	mov	r4, r3
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7ff fa50 	bl	800c0e4 <lfs_tag_id>
 800cc44:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800cc46:	429c      	cmp	r4, r3
 800cc48:	d809      	bhi.n	800cc5e <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800cc4a:	68b8      	ldr	r0, [r7, #8]
 800cc4c:	f7ff fa3d 	bl	800c0ca <lfs_tag_splice>
 800cc50:	4603      	mov	r3, r0
 800cc52:	029a      	lsls	r2, r3, #10
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	441a      	add	r2, r3
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	601a      	str	r2, [r3, #0]
    }

    return false;
 800cc5e:	2300      	movs	r3, #0
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	371c      	adds	r7, #28
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd90      	pop	{r4, r7, pc}
 800cc68:	7ffffc00 	.word	0x7ffffc00
 800cc6c:	700ffc00 	.word	0x700ffc00
 800cc70:	000ffc00 	.word	0x000ffc00

0800cc74 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800cc74:	b590      	push	{r4, r7, lr}
 800cc76:	b0c1      	sub	sp, #260	@ 0x104
 800cc78:	af04      	add	r7, sp, #16
 800cc7a:	60f8      	str	r0, [r7, #12]
 800cc7c:	60b9      	str	r1, [r7, #8]
 800cc7e:	607a      	str	r2, [r7, #4]
 800cc80:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 800cc82:	2300      	movs	r3, #0
 800cc84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 800cc88:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	601a      	str	r2, [r3, #0]
 800cc90:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 800cc92:	6838      	ldr	r0, [r7, #0]
 800cc94:	f7ff fa43 	bl	800c11e <lfs_tag_dsize>
 800cc98:	4602      	mov	r2, r0
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	441a      	add	r2, r3
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	68db      	ldr	r3, [r3, #12]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d237      	bcs.n	800cd16 <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 800cca6:	6838      	ldr	r0, [r7, #0]
 800cca8:	f7ff fa39 	bl	800c11e <lfs_tag_dsize>
 800ccac:	4602      	mov	r2, r0
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 800ccb4:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 800ccba:	2204      	movs	r2, #4
 800ccbc:	9203      	str	r2, [sp, #12]
 800ccbe:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800ccc2:	9202      	str	r2, [sp, #8]
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	9201      	str	r2, [sp, #4]
 800ccc8:	9300      	str	r3, [sp, #0]
 800ccca:	2304      	movs	r3, #4
 800cccc:	460a      	mov	r2, r1
 800ccce:	2100      	movs	r1, #0
 800ccd0:	68f8      	ldr	r0, [r7, #12]
 800ccd2:	f7fe fd2b 	bl	800b72c <lfs_bd_read>
 800ccd6:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                if (err) {
 800ccda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d002      	beq.n	800cce8 <lfs_dir_traverse+0x74>
                    return err;
 800cce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cce6:	e3a5      	b.n	800d434 <lfs_dir_traverse+0x7c0>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 800cce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fe fcc9 	bl	800b682 <lfs_frombe32>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	4053      	eors	r3, r2
 800ccf6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ccfa:	657b      	str	r3, [r7, #84]	@ 0x54
                disk.block = dir->pair[0];
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	64fb      	str	r3, [r7, #76]	@ 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	3304      	adds	r3, #4
 800cd06:	653b      	str	r3, [r7, #80]	@ 0x50
                buffer = &disk;
 800cd08:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800cd0c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                ptag = tag;
 800cd10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd12:	603b      	str	r3, [r7, #0]
 800cd14:	e01b      	b.n	800cd4e <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 800cd16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	dd13      	ble.n	800cd46 <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 800cd1e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	657b      	str	r3, [r7, #84]	@ 0x54
                buffer = attrs[0].buffer;
 800cd26:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cd2a:	685b      	ldr	r3, [r3, #4]
 800cd2c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                attrs += 1;
 800cd30:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cd34:	3308      	adds	r3, #8
 800cd36:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                attrcount -= 1;
 800cd3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd3e:	3b01      	subs	r3, #1
 800cd40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800cd44:	e003      	b.n	800cd4e <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 800cd46:	2300      	movs	r3, #0
 800cd48:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                break;
 800cd4c:	e2a1      	b.n	800d292 <lfs_dir_traverse+0x61e>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800cd4e:	4b7e      	ldr	r3, [pc, #504]	@ (800cf48 <lfs_dir_traverse+0x2d4>)
 800cd50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800cd54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cd56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cd5a:	405a      	eors	r2, r3
 800cd5c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800cd60:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800cd64:	400b      	ands	r3, r1
 800cd66:	4013      	ands	r3, r2
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	f040 8284 	bne.w	800d276 <lfs_dir_traverse+0x602>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 800cd6e:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800cd72:	f7ff f9b7 	bl	800c0e4 <lfs_tag_id>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f000 80ef 	beq.w	800cf5c <lfs_dir_traverse+0x2e8>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 800cd7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800cd82:	2b02      	cmp	r3, #2
 800cd84:	d906      	bls.n	800cd94 <lfs_dir_traverse+0x120>
 800cd86:	4b71      	ldr	r3, [pc, #452]	@ (800cf4c <lfs_dir_traverse+0x2d8>)
 800cd88:	4a71      	ldr	r2, [pc, #452]	@ (800cf50 <lfs_dir_traverse+0x2dc>)
 800cd8a:	f240 31c2 	movw	r1, #962	@ 0x3c2
 800cd8e:	4871      	ldr	r0, [pc, #452]	@ (800cf54 <lfs_dir_traverse+0x2e0>)
 800cd90:	f005 fc56 	bl	8012640 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 800cd94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cd96:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	011b      	lsls	r3, r3, #4
 800cd9e:	1a9b      	subs	r3, r3, r2
 800cda0:	009b      	lsls	r3, r3, #2
 800cda2:	33f0      	adds	r3, #240	@ 0xf0
 800cda4:	443b      	add	r3, r7
 800cda6:	3b98      	subs	r3, #152	@ 0x98
 800cda8:	68ba      	ldr	r2, [r7, #8]
 800cdaa:	601a      	str	r2, [r3, #0]
 800cdac:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	011b      	lsls	r3, r3, #4
 800cdb4:	1a9b      	subs	r3, r3, r2
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	33f0      	adds	r3, #240	@ 0xf0
 800cdba:	443b      	add	r3, r7
 800cdbc:	3b94      	subs	r3, #148	@ 0x94
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	601a      	str	r2, [r3, #0]
 800cdc2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800cdc6:	4613      	mov	r3, r2
 800cdc8:	011b      	lsls	r3, r3, #4
 800cdca:	1a9b      	subs	r3, r3, r2
 800cdcc:	009b      	lsls	r3, r3, #2
 800cdce:	33f0      	adds	r3, #240	@ 0xf0
 800cdd0:	443b      	add	r3, r7
 800cdd2:	3b90      	subs	r3, #144	@ 0x90
 800cdd4:	683a      	ldr	r2, [r7, #0]
 800cdd6:	601a      	str	r2, [r3, #0]
 800cdd8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800cddc:	4613      	mov	r3, r2
 800cdde:	011b      	lsls	r3, r3, #4
 800cde0:	1a9b      	subs	r3, r3, r2
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	33f0      	adds	r3, #240	@ 0xf0
 800cde6:	443b      	add	r3, r7
 800cde8:	3b8c      	subs	r3, #140	@ 0x8c
 800cdea:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800cdee:	601a      	str	r2, [r3, #0]
 800cdf0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	011b      	lsls	r3, r3, #4
 800cdf8:	1a9b      	subs	r3, r3, r2
 800cdfa:	009b      	lsls	r3, r3, #2
 800cdfc:	33f0      	adds	r3, #240	@ 0xf0
 800cdfe:	443b      	add	r3, r7
 800ce00:	3b88      	subs	r3, #136	@ 0x88
 800ce02:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800ce06:	601a      	str	r2, [r3, #0]
 800ce08:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	011b      	lsls	r3, r3, #4
 800ce10:	1a9b      	subs	r3, r3, r2
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	33f0      	adds	r3, #240	@ 0xf0
 800ce16:	443b      	add	r3, r7
 800ce18:	3b84      	subs	r3, #132	@ 0x84
 800ce1a:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800ce1e:	601a      	str	r2, [r3, #0]
 800ce20:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800ce24:	4613      	mov	r3, r2
 800ce26:	011b      	lsls	r3, r3, #4
 800ce28:	1a9b      	subs	r3, r3, r2
 800ce2a:	009b      	lsls	r3, r3, #2
 800ce2c:	33f0      	adds	r3, #240	@ 0xf0
 800ce2e:	443b      	add	r3, r7
 800ce30:	3b80      	subs	r3, #128	@ 0x80
 800ce32:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800ce36:	601a      	str	r2, [r3, #0]
 800ce38:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800ce3c:	4613      	mov	r3, r2
 800ce3e:	011b      	lsls	r3, r3, #4
 800ce40:	1a9b      	subs	r3, r3, r2
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	33f0      	adds	r3, #240	@ 0xf0
 800ce46:	443b      	add	r3, r7
 800ce48:	3b7c      	subs	r3, #124	@ 0x7c
 800ce4a:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 800ce4e:	801a      	strh	r2, [r3, #0]
 800ce50:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800ce54:	4613      	mov	r3, r2
 800ce56:	011b      	lsls	r3, r3, #4
 800ce58:	1a9b      	subs	r3, r3, r2
 800ce5a:	009b      	lsls	r3, r3, #2
 800ce5c:	33f0      	adds	r3, #240	@ 0xf0
 800ce5e:	443b      	add	r3, r7
 800ce60:	3b7a      	subs	r3, #122	@ 0x7a
 800ce62:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 800ce66:	801a      	strh	r2, [r3, #0]
 800ce68:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	011b      	lsls	r3, r3, #4
 800ce70:	1a9b      	subs	r3, r3, r2
 800ce72:	009b      	lsls	r3, r3, #2
 800ce74:	33f0      	adds	r3, #240	@ 0xf0
 800ce76:	443b      	add	r3, r7
 800ce78:	3b78      	subs	r3, #120	@ 0x78
 800ce7a:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 800ce7e:	801a      	strh	r2, [r3, #0]
 800ce80:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800ce84:	4613      	mov	r3, r2
 800ce86:	011b      	lsls	r3, r3, #4
 800ce88:	1a9b      	subs	r3, r3, r2
 800ce8a:	009b      	lsls	r3, r3, #2
 800ce8c:	33f0      	adds	r3, #240	@ 0xf0
 800ce8e:	443b      	add	r3, r7
 800ce90:	3b74      	subs	r3, #116	@ 0x74
 800ce92:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800ce96:	601a      	str	r2, [r3, #0]
 800ce98:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800ce9c:	4613      	mov	r3, r2
 800ce9e:	011b      	lsls	r3, r3, #4
 800cea0:	1a9b      	subs	r3, r3, r2
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	33f0      	adds	r3, #240	@ 0xf0
 800cea6:	443b      	add	r3, r7
 800cea8:	3b70      	subs	r3, #112	@ 0x70
 800ceaa:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800ceae:	601a      	str	r2, [r3, #0]
 800ceb0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800ceb4:	4613      	mov	r3, r2
 800ceb6:	011b      	lsls	r3, r3, #4
 800ceb8:	1a9b      	subs	r3, r3, r2
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	33f0      	adds	r3, #240	@ 0xf0
 800cebe:	443b      	add	r3, r7
 800cec0:	3b6c      	subs	r3, #108	@ 0x6c
 800cec2:	6019      	str	r1, [r3, #0]
 800cec4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800cec8:	4613      	mov	r3, r2
 800ceca:	011b      	lsls	r3, r3, #4
 800cecc:	1a9b      	subs	r3, r3, r2
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	33f0      	adds	r3, #240	@ 0xf0
 800ced2:	443b      	add	r3, r7
 800ced4:	3b68      	subs	r3, #104	@ 0x68
 800ced6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ceda:	601a      	str	r2, [r3, #0]
 800cedc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800cee0:	4613      	mov	r3, r2
 800cee2:	011b      	lsls	r3, r3, #4
 800cee4:	1a9b      	subs	r3, r3, r2
 800cee6:	009b      	lsls	r3, r3, #2
 800cee8:	33f0      	adds	r3, #240	@ 0xf0
 800ceea:	443b      	add	r3, r7
 800ceec:	3b68      	subs	r3, #104	@ 0x68
 800ceee:	3304      	adds	r3, #4
 800cef0:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800cef4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cef8:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 800cefc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800cf00:	3301      	adds	r3, #1
 800cf02:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

                tmask = 0;
 800cf06:	2300      	movs	r3, #0
 800cf08:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                ttag = 0;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                begin = 0;
 800cf12:	2300      	movs	r3, #0
 800cf14:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
                end = 0;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
                diff = 0;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
                cb = lfs_dir_traverse_filter;
 800cf24:	4b0c      	ldr	r3, [pc, #48]	@ (800cf58 <lfs_dir_traverse+0x2e4>)
 800cf26:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                data = &stack[sp-1].tag;
 800cf2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800cf2e:	1e5a      	subs	r2, r3, #1
 800cf30:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800cf34:	4613      	mov	r3, r2
 800cf36:	011b      	lsls	r3, r3, #4
 800cf38:	1a9b      	subs	r3, r3, r2
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	3328      	adds	r3, #40	@ 0x28
 800cf3e:	440b      	add	r3, r1
 800cf40:	3304      	adds	r3, #4
 800cf42:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                continue;
 800cf46:	e19d      	b.n	800d284 <lfs_dir_traverse+0x610>
 800cf48:	7ff00000 	.word	0x7ff00000
 800cf4c:	080139e4 	.word	0x080139e4
 800cf50:	080146fc 	.word	0x080146fc
 800cf54:	080138c0 	.word	0x080138c0
 800cf58:	0800cbbd 	.word	0x0800cbbd
            }
        }

popped:
 800cf5c:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 800cf5e:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800cf62:	f7ff f8bf 	bl	800c0e4 <lfs_tag_id>
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d015      	beq.n	800cf98 <lfs_dir_traverse+0x324>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800cf6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7ff f8b8 	bl	800c0e4 <lfs_tag_id>
 800cf74:	4603      	mov	r3, r0
 800cf76:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 800cf78:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	f200 817c 	bhi.w	800d27a <lfs_dir_traverse+0x606>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800cf82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf84:	4618      	mov	r0, r3
 800cf86:	f7ff f8ad 	bl	800c0e4 <lfs_tag_id>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 800cf92:	4293      	cmp	r3, r2
 800cf94:	f240 8171 	bls.w	800d27a <lfs_dir_traverse+0x606>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800cf98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7ff f878 	bl	800c090 <lfs_tag_type3>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	f43f ae75 	beq.w	800cc92 <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800cfa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7ff f870 	bl	800c090 <lfs_tag_type3>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	f240 1301 	movw	r3, #257	@ 0x101
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	f040 80e0 	bne.w	800d17e <lfs_dir_traverse+0x50a>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 800cfbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cfc2:	4ab1      	ldr	r2, [pc, #708]	@ (800d288 <lfs_dir_traverse+0x614>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	f000 815a 	beq.w	800d27e <lfs_dir_traverse+0x60a>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 800cfca:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800cfce:	4613      	mov	r3, r2
 800cfd0:	011b      	lsls	r3, r3, #4
 800cfd2:	1a9b      	subs	r3, r3, r2
 800cfd4:	009b      	lsls	r3, r3, #2
 800cfd6:	33f0      	adds	r3, #240	@ 0xf0
 800cfd8:	443b      	add	r3, r7
 800cfda:	3b98      	subs	r3, #152	@ 0x98
 800cfdc:	4618      	mov	r0, r3
 800cfde:	233c      	movs	r3, #60	@ 0x3c
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	2100      	movs	r1, #0
 800cfe4:	f005 fd41 	bl	8012a6a <memset>
 800cfe8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800cfec:	4613      	mov	r3, r2
 800cfee:	011b      	lsls	r3, r3, #4
 800cff0:	1a9b      	subs	r3, r3, r2
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	33f0      	adds	r3, #240	@ 0xf0
 800cff6:	443b      	add	r3, r7
 800cff8:	3b98      	subs	r3, #152	@ 0x98
 800cffa:	68ba      	ldr	r2, [r7, #8]
 800cffc:	601a      	str	r2, [r3, #0]
 800cffe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800d002:	4613      	mov	r3, r2
 800d004:	011b      	lsls	r3, r3, #4
 800d006:	1a9b      	subs	r3, r3, r2
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	33f0      	adds	r3, #240	@ 0xf0
 800d00c:	443b      	add	r3, r7
 800d00e:	3b94      	subs	r3, #148	@ 0x94
 800d010:	687a      	ldr	r2, [r7, #4]
 800d012:	601a      	str	r2, [r3, #0]
 800d014:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800d018:	4613      	mov	r3, r2
 800d01a:	011b      	lsls	r3, r3, #4
 800d01c:	1a9b      	subs	r3, r3, r2
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	33f0      	adds	r3, #240	@ 0xf0
 800d022:	443b      	add	r3, r7
 800d024:	3b90      	subs	r3, #144	@ 0x90
 800d026:	683a      	ldr	r2, [r7, #0]
 800d028:	601a      	str	r2, [r3, #0]
 800d02a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800d02e:	4613      	mov	r3, r2
 800d030:	011b      	lsls	r3, r3, #4
 800d032:	1a9b      	subs	r3, r3, r2
 800d034:	009b      	lsls	r3, r3, #2
 800d036:	33f0      	adds	r3, #240	@ 0xf0
 800d038:	443b      	add	r3, r7
 800d03a:	3b8c      	subs	r3, #140	@ 0x8c
 800d03c:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800d040:	601a      	str	r2, [r3, #0]
 800d042:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800d046:	4613      	mov	r3, r2
 800d048:	011b      	lsls	r3, r3, #4
 800d04a:	1a9b      	subs	r3, r3, r2
 800d04c:	009b      	lsls	r3, r3, #2
 800d04e:	33f0      	adds	r3, #240	@ 0xf0
 800d050:	443b      	add	r3, r7
 800d052:	3b88      	subs	r3, #136	@ 0x88
 800d054:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800d058:	601a      	str	r2, [r3, #0]
 800d05a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800d05e:	4613      	mov	r3, r2
 800d060:	011b      	lsls	r3, r3, #4
 800d062:	1a9b      	subs	r3, r3, r2
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	33f0      	adds	r3, #240	@ 0xf0
 800d068:	443b      	add	r3, r7
 800d06a:	3b84      	subs	r3, #132	@ 0x84
 800d06c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800d070:	601a      	str	r2, [r3, #0]
 800d072:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800d076:	4613      	mov	r3, r2
 800d078:	011b      	lsls	r3, r3, #4
 800d07a:	1a9b      	subs	r3, r3, r2
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	33f0      	adds	r3, #240	@ 0xf0
 800d080:	443b      	add	r3, r7
 800d082:	3b80      	subs	r3, #128	@ 0x80
 800d084:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800d088:	601a      	str	r2, [r3, #0]
 800d08a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800d08e:	4613      	mov	r3, r2
 800d090:	011b      	lsls	r3, r3, #4
 800d092:	1a9b      	subs	r3, r3, r2
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	33f0      	adds	r3, #240	@ 0xf0
 800d098:	443b      	add	r3, r7
 800d09a:	3b7c      	subs	r3, #124	@ 0x7c
 800d09c:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 800d0a0:	801a      	strh	r2, [r3, #0]
 800d0a2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800d0a6:	4613      	mov	r3, r2
 800d0a8:	011b      	lsls	r3, r3, #4
 800d0aa:	1a9b      	subs	r3, r3, r2
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	33f0      	adds	r3, #240	@ 0xf0
 800d0b0:	443b      	add	r3, r7
 800d0b2:	3b7a      	subs	r3, #122	@ 0x7a
 800d0b4:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 800d0b8:	801a      	strh	r2, [r3, #0]
 800d0ba:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800d0be:	4613      	mov	r3, r2
 800d0c0:	011b      	lsls	r3, r3, #4
 800d0c2:	1a9b      	subs	r3, r3, r2
 800d0c4:	009b      	lsls	r3, r3, #2
 800d0c6:	33f0      	adds	r3, #240	@ 0xf0
 800d0c8:	443b      	add	r3, r7
 800d0ca:	3b78      	subs	r3, #120	@ 0x78
 800d0cc:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 800d0d0:	801a      	strh	r2, [r3, #0]
 800d0d2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	011b      	lsls	r3, r3, #4
 800d0da:	1a9b      	subs	r3, r3, r2
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	33f0      	adds	r3, #240	@ 0xf0
 800d0e0:	443b      	add	r3, r7
 800d0e2:	3b74      	subs	r3, #116	@ 0x74
 800d0e4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800d0e8:	601a      	str	r2, [r3, #0]
 800d0ea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800d0ee:	4613      	mov	r3, r2
 800d0f0:	011b      	lsls	r3, r3, #4
 800d0f2:	1a9b      	subs	r3, r3, r2
 800d0f4:	009b      	lsls	r3, r3, #2
 800d0f6:	33f0      	adds	r3, #240	@ 0xf0
 800d0f8:	443b      	add	r3, r7
 800d0fa:	3b70      	subs	r3, #112	@ 0x70
 800d0fc:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800d100:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 800d102:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d106:	3301      	adds	r3, #1
 800d108:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

            uint16_t fromid = lfs_tag_size(tag);
 800d10c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d10e:	4618      	mov	r0, r3
 800d110:	f7fe fff8 	bl	800c104 <lfs_tag_size>
 800d114:	4603      	mov	r3, r0
 800d116:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
            uint16_t toid = lfs_tag_id(tag);
 800d11a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7fe ffe1 	bl	800c0e4 <lfs_tag_id>
 800d122:	4603      	mov	r3, r0
 800d124:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
            dir = buffer;
 800d128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d12c:	60bb      	str	r3, [r7, #8]
            off = 0;
 800d12e:	2300      	movs	r3, #0
 800d130:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 800d132:	f04f 33ff 	mov.w	r3, #4294967295
 800d136:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 800d138:	2300      	movs	r3, #0
 800d13a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            attrcount = 0;
 800d13e:	2300      	movs	r3, #0
 800d140:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 800d144:	4b51      	ldr	r3, [pc, #324]	@ (800d28c <lfs_dir_traverse+0x618>)
 800d146:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 800d14a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800d14e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            begin = fromid;
 800d152:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800d156:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
            end = fromid+1;
 800d15a:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800d15e:	3301      	adds	r3, #1
 800d160:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
            diff = toid-fromid+diff;
 800d164:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	@ 0xd0
 800d168:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800d16c:	1ad3      	subs	r3, r2, r3
 800d16e:	b29a      	uxth	r2, r3
 800d170:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 800d174:	4413      	add	r3, r2
 800d176:	b29b      	uxth	r3, r3
 800d178:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 800d17c:	e589      	b.n	800cc92 <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800d17e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d180:	4618      	mov	r0, r3
 800d182:	f7fe ff85 	bl	800c090 <lfs_tag_type3>
 800d186:	4603      	mov	r3, r0
 800d188:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800d18c:	d159      	bne.n	800d242 <lfs_dir_traverse+0x5ce>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800d18e:	2300      	movs	r3, #0
 800d190:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d194:	e04b      	b.n	800d22e <lfs_dir_traverse+0x5ba>
                const struct lfs_attr *a = buffer;
 800d196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d19a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800d19e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d1a2:	4613      	mov	r3, r2
 800d1a4:	005b      	lsls	r3, r3, #1
 800d1a6:	4413      	add	r3, r2
 800d1a8:	009b      	lsls	r3, r3, #2
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d1b0:	4413      	add	r3, r2
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800d1b8:	051c      	lsls	r4, r3, #20
 800d1ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7fe ff91 	bl	800c0e4 <lfs_tag_id>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 800d1ca:	4413      	add	r3, r2
 800d1cc:	029b      	lsls	r3, r3, #10
 800d1ce:	ea44 0103 	orr.w	r1, r4, r3
 800d1d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d1d6:	4613      	mov	r3, r2
 800d1d8:	005b      	lsls	r3, r3, #1
 800d1da:	4413      	add	r3, r2
 800d1dc:	009b      	lsls	r3, r3, #2
 800d1de:	461a      	mov	r2, r3
 800d1e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d1e4:	4413      	add	r3, r2
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 800d1ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	005b      	lsls	r3, r3, #1
 800d1f2:	4413      	add	r3, r2
 800d1f4:	009b      	lsls	r3, r3, #2
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d1fc:	4413      	add	r3, r2
 800d1fe:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800d200:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d204:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800d208:	4798      	blx	r3
 800d20a:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                if (res < 0) {
 800d20e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d212:	2b00      	cmp	r3, #0
 800d214:	da02      	bge.n	800d21c <lfs_dir_traverse+0x5a8>
                    return res;
 800d216:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d21a:	e10b      	b.n	800d434 <lfs_dir_traverse+0x7c0>
                }

                if (res) {
 800d21c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d220:	2b00      	cmp	r3, #0
 800d222:	d12e      	bne.n	800d282 <lfs_dir_traverse+0x60e>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800d224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d228:	3301      	adds	r3, #1
 800d22a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d22e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d230:	4618      	mov	r0, r3
 800d232:	f7fe ff67 	bl	800c104 <lfs_tag_size>
 800d236:	4602      	mov	r2, r0
 800d238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d3aa      	bcc.n	800d196 <lfs_dir_traverse+0x522>
 800d240:	e527      	b.n	800cc92 <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800d242:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 800d246:	029a      	lsls	r2, r3, #10
 800d248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d24a:	18d1      	adds	r1, r2, r3
 800d24c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d250:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d254:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800d258:	4798      	blx	r3
 800d25a:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
            if (res < 0) {
 800d25e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d262:	2b00      	cmp	r3, #0
 800d264:	da02      	bge.n	800d26c <lfs_dir_traverse+0x5f8>
                return res;
 800d266:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d26a:	e0e3      	b.n	800d434 <lfs_dir_traverse+0x7c0>
            }

            if (res) {
 800d26c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d270:	2b00      	cmp	r3, #0
 800d272:	d10d      	bne.n	800d290 <lfs_dir_traverse+0x61c>
 800d274:	e50d      	b.n	800cc92 <lfs_dir_traverse+0x1e>
                continue;
 800d276:	bf00      	nop
 800d278:	e50b      	b.n	800cc92 <lfs_dir_traverse+0x1e>
            continue;
 800d27a:	bf00      	nop
 800d27c:	e509      	b.n	800cc92 <lfs_dir_traverse+0x1e>
                continue;
 800d27e:	bf00      	nop
 800d280:	e507      	b.n	800cc92 <lfs_dir_traverse+0x1e>
                    break;
 800d282:	bf00      	nop
        {
 800d284:	e505      	b.n	800cc92 <lfs_dir_traverse+0x1e>
 800d286:	bf00      	nop
 800d288:	0800cbbd 	.word	0x0800cbbd
 800d28c:	600ffc00 	.word	0x600ffc00
                break;
 800d290:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 800d292:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d296:	2b00      	cmp	r3, #0
 800d298:	f000 80ca 	beq.w	800d430 <lfs_dir_traverse+0x7bc>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 800d29c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d2a0:	1e5a      	subs	r2, r3, #1
 800d2a2:	4613      	mov	r3, r2
 800d2a4:	011b      	lsls	r3, r3, #4
 800d2a6:	1a9b      	subs	r3, r3, r2
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	33f0      	adds	r3, #240	@ 0xf0
 800d2ac:	443b      	add	r3, r7
 800d2ae:	3b98      	subs	r3, #152	@ 0x98
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 800d2b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d2b8:	1e5a      	subs	r2, r3, #1
 800d2ba:	4613      	mov	r3, r2
 800d2bc:	011b      	lsls	r3, r3, #4
 800d2be:	1a9b      	subs	r3, r3, r2
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	33f0      	adds	r3, #240	@ 0xf0
 800d2c4:	443b      	add	r3, r7
 800d2c6:	3b94      	subs	r3, #148	@ 0x94
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 800d2cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d2d0:	1e5a      	subs	r2, r3, #1
 800d2d2:	4613      	mov	r3, r2
 800d2d4:	011b      	lsls	r3, r3, #4
 800d2d6:	1a9b      	subs	r3, r3, r2
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	33f0      	adds	r3, #240	@ 0xf0
 800d2dc:	443b      	add	r3, r7
 800d2de:	3b90      	subs	r3, #144	@ 0x90
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 800d2e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d2e8:	1e5a      	subs	r2, r3, #1
 800d2ea:	4613      	mov	r3, r2
 800d2ec:	011b      	lsls	r3, r3, #4
 800d2ee:	1a9b      	subs	r3, r3, r2
 800d2f0:	009b      	lsls	r3, r3, #2
 800d2f2:	33f0      	adds	r3, #240	@ 0xf0
 800d2f4:	443b      	add	r3, r7
 800d2f6:	3b8c      	subs	r3, #140	@ 0x8c
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        attrcount   = stack[sp-1].attrcount;
 800d2fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d302:	1e5a      	subs	r2, r3, #1
 800d304:	4613      	mov	r3, r2
 800d306:	011b      	lsls	r3, r3, #4
 800d308:	1a9b      	subs	r3, r3, r2
 800d30a:	009b      	lsls	r3, r3, #2
 800d30c:	33f0      	adds	r3, #240	@ 0xf0
 800d30e:	443b      	add	r3, r7
 800d310:	3b88      	subs	r3, #136	@ 0x88
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        tmask       = stack[sp-1].tmask;
 800d318:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d31c:	1e5a      	subs	r2, r3, #1
 800d31e:	4613      	mov	r3, r2
 800d320:	011b      	lsls	r3, r3, #4
 800d322:	1a9b      	subs	r3, r3, r2
 800d324:	009b      	lsls	r3, r3, #2
 800d326:	33f0      	adds	r3, #240	@ 0xf0
 800d328:	443b      	add	r3, r7
 800d32a:	3b84      	subs	r3, #132	@ 0x84
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        ttag        = stack[sp-1].ttag;
 800d332:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d336:	1e5a      	subs	r2, r3, #1
 800d338:	4613      	mov	r3, r2
 800d33a:	011b      	lsls	r3, r3, #4
 800d33c:	1a9b      	subs	r3, r3, r2
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	33f0      	adds	r3, #240	@ 0xf0
 800d342:	443b      	add	r3, r7
 800d344:	3b80      	subs	r3, #128	@ 0x80
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        begin       = stack[sp-1].begin;
 800d34c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d350:	1e5a      	subs	r2, r3, #1
 800d352:	4613      	mov	r3, r2
 800d354:	011b      	lsls	r3, r3, #4
 800d356:	1a9b      	subs	r3, r3, r2
 800d358:	009b      	lsls	r3, r3, #2
 800d35a:	33f0      	adds	r3, #240	@ 0xf0
 800d35c:	443b      	add	r3, r7
 800d35e:	3b7c      	subs	r3, #124	@ 0x7c
 800d360:	881b      	ldrh	r3, [r3, #0]
 800d362:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        end         = stack[sp-1].end;
 800d366:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d36a:	1e5a      	subs	r2, r3, #1
 800d36c:	4613      	mov	r3, r2
 800d36e:	011b      	lsls	r3, r3, #4
 800d370:	1a9b      	subs	r3, r3, r2
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	33f0      	adds	r3, #240	@ 0xf0
 800d376:	443b      	add	r3, r7
 800d378:	3b7a      	subs	r3, #122	@ 0x7a
 800d37a:	881b      	ldrh	r3, [r3, #0]
 800d37c:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
        diff        = stack[sp-1].diff;
 800d380:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d384:	1e5a      	subs	r2, r3, #1
 800d386:	4613      	mov	r3, r2
 800d388:	011b      	lsls	r3, r3, #4
 800d38a:	1a9b      	subs	r3, r3, r2
 800d38c:	009b      	lsls	r3, r3, #2
 800d38e:	33f0      	adds	r3, #240	@ 0xf0
 800d390:	443b      	add	r3, r7
 800d392:	3b78      	subs	r3, #120	@ 0x78
 800d394:	881b      	ldrh	r3, [r3, #0]
 800d396:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        cb          = stack[sp-1].cb;
 800d39a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d39e:	1e5a      	subs	r2, r3, #1
 800d3a0:	4613      	mov	r3, r2
 800d3a2:	011b      	lsls	r3, r3, #4
 800d3a4:	1a9b      	subs	r3, r3, r2
 800d3a6:	009b      	lsls	r3, r3, #2
 800d3a8:	33f0      	adds	r3, #240	@ 0xf0
 800d3aa:	443b      	add	r3, r7
 800d3ac:	3b74      	subs	r3, #116	@ 0x74
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        data        = stack[sp-1].data;
 800d3b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d3b8:	1e5a      	subs	r2, r3, #1
 800d3ba:	4613      	mov	r3, r2
 800d3bc:	011b      	lsls	r3, r3, #4
 800d3be:	1a9b      	subs	r3, r3, r2
 800d3c0:	009b      	lsls	r3, r3, #2
 800d3c2:	33f0      	adds	r3, #240	@ 0xf0
 800d3c4:	443b      	add	r3, r7
 800d3c6:	3b70      	subs	r3, #112	@ 0x70
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        tag         = stack[sp-1].tag;
 800d3ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d3d2:	1e5a      	subs	r2, r3, #1
 800d3d4:	4613      	mov	r3, r2
 800d3d6:	011b      	lsls	r3, r3, #4
 800d3d8:	1a9b      	subs	r3, r3, r2
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	33f0      	adds	r3, #240	@ 0xf0
 800d3de:	443b      	add	r3, r7
 800d3e0:	3b6c      	subs	r3, #108	@ 0x6c
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	657b      	str	r3, [r7, #84]	@ 0x54
        buffer      = stack[sp-1].buffer;
 800d3e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d3ea:	1e5a      	subs	r2, r3, #1
 800d3ec:	4613      	mov	r3, r2
 800d3ee:	011b      	lsls	r3, r3, #4
 800d3f0:	1a9b      	subs	r3, r3, r2
 800d3f2:	009b      	lsls	r3, r3, #2
 800d3f4:	33f0      	adds	r3, #240	@ 0xf0
 800d3f6:	443b      	add	r3, r7
 800d3f8:	3b68      	subs	r3, #104	@ 0x68
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        disk        = stack[sp-1].disk;
 800d400:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d404:	1e5a      	subs	r2, r3, #1
 800d406:	4613      	mov	r3, r2
 800d408:	011b      	lsls	r3, r3, #4
 800d40a:	1a9b      	subs	r3, r3, r2
 800d40c:	009b      	lsls	r3, r3, #2
 800d40e:	33f0      	adds	r3, #240	@ 0xf0
 800d410:	443b      	add	r3, r7
 800d412:	f1a3 0268 	sub.w	r2, r3, #104	@ 0x68
 800d416:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d41a:	3204      	adds	r2, #4
 800d41c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d420:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 800d424:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d428:	3b01      	subs	r3, #1
 800d42a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        goto popped;
 800d42e:	e596      	b.n	800cf5e <lfs_dir_traverse+0x2ea>
    } else {
        return res;
 800d430:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
    }
}
 800d434:	4618      	mov	r0, r3
 800d436:	37f4      	adds	r7, #244	@ 0xf4
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd90      	pop	{r4, r7, pc}

0800d43c <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800d43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d43e:	b0a5      	sub	sp, #148	@ 0x94
 800d440:	af04      	add	r7, sp, #16
 800d442:	6178      	str	r0, [r7, #20]
 800d444:	6139      	str	r1, [r7, #16]
 800d446:	60fa      	str	r2, [r7, #12]
 800d448:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 800d44a:	f04f 33ff 	mov.w	r3, #4294967295
 800d44e:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count 
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d454:	2b00      	cmp	r3, #0
 800d456:	d00f      	beq.n	800d478 <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681a      	ldr	r2, [r3, #0]
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d460:	429a      	cmp	r2, r3
 800d462:	d206      	bcs.n	800d472 <lfs_dir_fetchmatch+0x36>
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	3304      	adds	r3, #4
 800d468:	681a      	ldr	r2, [r3, #0]
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d46e:	429a      	cmp	r2, r3
 800d470:	d302      	bcc.n	800d478 <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 800d472:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800d476:	e3a4      	b.n	800dbc2 <lfs_dir_fetchmatch+0x786>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 800d478:	2300      	movs	r3, #0
 800d47a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d47c:	2300      	movs	r3, #0
 800d47e:	64bb      	str	r3, [r7, #72]	@ 0x48
    int r = 0;
 800d480:	2300      	movs	r3, #0
 800d482:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 800d484:	2300      	movs	r3, #0
 800d486:	677b      	str	r3, [r7, #116]	@ 0x74
 800d488:	e05a      	b.n	800d540 <lfs_dir_fetchmatch+0x104>
        int err = lfs_bd_read(lfs,
 800d48a:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800d48c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d48e:	009b      	lsls	r3, r3, #2
 800d490:	68fa      	ldr	r2, [r7, #12]
 800d492:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800d494:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800d496:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800d49a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800d49c:	0092      	lsls	r2, r2, #2
 800d49e:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 800d4a0:	2104      	movs	r1, #4
 800d4a2:	9103      	str	r1, [sp, #12]
 800d4a4:	9202      	str	r2, [sp, #8]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	9201      	str	r2, [sp, #4]
 800d4aa:	9300      	str	r3, [sp, #0]
 800d4ac:	2304      	movs	r3, #4
 800d4ae:	4602      	mov	r2, r0
 800d4b0:	2100      	movs	r1, #0
 800d4b2:	6978      	ldr	r0, [r7, #20]
 800d4b4:	f7fe f93a 	bl	800b72c <lfs_bd_read>
 800d4b8:	64f8      	str	r0, [r7, #76]	@ 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 800d4ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d4bc:	009b      	lsls	r3, r3, #2
 800d4be:	3378      	adds	r3, #120	@ 0x78
 800d4c0:	f107 0208 	add.w	r2, r7, #8
 800d4c4:	4413      	add	r3, r2
 800d4c6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7fe f8c2 	bl	800b654 <lfs_fromle32>
 800d4d0:	4602      	mov	r2, r0
 800d4d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d4d4:	009b      	lsls	r3, r3, #2
 800d4d6:	3378      	adds	r3, #120	@ 0x78
 800d4d8:	f107 0108 	add.w	r1, r7, #8
 800d4dc:	440b      	add	r3, r1
 800d4de:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 800d4e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d005      	beq.n	800d4f4 <lfs_dir_fetchmatch+0xb8>
 800d4e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4ea:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800d4ee:	d001      	beq.n	800d4f4 <lfs_dir_fetchmatch+0xb8>
            return err;
 800d4f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4f2:	e366      	b.n	800dbc2 <lfs_dir_fetchmatch+0x786>
        }

        if (err != LFS_ERR_CORRUPT &&
 800d4f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4f6:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800d4fa:	d01e      	beq.n	800d53a <lfs_dir_fetchmatch+0xfe>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 800d4fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d4fe:	009b      	lsls	r3, r3, #2
 800d500:	3378      	adds	r3, #120	@ 0x78
 800d502:	f107 0208 	add.w	r2, r7, #8
 800d506:	4413      	add	r3, r2
 800d508:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800d50c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d50e:	3301      	adds	r3, #1
 800d510:	2b00      	cmp	r3, #0
 800d512:	f003 0301 	and.w	r3, r3, #1
 800d516:	bfb8      	it	lt
 800d518:	425b      	neglt	r3, r3
 800d51a:	009b      	lsls	r3, r3, #2
 800d51c:	3378      	adds	r3, #120	@ 0x78
 800d51e:	f107 0108 	add.w	r1, r7, #8
 800d522:	440b      	add	r3, r1
 800d524:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800d528:	4619      	mov	r1, r3
 800d52a:	4610      	mov	r0, r2
 800d52c:	f7fe f884 	bl	800b638 <lfs_scmp>
 800d530:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800d532:	2b00      	cmp	r3, #0
 800d534:	dd01      	ble.n	800d53a <lfs_dir_fetchmatch+0xfe>
            r = i;
 800d536:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d538:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 800d53a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d53c:	3301      	adds	r3, #1
 800d53e:	677b      	str	r3, [r7, #116]	@ 0x74
 800d540:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d542:	2b01      	cmp	r3, #1
 800d544:	dda1      	ble.n	800d48a <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800d546:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d548:	2b00      	cmp	r3, #0
 800d54a:	f003 0301 	and.w	r3, r3, #1
 800d54e:	bfb8      	it	lt
 800d550:	425b      	neglt	r3, r3
 800d552:	009b      	lsls	r3, r3, #2
 800d554:	68fa      	ldr	r2, [r7, #12]
 800d556:	4413      	add	r3, r2
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800d55e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d560:	3301      	adds	r3, #1
 800d562:	2b00      	cmp	r3, #0
 800d564:	f003 0301 	and.w	r3, r3, #1
 800d568:	bfb8      	it	lt
 800d56a:	425b      	neglt	r3, r3
 800d56c:	009b      	lsls	r3, r3, #2
 800d56e:	68fa      	ldr	r2, [r7, #12]
 800d570:	4413      	add	r3, r2
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 800d578:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	f003 0301 	and.w	r3, r3, #1
 800d580:	bfb8      	it	lt
 800d582:	425b      	neglt	r3, r3
 800d584:	009b      	lsls	r3, r3, #2
 800d586:	3378      	adds	r3, #120	@ 0x78
 800d588:	f107 0208 	add.w	r2, r7, #8
 800d58c:	4413      	add	r3, r2
 800d58e:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	2200      	movs	r2, #0
 800d59a:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 800d59c:	2300      	movs	r3, #0
 800d59e:	673b      	str	r3, [r7, #112]	@ 0x70
 800d5a0:	e2fb      	b.n	800db9a <lfs_dir_fetchmatch+0x75e>
        lfs_off_t off = 0;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
        lfs_tag_t ptag = 0xffffffff;
 800d5a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d5aa:	66bb      	str	r3, [r7, #104]	@ 0x68

        uint16_t tempcount = 0;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800d5b2:	4aa9      	ldr	r2, [pc, #676]	@ (800d858 <lfs_dir_fetchmatch+0x41c>)
 800d5b4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d5b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d5bc:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
        lfs_stag_t tempbesttag = besttag;
 800d5c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d5c8:	663b      	str	r3, [r7, #96]	@ 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        bool hasfcrc = false;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	689b      	ldr	r3, [r3, #8]
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f7fe f845 	bl	800b66a <lfs_tole32>
 800d5e0:	4602      	mov	r2, r0
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	3308      	adds	r3, #8
 800d5ea:	2204      	movs	r2, #4
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f2:	f004 ffe7 	bl	80125c4 <lfs_crc>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	633b      	str	r3, [r7, #48]	@ 0x30
        dir->rev = lfs_fromle32(dir->rev);
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	689b      	ldr	r3, [r3, #8]
 800d5fe:	4618      	mov	r0, r3
 800d600:	f7fe f828 	bl	800b654 <lfs_fromle32>
 800d604:	4602      	mov	r2, r0
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 800d60a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800d60c:	f7fe fd87 	bl	800c11e <lfs_tag_dsize>
 800d610:	4602      	mov	r2, r0
 800d612:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d614:	4413      	add	r3, r2
 800d616:	66fb      	str	r3, [r7, #108]	@ 0x6c
            int err = lfs_bd_read(lfs,
 800d618:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d61e:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	2204      	movs	r2, #4
 800d626:	9203      	str	r2, [sp, #12]
 800d628:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800d62c:	9202      	str	r2, [sp, #8]
 800d62e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d630:	9201      	str	r2, [sp, #4]
 800d632:	9300      	str	r3, [sp, #0]
 800d634:	4603      	mov	r3, r0
 800d636:	460a      	mov	r2, r1
 800d638:	2100      	movs	r1, #0
 800d63a:	6978      	ldr	r0, [r7, #20]
 800d63c:	f7fe f876 	bl	800b72c <lfs_bd_read>
 800d640:	65b8      	str	r0, [r7, #88]	@ 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800d642:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d644:	2b00      	cmp	r3, #0
 800d646:	d006      	beq.n	800d656 <lfs_dir_fetchmatch+0x21a>
                if (err == LFS_ERR_CORRUPT) {
 800d648:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d64a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800d64e:	f000 81d6 	beq.w	800d9fe <lfs_dir_fetchmatch+0x5c2>
                    // can't continue?
                    break;
                }
                return err;
 800d652:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d654:	e2b5      	b.n	800dbc2 <lfs_dir_fetchmatch+0x786>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 800d656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d658:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800d65c:	2204      	movs	r2, #4
 800d65e:	4618      	mov	r0, r3
 800d660:	f004 ffb0 	bl	80125c4 <lfs_crc>
 800d664:	4603      	mov	r3, r0
 800d666:	633b      	str	r3, [r7, #48]	@ 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 800d668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7fe f809 	bl	800b682 <lfs_frombe32>
 800d670:	4602      	mov	r2, r0
 800d672:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d674:	4053      	eors	r3, r2
 800d676:	62fb      	str	r3, [r7, #44]	@ 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 800d678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7fe fcc7 	bl	800c00e <lfs_tag_isvalid>
 800d680:	4603      	mov	r3, r0
 800d682:	f083 0301 	eor.w	r3, r3, #1
 800d686:	b2db      	uxtb	r3, r3
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d00b      	beq.n	800d6a4 <lfs_dir_fetchmatch+0x268>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 800d68c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800d68e:	f7fe fcef 	bl	800c070 <lfs_tag_type2>
 800d692:	4603      	mov	r3, r0
 800d694:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800d698:	bf0c      	ite	eq
 800d69a:	2301      	moveq	r3, #1
 800d69c:	2300      	movne	r3, #0
 800d69e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                break;
 800d6a2:	e1bb      	b.n	800da1c <lfs_dir_fetchmatch+0x5e0>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800d6a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f7fe fd39 	bl	800c11e <lfs_tag_dsize>
 800d6ac:	4602      	mov	r2, r0
 800d6ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6b0:	441a      	add	r2, r3
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d6b6:	69db      	ldr	r3, [r3, #28]
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	f200 81a2 	bhi.w	800da02 <lfs_dir_fetchmatch+0x5c6>
                break;
            }

            ptag = tag;
 800d6be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c0:	66bb      	str	r3, [r7, #104]	@ 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 800d6c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f7fe fcd3 	bl	800c070 <lfs_tag_type2>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800d6d0:	d15e      	bne.n	800d790 <lfs_dir_fetchmatch+0x354>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800d6d2:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d6d8:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d6e0:	3204      	adds	r2, #4
 800d6e2:	2104      	movs	r1, #4
 800d6e4:	9103      	str	r1, [sp, #12]
 800d6e6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800d6ea:	9102      	str	r1, [sp, #8]
 800d6ec:	9201      	str	r2, [sp, #4]
 800d6ee:	9300      	str	r3, [sp, #0]
 800d6f0:	4623      	mov	r3, r4
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	2100      	movs	r1, #0
 800d6f6:	6978      	ldr	r0, [r7, #20]
 800d6f8:	f7fe f818 	bl	800b72c <lfs_bd_read>
 800d6fc:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 800d6fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d700:	2b00      	cmp	r3, #0
 800d702:	d006      	beq.n	800d712 <lfs_dir_fetchmatch+0x2d6>
                    if (err == LFS_ERR_CORRUPT) {
 800d704:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d706:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800d70a:	f000 817c 	beq.w	800da06 <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 800d70e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                return err;
 800d710:	e257      	b.n	800dbc2 <lfs_dir_fetchmatch+0x786>
                }
                dcrc = lfs_fromle32(dcrc);
 800d712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d714:	4618      	mov	r0, r3
 800d716:	f7fd ff9d 	bl	800b654 <lfs_fromle32>
 800d71a:	4603      	mov	r3, r0
 800d71c:	62bb      	str	r3, [r7, #40]	@ 0x28

                if (crc != dcrc) {
 800d71e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d722:	429a      	cmp	r2, r3
 800d724:	f040 8171 	bne.w	800da0a <lfs_dir_fetchmatch+0x5ce>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 800d728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7fe fcc0 	bl	800c0b0 <lfs_tag_chunk>
 800d730:	4603      	mov	r3, r0
 800d732:	07db      	lsls	r3, r3, #31
 800d734:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d736:	4053      	eors	r3, r2
 800d738:	66bb      	str	r3, [r7, #104]	@ 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d73e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800d742:	2204      	movs	r2, #4
 800d744:	4618      	mov	r0, r3
 800d746:	f004 ff3d 	bl	80125c4 <lfs_crc>
 800d74a:	4602      	mov	r2, r0
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	62da      	str	r2, [r3, #44]	@ 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 800d750:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d752:	67fb      	str	r3, [r7, #124]	@ 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 800d754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d756:	4618      	mov	r0, r3
 800d758:	f7fe fce1 	bl	800c11e <lfs_tag_dsize>
 800d75c:	4602      	mov	r2, r0
 800d75e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d760:	441a      	add	r2, r3
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d76a:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 800d772:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 800d774:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 800d77a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 800d786:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 800d788:	f04f 33ff 	mov.w	r3, #4294967295
 800d78c:	633b      	str	r3, [r7, #48]	@ 0x30
 800d78e:	e73c      	b.n	800d60a <lfs_dir_fetchmatch+0x1ce>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 800d790:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d796:	69db      	ldr	r3, [r3, #28]
 800d798:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	681c      	ldr	r4, [r3, #0]
 800d79e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d7a0:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 800d7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7fe fcba 	bl	800c11e <lfs_tag_dsize>
 800d7aa:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 800d7ac:	3b04      	subs	r3, #4
 800d7ae:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d7b2:	9203      	str	r2, [sp, #12]
 800d7b4:	9302      	str	r3, [sp, #8]
 800d7b6:	9501      	str	r5, [sp, #4]
 800d7b8:	9400      	str	r4, [sp, #0]
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	4632      	mov	r2, r6
 800d7be:	2100      	movs	r1, #0
 800d7c0:	6978      	ldr	r0, [r7, #20]
 800d7c2:	f7fe f950 	bl	800ba66 <lfs_bd_crc>
 800d7c6:	65b8      	str	r0, [r7, #88]	@ 0x58
            if (err) {
 800d7c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d006      	beq.n	800d7dc <lfs_dir_fetchmatch+0x3a0>
                if (err == LFS_ERR_CORRUPT) {
 800d7ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d7d0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800d7d4:	f000 811b 	beq.w	800da0e <lfs_dir_fetchmatch+0x5d2>
                    break;
                }
                return err;
 800d7d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d7da:	e1f2      	b.n	800dbc2 <lfs_dir_fetchmatch+0x786>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800d7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7fe fc36 	bl	800c050 <lfs_tag_type1>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d113      	bne.n	800d812 <lfs_dir_fetchmatch+0x3d6>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 800d7ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f7fe fc79 	bl	800c0e4 <lfs_tag_id>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	f200 80b6 	bhi.w	800d96c <lfs_dir_fetchmatch+0x530>
                    tempcount = lfs_tag_id(tag) + 1;
 800d800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d802:	4618      	mov	r0, r3
 800d804:	f7fe fc6e 	bl	800c0e4 <lfs_tag_id>
 800d808:	4603      	mov	r3, r0
 800d80a:	3301      	adds	r3, #1
 800d80c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800d810:	e0ac      	b.n	800d96c <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800d812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d814:	4618      	mov	r0, r3
 800d816:	f7fe fc1b 	bl	800c050 <lfs_tag_type1>
 800d81a:	4603      	mov	r3, r0
 800d81c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d820:	d13a      	bne.n	800d898 <lfs_dir_fetchmatch+0x45c>
                tempcount += lfs_tag_splice(tag);
 800d822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d824:	4618      	mov	r0, r3
 800d826:	f7fe fc50 	bl	800c0ca <lfs_tag_splice>
 800d82a:	4603      	mov	r3, r0
 800d82c:	b29a      	uxth	r2, r3
 800d82e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800d832:	4413      	add	r3, r2
 800d834:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 800d838:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d83a:	4b08      	ldr	r3, [pc, #32]	@ (800d85c <lfs_dir_fetchmatch+0x420>)
 800d83c:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800d83e:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800d842:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800d846:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d848:	4293      	cmp	r3, r2
 800d84a:	d109      	bne.n	800d860 <lfs_dir_fetchmatch+0x424>
                    tempbesttag |= 0x80000000;
 800d84c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d84e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d852:	663b      	str	r3, [r7, #96]	@ 0x60
 800d854:	e08a      	b.n	800d96c <lfs_dir_fetchmatch+0x530>
 800d856:	bf00      	nop
 800d858:	08013a24 	.word	0x08013a24
 800d85c:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 800d860:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d866:	f000 8081 	beq.w	800d96c <lfs_dir_fetchmatch+0x530>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800d86a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7fe fc39 	bl	800c0e4 <lfs_tag_id>
 800d872:	4603      	mov	r3, r0
 800d874:	461c      	mov	r4, r3
 800d876:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d878:	4618      	mov	r0, r3
 800d87a:	f7fe fc33 	bl	800c0e4 <lfs_tag_id>
 800d87e:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 800d880:	429c      	cmp	r4, r3
 800d882:	d873      	bhi.n	800d96c <lfs_dir_fetchmatch+0x530>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800d884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d886:	4618      	mov	r0, r3
 800d888:	f7fe fc1f 	bl	800c0ca <lfs_tag_splice>
 800d88c:	4603      	mov	r3, r0
 800d88e:	029a      	lsls	r2, r3, #10
 800d890:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d892:	4413      	add	r3, r2
 800d894:	663b      	str	r3, [r7, #96]	@ 0x60
 800d896:	e069      	b.n	800d96c <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 800d898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7fe fbd8 	bl	800c050 <lfs_tag_type1>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800d8a6:	d132      	bne.n	800d90e <lfs_dir_fetchmatch+0x4d2>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 800d8a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f7fe fc00 	bl	800c0b0 <lfs_tag_chunk>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	f003 0301 	and.w	r3, r3, #1
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	bf14      	ite	ne
 800d8ba:	2301      	movne	r3, #1
 800d8bc:	2300      	moveq	r3, #0
 800d8be:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

                err = lfs_bd_read(lfs,
 800d8c2:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d8c8:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d8d0:	3204      	adds	r2, #4
 800d8d2:	2108      	movs	r1, #8
 800d8d4:	9103      	str	r1, [sp, #12]
 800d8d6:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800d8da:	9102      	str	r1, [sp, #8]
 800d8dc:	9201      	str	r2, [sp, #4]
 800d8de:	9300      	str	r3, [sp, #0]
 800d8e0:	4623      	mov	r3, r4
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	2100      	movs	r1, #0
 800d8e6:	6978      	ldr	r0, [r7, #20]
 800d8e8:	f7fd ff20 	bl	800b72c <lfs_bd_read>
 800d8ec:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 800d8ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d006      	beq.n	800d902 <lfs_dir_fetchmatch+0x4c6>
                    if (err == LFS_ERR_CORRUPT) {
 800d8f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8f6:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800d8fa:	f000 808a 	beq.w	800da12 <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                    return err;
 800d8fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d900:	e15f      	b.n	800dbc2 <lfs_dir_fetchmatch+0x786>
                }
                lfs_pair_fromle32(temptail);
 800d902:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d906:	4618      	mov	r0, r3
 800d908:	f7fe fb4d 	bl	800bfa6 <lfs_pair_fromle32>
 800d90c:	e02e      	b.n	800d96c <lfs_dir_fetchmatch+0x530>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 800d90e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d910:	4618      	mov	r0, r3
 800d912:	f7fe fbbd 	bl	800c090 <lfs_tag_type3>
 800d916:	4603      	mov	r3, r0
 800d918:	461a      	mov	r2, r3
 800d91a:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 800d91e:	429a      	cmp	r2, r3
 800d920:	d124      	bne.n	800d96c <lfs_dir_fetchmatch+0x530>
                err = lfs_bd_read(lfs,
 800d922:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d928:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d930:	3204      	adds	r2, #4
 800d932:	2108      	movs	r1, #8
 800d934:	9103      	str	r1, [sp, #12]
 800d936:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800d93a:	9102      	str	r1, [sp, #8]
 800d93c:	9201      	str	r2, [sp, #4]
 800d93e:	9300      	str	r3, [sp, #0]
 800d940:	4623      	mov	r3, r4
 800d942:	4602      	mov	r2, r0
 800d944:	2100      	movs	r1, #0
 800d946:	6978      	ldr	r0, [r7, #20]
 800d948:	f7fd fef0 	bl	800b72c <lfs_bd_read>
 800d94c:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 800d94e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d950:	2b00      	cmp	r3, #0
 800d952:	d003      	beq.n	800d95c <lfs_dir_fetchmatch+0x520>
                    if (err == LFS_ERR_CORRUPT) {
 800d954:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d956:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800d95a:	d05c      	beq.n	800da16 <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 800d95c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d960:	4618      	mov	r0, r3
 800d962:	f7fe fcd5 	bl	800c310 <lfs_fcrc_fromle32>
                hasfcrc = true;
 800d966:	2301      	movs	r3, #1
 800d968:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 800d96c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d96e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d972:	405a      	eors	r2, r3
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	4013      	ands	r3, r2
 800d978:	2b00      	cmp	r3, #0
 800d97a:	f47f ae46 	bne.w	800d60a <lfs_dir_fetchmatch+0x1ce>
                int res = cb(data, tag, &(struct lfs_diskoff){
 800d97e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
                        dir->pair[0], off+sizeof(tag)});
 800d980:	693b      	ldr	r3, [r7, #16]
 800d982:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 800d984:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 800d986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d988:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 800d98a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d98c:	f107 0220 	add.w	r2, r7, #32
 800d990:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d994:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800d998:	4798      	blx	r3
 800d99a:	6578      	str	r0, [r7, #84]	@ 0x54
                if (res < 0) {
 800d99c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	da05      	bge.n	800d9ae <lfs_dir_fetchmatch+0x572>
                    if (res == LFS_ERR_CORRUPT) {
 800d9a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9a4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800d9a8:	d037      	beq.n	800da1a <lfs_dir_fetchmatch+0x5de>
                        break;
                    }
                    return res;
 800d9aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                return err;
 800d9ac:	e109      	b.n	800dbc2 <lfs_dir_fetchmatch+0x786>
                }

                if (res == LFS_CMP_EQ) {
 800d9ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d102      	bne.n	800d9ba <lfs_dir_fetchmatch+0x57e>
                    // found a match
                    tempbesttag = tag;
 800d9b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9b6:	663b      	str	r3, [r7, #96]	@ 0x60
 800d9b8:	e627      	b.n	800d60a <lfs_dir_fetchmatch+0x1ce>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 800d9ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d9be:	405a      	eors	r2, r3
 800d9c0:	4b82      	ldr	r3, [pc, #520]	@ (800dbcc <lfs_dir_fetchmatch+0x790>)
 800d9c2:	4013      	ands	r3, r2
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d103      	bne.n	800d9d0 <lfs_dir_fetchmatch+0x594>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 800d9c8:	f04f 33ff 	mov.w	r3, #4294967295
 800d9cc:	663b      	str	r3, [r7, #96]	@ 0x60
 800d9ce:	e61c      	b.n	800d60a <lfs_dir_fetchmatch+0x1ce>
                } else if (res == LFS_CMP_GT &&
 800d9d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9d2:	2b02      	cmp	r3, #2
 800d9d4:	f47f ae19 	bne.w	800d60a <lfs_dir_fetchmatch+0x1ce>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800d9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f7fe fb82 	bl	800c0e4 <lfs_tag_id>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	461c      	mov	r4, r3
 800d9e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7fe fb7c 	bl	800c0e4 <lfs_tag_id>
 800d9ec:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 800d9ee:	429c      	cmp	r4, r3
 800d9f0:	f63f ae0b 	bhi.w	800d60a <lfs_dir_fetchmatch+0x1ce>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 800d9f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d9fa:	663b      	str	r3, [r7, #96]	@ 0x60
 800d9fc:	e605      	b.n	800d60a <lfs_dir_fetchmatch+0x1ce>
                    break;
 800d9fe:	bf00      	nop
 800da00:	e00c      	b.n	800da1c <lfs_dir_fetchmatch+0x5e0>
                break;
 800da02:	bf00      	nop
 800da04:	e00a      	b.n	800da1c <lfs_dir_fetchmatch+0x5e0>
                        break;
 800da06:	bf00      	nop
 800da08:	e008      	b.n	800da1c <lfs_dir_fetchmatch+0x5e0>
                    break;
 800da0a:	bf00      	nop
 800da0c:	e006      	b.n	800da1c <lfs_dir_fetchmatch+0x5e0>
                    break;
 800da0e:	bf00      	nop
 800da10:	e004      	b.n	800da1c <lfs_dir_fetchmatch+0x5e0>
                        break;
 800da12:	bf00      	nop
 800da14:	e002      	b.n	800da1c <lfs_dir_fetchmatch+0x5e0>
                        break;
 800da16:	bf00      	nop
 800da18:	e000      	b.n	800da1c <lfs_dir_fetchmatch+0x5e0>
                        break;
 800da1a:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	68db      	ldr	r3, [r3, #12]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d000      	beq.n	800da26 <lfs_dir_fetchmatch+0x5ea>
 800da24:	e017      	b.n	800da56 <lfs_dir_fetchmatch+0x61a>
            // try the other block?
            lfs_pair_swap(dir->pair);
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	4618      	mov	r0, r3
 800da2a:	f7fe fa35 	bl	800be98 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 800da2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800da30:	3301      	adds	r3, #1
 800da32:	2b00      	cmp	r3, #0
 800da34:	f003 0301 	and.w	r3, r3, #1
 800da38:	bfb8      	it	lt
 800da3a:	425b      	neglt	r3, r3
 800da3c:	009b      	lsls	r3, r3, #2
 800da3e:	3378      	adds	r3, #120	@ 0x78
 800da40:	f107 0208 	add.w	r2, r7, #8
 800da44:	4413      	add	r3, r2
 800da46:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800da4a:	693b      	ldr	r3, [r7, #16]
 800da4c:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 800da4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800da50:	3301      	adds	r3, #1
 800da52:	673b      	str	r3, [r7, #112]	@ 0x70
 800da54:	e0a1      	b.n	800db9a <lfs_dir_fetchmatch+0x75e>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	2200      	movs	r2, #0
 800da5a:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 800da5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800da60:	2b00      	cmp	r3, #0
 800da62:	d03a      	beq.n	800dada <lfs_dir_fetchmatch+0x69e>
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	697a      	ldr	r2, [r7, #20]
 800da6a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800da6c:	6992      	ldr	r2, [r2, #24]
 800da6e:	fbb3 f1f2 	udiv	r1, r3, r2
 800da72:	fb01 f202 	mul.w	r2, r1, r2
 800da76:	1a9b      	subs	r3, r3, r2
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d12e      	bne.n	800dada <lfs_dir_fetchmatch+0x69e>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 800da7c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800da80:	2b00      	cmp	r3, #0
 800da82:	d02a      	beq.n	800dada <lfs_dir_fetchmatch+0x69e>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 800da84:	f04f 33ff 	mov.w	r3, #4294967295
 800da88:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 800da8a:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800da90:	69dd      	ldr	r5, [r3, #28]
                int err = lfs_bd_crc(lfs,
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	693a      	ldr	r2, [r7, #16]
 800da98:	68d2      	ldr	r2, [r2, #12]
 800da9a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800da9c:	f107 001c 	add.w	r0, r7, #28
 800daa0:	9003      	str	r0, [sp, #12]
 800daa2:	9102      	str	r1, [sp, #8]
 800daa4:	9201      	str	r2, [sp, #4]
 800daa6:	9300      	str	r3, [sp, #0]
 800daa8:	462b      	mov	r3, r5
 800daaa:	4622      	mov	r2, r4
 800daac:	2100      	movs	r1, #0
 800daae:	6978      	ldr	r0, [r7, #20]
 800dab0:	f7fd ffd9 	bl	800ba66 <lfs_bd_crc>
 800dab4:	6538      	str	r0, [r7, #80]	@ 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 800dab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d005      	beq.n	800dac8 <lfs_dir_fetchmatch+0x68c>
 800dabc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dabe:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800dac2:	d001      	beq.n	800dac8 <lfs_dir_fetchmatch+0x68c>
                    return err;
 800dac4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dac6:	e07c      	b.n	800dbc2 <lfs_dir_fetchmatch+0x786>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 800dac8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	429a      	cmp	r2, r3
 800dace:	bf0c      	ite	eq
 800dad0:	2301      	moveq	r3, #1
 800dad2:	2300      	movne	r3, #0
 800dad4:	b2da      	uxtb	r2, r3
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	333c      	adds	r3, #60	@ 0x3c
 800dade:	693a      	ldr	r2, [r7, #16]
 800dae0:	4611      	mov	r1, r2
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7fe fbb4 	bl	800c250 <lfs_gstate_hasmovehere>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	d028      	beq.n	800db40 <lfs_dir_fetchmatch+0x704>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7fe faf6 	bl	800c0e4 <lfs_tag_id>
 800daf8:	4603      	mov	r3, r0
 800dafa:	461c      	mov	r4, r3
 800dafc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dafe:	4618      	mov	r0, r3
 800db00:	f7fe faf0 	bl	800c0e4 <lfs_tag_id>
 800db04:	4603      	mov	r3, r0
 800db06:	429c      	cmp	r4, r3
 800db08:	d104      	bne.n	800db14 <lfs_dir_fetchmatch+0x6d8>
                besttag |= 0x80000000;
 800db0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800db10:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800db12:	e015      	b.n	800db40 <lfs_dir_fetchmatch+0x704>
            } else if (besttag != -1 &&
 800db14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db1a:	d011      	beq.n	800db40 <lfs_dir_fetchmatch+0x704>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db20:	4618      	mov	r0, r3
 800db22:	f7fe fadf 	bl	800c0e4 <lfs_tag_id>
 800db26:	4603      	mov	r3, r0
 800db28:	461c      	mov	r4, r3
 800db2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db2c:	4618      	mov	r0, r3
 800db2e:	f7fe fad9 	bl	800c0e4 <lfs_tag_id>
 800db32:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 800db34:	429c      	cmp	r4, r3
 800db36:	d203      	bcs.n	800db40 <lfs_dir_fetchmatch+0x704>
                besttag -= LFS_MKTAG(0, 1, 0);
 800db38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db3a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800db3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 800db40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800db44:	2b00      	cmp	r3, #0
 800db46:	d010      	beq.n	800db6a <lfs_dir_fetchmatch+0x72e>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 800db48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7fe faca 	bl	800c0e4 <lfs_tag_id>
 800db50:	4603      	mov	r3, r0
 800db52:	461a      	mov	r2, r3
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	8a9b      	ldrh	r3, [r3, #20]
 800db58:	4619      	mov	r1, r3
 800db5a:	4610      	mov	r0, r2
 800db5c:	f7fd fd0a 	bl	800b574 <lfs_min>
 800db60:	4603      	mov	r3, r0
 800db62:	b29a      	uxth	r2, r3
 800db64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800db68:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 800db6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db6c:	4618      	mov	r0, r3
 800db6e:	f7fe fa4e 	bl	800c00e <lfs_tag_isvalid>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d001      	beq.n	800db7c <lfs_dir_fetchmatch+0x740>
            return besttag;
 800db78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db7a:	e022      	b.n	800dbc2 <lfs_dir_fetchmatch+0x786>
        } else if (lfs_tag_id(besttag) < dir->count) {
 800db7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db7e:	4618      	mov	r0, r3
 800db80:	f7fe fab0 	bl	800c0e4 <lfs_tag_id>
 800db84:	4603      	mov	r3, r0
 800db86:	461a      	mov	r2, r3
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	8a9b      	ldrh	r3, [r3, #20]
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d202      	bcs.n	800db96 <lfs_dir_fetchmatch+0x75a>
            return LFS_ERR_NOENT;
 800db90:	f06f 0301 	mvn.w	r3, #1
 800db94:	e015      	b.n	800dbc2 <lfs_dir_fetchmatch+0x786>
        } else {
            return 0;
 800db96:	2300      	movs	r3, #0
 800db98:	e013      	b.n	800dbc2 <lfs_dir_fetchmatch+0x786>
    for (int i = 0; i < 2; i++) {
 800db9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800db9c:	2b01      	cmp	r3, #1
 800db9e:	f77f ad00 	ble.w	800d5a2 <lfs_dir_fetchmatch+0x166>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	681a      	ldr	r2, [r3, #0]
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	4909      	ldr	r1, [pc, #36]	@ (800dbd0 <lfs_dir_fetchmatch+0x794>)
 800dbac:	9101      	str	r1, [sp, #4]
 800dbae:	9300      	str	r3, [sp, #0]
 800dbb0:	4613      	mov	r3, r2
 800dbb2:	f240 5265 	movw	r2, #1381	@ 0x565
 800dbb6:	4907      	ldr	r1, [pc, #28]	@ (800dbd4 <lfs_dir_fetchmatch+0x798>)
 800dbb8:	4807      	ldr	r0, [pc, #28]	@ (800dbd8 <lfs_dir_fetchmatch+0x79c>)
 800dbba:	f004 fef1 	bl	80129a0 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 800dbbe:	f06f 0353 	mvn.w	r3, #83	@ 0x53
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3784      	adds	r7, #132	@ 0x84
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbca:	bf00      	nop
 800dbcc:	7ffffc00 	.word	0x7ffffc00
 800dbd0:	080139e0 	.word	0x080139e0
 800dbd4:	080138c0 	.word	0x080138c0
 800dbd8:	080139ec 	.word	0x080139ec

0800dbdc <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b088      	sub	sp, #32
 800dbe0:	af04      	add	r7, sp, #16
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 800dbe8:	2300      	movs	r3, #0
 800dbea:	9303      	str	r3, [sp, #12]
 800dbec:	2300      	movs	r3, #0
 800dbee:	9302      	str	r3, [sp, #8]
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	9301      	str	r3, [sp, #4]
 800dbf4:	f04f 33ff 	mov.w	r3, #4294967295
 800dbf8:	9300      	str	r3, [sp, #0]
 800dbfa:	f04f 33ff 	mov.w	r3, #4294967295
 800dbfe:	687a      	ldr	r2, [r7, #4]
 800dc00:	68b9      	ldr	r1, [r7, #8]
 800dc02:	68f8      	ldr	r0, [r7, #12]
 800dc04:	f7ff fc1a 	bl	800d43c <lfs_dir_fetchmatch>
 800dc08:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3710      	adds	r7, #16
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
	...

0800dc14 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b08a      	sub	sp, #40	@ 0x28
 800dc18:	af02      	add	r7, sp, #8
 800dc1a:	60f8      	str	r0, [r7, #12]
 800dc1c:	60b9      	str	r1, [r7, #8]
 800dc1e:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 800dc20:	f107 0310 	add.w	r3, r7, #16
 800dc24:	9300      	str	r3, [sp, #0]
 800dc26:	4b12      	ldr	r3, [pc, #72]	@ (800dc70 <lfs_dir_getgstate+0x5c>)
 800dc28:	4a12      	ldr	r2, [pc, #72]	@ (800dc74 <lfs_dir_getgstate+0x60>)
 800dc2a:	68b9      	ldr	r1, [r7, #8]
 800dc2c:	68f8      	ldr	r0, [r7, #12]
 800dc2e:	f7fe fecf 	bl	800c9d0 <lfs_dir_get>
 800dc32:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	da05      	bge.n	800dc46 <lfs_dir_getgstate+0x32>
 800dc3a:	69fb      	ldr	r3, [r7, #28]
 800dc3c:	f113 0f02 	cmn.w	r3, #2
 800dc40:	d001      	beq.n	800dc46 <lfs_dir_getgstate+0x32>
        return res;
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	e00f      	b.n	800dc66 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 800dc46:	69fb      	ldr	r3, [r7, #28]
 800dc48:	f113 0f02 	cmn.w	r3, #2
 800dc4c:	d00a      	beq.n	800dc64 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 800dc4e:	f107 0310 	add.w	r3, r7, #16
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7fe fb1c 	bl	800c290 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 800dc58:	f107 0310 	add.w	r3, r7, #16
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f7fe fa71 	bl	800c146 <lfs_gstate_xor>
    }

    return 0;
 800dc64:	2300      	movs	r3, #0
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3720      	adds	r7, #32
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	7ff0000c 	.word	0x7ff0000c
 800dc74:	7ff00000 	.word	0x7ff00000

0800dc78 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800dc78:	b590      	push	{r4, r7, lr}
 800dc7a:	b08f      	sub	sp, #60	@ 0x3c
 800dc7c:	af04      	add	r7, sp, #16
 800dc7e:	60f8      	str	r0, [r7, #12]
 800dc80:	60b9      	str	r1, [r7, #8]
 800dc82:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = name->lfs;
 800dc88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800dc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc94:	689c      	ldr	r4, [r3, #8]
 800dc96:	68b8      	ldr	r0, [r7, #8]
 800dc98:	f7fe fa34 	bl	800c104 <lfs_tag_size>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	4619      	mov	r1, r3
 800dca0:	4620      	mov	r0, r4
 800dca2:	f7fd fc67 	bl	800b574 <lfs_min>
 800dca6:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 800dca8:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 800dcaa:	69fb      	ldr	r3, [r7, #28]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	69fa      	ldr	r2, [r7, #28]
 800dcb0:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 800dcb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dcb4:	6849      	ldr	r1, [r1, #4]
 800dcb6:	69b8      	ldr	r0, [r7, #24]
 800dcb8:	9003      	str	r0, [sp, #12]
 800dcba:	9102      	str	r1, [sp, #8]
 800dcbc:	9201      	str	r2, [sp, #4]
 800dcbe:	9300      	str	r3, [sp, #0]
 800dcc0:	69bb      	ldr	r3, [r7, #24]
 800dcc2:	4622      	mov	r2, r4
 800dcc4:	2100      	movs	r1, #0
 800dcc6:	6a38      	ldr	r0, [r7, #32]
 800dcc8:	f7fd fe7c 	bl	800b9c4 <lfs_bd_cmp>
 800dccc:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d001      	beq.n	800dcd8 <lfs_dir_find_match+0x60>
        return res;
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	e014      	b.n	800dd02 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 800dcd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcda:	689c      	ldr	r4, [r3, #8]
 800dcdc:	68b8      	ldr	r0, [r7, #8]
 800dcde:	f7fe fa11 	bl	800c104 <lfs_tag_size>
 800dce2:	4603      	mov	r3, r0
 800dce4:	429c      	cmp	r4, r3
 800dce6:	d00b      	beq.n	800dd00 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800dce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcea:	689c      	ldr	r4, [r3, #8]
 800dcec:	68b8      	ldr	r0, [r7, #8]
 800dcee:	f7fe fa09 	bl	800c104 <lfs_tag_size>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	429c      	cmp	r4, r3
 800dcf6:	d201      	bcs.n	800dcfc <lfs_dir_find_match+0x84>
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	e002      	b.n	800dd02 <lfs_dir_find_match+0x8a>
 800dcfc:	2302      	movs	r3, #2
 800dcfe:	e000      	b.n	800dd02 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 800dd00:	2300      	movs	r3, #0
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	372c      	adds	r7, #44	@ 0x2c
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd90      	pop	{r4, r7, pc}
	...

0800dd0c <lfs_dir_find>:
// returns:
// - 0                  if file is found
// - LFS_ERR_NOENT      if file or parent is not found
// - LFS_ERR_NOTDIR     if parent is not a dir
static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b092      	sub	sp, #72	@ 0x48
 800dd10:	af04      	add	r7, sp, #16
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	60b9      	str	r1, [r7, #8]
 800dd16:	607a      	str	r2, [r7, #4]
 800dd18:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	637b      	str	r3, [r7, #52]	@ 0x34

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800dd20:	4b76      	ldr	r3, [pc, #472]	@ (800defc <lfs_dir_find+0x1f0>)
 800dd22:	633b      	str	r3, [r7, #48]	@ 0x30
    dir->tail[0] = lfs->root[0];
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	6a1a      	ldr	r2, [r3, #32]
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	61da      	str	r2, [r3, #28]

    // empty paths are not allowed
    if (*name == '\0') {
 800dd34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d001      	beq.n	800dd40 <lfs_dir_find+0x34>
        return LFS_ERR_INVAL;
    }

    while (true) {
nextname:
 800dd3c:	bf00      	nop
 800dd3e:	e002      	b.n	800dd46 <lfs_dir_find+0x3a>
        return LFS_ERR_INVAL;
 800dd40:	f06f 0315 	mvn.w	r3, #21
 800dd44:	e0d6      	b.n	800def4 <lfs_dir_find+0x1e8>
        // skip slashes if we're a directory
        if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 800dd46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7fe f9a1 	bl	800c090 <lfs_tag_type3>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	2b02      	cmp	r3, #2
 800dd52:	d107      	bne.n	800dd64 <lfs_dir_find+0x58>
            name += strspn(name, "/");
 800dd54:	496a      	ldr	r1, [pc, #424]	@ (800df00 <lfs_dir_find+0x1f4>)
 800dd56:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800dd58:	f004 fea0 	bl	8012a9c <strspn>
 800dd5c:	4602      	mov	r2, r0
 800dd5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd60:	4413      	add	r3, r2
 800dd62:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        lfs_size_t namelen = strcspn(name, "/");
 800dd64:	4966      	ldr	r1, [pc, #408]	@ (800df00 <lfs_dir_find+0x1f4>)
 800dd66:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800dd68:	f004 fe87 	bl	8012a7a <strcspn>
 800dd6c:	6278      	str	r0, [r7, #36]	@ 0x24

        // skip '.'
        if (namelen == 1 && memcmp(name, ".", 1) == 0) {
 800dd6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd70:	2b01      	cmp	r3, #1
 800dd72:	d10a      	bne.n	800dd8a <lfs_dir_find+0x7e>
 800dd74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd76:	781a      	ldrb	r2, [r3, #0]
 800dd78:	4b62      	ldr	r3, [pc, #392]	@ (800df04 <lfs_dir_find+0x1f8>)
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d104      	bne.n	800dd8a <lfs_dir_find+0x7e>
            name += namelen;
 800dd80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd84:	4413      	add	r3, r2
 800dd86:	637b      	str	r3, [r7, #52]	@ 0x34
            goto nextname;
 800dd88:	e7dd      	b.n	800dd46 <lfs_dir_find+0x3a>
        }

        // error on unmatched '..', trying to go above root?
        if (namelen == 2 && memcmp(name, "..", 2) == 0) {
 800dd8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd8c:	2b02      	cmp	r3, #2
 800dd8e:	d10a      	bne.n	800dda6 <lfs_dir_find+0x9a>
 800dd90:	2202      	movs	r2, #2
 800dd92:	495d      	ldr	r1, [pc, #372]	@ (800df08 <lfs_dir_find+0x1fc>)
 800dd94:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800dd96:	f004 fe58 	bl	8012a4a <memcmp>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d102      	bne.n	800dda6 <lfs_dir_find+0x9a>
            return LFS_ERR_INVAL;
 800dda0:	f06f 0315 	mvn.w	r3, #21
 800dda4:	e0a6      	b.n	800def4 <lfs_dir_find+0x1e8>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 800dda6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dda8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddaa:	4413      	add	r3, r2
 800ddac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 800ddae:	2301      	movs	r3, #1
 800ddb0:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 800ddb2:	4953      	ldr	r1, [pc, #332]	@ (800df00 <lfs_dir_find+0x1f4>)
 800ddb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ddb6:	f004 fe71 	bl	8012a9c <strspn>
 800ddba:	4602      	mov	r2, r0
 800ddbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddbe:	4413      	add	r3, r2
 800ddc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            sufflen = strcspn(suffix, "/");
 800ddc2:	494f      	ldr	r1, [pc, #316]	@ (800df00 <lfs_dir_find+0x1f4>)
 800ddc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ddc6:	f004 fe58 	bl	8012a7a <strcspn>
 800ddca:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 800ddcc:	6a3b      	ldr	r3, [r7, #32]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d026      	beq.n	800de20 <lfs_dir_find+0x114>
                break;
            }

            if (sufflen == 1 && memcmp(suffix, ".", 1) == 0) {
 800ddd2:	6a3b      	ldr	r3, [r7, #32]
 800ddd4:	2b01      	cmp	r3, #1
 800ddd6:	d105      	bne.n	800dde4 <lfs_dir_find+0xd8>
 800ddd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddda:	781a      	ldrb	r2, [r3, #0]
 800dddc:	4b49      	ldr	r3, [pc, #292]	@ (800df04 <lfs_dir_find+0x1f8>)
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d018      	beq.n	800de16 <lfs_dir_find+0x10a>
                // noop
            } else if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800dde4:	6a3b      	ldr	r3, [r7, #32]
 800dde6:	2b02      	cmp	r3, #2
 800dde8:	d112      	bne.n	800de10 <lfs_dir_find+0x104>
 800ddea:	2202      	movs	r2, #2
 800ddec:	4946      	ldr	r1, [pc, #280]	@ (800df08 <lfs_dir_find+0x1fc>)
 800ddee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ddf0:	f004 fe2b 	bl	8012a4a <memcmp>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d10a      	bne.n	800de10 <lfs_dir_find+0x104>
                depth -= 1;
 800ddfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddfc:	3b01      	subs	r3, #1
 800ddfe:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (depth == 0) {
 800de00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de02:	2b00      	cmp	r3, #0
 800de04:	d107      	bne.n	800de16 <lfs_dir_find+0x10a>
                    name = suffix + sufflen;
 800de06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de08:	6a3b      	ldr	r3, [r7, #32]
 800de0a:	4413      	add	r3, r2
 800de0c:	637b      	str	r3, [r7, #52]	@ 0x34
                    goto nextname;
 800de0e:	e79a      	b.n	800dd46 <lfs_dir_find+0x3a>
                }
            } else {
                depth += 1;
 800de10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de12:	3301      	adds	r3, #1
 800de14:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            suffix += sufflen;
 800de16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de18:	6a3b      	ldr	r3, [r7, #32]
 800de1a:	4413      	add	r3, r2
 800de1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            suffix += strspn(suffix, "/");
 800de1e:	e7c8      	b.n	800ddb2 <lfs_dir_find+0xa6>
                break;
 800de20:	bf00      	nop
        }

        // found path
        if (*name == '\0') {
 800de22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d101      	bne.n	800de2e <lfs_dir_find+0x122>
            return tag;
 800de2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de2c:	e062      	b.n	800def4 <lfs_dir_find+0x1e8>
        }

        // update what we've found so far
        *path = name;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de32:	601a      	str	r2, [r3, #0]

        // only continue if we're a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800de34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de36:	4618      	mov	r0, r3
 800de38:	f7fe f92a 	bl	800c090 <lfs_tag_type3>
 800de3c:	4603      	mov	r3, r0
 800de3e:	2b02      	cmp	r3, #2
 800de40:	d002      	beq.n	800de48 <lfs_dir_find+0x13c>
            return LFS_ERR_NOTDIR;
 800de42:	f06f 0313 	mvn.w	r3, #19
 800de46:	e055      	b.n	800def4 <lfs_dir_find+0x1e8>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 800de48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7fe f94a 	bl	800c0e4 <lfs_tag_id>
 800de50:	4603      	mov	r3, r0
 800de52:	461a      	mov	r2, r3
 800de54:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800de58:	429a      	cmp	r2, r3
 800de5a:	d01c      	beq.n	800de96 <lfs_dir_find+0x18a>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800de5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de5e:	4618      	mov	r0, r3
 800de60:	f7fe f940 	bl	800c0e4 <lfs_tag_id>
 800de64:	4603      	mov	r3, r0
 800de66:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800de68:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800de6c:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800de70:	68ba      	ldr	r2, [r7, #8]
 800de72:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800de74:	9200      	str	r2, [sp, #0]
 800de76:	4a25      	ldr	r2, [pc, #148]	@ (800df0c <lfs_dir_find+0x200>)
 800de78:	68b9      	ldr	r1, [r7, #8]
 800de7a:	68f8      	ldr	r0, [r7, #12]
 800de7c:	f7fe fda8 	bl	800c9d0 <lfs_dir_get>
 800de80:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800de82:	69fb      	ldr	r3, [r7, #28]
 800de84:	2b00      	cmp	r3, #0
 800de86:	da01      	bge.n	800de8c <lfs_dir_find+0x180>
                return res;
 800de88:	69fb      	ldr	r3, [r7, #28]
 800de8a:	e033      	b.n	800def4 <lfs_dir_find+0x1e8>
            }
            lfs_pair_fromle32(dir->tail);
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	3318      	adds	r3, #24
 800de90:	4618      	mov	r0, r3
 800de92:	f7fe f888 	bl	800bfa6 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	f103 0218 	add.w	r2, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                    id,
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	613b      	str	r3, [r7, #16]
 800dea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dea2:	617b      	str	r3, [r7, #20]
 800dea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea6:	61bb      	str	r3, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800dea8:	f107 0310 	add.w	r3, r7, #16
 800deac:	9303      	str	r3, [sp, #12]
 800deae:	4b18      	ldr	r3, [pc, #96]	@ (800df10 <lfs_dir_find+0x204>)
 800deb0:	9302      	str	r3, [sp, #8]
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	9301      	str	r3, [sp, #4]
 800deb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deb8:	9300      	str	r3, [sp, #0]
 800deba:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 800debe:	68b9      	ldr	r1, [r7, #8]
 800dec0:	68f8      	ldr	r0, [r7, #12]
 800dec2:	f7ff fabb 	bl	800d43c <lfs_dir_fetchmatch>
 800dec6:	6338      	str	r0, [r7, #48]	@ 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800dec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deca:	2b00      	cmp	r3, #0
 800decc:	da01      	bge.n	800ded2 <lfs_dir_find+0x1c6>
                return tag;
 800dece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ded0:	e010      	b.n	800def4 <lfs_dir_find+0x1e8>
            }

            if (tag) {
 800ded2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d004      	beq.n	800dee2 <lfs_dir_find+0x1d6>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800ded8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800deda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dedc:	4413      	add	r3, r2
 800dede:	637b      	str	r3, [r7, #52]	@ 0x34
    while (true) {
 800dee0:	e731      	b.n	800dd46 <lfs_dir_find+0x3a>
            if (!dir->split) {
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	7ddb      	ldrb	r3, [r3, #23]
 800dee6:	f083 0301 	eor.w	r3, r3, #1
 800deea:	b2db      	uxtb	r3, r3
 800deec:	2b00      	cmp	r3, #0
 800deee:	d0d2      	beq.n	800de96 <lfs_dir_find+0x18a>
                return LFS_ERR_NOENT;
 800def0:	f06f 0301 	mvn.w	r3, #1
    }
}
 800def4:	4618      	mov	r0, r3
 800def6:	3738      	adds	r7, #56	@ 0x38
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}
 800defc:	002ffc00 	.word	0x002ffc00
 800df00:	080139b0 	.word	0x080139b0
 800df04:	08013a2c 	.word	0x08013a2c
 800df08:	08013a30 	.word	0x08013a30
 800df0c:	700ffc00 	.word	0x700ffc00
 800df10:	0800dc79 	.word	0x0800dc79

0800df14 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 800df14:	b590      	push	{r4, r7, lr}
 800df16:	b08b      	sub	sp, #44	@ 0x2c
 800df18:	af04      	add	r7, sp, #16
 800df1a:	60f8      	str	r0, [r7, #12]
 800df1c:	60b9      	str	r1, [r7, #8]
 800df1e:	607a      	str	r2, [r7, #4]
 800df20:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f103 0010 	add.w	r0, r3, #16
 800df28:	68fc      	ldr	r4, [r7, #12]
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	68ba      	ldr	r2, [r7, #8]
 800df30:	6852      	ldr	r2, [r2, #4]
 800df32:	6839      	ldr	r1, [r7, #0]
 800df34:	9103      	str	r1, [sp, #12]
 800df36:	6879      	ldr	r1, [r7, #4]
 800df38:	9102      	str	r1, [sp, #8]
 800df3a:	9201      	str	r2, [sp, #4]
 800df3c:	9300      	str	r3, [sp, #0]
 800df3e:	2300      	movs	r3, #0
 800df40:	4622      	mov	r2, r4
 800df42:	4601      	mov	r1, r0
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	f7fd fe83 	bl	800bc50 <lfs_bd_prog>
 800df4a:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d001      	beq.n	800df56 <lfs_dir_commitprog+0x42>
        return err;
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	e010      	b.n	800df78 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	68db      	ldr	r3, [r3, #12]
 800df5a:	683a      	ldr	r2, [r7, #0]
 800df5c:	6879      	ldr	r1, [r7, #4]
 800df5e:	4618      	mov	r0, r3
 800df60:	f004 fb30 	bl	80125c4 <lfs_crc>
 800df64:	4602      	mov	r2, r0
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	685a      	ldr	r2, [r3, #4]
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	441a      	add	r2, r3
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	605a      	str	r2, [r3, #4]
    return 0;
 800df76:	2300      	movs	r3, #0
}
 800df78:	4618      	mov	r0, r3
 800df7a:	371c      	adds	r7, #28
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd90      	pop	{r4, r7, pc}

0800df80 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 800df80:	b590      	push	{r4, r7, lr}
 800df82:	b08f      	sub	sp, #60	@ 0x3c
 800df84:	af04      	add	r7, sp, #16
 800df86:	60f8      	str	r0, [r7, #12]
 800df88:	60b9      	str	r1, [r7, #8]
 800df8a:	607a      	str	r2, [r7, #4]
 800df8c:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f7fe f8c5 	bl	800c11e <lfs_tag_dsize>
 800df94:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	685a      	ldr	r2, [r3, #4]
 800df9a:	6a3b      	ldr	r3, [r7, #32]
 800df9c:	441a      	add	r2, r3
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	695b      	ldr	r3, [r3, #20]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d902      	bls.n	800dfac <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800dfa6:	f06f 031b 	mvn.w	r3, #27
 800dfaa:	e065      	b.n	800e078 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	689b      	ldr	r3, [r3, #8]
 800dfb6:	4053      	eors	r3, r2
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f7fd fb6e 	bl	800b69a <lfs_tobe32>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800dfc2:	f107 0214 	add.w	r2, r7, #20
 800dfc6:	2304      	movs	r3, #4
 800dfc8:	68b9      	ldr	r1, [r7, #8]
 800dfca:	68f8      	ldr	r0, [r7, #12]
 800dfcc:	f7ff ffa2 	bl	800df14 <lfs_dir_commitprog>
 800dfd0:	61f8      	str	r0, [r7, #28]
    if (err) {
 800dfd2:	69fb      	ldr	r3, [r7, #28]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d001      	beq.n	800dfdc <lfs_dir_commitattr+0x5c>
        return err;
 800dfd8:	69fb      	ldr	r3, [r7, #28]
 800dfda:	e04d      	b.n	800e078 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	db0c      	blt.n	800dffc <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800dfe2:	6a3b      	ldr	r3, [r7, #32]
 800dfe4:	3b04      	subs	r3, #4
 800dfe6:	683a      	ldr	r2, [r7, #0]
 800dfe8:	68b9      	ldr	r1, [r7, #8]
 800dfea:	68f8      	ldr	r0, [r7, #12]
 800dfec:	f7ff ff92 	bl	800df14 <lfs_dir_commitprog>
 800dff0:	61f8      	str	r0, [r7, #28]
        if (err) {
 800dff2:	69fb      	ldr	r3, [r7, #28]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d039      	beq.n	800e06c <lfs_dir_commitattr+0xec>
            return err;
 800dff8:	69fb      	ldr	r3, [r7, #28]
 800dffa:	e03d      	b.n	800e078 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800e000:	2300      	movs	r3, #0
 800e002:	627b      	str	r3, [r7, #36]	@ 0x24
 800e004:	e02d      	b.n	800e062 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800e006:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800e008:	6a3a      	ldr	r2, [r7, #32]
 800e00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e00c:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800e00e:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 800e010:	69bb      	ldr	r3, [r7, #24]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	69ba      	ldr	r2, [r7, #24]
 800e016:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 800e018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e01a:	440a      	add	r2, r1
 800e01c:	2101      	movs	r1, #1
 800e01e:	9103      	str	r1, [sp, #12]
 800e020:	f107 0113 	add.w	r1, r7, #19
 800e024:	9102      	str	r1, [sp, #8]
 800e026:	9201      	str	r2, [sp, #4]
 800e028:	9300      	str	r3, [sp, #0]
 800e02a:	4623      	mov	r3, r4
 800e02c:	4602      	mov	r2, r0
 800e02e:	2100      	movs	r1, #0
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f7fd fb7b 	bl	800b72c <lfs_bd_read>
 800e036:	61f8      	str	r0, [r7, #28]
            if (err) {
 800e038:	69fb      	ldr	r3, [r7, #28]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d001      	beq.n	800e042 <lfs_dir_commitattr+0xc2>
                return err;
 800e03e:	69fb      	ldr	r3, [r7, #28]
 800e040:	e01a      	b.n	800e078 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800e042:	f107 0213 	add.w	r2, r7, #19
 800e046:	2301      	movs	r3, #1
 800e048:	68b9      	ldr	r1, [r7, #8]
 800e04a:	68f8      	ldr	r0, [r7, #12]
 800e04c:	f7ff ff62 	bl	800df14 <lfs_dir_commitprog>
 800e050:	61f8      	str	r0, [r7, #28]
            if (err) {
 800e052:	69fb      	ldr	r3, [r7, #28]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d001      	beq.n	800e05c <lfs_dir_commitattr+0xdc>
                return err;
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	e00d      	b.n	800e078 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800e05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e05e:	3301      	adds	r3, #1
 800e060:	627b      	str	r3, [r7, #36]	@ 0x24
 800e062:	6a3b      	ldr	r3, [r7, #32]
 800e064:	3b04      	subs	r3, #4
 800e066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e068:	429a      	cmp	r2, r3
 800e06a:	d3cc      	bcc.n	800e006 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	609a      	str	r2, [r3, #8]
    return 0;
 800e076:	2300      	movs	r3, #0
}
 800e078:	4618      	mov	r0, r3
 800e07a:	372c      	adds	r7, #44	@ 0x2c
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd90      	pop	{r4, r7, pc}

0800e080 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800e080:	b590      	push	{r4, r7, lr}
 800e082:	b097      	sub	sp, #92	@ 0x5c
 800e084:	af04      	add	r7, sp, #16
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 800e08e:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e096:	69db      	ldr	r3, [r3, #28]
    const lfs_off_t end = lfs_alignup(
 800e098:	4619      	mov	r1, r3
 800e09a:	4610      	mov	r0, r2
 800e09c:	f7fd fa6a 	bl	800b574 <lfs_min>
 800e0a0:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e0a6:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	4610      	mov	r0, r2
 800e0ac:	f7fd fa87 	bl	800b5be <lfs_alignup>
 800e0b0:	63b8      	str	r0, [r7, #56]	@ 0x38

    lfs_off_t off1 = 0;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t crc1 = 0;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	643b      	str	r3, [r7, #64]	@ 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800e0ba:	e0fe      	b.n	800e2ba <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	685b      	ldr	r3, [r3, #4]
 800e0c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e0c2:	1ad3      	subs	r3, r2, r3
 800e0c4:	3b04      	subs	r3, #4
 800e0c6:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f7fd fa52 	bl	800b574 <lfs_min>
 800e0d0:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	4413      	add	r3, r2
        lfs_off_t noff = (
 800e0d8:	3304      	adds	r3, #4
 800e0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 800e0dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e0de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d206      	bcs.n	800e0f2 <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 800e0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0e6:	3b14      	subs	r3, #20
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e0ec:	f7fd fa42 	bl	800b574 <lfs_min>
 800e0f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 800e0f2:	23ff      	movs	r3, #255	@ 0xff
 800e0f4:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 800e0f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d35f      	bcc.n	800e1be <lfs_dir_commitcrc+0x13e>
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e102:	69da      	ldr	r2, [r3, #28]
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e108:	699b      	ldr	r3, [r3, #24]
 800e10a:	1ad3      	subs	r3, r2, r3
 800e10c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e10e:	429a      	cmp	r2, r3
 800e110:	d855      	bhi.n	800e1be <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 800e112:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e118:	6998      	ldr	r0, [r3, #24]
            int err = lfs_bd_read(lfs,
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	2201      	movs	r2, #1
 800e120:	9203      	str	r2, [sp, #12]
 800e122:	f107 021b 	add.w	r2, r7, #27
 800e126:	9202      	str	r2, [sp, #8]
 800e128:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e12a:	9201      	str	r2, [sp, #4]
 800e12c:	9300      	str	r3, [sp, #0]
 800e12e:	4603      	mov	r3, r0
 800e130:	460a      	mov	r2, r1
 800e132:	2100      	movs	r1, #0
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f7fd faf9 	bl	800b72c <lfs_bd_read>
 800e13a:	62f8      	str	r0, [r7, #44]	@ 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 800e13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d005      	beq.n	800e14e <lfs_dir_commitcrc+0xce>
 800e142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e144:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e148:	d001      	beq.n	800e14e <lfs_dir_commitcrc+0xce>
                return err;
 800e14a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e14c:	e101      	b.n	800e352 <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e152:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 800e154:	60bb      	str	r3, [r7, #8]
 800e156:	f04f 33ff 	mov.w	r3, #4294967295
 800e15a:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 800e15c:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e162:	699c      	ldr	r4, [r3, #24]
                err = lfs_bd_crc(lfs,
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	68ba      	ldr	r2, [r7, #8]
 800e16a:	f107 0108 	add.w	r1, r7, #8
 800e16e:	3104      	adds	r1, #4
 800e170:	9103      	str	r1, [sp, #12]
 800e172:	9202      	str	r2, [sp, #8]
 800e174:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e176:	9201      	str	r2, [sp, #4]
 800e178:	9300      	str	r3, [sp, #0]
 800e17a:	4623      	mov	r3, r4
 800e17c:	4602      	mov	r2, r0
 800e17e:	2100      	movs	r1, #0
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f7fd fc70 	bl	800ba66 <lfs_bd_crc>
 800e186:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 800e188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d005      	beq.n	800e19a <lfs_dir_commitcrc+0x11a>
 800e18e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e190:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e194:	d001      	beq.n	800e19a <lfs_dir_commitcrc+0x11a>
                    return err;
 800e196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e198:	e010      	b.n	800e1bc <lfs_dir_commitcrc+0x13c>
                }

                lfs_fcrc_tole32(&fcrc);
 800e19a:	f107 0308 	add.w	r3, r7, #8
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7fe f8ce 	bl	800c340 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 800e1a4:	f107 0308 	add.w	r3, r7, #8
 800e1a8:	4a6c      	ldr	r2, [pc, #432]	@ (800e35c <lfs_dir_commitcrc+0x2dc>)
 800e1aa:	6839      	ldr	r1, [r7, #0]
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f7ff fee7 	bl	800df80 <lfs_dir_commitattr>
 800e1b2:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 800e1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d001      	beq.n	800e1be <lfs_dir_commitcrc+0x13e>
                    return err;
 800e1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                return err;
 800e1bc:	e0c9      	b.n	800e352 <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 800e1be:	7efb      	ldrb	r3, [r7, #27]
 800e1c0:	43db      	mvns	r3, r3
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	09db      	lsrs	r3, r3, #7
 800e1c6:	b2db      	uxtb	r3, r3
 800e1c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1cc:	051a      	lsls	r2, r3, #20
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e1d4:	1acb      	subs	r3, r1, r3
 800e1d6:	3b04      	subs	r3, #4
 800e1d8:	4313      	orrs	r3, r2
 800e1da:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 800e1de:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 800e1e2:	62bb      	str	r3, [r7, #40]	@ 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	689a      	ldr	r2, [r3, #8]
 800e1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1ea:	4053      	eors	r3, r2
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7fd fa54 	bl	800b69a <lfs_tobe32>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	68db      	ldr	r3, [r3, #12]
 800e1fa:	f107 0110 	add.w	r1, r7, #16
 800e1fe:	2204      	movs	r2, #4
 800e200:	4618      	mov	r0, r3
 800e202:	f004 f9df 	bl	80125c4 <lfs_crc>
 800e206:	4602      	mov	r2, r0
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	68db      	ldr	r3, [r3, #12]
 800e210:	4618      	mov	r0, r3
 800e212:	f7fd fa2a 	bl	800b66a <lfs_tole32>
 800e216:	4603      	mov	r3, r0
 800e218:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f103 0010 	add.w	r0, r3, #16
 800e220:	687c      	ldr	r4, [r7, #4]
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	683a      	ldr	r2, [r7, #0]
 800e228:	6852      	ldr	r2, [r2, #4]
 800e22a:	2108      	movs	r1, #8
 800e22c:	9103      	str	r1, [sp, #12]
 800e22e:	f107 0110 	add.w	r1, r7, #16
 800e232:	9102      	str	r1, [sp, #8]
 800e234:	9201      	str	r2, [sp, #4]
 800e236:	9300      	str	r3, [sp, #0]
 800e238:	2300      	movs	r3, #0
 800e23a:	4622      	mov	r2, r4
 800e23c:	4601      	mov	r1, r0
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f7fd fd06 	bl	800bc50 <lfs_bd_prog>
 800e244:	6278      	str	r0, [r7, #36]	@ 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 800e246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d001      	beq.n	800e250 <lfs_dir_commitcrc+0x1d0>
            return err;
 800e24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e24e:	e080      	b.n	800e352 <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 800e250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e252:	2b00      	cmp	r3, #0
 800e254:	d106      	bne.n	800e264 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	3304      	adds	r3, #4
 800e25c:	647b      	str	r3, [r7, #68]	@ 0x44
            crc1 = commit->crc;
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	68db      	ldr	r3, [r3, #12]
 800e262:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        commit->off = noff;
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e268:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 800e26a:	7efb      	ldrb	r3, [r7, #27]
 800e26c:	43db      	mvns	r3, r3
 800e26e:	061b      	lsls	r3, r3, #24
 800e270:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800e274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e276:	405a      	eors	r2, r3
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	f04f 32ff 	mov.w	r2, #4294967295
 800e282:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 800e284:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e288:	429a      	cmp	r2, r3
 800e28a:	d208      	bcs.n	800e29e <lfs_dir_commitcrc+0x21e>
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	695a      	ldr	r2, [r3, #20]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e296:	4413      	add	r3, r2
 800e298:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d30d      	bcc.n	800e2ba <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f103 0110 	add.w	r1, r3, #16
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f7fd fc9d 	bl	800bbe8 <lfs_bd_sync>
 800e2ae:	6238      	str	r0, [r7, #32]
            if (err) {
 800e2b0:	6a3b      	ldr	r3, [r7, #32]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d001      	beq.n	800e2ba <lfs_dir_commitcrc+0x23a>
                return err;
 800e2b6:	6a3b      	ldr	r3, [r7, #32]
 800e2b8:	e04b      	b.n	800e352 <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	685b      	ldr	r3, [r3, #4]
 800e2be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	f63f aefb 	bhi.w	800e0bc <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	691b      	ldr	r3, [r3, #16]
 800e2ca:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t crc = 0xffffffff;
 800e2cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e2d0:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2d6:	1d1c      	adds	r4, r3, #4
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e2de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e2e0:	1a8a      	subs	r2, r1, r2
 800e2e2:	f107 011c 	add.w	r1, r7, #28
 800e2e6:	9103      	str	r1, [sp, #12]
 800e2e8:	9202      	str	r2, [sp, #8]
 800e2ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e2ec:	9201      	str	r2, [sp, #4]
 800e2ee:	9300      	str	r3, [sp, #0]
 800e2f0:	4623      	mov	r3, r4
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	2100      	movs	r1, #0
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f7fd fbb5 	bl	800ba66 <lfs_bd_crc>
 800e2fc:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 800e2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e300:	2b00      	cmp	r3, #0
 800e302:	d001      	beq.n	800e308 <lfs_dir_commitcrc+0x288>
        return err;
 800e304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e306:	e024      	b.n	800e352 <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 800e308:	69fb      	ldr	r3, [r7, #28]
 800e30a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d002      	beq.n	800e316 <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 800e310:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800e314:	e01d      	b.n	800e352 <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 800e316:	6879      	ldr	r1, [r7, #4]
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	f107 021c 	add.w	r2, r7, #28
 800e320:	9203      	str	r2, [sp, #12]
 800e322:	2204      	movs	r2, #4
 800e324:	9202      	str	r2, [sp, #8]
 800e326:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e328:	9201      	str	r2, [sp, #4]
 800e32a:	9300      	str	r3, [sp, #0]
 800e32c:	2304      	movs	r3, #4
 800e32e:	460a      	mov	r2, r1
 800e330:	2100      	movs	r1, #0
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f7fd fb97 	bl	800ba66 <lfs_bd_crc>
 800e338:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 800e33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d001      	beq.n	800e344 <lfs_dir_commitcrc+0x2c4>
        return err;
 800e340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e342:	e006      	b.n	800e352 <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 800e344:	69fb      	ldr	r3, [r7, #28]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d002      	beq.n	800e350 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 800e34a:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800e34e:	e000      	b.n	800e352 <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 800e350:	2300      	movs	r3, #0
}
 800e352:	4618      	mov	r0, r3
 800e354:	374c      	adds	r7, #76	@ 0x4c
 800e356:	46bd      	mov	sp, r7
 800e358:	bd90      	pop	{r4, r7, pc}
 800e35a:	bf00      	nop
 800e35c:	5ffffc08 	.word	0x5ffffc08

0800e360 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800e360:	b580      	push	{r7, lr}
 800e362:	b08a      	sub	sp, #40	@ 0x28
 800e364:	af04      	add	r7, sp, #16
 800e366:	6078      	str	r0, [r7, #4]
 800e368:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 800e36a:	2300      	movs	r3, #0
 800e36c:	617b      	str	r3, [r7, #20]
 800e36e:	e016      	b.n	800e39e <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	3301      	adds	r3, #1
 800e374:	2b00      	cmp	r3, #0
 800e376:	f003 0301 	and.w	r3, r3, #1
 800e37a:	bfb8      	it	lt
 800e37c:	425b      	neglt	r3, r3
 800e37e:	009b      	lsls	r3, r3, #2
 800e380:	683a      	ldr	r2, [r7, #0]
 800e382:	4413      	add	r3, r2
 800e384:	4619      	mov	r1, r3
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f7fe f9a4 	bl	800c6d4 <lfs_alloc>
 800e38c:	60f8      	str	r0, [r7, #12]
        if (err) {
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d001      	beq.n	800e398 <lfs_dir_alloc+0x38>
            return err;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	e058      	b.n	800e44a <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	3301      	adds	r3, #1
 800e39c:	617b      	str	r3, [r7, #20]
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	dde5      	ble.n	800e370 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800e3aa:	6879      	ldr	r1, [r7, #4]
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 800e3b0:	683a      	ldr	r2, [r7, #0]
 800e3b2:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 800e3b4:	2004      	movs	r0, #4
 800e3b6:	9003      	str	r0, [sp, #12]
 800e3b8:	9202      	str	r2, [sp, #8]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	9201      	str	r2, [sp, #4]
 800e3be:	9300      	str	r3, [sp, #0]
 800e3c0:	2304      	movs	r3, #4
 800e3c2:	460a      	mov	r2, r1
 800e3c4:	2100      	movs	r1, #0
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f7fd f9b0 	bl	800b72c <lfs_bd_read>
 800e3cc:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	689b      	ldr	r3, [r3, #8]
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7fd f93e 	bl	800b654 <lfs_fromle32>
 800e3d8:	4602      	mov	r2, r0
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d005      	beq.n	800e3f0 <lfs_dir_alloc+0x90>
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e3ea:	d001      	beq.n	800e3f0 <lfs_dir_alloc+0x90>
        return err;
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	e02c      	b.n	800e44a <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e3f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	dd0e      	ble.n	800e418 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	689a      	ldr	r2, [r3, #8]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e404:	3301      	adds	r3, #1
 800e406:	f043 0301 	orr.w	r3, r3, #1
 800e40a:	4619      	mov	r1, r3
 800e40c:	4610      	mov	r0, r2
 800e40e:	f7fd f8d6 	bl	800b5be <lfs_alignup>
 800e412:	4602      	mov	r2, r0
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	2204      	movs	r2, #4
 800e41c:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	f04f 32ff 	mov.w	r2, #4294967295
 800e424:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	2200      	movs	r2, #0
 800e42a:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	f04f 32ff 	mov.w	r2, #4294967295
 800e432:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	f04f 32ff 	mov.w	r2, #4294967295
 800e43a:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	2200      	movs	r2, #0
 800e440:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	2200      	movs	r2, #0
 800e446:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 800e448:	2300      	movs	r3, #0
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3718      	adds	r7, #24
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
	...

0800e454 <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 800e454:	b580      	push	{r7, lr}
 800e456:	b08a      	sub	sp, #40	@ 0x28
 800e458:	af00      	add	r7, sp, #0
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	60b9      	str	r1, [r7, #8]
 800e45e:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	3348      	adds	r3, #72	@ 0x48
 800e464:	461a      	mov	r2, r3
 800e466:	6879      	ldr	r1, [r7, #4]
 800e468:	68f8      	ldr	r0, [r7, #12]
 800e46a:	f7ff fbd3 	bl	800dc14 <lfs_dir_getgstate>
 800e46e:	6278      	str	r0, [r7, #36]	@ 0x24
    if (err) {
 800e470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e472:	2b00      	cmp	r3, #0
 800e474:	d001      	beq.n	800e47a <lfs_dir_drop+0x26>
        return err;
 800e476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e478:	e022      	b.n	800e4c0 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	3318      	adds	r3, #24
 800e47e:	4618      	mov	r0, r3
 800e480:	f7fd fdab 	bl	800bfda <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	7ddb      	ldrb	r3, [r3, #23]
 800e488:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800e48c:	051a      	lsls	r2, r3, #20
 800e48e:	4b0e      	ldr	r3, [pc, #56]	@ (800e4c8 <lfs_dir_drop+0x74>)
 800e490:	4313      	orrs	r3, r2
 800e492:	61fb      	str	r3, [r7, #28]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	3318      	adds	r3, #24
 800e498:	623b      	str	r3, [r7, #32]
 800e49a:	f107 021c 	add.w	r2, r7, #28
 800e49e:	2301      	movs	r3, #1
 800e4a0:	68b9      	ldr	r1, [r7, #8]
 800e4a2:	68f8      	ldr	r0, [r7, #12]
 800e4a4:	f001 f988 	bl	800f7b8 <lfs_dir_commit>
 800e4a8:	6278      	str	r0, [r7, #36]	@ 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	3318      	adds	r3, #24
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7fd fd79 	bl	800bfa6 <lfs_pair_fromle32>
    if (err) {
 800e4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d001      	beq.n	800e4be <lfs_dir_drop+0x6a>
        return err;
 800e4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4bc:	e000      	b.n	800e4c0 <lfs_dir_drop+0x6c>
    }

    return 0;
 800e4be:	2300      	movs	r3, #0
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3728      	adds	r7, #40	@ 0x28
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}
 800e4c8:	000ffc08 	.word	0x000ffc08

0800e4cc <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b092      	sub	sp, #72	@ 0x48
 800e4d0:	af04      	add	r7, sp, #16
 800e4d2:	60f8      	str	r0, [r7, #12]
 800e4d4:	60b9      	str	r1, [r7, #8]
 800e4d6:	607a      	str	r2, [r7, #4]
 800e4d8:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 800e4da:	f107 0310 	add.w	r3, r7, #16
 800e4de:	4619      	mov	r1, r3
 800e4e0:	68f8      	ldr	r0, [r7, #12]
 800e4e2:	f7ff ff3d 	bl	800e360 <lfs_dir_alloc>
 800e4e6:	6378      	str	r0, [r7, #52]	@ 0x34
    if (err) {
 800e4e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d001      	beq.n	800e4f2 <lfs_dir_split+0x26>
        return err;
 800e4ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4f0:	e03c      	b.n	800e56c <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	7ddb      	ldrb	r3, [r3, #23]
 800e4f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	699b      	ldr	r3, [r3, #24]
 800e4fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	69db      	ldr	r3, [r3, #28]
 800e504:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 800e506:	f107 0110 	add.w	r1, r7, #16
 800e50a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800e50e:	9302      	str	r3, [sp, #8]
 800e510:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e514:	9301      	str	r3, [sp, #4]
 800e516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e518:	9300      	str	r3, [sp, #0]
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	687a      	ldr	r2, [r7, #4]
 800e51e:	68f8      	ldr	r0, [r7, #12]
 800e520:	f000 f87a 	bl	800e618 <lfs_dir_compact>
 800e524:	6338      	str	r0, [r7, #48]	@ 0x30
    if (res < 0) {
 800e526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e528:	2b00      	cmp	r3, #0
 800e52a:	da01      	bge.n	800e530 <lfs_dir_split+0x64>
        return res;
 800e52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e52e:	e01d      	b.n	800e56c <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 800e530:	693a      	ldr	r2, [r7, #16]
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 800e536:	697a      	ldr	r2, [r7, #20]
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	61da      	str	r2, [r3, #28]
    dir->split = true;
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	2201      	movs	r2, #1
 800e540:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800e542:	68ba      	ldr	r2, [r7, #8]
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	3320      	adds	r3, #32
 800e548:	4619      	mov	r1, r3
 800e54a:	4610      	mov	r0, r2
 800e54c:	f7fd fcd4 	bl	800bef8 <lfs_pair_cmp>
 800e550:	4603      	mov	r3, r0
 800e552:	2b00      	cmp	r3, #0
 800e554:	d109      	bne.n	800e56a <lfs_dir_split+0x9e>
 800e556:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d105      	bne.n	800e56a <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 800e55e:	693a      	ldr	r2, [r7, #16]
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800e564:	697a      	ldr	r2, [r7, #20]
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return 0;
 800e56a:	2300      	movs	r3, #0
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3738      	adds	r7, #56	@ 0x38
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}

0800e574 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800e574:	b580      	push	{r7, lr}
 800e576:	b086      	sub	sp, #24
 800e578:	af00      	add	r7, sp, #0
 800e57a:	60f8      	str	r0, [r7, #12]
 800e57c:	60b9      	str	r1, [r7, #8]
 800e57e:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800e584:	68b8      	ldr	r0, [r7, #8]
 800e586:	f7fd fdca 	bl	800c11e <lfs_tag_dsize>
 800e58a:	4602      	mov	r2, r0
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	441a      	add	r2, r3
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	601a      	str	r2, [r3, #0]
    return 0;
 800e596:	2300      	movs	r3, #0
}
 800e598:	4618      	mov	r0, r3
 800e59a:	3718      	adds	r7, #24
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}

0800e5a0 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b086      	sub	sp, #24
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	60b9      	str	r1, [r7, #8]
 800e5aa:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	6818      	ldr	r0, [r3, #0]
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	6859      	ldr	r1, [r3, #4]
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	68ba      	ldr	r2, [r7, #8]
 800e5bc:	f7ff fce0 	bl	800df80 <lfs_dir_commitattr>
 800e5c0:	4603      	mov	r3, r0
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3718      	adds	r7, #24
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}

0800e5ca <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 800e5ca:	b480      	push	{r7}
 800e5cc:	b083      	sub	sp, #12
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	6078      	str	r0, [r7, #4]
 800e5d2:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e5d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	dd11      	ble.n	800e602 <lfs_dir_needsrelocation+0x38>
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	689b      	ldr	r3, [r3, #8]
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	687a      	ldr	r2, [r7, #4]
 800e5e6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800e5e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e5ea:	3201      	adds	r2, #1
 800e5ec:	f042 0201 	orr.w	r2, r2, #1
 800e5f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800e5f4:	fb01 f202 	mul.w	r2, r1, r2
 800e5f8:	1a9b      	subs	r3, r3, r2
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d101      	bne.n	800e602 <lfs_dir_needsrelocation+0x38>
 800e5fe:	2301      	movs	r3, #1
 800e600:	e000      	b.n	800e604 <lfs_dir_needsrelocation+0x3a>
 800e602:	2300      	movs	r3, #0
 800e604:	f003 0301 	and.w	r3, r3, #1
 800e608:	b2db      	uxtb	r3, r3
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	370c      	adds	r7, #12
 800e60e:	46bd      	mov	sp, r7
 800e610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e614:	4770      	bx	lr
	...

0800e618 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800e618:	b580      	push	{r7, lr}
 800e61a:	b0a4      	sub	sp, #144	@ 0x90
 800e61c:	af0a      	add	r7, sp, #40	@ 0x28
 800e61e:	60f8      	str	r0, [r7, #12]
 800e620:	60b9      	str	r1, [r7, #8]
 800e622:	607a      	str	r2, [r7, #4]
 800e624:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 800e626:	2300      	movs	r3, #0
 800e628:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 800e62c:	68b9      	ldr	r1, [r7, #8]
 800e62e:	68f8      	ldr	r0, [r7, #12]
 800e630:	f7ff ffcb 	bl	800e5ca <lfs_dir_needsrelocation>
 800e634:	4603      	mov	r3, r0
 800e636:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // increment revision count
    dir->rev += 1;
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	689b      	ldr	r3, [r3, #8]
 800e63e:	1c5a      	adds	r2, r3, #1
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 800e644:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d00e      	beq.n	800e66a <lfs_dir_compact+0x52>
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	2200      	movs	r2, #0
 800e650:	657a      	str	r2, [r7, #84]	@ 0x54
 800e652:	2201      	movs	r2, #1
 800e654:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e656:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800e65a:	4611      	mov	r1, r2
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7fd fc4b 	bl	800bef8 <lfs_pair_cmp>
 800e662:	4603      	mov	r3, r0
 800e664:	2b00      	cmp	r3, #0
 800e666:	f040 8155 	bne.w	800e914 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 800e66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e670:	2300      	movs	r3, #0
 800e672:	643b      	str	r3, [r7, #64]	@ 0x40
 800e674:	f04f 33ff 	mov.w	r3, #4294967295
 800e678:	647b      	str	r3, [r7, #68]	@ 0x44
 800e67a:	f04f 33ff 	mov.w	r3, #4294967295
 800e67e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e680:	2300      	movs	r3, #0
 800e682:	64fb      	str	r3, [r7, #76]	@ 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d004      	beq.n	800e698 <lfs_dir_compact+0x80>
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e694:	3b08      	subs	r3, #8
 800e696:	e003      	b.n	800e6a0 <lfs_dir_compact+0x88>
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e69c:	69db      	ldr	r3, [r3, #28]
 800e69e:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800e6a0:	653b      	str	r3, [r7, #80]	@ 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	685b      	ldr	r3, [r3, #4]
 800e6a6:	4619      	mov	r1, r3
 800e6a8:	68f8      	ldr	r0, [r7, #12]
 800e6aa:	f7fd fb7f 	bl	800bdac <lfs_bd_erase>
 800e6ae:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800e6b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d006      	beq.n	800e6c4 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 800e6b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e6b8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e6bc:	f000 812c 	beq.w	800e918 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 800e6c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e6c2:	e188      	b.n	800e9d6 <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	689b      	ldr	r3, [r3, #8]
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f7fc ffce 	bl	800b66a <lfs_tole32>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800e6da:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800e6de:	2304      	movs	r3, #4
 800e6e0:	68f8      	ldr	r0, [r7, #12]
 800e6e2:	f7ff fc17 	bl	800df14 <lfs_dir_commitprog>
 800e6e6:	65f8      	str	r0, [r7, #92]	@ 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	689b      	ldr	r3, [r3, #8]
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f7fc ffb1 	bl	800b654 <lfs_fromle32>
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	609a      	str	r2, [r3, #8]
            if (err) {
 800e6f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d006      	beq.n	800e70c <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 800e6fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e700:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e704:	f000 810a 	beq.w	800e91c <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 800e708:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e70a:	e164      	b.n	800e9d6 <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 800e70c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800e710:	425b      	negs	r3, r3
 800e712:	b29b      	uxth	r3, r3
 800e714:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800e716:	68fa      	ldr	r2, [r7, #12]
 800e718:	637a      	str	r2, [r7, #52]	@ 0x34
 800e71a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800e71e:	63ba      	str	r2, [r7, #56]	@ 0x38
            err = lfs_dir_traverse(lfs,
 800e720:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e724:	9208      	str	r2, [sp, #32]
 800e726:	4aae      	ldr	r2, [pc, #696]	@ (800e9e0 <lfs_dir_compact+0x3c8>)
 800e728:	9207      	str	r2, [sp, #28]
 800e72a:	9306      	str	r3, [sp, #24]
 800e72c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800e730:	9305      	str	r3, [sp, #20]
 800e732:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800e736:	9304      	str	r3, [sp, #16]
 800e738:	2300      	movs	r3, #0
 800e73a:	9303      	str	r3, [sp, #12]
 800e73c:	4ba9      	ldr	r3, [pc, #676]	@ (800e9e4 <lfs_dir_compact+0x3cc>)
 800e73e:	9302      	str	r3, [sp, #8]
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	9301      	str	r3, [sp, #4]
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	9300      	str	r3, [sp, #0]
 800e748:	f04f 33ff 	mov.w	r3, #4294967295
 800e74c:	2200      	movs	r2, #0
 800e74e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800e750:	68f8      	ldr	r0, [r7, #12]
 800e752:	f7fe fa8f 	bl	800cc74 <lfs_dir_traverse>
 800e756:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        lfs, &commit});
            if (err) {
 800e758:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d006      	beq.n	800e76c <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 800e75e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e760:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e764:	f000 80dc 	beq.w	800e920 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 800e768:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e76a:	e134      	b.n	800e9d6 <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	3318      	adds	r3, #24
 800e770:	4618      	mov	r0, r3
 800e772:	f7fd fba6 	bl	800bec2 <lfs_pair_isnull>
 800e776:	4603      	mov	r3, r0
 800e778:	f083 0301 	eor.w	r3, r3, #1
 800e77c:	b2db      	uxtb	r3, r3
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d022      	beq.n	800e7c8 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	3318      	adds	r3, #24
 800e786:	4618      	mov	r0, r3
 800e788:	f7fd fc27 	bl	800bfda <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	7ddb      	ldrb	r3, [r3, #23]
 800e790:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800e794:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800e796:	4a94      	ldr	r2, [pc, #592]	@ (800e9e8 <lfs_dir_compact+0x3d0>)
 800e798:	431a      	orrs	r2, r3
                        dir->tail);
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 800e79e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800e7a2:	68f8      	ldr	r0, [r7, #12]
 800e7a4:	f7ff fbec 	bl	800df80 <lfs_dir_commitattr>
 800e7a8:	65f8      	str	r0, [r7, #92]	@ 0x5c
                lfs_pair_fromle32(dir->tail);
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	3318      	adds	r3, #24
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7fd fbf9 	bl	800bfa6 <lfs_pair_fromle32>
                if (err) {
 800e7b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d006      	beq.n	800e7c8 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 800e7ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e7bc:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e7c0:	f000 80b0 	beq.w	800e924 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 800e7c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e7c6:	e106      	b.n	800e9d6 <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 800e7c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	601a      	str	r2, [r3, #0]
 800e7d0:	605a      	str	r2, [r3, #4]
 800e7d2:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800e7d4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e7d8:	f083 0301 	eor.w	r3, r3, #1
 800e7dc:	b2db      	uxtb	r3, r3
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d011      	beq.n	800e806 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800e7e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e7ec:	4611      	mov	r1, r2
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7fd fca9 	bl	800c146 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e7fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e7fe:	4611      	mov	r1, r2
 800e800:	4618      	mov	r0, r3
 800e802:	f7fd fca0 	bl	800c146 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800e80c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e810:	4611      	mov	r1, r2
 800e812:	4618      	mov	r0, r3
 800e814:	f7fd fc97 	bl	800c146 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800e818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e81a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800e81e:	f023 0303 	bic.w	r3, r3, #3
 800e822:	62bb      	str	r3, [r7, #40]	@ 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 800e824:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e828:	461a      	mov	r2, r3
 800e82a:	68b9      	ldr	r1, [r7, #8]
 800e82c:	68f8      	ldr	r0, [r7, #12]
 800e82e:	f7ff f9f1 	bl	800dc14 <lfs_dir_getgstate>
 800e832:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800e834:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e836:	2b00      	cmp	r3, #0
 800e838:	d001      	beq.n	800e83e <lfs_dir_compact+0x226>
                return err;
 800e83a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e83c:	e0cb      	b.n	800e9d6 <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 800e83e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e842:	4618      	mov	r0, r3
 800e844:	f7fd fc9f 	bl	800c186 <lfs_gstate_iszero>
 800e848:	4603      	mov	r3, r0
 800e84a:	f083 0301 	eor.w	r3, r3, #1
 800e84e:	b2db      	uxtb	r3, r3
 800e850:	2b00      	cmp	r3, #0
 800e852:	d016      	beq.n	800e882 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 800e854:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e858:	4618      	mov	r0, r3
 800e85a:	f7fd fd39 	bl	800c2d0 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 800e85e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e862:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800e866:	4a61      	ldr	r2, [pc, #388]	@ (800e9ec <lfs_dir_compact+0x3d4>)
 800e868:	68f8      	ldr	r0, [r7, #12]
 800e86a:	f7ff fb89 	bl	800df80 <lfs_dir_commitattr>
 800e86e:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 800e870:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e872:	2b00      	cmp	r3, #0
 800e874:	d005      	beq.n	800e882 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 800e876:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e878:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e87c:	d054      	beq.n	800e928 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 800e87e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e880:	e0a9      	b.n	800e9d6 <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 800e882:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e886:	4619      	mov	r1, r3
 800e888:	68f8      	ldr	r0, [r7, #12]
 800e88a:	f7ff fbf9 	bl	800e080 <lfs_dir_commitcrc>
 800e88e:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800e890:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e892:	2b00      	cmp	r3, #0
 800e894:	d005      	beq.n	800e8a2 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 800e896:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e898:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e89c:	d046      	beq.n	800e92c <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 800e89e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e8a0:	e099      	b.n	800e9d6 <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800e8a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8a4:	68fa      	ldr	r2, [r7, #12]
 800e8a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800e8a8:	6992      	ldr	r2, [r2, #24]
 800e8aa:	fbb3 f1f2 	udiv	r1, r3, r2
 800e8ae:	fb01 f202 	mul.w	r2, r1, r2
 800e8b2:	1a9b      	subs	r3, r3, r2
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d006      	beq.n	800e8c6 <lfs_dir_compact+0x2ae>
 800e8b8:	4b4d      	ldr	r3, [pc, #308]	@ (800e9f0 <lfs_dir_compact+0x3d8>)
 800e8ba:	4a4e      	ldr	r2, [pc, #312]	@ (800e9f4 <lfs_dir_compact+0x3dc>)
 800e8bc:	f640 0121 	movw	r1, #2081	@ 0x821
 800e8c0:	484d      	ldr	r0, [pc, #308]	@ (800e9f8 <lfs_dir_compact+0x3e0>)
 800e8c2:	f003 febd 	bl	8012640 <__assert_func>
            lfs_pair_swap(dir->pair);
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7fd fae5 	bl	800be98 <lfs_pair_swap>
            dir->count = end - begin;
 800e8ce:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 800e8d2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800e8d6:	1ad3      	subs	r3, r2, r3
 800e8d8:	b29a      	uxth	r2, r3
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 800e8de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 800e8e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	3348      	adds	r3, #72	@ 0x48
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	601a      	str	r2, [r3, #0]
 800e8f2:	605a      	str	r2, [r3, #4]
 800e8f4:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800e8f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e8fa:	f083 0301 	eor.w	r3, r3, #1
 800e8fe:	b2db      	uxtb	r3, r3
 800e900:	2b00      	cmp	r3, #0
 800e902:	d065      	beq.n	800e9d0 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	68fa      	ldr	r2, [r7, #12]
 800e908:	333c      	adds	r3, #60	@ 0x3c
 800e90a:	3230      	adds	r2, #48	@ 0x30
 800e90c:	ca07      	ldmia	r2, {r0, r1, r2}
 800e90e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 800e912:	e05d      	b.n	800e9d0 <lfs_dir_compact+0x3b8>
        goto relocate;
 800e914:	bf00      	nop
 800e916:	e00a      	b.n	800e92e <lfs_dir_compact+0x316>
                    goto relocate;
 800e918:	bf00      	nop
 800e91a:	e008      	b.n	800e92e <lfs_dir_compact+0x316>
                    goto relocate;
 800e91c:	bf00      	nop
 800e91e:	e006      	b.n	800e92e <lfs_dir_compact+0x316>
                    goto relocate;
 800e920:	bf00      	nop
 800e922:	e004      	b.n	800e92e <lfs_dir_compact+0x316>
                        goto relocate;
 800e924:	bf00      	nop
 800e926:	e002      	b.n	800e92e <lfs_dir_compact+0x316>
                        goto relocate;
 800e928:	bf00      	nop
 800e92a:	e000      	b.n	800e92e <lfs_dir_compact+0x316>
                    goto relocate;
 800e92c:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 800e92e:	2301      	movs	r3, #1
 800e930:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	3310      	adds	r3, #16
 800e938:	4619      	mov	r1, r3
 800e93a:	68f8      	ldr	r0, [r7, #12]
 800e93c:	f7fc fed0 	bl	800b6e0 <lfs_cache_drop>
        if (!tired) {
 800e940:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800e944:	f083 0301 	eor.w	r3, r3, #1
 800e948:	b2db      	uxtb	r3, r3
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d009      	beq.n	800e962 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	685b      	ldr	r3, [r3, #4]
 800e952:	4a2a      	ldr	r2, [pc, #168]	@ (800e9fc <lfs_dir_compact+0x3e4>)
 800e954:	9200      	str	r2, [sp, #0]
 800e956:	f640 0233 	movw	r2, #2099	@ 0x833
 800e95a:	4927      	ldr	r1, [pc, #156]	@ (800e9f8 <lfs_dir_compact+0x3e0>)
 800e95c:	4828      	ldr	r0, [pc, #160]	@ (800ea00 <lfs_dir_compact+0x3e8>)
 800e95e:	f004 f81f 	bl	80129a0 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	2200      	movs	r2, #0
 800e966:	617a      	str	r2, [r7, #20]
 800e968:	2201      	movs	r2, #1
 800e96a:	61ba      	str	r2, [r7, #24]
 800e96c:	f107 0214 	add.w	r2, r7, #20
 800e970:	4611      	mov	r1, r2
 800e972:	4618      	mov	r0, r3
 800e974:	f7fd fac0 	bl	800bef8 <lfs_pair_cmp>
 800e978:	4603      	mov	r3, r0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d10c      	bne.n	800e998 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	685b      	ldr	r3, [r3, #4]
 800e982:	4a1e      	ldr	r2, [pc, #120]	@ (800e9fc <lfs_dir_compact+0x3e4>)
 800e984:	9200      	str	r2, [sp, #0]
 800e986:	f640 0238 	movw	r2, #2104	@ 0x838
 800e98a:	491b      	ldr	r1, [pc, #108]	@ (800e9f8 <lfs_dir_compact+0x3e0>)
 800e98c:	481d      	ldr	r0, [pc, #116]	@ (800ea04 <lfs_dir_compact+0x3ec>)
 800e98e:	f004 f807 	bl	80129a0 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 800e992:	f06f 031b 	mvn.w	r3, #27
 800e996:	e01e      	b.n	800e9d6 <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	3304      	adds	r3, #4
 800e99c:	4619      	mov	r1, r3
 800e99e:	68f8      	ldr	r0, [r7, #12]
 800e9a0:	f7fd fe98 	bl	800c6d4 <lfs_alloc>
 800e9a4:	6638      	str	r0, [r7, #96]	@ 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800e9a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d00c      	beq.n	800e9c6 <lfs_dir_compact+0x3ae>
 800e9ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e9ae:	f113 0f1c 	cmn.w	r3, #28
 800e9b2:	d106      	bne.n	800e9c2 <lfs_dir_compact+0x3aa>
 800e9b4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800e9b8:	f083 0301 	eor.w	r3, r3, #1
 800e9bc:	b2db      	uxtb	r3, r3
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d001      	beq.n	800e9c6 <lfs_dir_compact+0x3ae>
            return err;
 800e9c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e9c4:	e007      	b.n	800e9d6 <lfs_dir_compact+0x3be>
        }

        tired = false;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        continue;
 800e9cc:	bf00      	nop
    while (true) {
 800e9ce:	e64c      	b.n	800e66a <lfs_dir_compact+0x52>
        break;
 800e9d0:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 800e9d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3768      	adds	r7, #104	@ 0x68
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}
 800e9de:	bf00      	nop
 800e9e0:	0800e5a1 	.word	0x0800e5a1
 800e9e4:	400ffc00 	.word	0x400ffc00
 800e9e8:	000ffc08 	.word	0x000ffc08
 800e9ec:	7ffffc0c 	.word	0x7ffffc0c
 800e9f0:	08013a34 	.word	0x08013a34
 800e9f4:	08014710 	.word	0x08014710
 800e9f8:	080138c0 	.word	0x080138c0
 800e9fc:	080139e0 	.word	0x080139e0
 800ea00:	08013a5c 	.word	0x08013a5c
 800ea04:	08013a80 	.word	0x08013a80

0800ea08 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800ea08:	b590      	push	{r4, r7, lr}
 800ea0a:	b099      	sub	sp, #100	@ 0x64
 800ea0c:	af0a      	add	r7, sp, #40	@ 0x28
 800ea0e:	60f8      	str	r0, [r7, #12]
 800ea10:	60b9      	str	r1, [r7, #8]
 800ea12:	607a      	str	r2, [r7, #4]
 800ea14:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 800ea16:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800ea1a:	637b      	str	r3, [r7, #52]	@ 0x34
        while (end - split > 1) {
 800ea1c:	e057      	b.n	800eace <lfs_dir_splittingcompact+0xc6>
            lfs_size_t size = 0;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	61fb      	str	r3, [r7, #28]
            int err = lfs_dir_traverse(lfs,
 800ea22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ea28:	b292      	uxth	r2, r2
 800ea2a:	4252      	negs	r2, r2
 800ea2c:	b292      	uxth	r2, r2
 800ea2e:	b212      	sxth	r2, r2
 800ea30:	f107 011c 	add.w	r1, r7, #28
 800ea34:	9108      	str	r1, [sp, #32]
 800ea36:	4979      	ldr	r1, [pc, #484]	@ (800ec1c <lfs_dir_splittingcompact+0x214>)
 800ea38:	9107      	str	r1, [sp, #28]
 800ea3a:	9206      	str	r2, [sp, #24]
 800ea3c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800ea40:	9205      	str	r2, [sp, #20]
 800ea42:	9304      	str	r3, [sp, #16]
 800ea44:	2300      	movs	r3, #0
 800ea46:	9303      	str	r3, [sp, #12]
 800ea48:	4b75      	ldr	r3, [pc, #468]	@ (800ec20 <lfs_dir_splittingcompact+0x218>)
 800ea4a:	9302      	str	r3, [sp, #8]
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	9301      	str	r3, [sp, #4]
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	9300      	str	r3, [sp, #0]
 800ea54:	f04f 33ff 	mov.w	r3, #4294967295
 800ea58:	2200      	movs	r2, #0
 800ea5a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ea5c:	68f8      	ldr	r0, [r7, #12]
 800ea5e:	f7fe f909 	bl	800cc74 <lfs_dir_traverse>
 800ea62:	6338      	str	r0, [r7, #48]	@ 0x30
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 800ea64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d001      	beq.n	800ea6e <lfs_dir_splittingcompact+0x66>
                return err;
 800ea6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea6c:	e0d1      	b.n	800ec12 <lfs_dir_splittingcompact+0x20a>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            lfs_size_t metadata_max = (lfs->cfg->metadata_max)
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ea72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    ? lfs->cfg->metadata_max
                    : lfs->cfg->block_size;
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d003      	beq.n	800ea80 <lfs_dir_splittingcompact+0x78>
                    ? lfs->cfg->metadata_max
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                    : lfs->cfg->block_size;
 800ea7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea7e:	e002      	b.n	800ea86 <lfs_dir_splittingcompact+0x7e>
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ea84:	69db      	ldr	r3, [r3, #28]
            lfs_size_t metadata_max = (lfs->cfg->metadata_max)
 800ea86:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (end - split < 0xff
 800ea88:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800ea8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea8e:	1ad3      	subs	r3, r2, r3
 800ea90:	2bfe      	cmp	r3, #254	@ 0xfe
 800ea92:	d814      	bhi.n	800eabe <lfs_dir_splittingcompact+0xb6>
                    && size <= lfs_min(
 800ea94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea96:	f1a3 0428 	sub.w	r4, r3, #40	@ 0x28
 800ea9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea9c:	085a      	lsrs	r2, r3, #1
                        metadata_max - 40,
                        lfs_alignup(
                            metadata_max/2,
                            lfs->cfg->prog_size))) {
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eaa2:	699b      	ldr	r3, [r3, #24]
                    && size <= lfs_min(
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	4610      	mov	r0, r2
 800eaa8:	f7fc fd89 	bl	800b5be <lfs_alignup>
 800eaac:	4603      	mov	r3, r0
 800eaae:	4619      	mov	r1, r3
 800eab0:	4620      	mov	r0, r4
 800eab2:	f7fc fd5f 	bl	800b574 <lfs_min>
 800eab6:	4602      	mov	r2, r0
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d20e      	bcs.n	800eadc <lfs_dir_splittingcompact+0xd4>
                break;
            }

            split = split + ((end - split) / 2);
 800eabe:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800eac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eac4:	1ad3      	subs	r3, r2, r3
 800eac6:	085b      	lsrs	r3, r3, #1
 800eac8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eaca:	4413      	add	r3, r2
 800eacc:	637b      	str	r3, [r7, #52]	@ 0x34
        while (end - split > 1) {
 800eace:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800ead2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ead4:	1ad3      	subs	r3, r2, r3
 800ead6:	2b01      	cmp	r3, #1
 800ead8:	d8a1      	bhi.n	800ea1e <lfs_dir_splittingcompact+0x16>
 800eada:	e000      	b.n	800eade <lfs_dir_splittingcompact+0xd6>
                break;
 800eadc:	bf00      	nop
        }

        if (split == begin) {
 800eade:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800eae2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d02d      	beq.n	800eb44 <lfs_dir_splittingcompact+0x13c>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800eae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800eaf0:	9202      	str	r2, [sp, #8]
 800eaf2:	9301      	str	r3, [sp, #4]
 800eaf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eaf6:	9300      	str	r3, [sp, #0]
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	687a      	ldr	r2, [r7, #4]
 800eafc:	68b9      	ldr	r1, [r7, #8]
 800eafe:	68f8      	ldr	r0, [r7, #12]
 800eb00:	f7ff fce4 	bl	800e4cc <lfs_dir_split>
 800eb04:	62b8      	str	r0, [r7, #40]	@ 0x28
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 800eb06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d005      	beq.n	800eb18 <lfs_dir_splittingcompact+0x110>
 800eb0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb0e:	f113 0f1c 	cmn.w	r3, #28
 800eb12:	d001      	beq.n	800eb18 <lfs_dir_splittingcompact+0x110>
            return err;
 800eb14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb16:	e07c      	b.n	800ec12 <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 800eb18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d00e      	beq.n	800eb3c <lfs_dir_splittingcompact+0x134>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	685b      	ldr	r3, [r3, #4]
 800eb26:	493f      	ldr	r1, [pc, #252]	@ (800ec24 <lfs_dir_splittingcompact+0x21c>)
 800eb28:	9101      	str	r1, [sp, #4]
 800eb2a:	9300      	str	r3, [sp, #0]
 800eb2c:	4613      	mov	r3, r2
 800eb2e:	f640 028c 	movw	r2, #2188	@ 0x88c
 800eb32:	493d      	ldr	r1, [pc, #244]	@ (800ec28 <lfs_dir_splittingcompact+0x220>)
 800eb34:	483d      	ldr	r0, [pc, #244]	@ (800ec2c <lfs_dir_splittingcompact+0x224>)
 800eb36:	f003 ff33 	bl	80129a0 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 800eb3a:	e004      	b.n	800eb46 <lfs_dir_splittingcompact+0x13e>
        } else {
            end = split;
 800eb3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb3e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
    while (true) {
 800eb42:	e768      	b.n	800ea16 <lfs_dir_splittingcompact+0xe>
            break;
 800eb44:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 800eb46:	68b9      	ldr	r1, [r7, #8]
 800eb48:	68f8      	ldr	r0, [r7, #12]
 800eb4a:	f7ff fd3e 	bl	800e5ca <lfs_dir_needsrelocation>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d04f      	beq.n	800ebf4 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	2200      	movs	r2, #0
 800eb58:	617a      	str	r2, [r7, #20]
 800eb5a:	2201      	movs	r2, #1
 800eb5c:	61ba      	str	r2, [r7, #24]
 800eb5e:	f107 0214 	add.w	r2, r7, #20
 800eb62:	4611      	mov	r1, r2
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7fd f9c7 	bl	800bef8 <lfs_pair_cmp>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d141      	bne.n	800ebf4 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 800eb70:	68f8      	ldr	r0, [r7, #12]
 800eb72:	f003 fc0b 	bl	801238c <lfs_fs_size_>
 800eb76:	6278      	str	r0, [r7, #36]	@ 0x24
        if (size < 0) {
 800eb78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	da01      	bge.n	800eb82 <lfs_dir_splittingcompact+0x17a>
            return size;
 800eb7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb80:	e047      	b.n	800ec12 <lfs_dir_splittingcompact+0x20a>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800eb86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb88:	1ad2      	subs	r2, r2, r3
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb8e:	08db      	lsrs	r3, r3, #3
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d92f      	bls.n	800ebf4 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	689b      	ldr	r3, [r3, #8]
 800eb98:	4a22      	ldr	r2, [pc, #136]	@ (800ec24 <lfs_dir_splittingcompact+0x21c>)
 800eb9a:	9200      	str	r2, [sp, #0]
 800eb9c:	f640 02a2 	movw	r2, #2210	@ 0x8a2
 800eba0:	4921      	ldr	r1, [pc, #132]	@ (800ec28 <lfs_dir_splittingcompact+0x220>)
 800eba2:	4823      	ldr	r0, [pc, #140]	@ (800ec30 <lfs_dir_splittingcompact+0x228>)
 800eba4:	f003 fefc 	bl	80129a0 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800eba8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800ebac:	9302      	str	r3, [sp, #8]
 800ebae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800ebb2:	9301      	str	r3, [sp, #4]
 800ebb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ebb6:	9300      	str	r3, [sp, #0]
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	687a      	ldr	r2, [r7, #4]
 800ebbc:	68b9      	ldr	r1, [r7, #8]
 800ebbe:	68f8      	ldr	r0, [r7, #12]
 800ebc0:	f7ff fc84 	bl	800e4cc <lfs_dir_split>
 800ebc4:	6238      	str	r0, [r7, #32]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 800ebc6:	6a3b      	ldr	r3, [r7, #32]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d005      	beq.n	800ebd8 <lfs_dir_splittingcompact+0x1d0>
 800ebcc:	6a3b      	ldr	r3, [r7, #32]
 800ebce:	f113 0f1c 	cmn.w	r3, #28
 800ebd2:	d001      	beq.n	800ebd8 <lfs_dir_splittingcompact+0x1d0>
                return err;
 800ebd4:	6a3b      	ldr	r3, [r7, #32]
 800ebd6:	e01c      	b.n	800ec12 <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 800ebd8:	6a3b      	ldr	r3, [r7, #32]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d007      	beq.n	800ebee <lfs_dir_splittingcompact+0x1e6>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 800ebde:	4b11      	ldr	r3, [pc, #68]	@ (800ec24 <lfs_dir_splittingcompact+0x21c>)
 800ebe0:	f640 02ac 	movw	r2, #2220	@ 0x8ac
 800ebe4:	4910      	ldr	r1, [pc, #64]	@ (800ec28 <lfs_dir_splittingcompact+0x220>)
 800ebe6:	4813      	ldr	r0, [pc, #76]	@ (800ec34 <lfs_dir_splittingcompact+0x22c>)
 800ebe8:	f003 feda 	bl	80129a0 <iprintf>
 800ebec:	e002      	b.n	800ebf4 <lfs_dir_splittingcompact+0x1ec>
            } else {
                // duplicate the superblock entry into the new superblock
                end = 1;
 800ebee:	2301      	movs	r3, #1
 800ebf0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 800ebf4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800ebf8:	9302      	str	r3, [sp, #8]
 800ebfa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800ebfe:	9301      	str	r3, [sp, #4]
 800ec00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec02:	9300      	str	r3, [sp, #0]
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	687a      	ldr	r2, [r7, #4]
 800ec08:	68b9      	ldr	r1, [r7, #8]
 800ec0a:	68f8      	ldr	r0, [r7, #12]
 800ec0c:	f7ff fd04 	bl	800e618 <lfs_dir_compact>
 800ec10:	4603      	mov	r3, r0
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	373c      	adds	r7, #60	@ 0x3c
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd90      	pop	{r4, r7, pc}
 800ec1a:	bf00      	nop
 800ec1c:	0800e575 	.word	0x0800e575
 800ec20:	400ffc00 	.word	0x400ffc00
 800ec24:	080139e0 	.word	0x080139e0
 800ec28:	080138c0 	.word	0x080138c0
 800ec2c:	08013ab8 	.word	0x08013ab8
 800ec30:	08013ae8 	.word	0x08013ae8
 800ec34:	08013b18 	.word	0x08013b18

0800ec38 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 800ec38:	b5b0      	push	{r4, r5, r7, lr}
 800ec3a:	b0a6      	sub	sp, #152	@ 0x98
 800ec3c:	af0a      	add	r7, sp, #40	@ 0x28
 800ec3e:	60f8      	str	r0, [r7, #12]
 800ec40:	60b9      	str	r1, [r7, #8]
 800ec42:	607a      	str	r2, [r7, #4]
 800ec44:	603b      	str	r3, [r7, #0]
    int state = 0;
 800ec46:	2300      	movs	r3, #0
 800ec48:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    for (int i = 0; i < attrcount; i++) {
 800ec50:	2300      	movs	r3, #0
 800ec52:	667b      	str	r3, [r7, #100]	@ 0x64
 800ec54:	e06d      	b.n	800ed32 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800ec56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ec58:	00db      	lsls	r3, r3, #3
 800ec5a:	683a      	ldr	r2, [r7, #0]
 800ec5c:	4413      	add	r3, r2
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7fd fa15 	bl	800c090 <lfs_tag_type3>
 800ec66:	4603      	mov	r3, r0
 800ec68:	461a      	mov	r2, r3
 800ec6a:	f240 4301 	movw	r3, #1025	@ 0x401
 800ec6e:	429a      	cmp	r2, r3
 800ec70:	d106      	bne.n	800ec80 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	8a9b      	ldrh	r3, [r3, #20]
 800ec76:	3301      	adds	r3, #1
 800ec78:	b29a      	uxth	r2, r3
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	829a      	strh	r2, [r3, #20]
 800ec7e:	e055      	b.n	800ed2c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 800ec80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ec82:	00db      	lsls	r3, r3, #3
 800ec84:	683a      	ldr	r2, [r7, #0]
 800ec86:	4413      	add	r3, r2
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7fd fa00 	bl	800c090 <lfs_tag_type3>
 800ec90:	4603      	mov	r3, r0
 800ec92:	461a      	mov	r2, r3
 800ec94:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d114      	bne.n	800ecc6 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	8a9b      	ldrh	r3, [r3, #20]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d106      	bne.n	800ecb2 <lfs_dir_relocatingcommit+0x7a>
 800eca4:	4ba4      	ldr	r3, [pc, #656]	@ (800ef38 <lfs_dir_relocatingcommit+0x300>)
 800eca6:	4aa5      	ldr	r2, [pc, #660]	@ (800ef3c <lfs_dir_relocatingcommit+0x304>)
 800eca8:	f640 01c5 	movw	r1, #2245	@ 0x8c5
 800ecac:	48a4      	ldr	r0, [pc, #656]	@ (800ef40 <lfs_dir_relocatingcommit+0x308>)
 800ecae:	f003 fcc7 	bl	8012640 <__assert_func>
            dir->count -= 1;
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	8a9b      	ldrh	r3, [r3, #20]
 800ecb6:	3b01      	subs	r3, #1
 800ecb8:	b29a      	uxth	r2, r3
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 800ecc4:	e032      	b.n	800ed2c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 800ecc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ecc8:	00db      	lsls	r3, r3, #3
 800ecca:	683a      	ldr	r2, [r7, #0]
 800eccc:	4413      	add	r3, r2
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f7fd f9bd 	bl	800c050 <lfs_tag_type1>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ecdc:	d126      	bne.n	800ed2c <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 800ecde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ece0:	00db      	lsls	r3, r3, #3
 800ece2:	683a      	ldr	r2, [r7, #0]
 800ece4:	4413      	add	r3, r2
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	681a      	ldr	r2, [r3, #0]
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 800ecee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ecf0:	00db      	lsls	r3, r3, #3
 800ecf2:	683a      	ldr	r2, [r7, #0]
 800ecf4:	4413      	add	r3, r2
 800ecf6:	685b      	ldr	r3, [r3, #4]
 800ecf8:	685a      	ldr	r2, [r3, #4]
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 800ecfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ed00:	00db      	lsls	r3, r3, #3
 800ed02:	683a      	ldr	r2, [r7, #0]
 800ed04:	4413      	add	r3, r2
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f7fd f9d1 	bl	800c0b0 <lfs_tag_chunk>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	f003 0301 	and.w	r3, r3, #1
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	bf14      	ite	ne
 800ed18:	2301      	movne	r3, #1
 800ed1a:	2300      	moveq	r3, #0
 800ed1c:	b2da      	uxtb	r2, r3
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	3318      	adds	r3, #24
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7fd f93d 	bl	800bfa6 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 800ed2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ed2e:	3301      	adds	r3, #1
 800ed30:	667b      	str	r3, [r7, #100]	@ 0x64
 800ed32:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ed34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	db8c      	blt.n	800ec56 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 800ed3c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d02b      	beq.n	800ed9c <lfs_dir_relocatingcommit+0x164>
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	8a9b      	ldrh	r3, [r3, #20]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d127      	bne.n	800ed9c <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 800ed4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d106      	bne.n	800ed62 <lfs_dir_relocatingcommit+0x12a>
 800ed54:	4b7b      	ldr	r3, [pc, #492]	@ (800ef44 <lfs_dir_relocatingcommit+0x30c>)
 800ed56:	4a79      	ldr	r2, [pc, #484]	@ (800ef3c <lfs_dir_relocatingcommit+0x304>)
 800ed58:	f640 01d2 	movw	r1, #2258	@ 0x8d2
 800ed5c:	4878      	ldr	r0, [pc, #480]	@ (800ef40 <lfs_dir_relocatingcommit+0x308>)
 800ed5e:	f003 fc6f 	bl	8012640 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ed68:	4619      	mov	r1, r3
 800ed6a:	68f8      	ldr	r0, [r7, #12]
 800ed6c:	f002 feb0 	bl	8011ad0 <lfs_fs_pred>
 800ed70:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (err && err != LFS_ERR_NOENT) {
 800ed72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d005      	beq.n	800ed84 <lfs_dir_relocatingcommit+0x14c>
 800ed78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ed7a:	f113 0f02 	cmn.w	r3, #2
 800ed7e:	d001      	beq.n	800ed84 <lfs_dir_relocatingcommit+0x14c>
            return err;
 800ed80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ed82:	e214      	b.n	800f1ae <lfs_dir_relocatingcommit+0x576>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 800ed84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ed86:	f113 0f02 	cmn.w	r3, #2
 800ed8a:	d007      	beq.n	800ed9c <lfs_dir_relocatingcommit+0x164>
 800ed8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ed90:	7ddb      	ldrb	r3, [r3, #23]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d002      	beq.n	800ed9c <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 800ed96:	2302      	movs	r3, #2
 800ed98:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto fixmlist;
 800ed9a:	e121      	b.n	800efe0 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 800ed9c:	68bb      	ldr	r3, [r7, #8]
 800ed9e:	7d9b      	ldrb	r3, [r3, #22]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	f000 80fb 	beq.w	800ef9c <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 800edaa:	633b      	str	r3, [r7, #48]	@ 0x30
            .off = dir->off,
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800edb0:	637b      	str	r3, [r7, #52]	@ 0x34
            .ptag = dir->etag,
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 800edb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800edb8:	f04f 33ff 	mov.w	r3, #4294967295
 800edbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800edc2:	643b      	str	r3, [r7, #64]	@ 0x40
            .end = (lfs->cfg->metadata_max ?
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800edc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d004      	beq.n	800edd8 <lfs_dir_relocatingcommit+0x1a0>
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800edd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800edd4:	3b08      	subs	r3, #8
 800edd6:	e003      	b.n	800ede0 <lfs_dir_relocatingcommit+0x1a8>
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eddc:	69db      	ldr	r3, [r3, #28]
 800edde:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 800ede0:	647b      	str	r3, [r7, #68]	@ 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	3318      	adds	r3, #24
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7fd f8f7 	bl	800bfda <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	68da      	ldr	r2, [r3, #12]
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800edf8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800edfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int err = lfs_dir_traverse(lfs,
 800edfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ee02:	9308      	str	r3, [sp, #32]
 800ee04:	4b50      	ldr	r3, [pc, #320]	@ (800ef48 <lfs_dir_relocatingcommit+0x310>)
 800ee06:	9307      	str	r3, [sp, #28]
 800ee08:	2300      	movs	r3, #0
 800ee0a:	9306      	str	r3, [sp, #24]
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	9305      	str	r3, [sp, #20]
 800ee10:	2300      	movs	r3, #0
 800ee12:	9304      	str	r3, [sp, #16]
 800ee14:	2300      	movs	r3, #0
 800ee16:	9303      	str	r3, [sp, #12]
 800ee18:	2300      	movs	r3, #0
 800ee1a:	9302      	str	r3, [sp, #8]
 800ee1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ee20:	9301      	str	r3, [sp, #4]
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	9300      	str	r3, [sp, #0]
 800ee26:	460b      	mov	r3, r1
 800ee28:	68b9      	ldr	r1, [r7, #8]
 800ee2a:	68f8      	ldr	r0, [r7, #12]
 800ee2c:	f7fd ff22 	bl	800cc74 <lfs_dir_traverse>
 800ee30:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	3318      	adds	r3, #24
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7fd f8b5 	bl	800bfa6 <lfs_pair_fromle32>
        if (err) {
 800ee3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d00b      	beq.n	800ee5a <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800ee42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee44:	f113 0f1c 	cmn.w	r3, #28
 800ee48:	f000 80aa 	beq.w	800efa0 <lfs_dir_relocatingcommit+0x368>
 800ee4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee4e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800ee52:	f000 80a5 	beq.w	800efa0 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 800ee56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee58:	e1a9      	b.n	800f1ae <lfs_dir_relocatingcommit+0x576>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 800ee5a:	f107 031c 	add.w	r3, r7, #28
 800ee5e:	2200      	movs	r2, #0
 800ee60:	601a      	str	r2, [r3, #0]
 800ee62:	605a      	str	r2, [r3, #4]
 800ee64:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ee6c:	f107 031c 	add.w	r3, r7, #28
 800ee70:	4611      	mov	r1, r2
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7fd f967 	bl	800c146 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800ee7e:	f107 031c 	add.w	r3, r7, #28
 800ee82:	4611      	mov	r1, r2
 800ee84:	4618      	mov	r0, r3
 800ee86:	f7fd f95e 	bl	800c146 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800ee90:	f107 031c 	add.w	r3, r7, #28
 800ee94:	4611      	mov	r1, r2
 800ee96:	4618      	mov	r0, r3
 800ee98:	f7fd f955 	bl	800c146 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800ee9c:	69fb      	ldr	r3, [r7, #28]
 800ee9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800eea2:	f023 0303 	bic.w	r3, r3, #3
 800eea6:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 800eea8:	f107 031c 	add.w	r3, r7, #28
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7fd f96a 	bl	800c186 <lfs_gstate_iszero>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	f083 0301 	eor.w	r3, r3, #1
 800eeb8:	b2db      	uxtb	r3, r3
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d027      	beq.n	800ef0e <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 800eebe:	f107 031c 	add.w	r3, r7, #28
 800eec2:	461a      	mov	r2, r3
 800eec4:	68b9      	ldr	r1, [r7, #8]
 800eec6:	68f8      	ldr	r0, [r7, #12]
 800eec8:	f7fe fea4 	bl	800dc14 <lfs_dir_getgstate>
 800eecc:	6578      	str	r0, [r7, #84]	@ 0x54
            if (err) {
 800eece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d001      	beq.n	800eed8 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 800eed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eed6:	e16a      	b.n	800f1ae <lfs_dir_relocatingcommit+0x576>
            }

            lfs_gstate_tole32(&delta);
 800eed8:	f107 031c 	add.w	r3, r7, #28
 800eedc:	4618      	mov	r0, r3
 800eede:	f7fd f9f7 	bl	800c2d0 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 800eee2:	f107 031c 	add.w	r3, r7, #28
 800eee6:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800eeea:	4a18      	ldr	r2, [pc, #96]	@ (800ef4c <lfs_dir_relocatingcommit+0x314>)
 800eeec:	68f8      	ldr	r0, [r7, #12]
 800eeee:	f7ff f847 	bl	800df80 <lfs_dir_commitattr>
 800eef2:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 800eef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d009      	beq.n	800ef0e <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800eefa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eefc:	f113 0f1c 	cmn.w	r3, #28
 800ef00:	d050      	beq.n	800efa4 <lfs_dir_relocatingcommit+0x36c>
 800ef02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef04:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800ef08:	d04c      	beq.n	800efa4 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 800ef0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef0c:	e14f      	b.n	800f1ae <lfs_dir_relocatingcommit+0x576>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 800ef0e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ef12:	4619      	mov	r1, r3
 800ef14:	68f8      	ldr	r0, [r7, #12]
 800ef16:	f7ff f8b3 	bl	800e080 <lfs_dir_commitcrc>
 800ef1a:	6578      	str	r0, [r7, #84]	@ 0x54
        if (err) {
 800ef1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d016      	beq.n	800ef50 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800ef22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef24:	f113 0f1c 	cmn.w	r3, #28
 800ef28:	d03e      	beq.n	800efa8 <lfs_dir_relocatingcommit+0x370>
 800ef2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef2c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800ef30:	d03a      	beq.n	800efa8 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 800ef32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef34:	e13b      	b.n	800f1ae <lfs_dir_relocatingcommit+0x576>
 800ef36:	bf00      	nop
 800ef38:	08013b44 	.word	0x08013b44
 800ef3c:	08014720 	.word	0x08014720
 800ef40:	080138c0 	.word	0x080138c0
 800ef44:	08013b54 	.word	0x08013b54
 800ef48:	0800e5a1 	.word	0x0800e5a1
 800ef4c:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800ef50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef52:	68fa      	ldr	r2, [r7, #12]
 800ef54:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800ef56:	6992      	ldr	r2, [r2, #24]
 800ef58:	fbb3 f1f2 	udiv	r1, r3, r2
 800ef5c:	fb01 f202 	mul.w	r2, r1, r2
 800ef60:	1a9b      	subs	r3, r3, r2
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d006      	beq.n	800ef74 <lfs_dir_relocatingcommit+0x33c>
 800ef66:	4b94      	ldr	r3, [pc, #592]	@ (800f1b8 <lfs_dir_relocatingcommit+0x580>)
 800ef68:	4a94      	ldr	r2, [pc, #592]	@ (800f1bc <lfs_dir_relocatingcommit+0x584>)
 800ef6a:	f640 111c 	movw	r1, #2332	@ 0x91c
 800ef6e:	4894      	ldr	r0, [pc, #592]	@ (800f1c0 <lfs_dir_relocatingcommit+0x588>)
 800ef70:	f003 fb66 	bl	8012640 <__assert_func>
        dir->off = commit.off;
 800ef74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 800ef7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	68fa      	ldr	r2, [r7, #12]
 800ef84:	333c      	adds	r3, #60	@ 0x3c
 800ef86:	3230      	adds	r2, #48	@ 0x30
 800ef88:	ca07      	ldmia	r2, {r0, r1, r2}
 800ef8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	3348      	adds	r3, #72	@ 0x48
 800ef92:	2200      	movs	r2, #0
 800ef94:	601a      	str	r2, [r3, #0]
 800ef96:	605a      	str	r2, [r3, #4]
 800ef98:	609a      	str	r2, [r3, #8]
 800ef9a:	e021      	b.n	800efe0 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 800ef9c:	bf00      	nop
 800ef9e:	e004      	b.n	800efaa <lfs_dir_relocatingcommit+0x372>
                goto compact;
 800efa0:	bf00      	nop
 800efa2:	e002      	b.n	800efaa <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 800efa4:	bf00      	nop
 800efa6:	e000      	b.n	800efaa <lfs_dir_relocatingcommit+0x372>
                goto compact;
 800efa8:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	3310      	adds	r3, #16
 800efae:	4619      	mov	r1, r3
 800efb0:	68f8      	ldr	r0, [r7, #12]
 800efb2:	f7fc fb95 	bl	800b6e0 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	8a9b      	ldrh	r3, [r3, #20]
 800efba:	9302      	str	r3, [sp, #8]
 800efbc:	2300      	movs	r3, #0
 800efbe:	9301      	str	r3, [sp, #4]
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	9300      	str	r3, [sp, #0]
 800efc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800efc8:	683a      	ldr	r2, [r7, #0]
 800efca:	68b9      	ldr	r1, [r7, #8]
 800efcc:	68f8      	ldr	r0, [r7, #12]
 800efce:	f7ff fd1b 	bl	800ea08 <lfs_dir_splittingcompact>
 800efd2:	66f8      	str	r0, [r7, #108]	@ 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 800efd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	da01      	bge.n	800efde <lfs_dir_relocatingcommit+0x3a6>
        return state;
 800efda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800efdc:	e0e7      	b.n	800f1ae <lfs_dir_relocatingcommit+0x576>
    }

    goto fixmlist;
 800efde:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	3304      	adds	r3, #4
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eff2:	663b      	str	r3, [r7, #96]	@ 0x60
 800eff4:	e0d6      	b.n	800f1a4 <lfs_dir_relocatingcommit+0x56c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 800eff6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eff8:	3308      	adds	r3, #8
 800effa:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800effe:	4611      	mov	r1, r2
 800f000:	4618      	mov	r0, r3
 800f002:	f7fc ff79 	bl	800bef8 <lfs_pair_cmp>
 800f006:	4603      	mov	r3, r0
 800f008:	2b00      	cmp	r3, #0
 800f00a:	f040 80c8 	bne.w	800f19e <lfs_dir_relocatingcommit+0x566>
            d->m = *dir;
 800f00e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f010:	68ba      	ldr	r2, [r7, #8]
 800f012:	f103 0408 	add.w	r4, r3, #8
 800f016:	4615      	mov	r5, r2
 800f018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f01a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f01c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f020:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 800f024:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f026:	3308      	adds	r3, #8
 800f028:	687a      	ldr	r2, [r7, #4]
 800f02a:	429a      	cmp	r2, r3
 800f02c:	f000 80ad 	beq.w	800f18a <lfs_dir_relocatingcommit+0x552>
                for (int i = 0; i < attrcount; i++) {
 800f030:	2300      	movs	r3, #0
 800f032:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f034:	e07f      	b.n	800f136 <lfs_dir_relocatingcommit+0x4fe>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800f036:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f038:	00db      	lsls	r3, r3, #3
 800f03a:	683a      	ldr	r2, [r7, #0]
 800f03c:	4413      	add	r3, r2
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	4618      	mov	r0, r3
 800f042:	f7fd f825 	bl	800c090 <lfs_tag_type3>
 800f046:	4603      	mov	r3, r0
 800f048:	461a      	mov	r2, r3
 800f04a:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 800f04e:	429a      	cmp	r2, r3
 800f050:	d119      	bne.n	800f086 <lfs_dir_relocatingcommit+0x44e>
                            d->id == lfs_tag_id(attrs[i].tag) &&
 800f052:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f054:	889c      	ldrh	r4, [r3, #4]
 800f056:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f058:	00db      	lsls	r3, r3, #3
 800f05a:	683a      	ldr	r2, [r7, #0]
 800f05c:	4413      	add	r3, r2
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	4618      	mov	r0, r3
 800f062:	f7fd f83f 	bl	800c0e4 <lfs_tag_id>
 800f066:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800f068:	429c      	cmp	r4, r3
 800f06a:	d10c      	bne.n	800f086 <lfs_dir_relocatingcommit+0x44e>
                            d->type != LFS_TYPE_DIR) {
 800f06c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f06e:	799b      	ldrb	r3, [r3, #6]
                            d->id == lfs_tag_id(attrs[i].tag) &&
 800f070:	2b02      	cmp	r3, #2
 800f072:	d008      	beq.n	800f086 <lfs_dir_relocatingcommit+0x44e>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 800f074:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f076:	f04f 32ff 	mov.w	r2, #4294967295
 800f07a:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 800f07c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f07e:	f04f 32ff 	mov.w	r2, #4294967295
 800f082:	60da      	str	r2, [r3, #12]
 800f084:	e054      	b.n	800f130 <lfs_dir_relocatingcommit+0x4f8>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800f086:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f088:	00db      	lsls	r3, r3, #3
 800f08a:	683a      	ldr	r2, [r7, #0]
 800f08c:	4413      	add	r3, r2
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	4618      	mov	r0, r3
 800f092:	f7fc fffd 	bl	800c090 <lfs_tag_type3>
 800f096:	4603      	mov	r3, r0
 800f098:	461a      	mov	r2, r3
 800f09a:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d11c      	bne.n	800f0dc <lfs_dir_relocatingcommit+0x4a4>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 800f0a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0a4:	889c      	ldrh	r4, [r3, #4]
 800f0a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f0a8:	00db      	lsls	r3, r3, #3
 800f0aa:	683a      	ldr	r2, [r7, #0]
 800f0ac:	4413      	add	r3, r2
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f7fd f817 	bl	800c0e4 <lfs_tag_id>
 800f0b6:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800f0b8:	429c      	cmp	r4, r3
 800f0ba:	d90f      	bls.n	800f0dc <lfs_dir_relocatingcommit+0x4a4>
                        d->id -= 1;
 800f0bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0be:	889b      	ldrh	r3, [r3, #4]
 800f0c0:	3b01      	subs	r3, #1
 800f0c2:	b29a      	uxth	r2, r3
 800f0c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0c6:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 800f0c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0ca:	799b      	ldrb	r3, [r3, #6]
 800f0cc:	2b02      	cmp	r3, #2
 800f0ce:	d12f      	bne.n	800f130 <lfs_dir_relocatingcommit+0x4f8>
                            ((lfs_dir_t*)d)->pos -= 1;
 800f0d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0d4:	1e5a      	subs	r2, r3, #1
 800f0d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0d8:	629a      	str	r2, [r3, #40]	@ 0x28
                        if (d->type == LFS_TYPE_DIR) {
 800f0da:	e029      	b.n	800f130 <lfs_dir_relocatingcommit+0x4f8>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800f0dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f0de:	00db      	lsls	r3, r3, #3
 800f0e0:	683a      	ldr	r2, [r7, #0]
 800f0e2:	4413      	add	r3, r2
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f7fc ffd2 	bl	800c090 <lfs_tag_type3>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	461a      	mov	r2, r3
 800f0f0:	f240 4301 	movw	r3, #1025	@ 0x401
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d11b      	bne.n	800f130 <lfs_dir_relocatingcommit+0x4f8>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 800f0f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0fa:	889c      	ldrh	r4, [r3, #4]
 800f0fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f0fe:	00db      	lsls	r3, r3, #3
 800f100:	683a      	ldr	r2, [r7, #0]
 800f102:	4413      	add	r3, r2
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	4618      	mov	r0, r3
 800f108:	f7fc ffec 	bl	800c0e4 <lfs_tag_id>
 800f10c:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800f10e:	429c      	cmp	r4, r3
 800f110:	d30e      	bcc.n	800f130 <lfs_dir_relocatingcommit+0x4f8>
                        d->id += 1;
 800f112:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f114:	889b      	ldrh	r3, [r3, #4]
 800f116:	3301      	adds	r3, #1
 800f118:	b29a      	uxth	r2, r3
 800f11a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f11c:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 800f11e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f120:	799b      	ldrb	r3, [r3, #6]
 800f122:	2b02      	cmp	r3, #2
 800f124:	d104      	bne.n	800f130 <lfs_dir_relocatingcommit+0x4f8>
                            ((lfs_dir_t*)d)->pos += 1;
 800f126:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f12a:	1c5a      	adds	r2, r3, #1
 800f12c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f12e:	629a      	str	r2, [r3, #40]	@ 0x28
                for (int i = 0; i < attrcount; i++) {
 800f130:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f132:	3301      	adds	r3, #1
 800f134:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f136:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f138:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f13c:	429a      	cmp	r2, r3
 800f13e:	f6ff af7a 	blt.w	800f036 <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 800f142:	e022      	b.n	800f18a <lfs_dir_relocatingcommit+0x552>
                // we split and id is on tail now
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 800f144:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f146:	f103 0220 	add.w	r2, r3, #32
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	3320      	adds	r3, #32
 800f14e:	4619      	mov	r1, r3
 800f150:	4610      	mov	r0, r2
 800f152:	f7fc fed1 	bl	800bef8 <lfs_pair_cmp>
 800f156:	4603      	mov	r3, r0
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d007      	beq.n	800f16c <lfs_dir_relocatingcommit+0x534>
                    d->id -= d->m.count;
 800f15c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f15e:	889a      	ldrh	r2, [r3, #4]
 800f160:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f162:	8b9b      	ldrh	r3, [r3, #28]
 800f164:	1ad3      	subs	r3, r2, r3
 800f166:	b29a      	uxth	r2, r3
 800f168:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f16a:	809a      	strh	r2, [r3, #4]
                }
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800f16c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f16e:	f103 0108 	add.w	r1, r3, #8
 800f172:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f174:	3320      	adds	r3, #32
 800f176:	461a      	mov	r2, r3
 800f178:	68f8      	ldr	r0, [r7, #12]
 800f17a:	f7fe fd2f 	bl	800dbdc <lfs_dir_fetch>
 800f17e:	6538      	str	r0, [r7, #80]	@ 0x50
                if (err) {
 800f180:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f182:	2b00      	cmp	r3, #0
 800f184:	d001      	beq.n	800f18a <lfs_dir_relocatingcommit+0x552>
                    return err;
 800f186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f188:	e011      	b.n	800f1ae <lfs_dir_relocatingcommit+0x576>
            while (d->id >= d->m.count && d->m.split) {
 800f18a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f18c:	889a      	ldrh	r2, [r3, #4]
 800f18e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f190:	8b9b      	ldrh	r3, [r3, #28]
 800f192:	429a      	cmp	r2, r3
 800f194:	d303      	bcc.n	800f19e <lfs_dir_relocatingcommit+0x566>
 800f196:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f198:	7fdb      	ldrb	r3, [r3, #31]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d1d2      	bne.n	800f144 <lfs_dir_relocatingcommit+0x50c>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800f19e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	663b      	str	r3, [r7, #96]	@ 0x60
 800f1a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	f47f af25 	bne.w	800eff6 <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 800f1ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	3770      	adds	r7, #112	@ 0x70
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bdb0      	pop	{r4, r5, r7, pc}
 800f1b6:	bf00      	nop
 800f1b8:	08013a34 	.word	0x08013a34
 800f1bc:	08014720 	.word	0x08014720
 800f1c0:	080138c0 	.word	0x080138c0

0800f1c4 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800f1c4:	b5b0      	push	{r4, r5, r7, lr}
 800f1c6:	b0bc      	sub	sp, #240	@ 0xf0
 800f1c8:	af04      	add	r7, sp, #16
 800f1ca:	60f8      	str	r0, [r7, #12]
 800f1cc:	60b9      	str	r1, [r7, #8]
 800f1ce:	607a      	str	r2, [r7, #4]
 800f1d0:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f1da:	e045      	b.n	800f268 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800f1dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f1e0:	3308      	adds	r3, #8
 800f1e2:	68ba      	ldr	r2, [r7, #8]
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d03a      	beq.n	800f25e <lfs_dir_orphaningcommit+0x9a>
 800f1e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f1ec:	3308      	adds	r3, #8
 800f1ee:	68ba      	ldr	r2, [r7, #8]
 800f1f0:	4611      	mov	r1, r2
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f7fc fe80 	bl	800bef8 <lfs_pair_cmp>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d12f      	bne.n	800f25e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800f1fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f202:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800f204:	2b01      	cmp	r3, #1
 800f206:	d12a      	bne.n	800f25e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800f208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f20c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f20e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f212:	2b00      	cmp	r3, #0
 800f214:	d023      	beq.n	800f25e <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 800f216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f21a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800f222:	429a      	cmp	r2, r3
 800f224:	d91b      	bls.n	800f25e <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 800f226:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 800f22a:	68f8      	ldr	r0, [r7, #12]
 800f22c:	f001 f802 	bl	8010234 <lfs_file_outline>
 800f230:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 800f234:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d002      	beq.n	800f242 <lfs_dir_orphaningcommit+0x7e>
                return err;
 800f23c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f240:	e2ad      	b.n	800f79e <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 800f242:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 800f246:	68f8      	ldr	r0, [r7, #12]
 800f248:	f001 f816 	bl	8010278 <lfs_file_flush>
 800f24c:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 800f250:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f254:	2b00      	cmp	r3, #0
 800f256:	d002      	beq.n	800f25e <lfs_dir_orphaningcommit+0x9a>
                return err;
 800f258:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f25c:	e29f      	b.n	800f79e <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800f25e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d1b5      	bne.n	800f1dc <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	685b      	ldr	r3, [r3, #4]
 800f27c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    lfs_mdir_t ldir = *dir;
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800f286:	461d      	mov	r5, r3
 800f288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f28a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f28c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f290:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 800f294:	68ba      	ldr	r2, [r7, #8]
 800f296:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 800f29a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800f29e:	9301      	str	r3, [sp, #4]
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	68f8      	ldr	r0, [r7, #12]
 800f2a8:	f7ff fcc6 	bl	800ec38 <lfs_dir_relocatingcommit>
 800f2ac:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 800f2b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	da02      	bge.n	800f2be <lfs_dir_orphaningcommit+0xfa>
        return state;
 800f2b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f2bc:	e26f      	b.n	800f79e <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 800f2c4:	4611      	mov	r1, r2
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7fc fe16 	bl	800bef8 <lfs_pair_cmp>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d109      	bne.n	800f2e6 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	461d      	mov	r5, r3
 800f2d6:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800f2da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f2dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f2de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f2e2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 800f2e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f2ea:	2b02      	cmp	r3, #2
 800f2ec:	d14a      	bne.n	800f384 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	3348      	adds	r3, #72	@ 0x48
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	68b9      	ldr	r1, [r7, #8]
 800f2f6:	68f8      	ldr	r0, [r7, #12]
 800f2f8:	f7fe fc8c 	bl	800dc14 <lfs_dir_getgstate>
 800f2fc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
        if (err) {
 800f300:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f304:	2b00      	cmp	r3, #0
 800f306:	d002      	beq.n	800f30e <lfs_dir_orphaningcommit+0x14a>
            return err;
 800f308:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f30c:	e247      	b.n	800f79e <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 800f30e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f310:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        lpair[1] = pdir.pair[1];
 800f314:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f316:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        lfs_pair_tole32(dir->tail);
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	3318      	adds	r3, #24
 800f31e:	4618      	mov	r0, r3
 800f320:	f7fc fe5b 	bl	800bfda <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	7ddb      	ldrb	r3, [r3, #23]
 800f328:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800f32c:	051a      	lsls	r2, r3, #20
 800f32e:	4bc2      	ldr	r3, [pc, #776]	@ (800f638 <lfs_dir_orphaningcommit+0x474>)
 800f330:	4313      	orrs	r3, r2
 800f332:	667b      	str	r3, [r7, #100]	@ 0x64
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	3318      	adds	r3, #24
 800f338:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f33a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800f33e:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 800f342:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800f346:	2000      	movs	r0, #0
 800f348:	9001      	str	r0, [sp, #4]
 800f34a:	2001      	movs	r0, #1
 800f34c:	9000      	str	r0, [sp, #0]
 800f34e:	68f8      	ldr	r0, [r7, #12]
 800f350:	f7ff fc72 	bl	800ec38 <lfs_dir_relocatingcommit>
 800f354:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	3318      	adds	r3, #24
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7fc fe22 	bl	800bfa6 <lfs_pair_fromle32>
        if (state < 0) {
 800f362:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f366:	2b00      	cmp	r3, #0
 800f368:	da02      	bge.n	800f370 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 800f36a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f36e:	e216      	b.n	800f79e <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 800f370:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800f374:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 800f378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f37a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f37c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f380:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 800f384:	2300      	movs	r3, #0
 800f386:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    while (state == LFS_OK_RELOCATED) {
 800f38a:	e1fc      	b.n	800f786 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 800f38c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800f390:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f394:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f398:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f39c:	4ca7      	ldr	r4, [pc, #668]	@ (800f63c <lfs_dir_orphaningcommit+0x478>)
 800f39e:	9403      	str	r4, [sp, #12]
 800f3a0:	9102      	str	r1, [sp, #8]
 800f3a2:	9201      	str	r2, [sp, #4]
 800f3a4:	9300      	str	r3, [sp, #0]
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	f640 12a9 	movw	r2, #2473	@ 0x9a9
 800f3ac:	49a4      	ldr	r1, [pc, #656]	@ (800f640 <lfs_dir_orphaningcommit+0x47c>)
 800f3ae:	48a5      	ldr	r0, [pc, #660]	@ (800f644 <lfs_dir_orphaningcommit+0x480>)
 800f3b0:	f003 faf6 	bl	80129a0 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	f103 0220 	add.w	r2, r3, #32
 800f3c0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800f3c4:	4611      	mov	r1, r2
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f7fc fd96 	bl	800bef8 <lfs_pair_cmp>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d107      	bne.n	800f3e2 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 800f3d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 800f3da:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f3ea:	e037      	b.n	800f45c <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 800f3ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f3f0:	f103 0208 	add.w	r2, r3, #8
 800f3f4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800f3f8:	4611      	mov	r1, r2
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f7fc fd7c 	bl	800bef8 <lfs_pair_cmp>
 800f400:	4603      	mov	r3, r0
 800f402:	2b00      	cmp	r3, #0
 800f404:	d109      	bne.n	800f41a <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 800f406:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f40a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f40e:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 800f410:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800f414:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f418:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 800f41a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f41e:	799b      	ldrb	r3, [r3, #6]
 800f420:	2b02      	cmp	r3, #2
 800f422:	d116      	bne.n	800f452 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 800f424:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f428:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800f42c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800f430:	4611      	mov	r1, r2
 800f432:	4618      	mov	r0, r3
 800f434:	f7fc fd60 	bl	800bef8 <lfs_pair_cmp>
 800f438:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d109      	bne.n	800f452 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 800f43e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f442:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f446:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 800f448:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800f44c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f450:	631a      	str	r2, [r3, #48]	@ 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800f452:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f45c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f460:	2b00      	cmp	r3, #0
 800f462:	d1c3      	bne.n	800f3ec <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 800f464:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800f468:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800f46c:	4619      	mov	r1, r3
 800f46e:	68f8      	ldr	r0, [r7, #12]
 800f470:	f002 fbbe 	bl	8011bf0 <lfs_fs_parent>
 800f474:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 800f478:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	da07      	bge.n	800f490 <lfs_dir_orphaningcommit+0x2cc>
 800f480:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f484:	f113 0f02 	cmn.w	r3, #2
 800f488:	d002      	beq.n	800f490 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 800f48a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f48e:	e186      	b.n	800f79e <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 800f490:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f494:	f113 0f02 	cmn.w	r3, #2
 800f498:	bf14      	ite	ne
 800f49a:	2301      	movne	r3, #1
 800f49c:	2300      	moveq	r3, #0
 800f49e:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        if (tag != LFS_ERR_NOENT) {
 800f4a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f4a6:	f113 0f02 	cmn.w	r3, #2
 800f4aa:	f000 809e 	beq.w	800f5ea <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 800f4ae:	2101      	movs	r1, #1
 800f4b0:	68f8      	ldr	r0, [r7, #12]
 800f4b2:	f002 fc11 	bl	8011cd8 <lfs_fs_preporphans>
 800f4b6:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
            if (err) {
 800f4ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d002      	beq.n	800f4c8 <lfs_dir_orphaningcommit+0x304>
                return err;
 800f4c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800f4c6:	e16a      	b.n	800f79e <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 800f4c8:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800f4cc:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	3330      	adds	r3, #48	@ 0x30
 800f4d4:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800f4d8:	4611      	mov	r1, r2
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7fc feb8 	bl	800c250 <lfs_gstate_hasmovehere>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d02d      	beq.n	800f542 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7fc fdfa 	bl	800c0e4 <lfs_tag_id>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                LFS_DEBUG("Fixing move while relocating "
 800f4f6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800f4f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f4fa:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	@ 0xca
 800f4fe:	484f      	ldr	r0, [pc, #316]	@ (800f63c <lfs_dir_orphaningcommit+0x478>)
 800f500:	9002      	str	r0, [sp, #8]
 800f502:	9201      	str	r2, [sp, #4]
 800f504:	9300      	str	r3, [sp, #0]
 800f506:	460b      	mov	r3, r1
 800f508:	f640 12d6 	movw	r2, #2518	@ 0x9d6
 800f50c:	494c      	ldr	r1, [pc, #304]	@ (800f640 <lfs_dir_orphaningcommit+0x47c>)
 800f50e:	484e      	ldr	r0, [pc, #312]	@ (800f648 <lfs_dir_orphaningcommit+0x484>)
 800f510:	f003 fa46 	bl	80129a0 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800f514:	2200      	movs	r2, #0
 800f516:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800f51a:	68f8      	ldr	r0, [r7, #12]
 800f51c:	f002 fc2c 	bl	8011d78 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 800f520:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f524:	4618      	mov	r0, r3
 800f526:	f7fc fddd 	bl	800c0e4 <lfs_tag_id>
 800f52a:	4603      	mov	r3, r0
 800f52c:	461a      	mov	r2, r3
 800f52e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 800f532:	4293      	cmp	r3, r2
 800f534:	d205      	bcs.n	800f542 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 800f536:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f53a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800f53e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 800f542:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f544:	657b      	str	r3, [r7, #84]	@ 0x54
 800f546:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f548:	65bb      	str	r3, [r7, #88]	@ 0x58
            lfs_pair_tole32(ldir.pair);
 800f54a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800f54e:	4618      	mov	r0, r3
 800f550:	f7fc fd43 	bl	800bfda <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 800f554:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 800f558:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800f55c:	4293      	cmp	r3, r2
 800f55e:	d007      	beq.n	800f570 <lfs_dir_orphaningcommit+0x3ac>
 800f560:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 800f564:	029b      	lsls	r3, r3, #10
 800f566:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800f56a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800f56e:	e000      	b.n	800f572 <lfs_dir_orphaningcommit+0x3ae>
 800f570:	2300      	movs	r3, #0
 800f572:	647b      	str	r3, [r7, #68]	@ 0x44
 800f574:	2300      	movs	r3, #0
 800f576:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f578:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f57c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f57e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800f582:	653b      	str	r3, [r7, #80]	@ 0x50
 800f584:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800f588:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800f58c:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800f590:	2000      	movs	r0, #0
 800f592:	9001      	str	r0, [sp, #4]
 800f594:	2002      	movs	r0, #2
 800f596:	9000      	str	r0, [sp, #0]
 800f598:	68f8      	ldr	r0, [r7, #12]
 800f59a:	f7ff fb4d 	bl	800ec38 <lfs_dir_relocatingcommit>
 800f59e:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800f5a2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f7fc fcfd 	bl	800bfa6 <lfs_pair_fromle32>
            if (state < 0) {
 800f5ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	da02      	bge.n	800f5ba <lfs_dir_orphaningcommit+0x3f6>
                return state;
 800f5b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f5b8:	e0f1      	b.n	800f79e <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 800f5ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f5be:	2b01      	cmp	r3, #1
 800f5c0:	d113      	bne.n	800f5ea <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 800f5c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f5c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                lpair[1] = ppair[1];
 800f5c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f5ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                ldir = pdir;
 800f5ce:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800f5d2:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 800f5d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f5d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f5da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f5de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800f5e8:	e0cd      	b.n	800f786 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 800f5ea:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800f5ee:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800f5f2:	4619      	mov	r1, r3
 800f5f4:	68f8      	ldr	r0, [r7, #12]
 800f5f6:	f002 fa6b 	bl	8011ad0 <lfs_fs_pred>
 800f5fa:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
        if (err && err != LFS_ERR_NOENT) {
 800f5fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f602:	2b00      	cmp	r3, #0
 800f604:	d007      	beq.n	800f616 <lfs_dir_orphaningcommit+0x452>
 800f606:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f60a:	f113 0f02 	cmn.w	r3, #2
 800f60e:	d002      	beq.n	800f616 <lfs_dir_orphaningcommit+0x452>
            return err;
 800f610:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f614:	e0c3      	b.n	800f79e <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 800f616:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d01a      	beq.n	800f654 <lfs_dir_orphaningcommit+0x490>
 800f61e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f622:	f113 0f02 	cmn.w	r3, #2
 800f626:	d115      	bne.n	800f654 <lfs_dir_orphaningcommit+0x490>
 800f628:	4b08      	ldr	r3, [pc, #32]	@ (800f64c <lfs_dir_orphaningcommit+0x488>)
 800f62a:	4a09      	ldr	r2, [pc, #36]	@ (800f650 <lfs_dir_orphaningcommit+0x48c>)
 800f62c:	f640 11f9 	movw	r1, #2553	@ 0x9f9
 800f630:	4803      	ldr	r0, [pc, #12]	@ (800f640 <lfs_dir_orphaningcommit+0x47c>)
 800f632:	f003 f805 	bl	8012640 <__assert_func>
 800f636:	bf00      	nop
 800f638:	000ffc08 	.word	0x000ffc08
 800f63c:	080139e0 	.word	0x080139e0
 800f640:	080138c0 	.word	0x080138c0
 800f644:	08013b5c 	.word	0x08013b5c
 800f648:	08013b98 	.word	0x08013b98
 800f64c:	08013bdc 	.word	0x08013bdc
 800f650:	0801473c 	.word	0x0801473c

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 800f654:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f658:	f113 0f02 	cmn.w	r3, #2
 800f65c:	f000 8093 	beq.w	800f786 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	3330      	adds	r3, #48	@ 0x30
 800f664:	4618      	mov	r0, r3
 800f666:	f7fc fdaa 	bl	800c1be <lfs_gstate_hasorphans>
 800f66a:	4603      	mov	r3, r0
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d011      	beq.n	800f694 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -(int8_t)hasparent);
 800f670:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800f674:	425b      	negs	r3, r3
 800f676:	b2db      	uxtb	r3, r3
 800f678:	b25b      	sxtb	r3, r3
 800f67a:	4619      	mov	r1, r3
 800f67c:	68f8      	ldr	r0, [r7, #12]
 800f67e:	f002 fb2b 	bl	8011cd8 <lfs_fs_preporphans>
 800f682:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                if (err) {
 800f686:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d002      	beq.n	800f694 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 800f68e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f692:	e084      	b.n	800f79e <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 800f694:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800f698:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	3330      	adds	r3, #48	@ 0x30
 800f6a0:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800f6a4:	4611      	mov	r1, r2
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7fc fdd2 	bl	800c250 <lfs_gstate_hasmovehere>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d01c      	beq.n	800f6ec <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7fc fd14 	bl	800c0e4 <lfs_tag_id>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                LFS_DEBUG("Fixing move while relocating "
 800f6c2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800f6c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f6c6:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 800f6ca:	4837      	ldr	r0, [pc, #220]	@ (800f7a8 <lfs_dir_orphaningcommit+0x5e4>)
 800f6cc:	9002      	str	r0, [sp, #8]
 800f6ce:	9201      	str	r2, [sp, #4]
 800f6d0:	9300      	str	r3, [sp, #0]
 800f6d2:	460b      	mov	r3, r1
 800f6d4:	f640 220a 	movw	r2, #2570	@ 0xa0a
 800f6d8:	4934      	ldr	r1, [pc, #208]	@ (800f7ac <lfs_dir_orphaningcommit+0x5e8>)
 800f6da:	4835      	ldr	r0, [pc, #212]	@ (800f7b0 <lfs_dir_orphaningcommit+0x5ec>)
 800f6dc:	f003 f960 	bl	80129a0 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800f6e6:	68f8      	ldr	r0, [r7, #12]
 800f6e8:	f002 fb46 	bl	8011d78 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 800f6ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            lpair[1] = pdir.pair[1];
 800f6f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f6f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            lfs_pair_tole32(ldir.pair);
 800f6f8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7fc fc6c 	bl	800bfda <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 800f702:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 800f706:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d007      	beq.n	800f71e <lfs_dir_orphaningcommit+0x55a>
 800f70e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 800f712:	029b      	lsls	r3, r3, #10
 800f714:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800f718:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800f71c:	e000      	b.n	800f720 <lfs_dir_orphaningcommit+0x55c>
 800f71e:	2300      	movs	r3, #0
 800f720:	627b      	str	r3, [r7, #36]	@ 0x24
 800f722:	2300      	movs	r3, #0
 800f724:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f726:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800f72a:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800f72e:	051a      	lsls	r2, r3, #20
 800f730:	4b20      	ldr	r3, [pc, #128]	@ (800f7b4 <lfs_dir_orphaningcommit+0x5f0>)
 800f732:	4313      	orrs	r3, r2
 800f734:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f736:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800f73a:	633b      	str	r3, [r7, #48]	@ 0x30
 800f73c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f740:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 800f744:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800f748:	2000      	movs	r0, #0
 800f74a:	9001      	str	r0, [sp, #4]
 800f74c:	2002      	movs	r0, #2
 800f74e:	9000      	str	r0, [sp, #0]
 800f750:	68f8      	ldr	r0, [r7, #12]
 800f752:	f7ff fa71 	bl	800ec38 <lfs_dir_relocatingcommit>
 800f756:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800f75a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800f75e:	4618      	mov	r0, r3
 800f760:	f7fc fc21 	bl	800bfa6 <lfs_pair_fromle32>
            if (state < 0) {
 800f764:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f768:	2b00      	cmp	r3, #0
 800f76a:	da02      	bge.n	800f772 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 800f76c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f770:	e015      	b.n	800f79e <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 800f772:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800f776:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 800f77a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f77c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f77e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f782:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 800f786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f78a:	2b01      	cmp	r3, #1
 800f78c:	f43f adfe 	beq.w	800f38c <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 800f790:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800f794:	2b00      	cmp	r3, #0
 800f796:	d001      	beq.n	800f79c <lfs_dir_orphaningcommit+0x5d8>
 800f798:	2303      	movs	r3, #3
 800f79a:	e000      	b.n	800f79e <lfs_dir_orphaningcommit+0x5da>
 800f79c:	2300      	movs	r3, #0
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	37e0      	adds	r7, #224	@ 0xe0
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bdb0      	pop	{r4, r5, r7, pc}
 800f7a6:	bf00      	nop
 800f7a8:	080139e0 	.word	0x080139e0
 800f7ac:	080138c0 	.word	0x080138c0
 800f7b0:	08013b98 	.word	0x08013b98
 800f7b4:	000ffc08 	.word	0x000ffc08

0800f7b8 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b086      	sub	sp, #24
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	60f8      	str	r0, [r7, #12]
 800f7c0:	60b9      	str	r1, [r7, #8]
 800f7c2:	607a      	str	r2, [r7, #4]
 800f7c4:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	687a      	ldr	r2, [r7, #4]
 800f7ca:	68b9      	ldr	r1, [r7, #8]
 800f7cc:	68f8      	ldr	r0, [r7, #12]
 800f7ce:	f7ff fcf9 	bl	800f1c4 <lfs_dir_orphaningcommit>
 800f7d2:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	da01      	bge.n	800f7de <lfs_dir_commit+0x26>
        return orphans;
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	e00d      	b.n	800f7fa <lfs_dir_commit+0x42>
    }

    if (orphans) {
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d009      	beq.n	800f7f8 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 800f7e4:	2100      	movs	r1, #0
 800f7e6:	68f8      	ldr	r0, [r7, #12]
 800f7e8:	f002 fbe8 	bl	8011fbc <lfs_fs_deorphan>
 800f7ec:	6138      	str	r0, [r7, #16]
        if (err) {
 800f7ee:	693b      	ldr	r3, [r7, #16]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d001      	beq.n	800f7f8 <lfs_dir_commit+0x40>
            return err;
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	e000      	b.n	800f7fa <lfs_dir_commit+0x42>
        }
    }

    return 0;
 800f7f8:	2300      	movs	r3, #0
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	3718      	adds	r7, #24
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}

0800f802 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 800f802:	b590      	push	{r4, r7, lr}
 800f804:	b087      	sub	sp, #28
 800f806:	af00      	add	r7, sp, #0
 800f808:	6078      	str	r0, [r7, #4]
 800f80a:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f816:	69db      	ldr	r3, [r3, #28]
 800f818:	3b08      	subs	r3, #8
 800f81a:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 800f81c:	697a      	ldr	r2, [r7, #20]
 800f81e:	693b      	ldr	r3, [r7, #16]
 800f820:	fbb2 f3f3 	udiv	r3, r2, r3
 800f824:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d101      	bne.n	800f830 <lfs_ctz_index+0x2e>
        return 0;
 800f82c:	2300      	movs	r3, #0
 800f82e:	e01c      	b.n	800f86a <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	3b01      	subs	r3, #1
 800f834:	4618      	mov	r0, r3
 800f836:	f7fb fef3 	bl	800b620 <lfs_popc>
 800f83a:	4603      	mov	r3, r0
 800f83c:	3302      	adds	r3, #2
 800f83e:	009b      	lsls	r3, r3, #2
 800f840:	697a      	ldr	r2, [r7, #20]
 800f842:	1ad2      	subs	r2, r2, r3
 800f844:	693b      	ldr	r3, [r7, #16]
 800f846:	fbb2 f3f3 	udiv	r3, r2, r3
 800f84a:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 800f84c:	693b      	ldr	r3, [r7, #16]
 800f84e:	68fa      	ldr	r2, [r7, #12]
 800f850:	fb02 f303 	mul.w	r3, r2, r3
 800f854:	697a      	ldr	r2, [r7, #20]
 800f856:	1ad4      	subs	r4, r2, r3
 800f858:	68f8      	ldr	r0, [r7, #12]
 800f85a:	f7fb fee1 	bl	800b620 <lfs_popc>
 800f85e:	4603      	mov	r3, r0
 800f860:	009b      	lsls	r3, r3, #2
 800f862:	1ae2      	subs	r2, r4, r3
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	601a      	str	r2, [r3, #0]
    return i;
 800f868:	68fb      	ldr	r3, [r7, #12]
}
 800f86a:	4618      	mov	r0, r3
 800f86c:	371c      	adds	r7, #28
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd90      	pop	{r4, r7, pc}

0800f872 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 800f872:	b590      	push	{r4, r7, lr}
 800f874:	b08f      	sub	sp, #60	@ 0x3c
 800f876:	af04      	add	r7, sp, #16
 800f878:	60f8      	str	r0, [r7, #12]
 800f87a:	60b9      	str	r1, [r7, #8]
 800f87c:	607a      	str	r2, [r7, #4]
 800f87e:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800f880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f882:	2b00      	cmp	r3, #0
 800f884:	d108      	bne.n	800f898 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 800f886:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f888:	f04f 32ff 	mov.w	r2, #4294967295
 800f88c:	601a      	str	r2, [r3, #0]
        *off = 0;
 800f88e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f890:	2200      	movs	r2, #0
 800f892:	601a      	str	r2, [r3, #0]
        return 0;
 800f894:	2300      	movs	r3, #0
 800f896:	e053      	b.n	800f940 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800f898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f89a:	3b01      	subs	r3, #1
 800f89c:	617b      	str	r3, [r7, #20]
 800f89e:	f107 0314 	add.w	r3, r7, #20
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	68f8      	ldr	r0, [r7, #12]
 800f8a6:	f7ff ffac 	bl	800f802 <lfs_ctz_index>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 800f8ae:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800f8b2:	4619      	mov	r1, r3
 800f8b4:	68f8      	ldr	r0, [r7, #12]
 800f8b6:	f7ff ffa4 	bl	800f802 <lfs_ctz_index>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	623b      	str	r3, [r7, #32]

    while (current > target) {
 800f8be:	e034      	b.n	800f92a <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 800f8c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8c2:	6a3b      	ldr	r3, [r7, #32]
 800f8c4:	1ad3      	subs	r3, r2, r3
 800f8c6:	3301      	adds	r3, #1
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f7fb fe8a 	bl	800b5e2 <lfs_npw2>
 800f8ce:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 800f8d0:	1e5c      	subs	r4, r3, #1
 800f8d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f8d4:	f7fb fe95 	bl	800b602 <lfs_ctz>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	4619      	mov	r1, r3
 800f8dc:	4620      	mov	r0, r4
 800f8de:	f7fb fe49 	bl	800b574 <lfs_min>
 800f8e2:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	69fa      	ldr	r2, [r7, #28]
 800f8e8:	0092      	lsls	r2, r2, #2
 800f8ea:	2104      	movs	r1, #4
 800f8ec:	9103      	str	r1, [sp, #12]
 800f8ee:	4639      	mov	r1, r7
 800f8f0:	9102      	str	r1, [sp, #8]
 800f8f2:	9201      	str	r2, [sp, #4]
 800f8f4:	9300      	str	r3, [sp, #0]
 800f8f6:	2304      	movs	r3, #4
 800f8f8:	687a      	ldr	r2, [r7, #4]
 800f8fa:	68b9      	ldr	r1, [r7, #8]
 800f8fc:	68f8      	ldr	r0, [r7, #12]
 800f8fe:	f7fb ff15 	bl	800b72c <lfs_bd_read>
 800f902:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	4618      	mov	r0, r3
 800f908:	f7fb fea4 	bl	800b654 <lfs_fromle32>
 800f90c:	4603      	mov	r3, r0
 800f90e:	603b      	str	r3, [r7, #0]
        if (err) {
 800f910:	69bb      	ldr	r3, [r7, #24]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d001      	beq.n	800f91a <lfs_ctz_find+0xa8>
            return err;
 800f916:	69bb      	ldr	r3, [r7, #24]
 800f918:	e012      	b.n	800f940 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 800f91a:	2201      	movs	r2, #1
 800f91c:	69fb      	ldr	r3, [r7, #28]
 800f91e:	fa02 f303 	lsl.w	r3, r2, r3
 800f922:	461a      	mov	r2, r3
 800f924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f926:	1a9b      	subs	r3, r3, r2
 800f928:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current > target) {
 800f92a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f92c:	6a3b      	ldr	r3, [r7, #32]
 800f92e:	429a      	cmp	r2, r3
 800f930:	d8c6      	bhi.n	800f8c0 <lfs_ctz_find+0x4e>
    }

    *block = head;
 800f932:	683a      	ldr	r2, [r7, #0]
 800f934:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f936:	601a      	str	r2, [r3, #0]
    *off = pos;
 800f938:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f93a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f93c:	601a      	str	r2, [r3, #0]
    return 0;
 800f93e:	2300      	movs	r3, #0
}
 800f940:	4618      	mov	r0, r3
 800f942:	372c      	adds	r7, #44	@ 0x2c
 800f944:	46bd      	mov	sp, r7
 800f946:	bd90      	pop	{r4, r7, pc}

0800f948 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 800f948:	b580      	push	{r7, lr}
 800f94a:	b092      	sub	sp, #72	@ 0x48
 800f94c:	af04      	add	r7, sp, #16
 800f94e:	60f8      	str	r0, [r7, #12]
 800f950:	60b9      	str	r1, [r7, #8]
 800f952:	607a      	str	r2, [r7, #4]
 800f954:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800f956:	f107 0320 	add.w	r3, r7, #32
 800f95a:	4619      	mov	r1, r3
 800f95c:	68f8      	ldr	r0, [r7, #12]
 800f95e:	f7fc feb9 	bl	800c6d4 <lfs_alloc>
 800f962:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (err) {
 800f964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f966:	2b00      	cmp	r3, #0
 800f968:	d001      	beq.n	800f96e <lfs_ctz_extend+0x26>
            return err;
 800f96a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f96c:	e0eb      	b.n	800fb46 <lfs_ctz_extend+0x1fe>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 800f96e:	6a3b      	ldr	r3, [r7, #32]
 800f970:	4619      	mov	r1, r3
 800f972:	68f8      	ldr	r0, [r7, #12]
 800f974:	f7fc fa1a 	bl	800bdac <lfs_bd_erase>
 800f978:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (err) {
 800f97a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d006      	beq.n	800f98e <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 800f980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f982:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f986:	f000 80cd 	beq.w	800fb24 <lfs_ctz_extend+0x1dc>
                    goto relocate;
                }
                return err;
 800f98a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f98c:	e0db      	b.n	800fb46 <lfs_ctz_extend+0x1fe>
            }

            if (size == 0) {
 800f98e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f990:	2b00      	cmp	r3, #0
 800f992:	d107      	bne.n	800f9a4 <lfs_ctz_extend+0x5c>
                *block = nblock;
 800f994:	6a3a      	ldr	r2, [r7, #32]
 800f996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f998:	601a      	str	r2, [r3, #0]
                *off = 0;
 800f99a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f99c:	2200      	movs	r2, #0
 800f99e:	601a      	str	r2, [r3, #0]
                return 0;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	e0d0      	b.n	800fb46 <lfs_ctz_extend+0x1fe>
            }

            lfs_size_t noff = size - 1;
 800f9a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f9a6:	3b01      	subs	r3, #1
 800f9a8:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 800f9aa:	f107 031c 	add.w	r3, r7, #28
 800f9ae:	4619      	mov	r1, r3
 800f9b0:	68f8      	ldr	r0, [r7, #12]
 800f9b2:	f7ff ff26 	bl	800f802 <lfs_ctz_index>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	62bb      	str	r3, [r7, #40]	@ 0x28
            noff = noff + 1;
 800f9ba:	69fb      	ldr	r3, [r7, #28]
 800f9bc:	3301      	adds	r3, #1
 800f9be:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f9c4:	69da      	ldr	r2, [r3, #28]
 800f9c6:	69fb      	ldr	r3, [r7, #28]
 800f9c8:	429a      	cmp	r2, r3
 800f9ca:	d046      	beq.n	800fa5a <lfs_ctz_extend+0x112>
                for (lfs_off_t i = 0; i < noff; i++) {
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800f9d0:	e037      	b.n	800fa42 <lfs_ctz_extend+0xfa>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 800f9d2:	69fa      	ldr	r2, [r7, #28]
 800f9d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9d6:	1ad2      	subs	r2, r2, r3
 800f9d8:	2301      	movs	r3, #1
 800f9da:	9303      	str	r3, [sp, #12]
 800f9dc:	f107 0317 	add.w	r3, r7, #23
 800f9e0:	9302      	str	r3, [sp, #8]
 800f9e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9e4:	9301      	str	r3, [sp, #4]
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	9300      	str	r3, [sp, #0]
 800f9ea:	4613      	mov	r3, r2
 800f9ec:	687a      	ldr	r2, [r7, #4]
 800f9ee:	2100      	movs	r1, #0
 800f9f0:	68f8      	ldr	r0, [r7, #12]
 800f9f2:	f7fb fe9b 	bl	800b72c <lfs_bd_read>
 800f9f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 800f9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d001      	beq.n	800fa02 <lfs_ctz_extend+0xba>
                        return err;
 800f9fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa00:	e01e      	b.n	800fa40 <lfs_ctz_extend+0xf8>
                    }

                    err = lfs_bd_prog(lfs,
 800fa02:	6a3b      	ldr	r3, [r7, #32]
 800fa04:	2201      	movs	r2, #1
 800fa06:	9203      	str	r2, [sp, #12]
 800fa08:	f107 0217 	add.w	r2, r7, #23
 800fa0c:	9202      	str	r2, [sp, #8]
 800fa0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fa10:	9201      	str	r2, [sp, #4]
 800fa12:	9300      	str	r3, [sp, #0]
 800fa14:	2301      	movs	r3, #1
 800fa16:	687a      	ldr	r2, [r7, #4]
 800fa18:	68b9      	ldr	r1, [r7, #8]
 800fa1a:	68f8      	ldr	r0, [r7, #12]
 800fa1c:	f7fc f918 	bl	800bc50 <lfs_bd_prog>
 800fa20:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 800fa22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d007      	beq.n	800fa38 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 800fa28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa2a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800fa2e:	d101      	bne.n	800fa34 <lfs_ctz_extend+0xec>
                            goto relocate;
 800fa30:	bf00      	nop
                    goto relocate;
 800fa32:	e07a      	b.n	800fb2a <lfs_ctz_extend+0x1e2>
                        }
                        return err;
 800fa34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa36:	e003      	b.n	800fa40 <lfs_ctz_extend+0xf8>
                for (lfs_off_t i = 0; i < noff; i++) {
 800fa38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800fa3e:	e000      	b.n	800fa42 <lfs_ctz_extend+0xfa>
                return err;
 800fa40:	e081      	b.n	800fb46 <lfs_ctz_extend+0x1fe>
                for (lfs_off_t i = 0; i < noff; i++) {
 800fa42:	69fb      	ldr	r3, [r7, #28]
 800fa44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d3c3      	bcc.n	800f9d2 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 800fa4a:	6a3a      	ldr	r2, [r7, #32]
 800fa4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa4e:	601a      	str	r2, [r3, #0]
                *off = noff;
 800fa50:	69fa      	ldr	r2, [r7, #28]
 800fa52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fa54:	601a      	str	r2, [r3, #0]
                return 0;
 800fa56:	2300      	movs	r3, #0
 800fa58:	e075      	b.n	800fb46 <lfs_ctz_extend+0x1fe>
            }

            // append block
            index += 1;
 800fa5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa5c:	3301      	adds	r3, #1
 800fa5e:	62bb      	str	r3, [r7, #40]	@ 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 800fa60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa62:	f7fb fdce 	bl	800b602 <lfs_ctz>
 800fa66:	4603      	mov	r3, r0
 800fa68:	3301      	adds	r3, #1
 800fa6a:	627b      	str	r3, [r7, #36]	@ 0x24
            lfs_block_t nhead = head;
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 800fa70:	2300      	movs	r3, #0
 800fa72:	633b      	str	r3, [r7, #48]	@ 0x30
 800fa74:	e049      	b.n	800fb0a <lfs_ctz_extend+0x1c2>
                nhead = lfs_tole32(nhead);
 800fa76:	69bb      	ldr	r3, [r7, #24]
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f7fb fdf6 	bl	800b66a <lfs_tole32>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 800fa82:	6a3b      	ldr	r3, [r7, #32]
 800fa84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa86:	0092      	lsls	r2, r2, #2
 800fa88:	2104      	movs	r1, #4
 800fa8a:	9103      	str	r1, [sp, #12]
 800fa8c:	f107 0118 	add.w	r1, r7, #24
 800fa90:	9102      	str	r1, [sp, #8]
 800fa92:	9201      	str	r2, [sp, #4]
 800fa94:	9300      	str	r3, [sp, #0]
 800fa96:	2301      	movs	r3, #1
 800fa98:	687a      	ldr	r2, [r7, #4]
 800fa9a:	68b9      	ldr	r1, [r7, #8]
 800fa9c:	68f8      	ldr	r0, [r7, #12]
 800fa9e:	f7fc f8d7 	bl	800bc50 <lfs_bd_prog>
 800faa2:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 800faa4:	69bb      	ldr	r3, [r7, #24]
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7fb fdd4 	bl	800b654 <lfs_fromle32>
 800faac:	4603      	mov	r3, r0
 800faae:	61bb      	str	r3, [r7, #24]
                if (err) {
 800fab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d005      	beq.n	800fac2 <lfs_ctz_extend+0x17a>
                    if (err == LFS_ERR_CORRUPT) {
 800fab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fab8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800fabc:	d034      	beq.n	800fb28 <lfs_ctz_extend+0x1e0>
                        goto relocate;
                    }
                    return err;
 800fabe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fac0:	e041      	b.n	800fb46 <lfs_ctz_extend+0x1fe>
                }

                if (i != skips-1) {
 800fac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fac4:	3b01      	subs	r3, #1
 800fac6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fac8:	429a      	cmp	r2, r3
 800faca:	d01b      	beq.n	800fb04 <lfs_ctz_extend+0x1bc>
                    err = lfs_bd_read(lfs,
 800facc:	69bb      	ldr	r3, [r7, #24]
 800face:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fad0:	0092      	lsls	r2, r2, #2
 800fad2:	2104      	movs	r1, #4
 800fad4:	9103      	str	r1, [sp, #12]
 800fad6:	f107 0118 	add.w	r1, r7, #24
 800fada:	9102      	str	r1, [sp, #8]
 800fadc:	9201      	str	r2, [sp, #4]
 800fade:	9300      	str	r3, [sp, #0]
 800fae0:	2304      	movs	r3, #4
 800fae2:	687a      	ldr	r2, [r7, #4]
 800fae4:	2100      	movs	r1, #0
 800fae6:	68f8      	ldr	r0, [r7, #12]
 800fae8:	f7fb fe20 	bl	800b72c <lfs_bd_read>
 800faec:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 800faee:	69bb      	ldr	r3, [r7, #24]
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7fb fdaf 	bl	800b654 <lfs_fromle32>
 800faf6:	4603      	mov	r3, r0
 800faf8:	61bb      	str	r3, [r7, #24]
                    if (err) {
 800fafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d001      	beq.n	800fb04 <lfs_ctz_extend+0x1bc>
                        return err;
 800fb00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb02:	e020      	b.n	800fb46 <lfs_ctz_extend+0x1fe>
            for (lfs_off_t i = 0; i < skips; i++) {
 800fb04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb06:	3301      	adds	r3, #1
 800fb08:	633b      	str	r3, [r7, #48]	@ 0x30
 800fb0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	d3b1      	bcc.n	800fa76 <lfs_ctz_extend+0x12e>
                    }
                }
            }

            *block = nblock;
 800fb12:	6a3a      	ldr	r2, [r7, #32]
 800fb14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fb16:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 800fb18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb1a:	009a      	lsls	r2, r3, #2
 800fb1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fb1e:	601a      	str	r2, [r3, #0]
            return 0;
 800fb20:	2300      	movs	r3, #0
 800fb22:	e010      	b.n	800fb46 <lfs_ctz_extend+0x1fe>
                    goto relocate;
 800fb24:	bf00      	nop
 800fb26:	e000      	b.n	800fb2a <lfs_ctz_extend+0x1e2>
                        goto relocate;
 800fb28:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800fb2a:	6a3b      	ldr	r3, [r7, #32]
 800fb2c:	4a08      	ldr	r2, [pc, #32]	@ (800fb50 <lfs_ctz_extend+0x208>)
 800fb2e:	9200      	str	r2, [sp, #0]
 800fb30:	f640 32c3 	movw	r2, #3011	@ 0xbc3
 800fb34:	4907      	ldr	r1, [pc, #28]	@ (800fb54 <lfs_ctz_extend+0x20c>)
 800fb36:	4808      	ldr	r0, [pc, #32]	@ (800fb58 <lfs_ctz_extend+0x210>)
 800fb38:	f002 ff32 	bl	80129a0 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 800fb3c:	68b9      	ldr	r1, [r7, #8]
 800fb3e:	68f8      	ldr	r0, [r7, #12]
 800fb40:	f7fb fdce 	bl	800b6e0 <lfs_cache_drop>
    while (true) {
 800fb44:	e707      	b.n	800f956 <lfs_ctz_extend+0xe>
    }
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	3738      	adds	r7, #56	@ 0x38
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}
 800fb4e:	bf00      	nop
 800fb50:	080139e0 	.word	0x080139e0
 800fb54:	080138c0 	.word	0x080138c0
 800fb58:	08013a5c 	.word	0x08013a5c

0800fb5c <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b090      	sub	sp, #64	@ 0x40
 800fb60:	af04      	add	r7, sp, #16
 800fb62:	60f8      	str	r0, [r7, #12]
 800fb64:	60b9      	str	r1, [r7, #8]
 800fb66:	607a      	str	r2, [r7, #4]
 800fb68:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800fb6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d101      	bne.n	800fb74 <lfs_ctz_traverse+0x18>
        return 0;
 800fb70:	2300      	movs	r3, #0
 800fb72:	e06b      	b.n	800fc4c <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800fb74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb76:	3b01      	subs	r3, #1
 800fb78:	61fb      	str	r3, [r7, #28]
 800fb7a:	f107 031c 	add.w	r3, r7, #28
 800fb7e:	4619      	mov	r1, r3
 800fb80:	68f8      	ldr	r0, [r7, #12]
 800fb82:	f7ff fe3e 	bl	800f802 <lfs_ctz_index>
 800fb86:	4603      	mov	r3, r0
 800fb88:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (true) {
        int err = cb(data, head);
 800fb8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb8c:	6839      	ldr	r1, [r7, #0]
 800fb8e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800fb90:	4798      	blx	r3
 800fb92:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 800fb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d001      	beq.n	800fb9e <lfs_ctz_traverse+0x42>
            return err;
 800fb9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb9c:	e056      	b.n	800fc4c <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 800fb9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d101      	bne.n	800fba8 <lfs_ctz_traverse+0x4c>
            return 0;
 800fba4:	2300      	movs	r3, #0
 800fba6:	e051      	b.n	800fc4c <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 800fba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbaa:	f003 0301 	and.w	r3, r3, #1
 800fbae:	f1c3 0302 	rsb	r3, r3, #2
 800fbb2:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 800fbb4:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 800fbb6:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 800fbb8:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 800fbba:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 800fbbc:	9303      	str	r3, [sp, #12]
 800fbbe:	f107 0314 	add.w	r3, r7, #20
 800fbc2:	9302      	str	r3, [sp, #8]
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	9301      	str	r3, [sp, #4]
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	9300      	str	r3, [sp, #0]
 800fbcc:	4613      	mov	r3, r2
 800fbce:	687a      	ldr	r2, [r7, #4]
 800fbd0:	68b9      	ldr	r1, [r7, #8]
 800fbd2:	68f8      	ldr	r0, [r7, #12]
 800fbd4:	f7fb fdaa 	bl	800b72c <lfs_bd_read>
 800fbd8:	6278      	str	r0, [r7, #36]	@ 0x24
        heads[0] = lfs_fromle32(heads[0]);
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	4618      	mov	r0, r3
 800fbde:	f7fb fd39 	bl	800b654 <lfs_fromle32>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 800fbe6:	69bb      	ldr	r3, [r7, #24]
 800fbe8:	4618      	mov	r0, r3
 800fbea:	f7fb fd33 	bl	800b654 <lfs_fromle32>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	61bb      	str	r3, [r7, #24]
        if (err) {
 800fbf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d001      	beq.n	800fbfc <lfs_ctz_traverse+0xa0>
            return err;
 800fbf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbfa:	e027      	b.n	800fc4c <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fc00:	e012      	b.n	800fc28 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 800fc02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc04:	009b      	lsls	r3, r3, #2
 800fc06:	3330      	adds	r3, #48	@ 0x30
 800fc08:	443b      	add	r3, r7
 800fc0a:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800fc0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc10:	4611      	mov	r1, r2
 800fc12:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800fc14:	4798      	blx	r3
 800fc16:	6278      	str	r0, [r7, #36]	@ 0x24
            if (err) {
 800fc18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d001      	beq.n	800fc22 <lfs_ctz_traverse+0xc6>
                return err;
 800fc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc20:	e014      	b.n	800fc4c <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 800fc22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc24:	3301      	adds	r3, #1
 800fc26:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fc28:	6a3b      	ldr	r3, [r7, #32]
 800fc2a:	3b01      	subs	r3, #1
 800fc2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	dbe7      	blt.n	800fc02 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 800fc32:	6a3b      	ldr	r3, [r7, #32]
 800fc34:	3b01      	subs	r3, #1
 800fc36:	009b      	lsls	r3, r3, #2
 800fc38:	3330      	adds	r3, #48	@ 0x30
 800fc3a:	443b      	add	r3, r7
 800fc3c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800fc40:	603b      	str	r3, [r7, #0]
        index -= count;
 800fc42:	6a3b      	ldr	r3, [r7, #32]
 800fc44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc46:	1ad3      	subs	r3, r2, r3
 800fc48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (true) {
 800fc4a:	e79e      	b.n	800fb8a <lfs_ctz_traverse+0x2e>
    }
}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3730      	adds	r7, #48	@ 0x30
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}

0800fc54 <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 800fc54:	b5b0      	push	{r4, r5, r7, lr}
 800fc56:	b09a      	sub	sp, #104	@ 0x68
 800fc58:	af02      	add	r7, sp, #8
 800fc5a:	60f8      	str	r0, [r7, #12]
 800fc5c:	60b9      	str	r1, [r7, #8]
 800fc5e:	607a      	str	r2, [r7, #4]
 800fc60:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	f003 0302 	and.w	r3, r3, #2
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d008      	beq.n	800fc7e <lfs_file_opencfg_+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 800fc6c:	68f8      	ldr	r0, [r7, #12]
 800fc6e:	f002 fb55 	bl	801231c <lfs_fs_forceconsistency>
 800fc72:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 800fc74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d001      	beq.n	800fc7e <lfs_file_opencfg_+0x2a>
            return err;
 800fc7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc7c:	e1bf      	b.n	800fffe <lfs_file_opencfg_+0x3aa>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800fc82:	651a      	str	r2, [r3, #80]	@ 0x50
    file->flags = flags;
 800fc84:	683a      	ldr	r2, [r7, #0]
 800fc86:	68bb      	ldr	r3, [r7, #8]
 800fc88:	631a      	str	r2, [r3, #48]	@ 0x30
    file->pos = 0;
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	635a      	str	r2, [r3, #52]	@ 0x34
    file->off = 0;
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	2200      	movs	r2, #0
 800fc94:	63da      	str	r2, [r3, #60]	@ 0x3c
    file->cache.buffer = NULL;
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	2200      	movs	r2, #0
 800fc9a:	64da      	str	r2, [r3, #76]	@ 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	f103 0108 	add.w	r1, r3, #8
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	3304      	adds	r3, #4
 800fca6:	1d3a      	adds	r2, r7, #4
 800fca8:	68f8      	ldr	r0, [r7, #12]
 800fcaa:	f7fe f82f 	bl	800dd0c <lfs_dir_find>
 800fcae:	65b8      	str	r0, [r7, #88]	@ 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && lfs_path_islast(path))) {
 800fcb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	da10      	bge.n	800fcd8 <lfs_file_opencfg_+0x84>
 800fcb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fcb8:	f113 0f02 	cmn.w	r3, #2
 800fcbc:	d109      	bne.n	800fcd2 <lfs_file_opencfg_+0x7e>
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f7fc f8b5 	bl	800be30 <lfs_path_islast>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	f083 0301 	eor.w	r3, r3, #1
 800fccc:	b2db      	uxtb	r3, r3
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d002      	beq.n	800fcd8 <lfs_file_opencfg_+0x84>
        err = tag;
 800fcd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fcd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 800fcd6:	e187      	b.n	800ffe8 <lfs_file_opencfg_+0x394>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	2201      	movs	r2, #1
 800fcdc:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 800fcde:	68b9      	ldr	r1, [r7, #8]
 800fce0:	68f8      	ldr	r0, [r7, #12]
 800fce2:	f7fc fc24 	bl	800c52e <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 800fce6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fce8:	f113 0f02 	cmn.w	r3, #2
 800fcec:	d159      	bne.n	800fda2 <lfs_file_opencfg_+0x14e>
        if (!(flags & LFS_O_CREAT)) {
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d103      	bne.n	800fd00 <lfs_file_opencfg_+0xac>
            err = LFS_ERR_NOENT;
 800fcf8:	f06f 0301 	mvn.w	r3, #1
 800fcfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 800fcfe:	e173      	b.n	800ffe8 <lfs_file_opencfg_+0x394>
        }

        // don't allow trailing slashes
        if (lfs_path_isdir(path)) {
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7fc f8b4 	bl	800be70 <lfs_path_isdir>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d003      	beq.n	800fd16 <lfs_file_opencfg_+0xc2>
            err = LFS_ERR_NOTDIR;
 800fd0e:	f06f 0313 	mvn.w	r3, #19
 800fd12:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 800fd14:	e168      	b.n	800ffe8 <lfs_file_opencfg_+0x394>
        }

        // check that name fits
        lfs_size_t nlen = lfs_path_namelen(path);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f7fc f879 	bl	800be10 <lfs_path_namelen>
 800fd1e:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (nlen > lfs->name_max) {
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fd24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fd26:	429a      	cmp	r2, r3
 800fd28:	d903      	bls.n	800fd32 <lfs_file_opencfg_+0xde>
            err = LFS_ERR_NAMETOOLONG;
 800fd2a:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 800fd2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 800fd30:	e15a      	b.n	800ffe8 <lfs_file_opencfg_+0x394>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	f103 0108 	add.w	r1, r3, #8
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	889b      	ldrh	r3, [r3, #4]
 800fd3c:	029b      	lsls	r3, r3, #10
 800fd3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fd42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fd46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fd48:	2300      	movs	r3, #0
 800fd4a:	633b      	str	r3, [r7, #48]	@ 0x30
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	889b      	ldrh	r3, [r3, #4]
 800fd50:	029a      	lsls	r2, r3, #10
 800fd52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd54:	4313      	orrs	r3, r2
 800fd56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fd5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	889b      	ldrh	r3, [r3, #4]
 800fd64:	029b      	lsls	r3, r3, #10
 800fd66:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fd6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fd6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fd70:	2300      	movs	r3, #0
 800fd72:	643b      	str	r3, [r7, #64]	@ 0x40
 800fd74:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800fd78:	2303      	movs	r3, #3
 800fd7a:	68f8      	ldr	r0, [r7, #12]
 800fd7c:	f7ff fd1c 	bl	800f7b8 <lfs_dir_commit>
 800fd80:	65f8      	str	r0, [r7, #92]	@ 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 800fd82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fd84:	f113 0f1c 	cmn.w	r3, #28
 800fd88:	d001      	beq.n	800fd8e <lfs_file_opencfg_+0x13a>
 800fd8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fd8c:	e001      	b.n	800fd92 <lfs_file_opencfg_+0x13e>
 800fd8e:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 800fd92:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (err) {
 800fd94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	f040 8125 	bne.w	800ffe6 <lfs_file_opencfg_+0x392>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 800fd9c:	4b9a      	ldr	r3, [pc, #616]	@ (8010008 <lfs_file_opencfg_+0x3b4>)
 800fd9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fda0:	e044      	b.n	800fe2c <lfs_file_opencfg_+0x1d8>
    } else if (flags & LFS_O_EXCL) {
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d003      	beq.n	800fdb4 <lfs_file_opencfg_+0x160>
        err = LFS_ERR_EXIST;
 800fdac:	f06f 0310 	mvn.w	r3, #16
 800fdb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 800fdb2:	e119      	b.n	800ffe8 <lfs_file_opencfg_+0x394>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 800fdb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7fc f96a 	bl	800c090 <lfs_tag_type3>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	2b01      	cmp	r3, #1
 800fdc0:	d003      	beq.n	800fdca <lfs_file_opencfg_+0x176>
        err = LFS_ERR_ISDIR;
 800fdc2:	f06f 0314 	mvn.w	r3, #20
 800fdc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 800fdc8:	e10e      	b.n	800ffe8 <lfs_file_opencfg_+0x394>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d00e      	beq.n	800fdf2 <lfs_file_opencfg_+0x19e>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	889b      	ldrh	r3, [r3, #4]
 800fdd8:	029b      	lsls	r3, r3, #10
 800fdda:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fdde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fde2:	65bb      	str	r3, [r7, #88]	@ 0x58
        file->flags |= LFS_F_DIRTY;
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fde8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	631a      	str	r2, [r3, #48]	@ 0x30
 800fdf0:	e01c      	b.n	800fe2c <lfs_file_opencfg_+0x1d8>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	889b      	ldrh	r3, [r3, #4]
 800fdfc:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800fdfe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fe02:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800fe06:	68ba      	ldr	r2, [r7, #8]
 800fe08:	3228      	adds	r2, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800fe0a:	9200      	str	r2, [sp, #0]
 800fe0c:	4a7f      	ldr	r2, [pc, #508]	@ (801000c <lfs_file_opencfg_+0x3b8>)
 800fe0e:	68f8      	ldr	r0, [r7, #12]
 800fe10:	f7fc fdde 	bl	800c9d0 <lfs_dir_get>
 800fe14:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (tag < 0) {
 800fe16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	da02      	bge.n	800fe22 <lfs_file_opencfg_+0x1ce>
            err = tag;
 800fe1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 800fe20:	e0e2      	b.n	800ffe8 <lfs_file_opencfg_+0x394>
        }
        lfs_ctz_fromle32(&file->ctz);
 800fe22:	68bb      	ldr	r3, [r7, #8]
 800fe24:	3328      	adds	r3, #40	@ 0x28
 800fe26:	4618      	mov	r0, r3
 800fe28:	f7fc faa2 	bl	800c370 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	657b      	str	r3, [r7, #84]	@ 0x54
 800fe30:	e063      	b.n	800fefa <lfs_file_opencfg_+0x2a6>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe36:	f003 0301 	and.w	r3, r3, #1
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d03c      	beq.n	800feb8 <lfs_file_opencfg_+0x264>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe48:	6859      	ldr	r1, [r3, #4]
 800fe4a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fe4c:	4613      	mov	r3, r2
 800fe4e:	005b      	lsls	r3, r3, #1
 800fe50:	4413      	add	r3, r2
 800fe52:	009b      	lsls	r3, r3, #2
 800fe54:	440b      	add	r3, r1
 800fe56:	781b      	ldrb	r3, [r3, #0]
 800fe58:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800fe5c:	051a      	lsls	r2, r3, #20
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	889b      	ldrh	r3, [r3, #4]
 800fe62:	029b      	lsls	r3, r3, #10
 800fe64:	ea42 0103 	orr.w	r1, r2, r3
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe6c:	6858      	ldr	r0, [r3, #4]
 800fe6e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fe70:	4613      	mov	r3, r2
 800fe72:	005b      	lsls	r3, r3, #1
 800fe74:	4413      	add	r3, r2
 800fe76:	009b      	lsls	r3, r3, #2
 800fe78:	4403      	add	r3, r0
 800fe7a:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800fe7c:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe84:	6859      	ldr	r1, [r3, #4]
 800fe86:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fe88:	4613      	mov	r3, r2
 800fe8a:	005b      	lsls	r3, r3, #1
 800fe8c:	4413      	add	r3, r2
 800fe8e:	009b      	lsls	r3, r3, #2
 800fe90:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800fe92:	685b      	ldr	r3, [r3, #4]
 800fe94:	9300      	str	r3, [sp, #0]
 800fe96:	4603      	mov	r3, r0
 800fe98:	4a5d      	ldr	r2, [pc, #372]	@ (8010010 <lfs_file_opencfg_+0x3bc>)
 800fe9a:	4621      	mov	r1, r4
 800fe9c:	68f8      	ldr	r0, [r7, #12]
 800fe9e:	f7fc fd97 	bl	800c9d0 <lfs_dir_get>
 800fea2:	6478      	str	r0, [r7, #68]	@ 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 800fea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	da06      	bge.n	800feb8 <lfs_file_opencfg_+0x264>
 800feaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800feac:	f113 0f02 	cmn.w	r3, #2
 800feb0:	d002      	beq.n	800feb8 <lfs_file_opencfg_+0x264>
                err = res;
 800feb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800feb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 800feb6:	e097      	b.n	800ffe8 <lfs_file_opencfg_+0x394>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800febc:	f003 0302 	and.w	r3, r3, #2
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d017      	beq.n	800fef4 <lfs_file_opencfg_+0x2a0>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fec8:	6859      	ldr	r1, [r3, #4]
 800feca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fecc:	4613      	mov	r3, r2
 800fece:	005b      	lsls	r3, r3, #1
 800fed0:	4413      	add	r3, r2
 800fed2:	009b      	lsls	r3, r3, #2
 800fed4:	440b      	add	r3, r1
 800fed6:	689a      	ldr	r2, [r3, #8]
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fedc:	429a      	cmp	r2, r3
 800fede:	d903      	bls.n	800fee8 <lfs_file_opencfg_+0x294>
                err = LFS_ERR_NOSPC;
 800fee0:	f06f 031b 	mvn.w	r3, #27
 800fee4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 800fee6:	e07f      	b.n	800ffe8 <lfs_file_opencfg_+0x394>
            }

            file->flags |= LFS_F_DIRTY;
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800feec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	631a      	str	r2, [r3, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800fef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fef6:	3301      	adds	r3, #1
 800fef8:	657b      	str	r3, [r7, #84]	@ 0x54
 800fefa:	68bb      	ldr	r3, [r7, #8]
 800fefc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fefe:	689b      	ldr	r3, [r3, #8]
 800ff00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d395      	bcc.n	800fe32 <lfs_file_opencfg_+0x1de>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d005      	beq.n	800ff1c <lfs_file_opencfg_+0x2c8>
        file->cache.buffer = file->cfg->buffer;
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff14:	681a      	ldr	r2, [r3, #0]
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	64da      	str	r2, [r3, #76]	@ 0x4c
 800ff1a:	e010      	b.n	800ff3e <lfs_file_opencfg_+0x2ea>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ff20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff22:	4618      	mov	r0, r3
 800ff24:	f7fb fbc5 	bl	800b6b2 <lfs_malloc>
 800ff28:	4602      	mov	r2, r0
 800ff2a:	68bb      	ldr	r3, [r7, #8]
 800ff2c:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (!file->cache.buffer) {
 800ff2e:	68bb      	ldr	r3, [r7, #8]
 800ff30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d103      	bne.n	800ff3e <lfs_file_opencfg_+0x2ea>
            err = LFS_ERR_NOMEM;
 800ff36:	f06f 030b 	mvn.w	r3, #11
 800ff3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 800ff3c:	e054      	b.n	800ffe8 <lfs_file_opencfg_+0x394>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 800ff3e:	68bb      	ldr	r3, [r7, #8]
 800ff40:	3340      	adds	r3, #64	@ 0x40
 800ff42:	4619      	mov	r1, r3
 800ff44:	68f8      	ldr	r0, [r7, #12]
 800ff46:	f7fb fbda 	bl	800b6fe <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800ff4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f7fc f89f 	bl	800c090 <lfs_tag_type3>
 800ff52:	4603      	mov	r3, r0
 800ff54:	461a      	mov	r2, r3
 800ff56:	f240 2301 	movw	r3, #513	@ 0x201
 800ff5a:	429a      	cmp	r2, r3
 800ff5c:	d141      	bne.n	800ffe2 <lfs_file_opencfg_+0x38e>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	f06f 0201 	mvn.w	r2, #1
 800ff64:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = lfs_tag_size(tag);
 800ff66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f7fc f8cb 	bl	800c104 <lfs_tag_size>
 800ff6e:	4602      	mov	r2, r0
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff78:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	631a      	str	r2, [r3, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = 0;
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ff92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	649a      	str	r2, [r3, #72]	@ 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d020      	beq.n	800ffe2 <lfs_file_opencfg_+0x38e>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	889b      	ldrh	r3, [r3, #4]
 800ffaa:	029c      	lsls	r4, r3, #10
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ffb0:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	f7fb fadd 	bl	800b574 <lfs_min>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800ffbe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800ffc6:	9300      	str	r3, [sp, #0]
 800ffc8:	4613      	mov	r3, r2
 800ffca:	4a10      	ldr	r2, [pc, #64]	@ (801000c <lfs_file_opencfg_+0x3b8>)
 800ffcc:	4629      	mov	r1, r5
 800ffce:	68f8      	ldr	r0, [r7, #12]
 800ffd0:	f7fc fcfe 	bl	800c9d0 <lfs_dir_get>
 800ffd4:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (res < 0) {
 800ffd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	da02      	bge.n	800ffe2 <lfs_file_opencfg_+0x38e>
                err = res;
 800ffdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ffde:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 800ffe0:	e002      	b.n	800ffe8 <lfs_file_opencfg_+0x394>
            }
        }
    }

    return 0;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	e00b      	b.n	800fffe <lfs_file_opencfg_+0x3aa>
            goto cleanup;
 800ffe6:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffec:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800fff0:	68bb      	ldr	r3, [r7, #8]
 800fff2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
    lfs_file_close_(lfs, file);
 800fff4:	68b9      	ldr	r1, [r7, #8]
 800fff6:	68f8      	ldr	r0, [r7, #12]
 800fff8:	f000 f824 	bl	8010044 <lfs_file_close_>
    return err;
 800fffc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800fffe:	4618      	mov	r0, r3
 8010000:	3760      	adds	r7, #96	@ 0x60
 8010002:	46bd      	mov	sp, r7
 8010004:	bdb0      	pop	{r4, r5, r7, pc}
 8010006:	bf00      	nop
 8010008:	20100000 	.word	0x20100000
 801000c:	700ffc00 	.word	0x700ffc00
 8010010:	7ffffc00 	.word	0x7ffffc00

08010014 <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8010014:	b580      	push	{r7, lr}
 8010016:	b088      	sub	sp, #32
 8010018:	af02      	add	r7, sp, #8
 801001a:	60f8      	str	r0, [r7, #12]
 801001c:	60b9      	str	r1, [r7, #8]
 801001e:	607a      	str	r2, [r7, #4]
 8010020:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 8010022:	4b07      	ldr	r3, [pc, #28]	@ (8010040 <lfs_file_open_+0x2c>)
 8010024:	9300      	str	r3, [sp, #0]
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	687a      	ldr	r2, [r7, #4]
 801002a:	68b9      	ldr	r1, [r7, #8]
 801002c:	68f8      	ldr	r0, [r7, #12]
 801002e:	f7ff fe11 	bl	800fc54 <lfs_file_opencfg_>
 8010032:	6178      	str	r0, [r7, #20]
    return err;
 8010034:	697b      	ldr	r3, [r7, #20]
}
 8010036:	4618      	mov	r0, r3
 8010038:	3718      	adds	r7, #24
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}
 801003e:	bf00      	nop
 8010040:	08014754 	.word	0x08014754

08010044 <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 8010044:	b580      	push	{r7, lr}
 8010046:	b084      	sub	sp, #16
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 801004e:	6839      	ldr	r1, [r7, #0]
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	f000 f9e5 	bl	8010420 <lfs_file_sync_>
 8010056:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8010058:	6839      	ldr	r1, [r7, #0]
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f7fc fa45 	bl	800c4ea <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d104      	bne.n	8010074 <lfs_file_close_+0x30>
        lfs_free(file->cache.buffer);
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801006e:	4618      	mov	r0, r3
 8010070:	f7fb fb2b 	bl	800b6ca <lfs_free>
    }

    return err;
 8010074:	68fb      	ldr	r3, [r7, #12]
}
 8010076:	4618      	mov	r0, r3
 8010078:	3710      	adds	r7, #16
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}
	...

08010080 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8010080:	b590      	push	{r4, r7, lr}
 8010082:	b08d      	sub	sp, #52	@ 0x34
 8010084:	af06      	add	r7, sp, #24
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 801008a:	f107 030c 	add.w	r3, r7, #12
 801008e:	4619      	mov	r1, r3
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f7fc fb1f 	bl	800c6d4 <lfs_alloc>
 8010096:	6138      	str	r0, [r7, #16]
        if (err) {
 8010098:	693b      	ldr	r3, [r7, #16]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d001      	beq.n	80100a2 <lfs_file_relocate+0x22>
            return err;
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	e0bb      	b.n	801021a <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	4619      	mov	r1, r3
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f7fb fe80 	bl	800bdac <lfs_bd_erase>
 80100ac:	6138      	str	r0, [r7, #16]
        if (err) {
 80100ae:	693b      	ldr	r3, [r7, #16]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d006      	beq.n	80100c2 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80100ba:	f000 809b 	beq.w	80101f4 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 80100be:	693b      	ldr	r3, [r7, #16]
 80100c0:	e0ab      	b.n	801021a <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 80100c2:	2300      	movs	r3, #0
 80100c4:	617b      	str	r3, [r7, #20]
 80100c6:	e069      	b.n	801019c <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d027      	beq.n	8010124 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	f103 0008 	add.w	r0, r3, #8
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	f103 0440 	add.w	r4, r3, #64	@ 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	889b      	ldrh	r3, [r3, #4]
 80100ec:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 80100ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80100f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80100f6:	2101      	movs	r1, #1
 80100f8:	9105      	str	r1, [sp, #20]
 80100fa:	f107 010b 	add.w	r1, r7, #11
 80100fe:	9104      	str	r1, [sp, #16]
 8010100:	6979      	ldr	r1, [r7, #20]
 8010102:	9103      	str	r1, [sp, #12]
 8010104:	9302      	str	r3, [sp, #8]
 8010106:	4b47      	ldr	r3, [pc, #284]	@ (8010224 <lfs_file_relocate+0x1a4>)
 8010108:	9301      	str	r3, [sp, #4]
 801010a:	9200      	str	r2, [sp, #0]
 801010c:	4623      	mov	r3, r4
 801010e:	2200      	movs	r2, #0
 8010110:	4601      	mov	r1, r0
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	f7fc fc77 	bl	800ca06 <lfs_dir_getread>
 8010118:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 801011a:	693b      	ldr	r3, [r7, #16]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d01e      	beq.n	801015e <lfs_file_relocate+0xde>
                    return err;
 8010120:	693b      	ldr	r3, [r7, #16]
 8010122:	e07a      	b.n	801021a <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	f103 0140 	add.w	r1, r3, #64	@ 0x40
                err = lfs_bd_read(lfs,
 801012a:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_bd_read(lfs,
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	1ad4      	subs	r4, r2, r3
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010138:	2201      	movs	r2, #1
 801013a:	9203      	str	r2, [sp, #12]
 801013c:	f107 020b 	add.w	r2, r7, #11
 8010140:	9202      	str	r2, [sp, #8]
 8010142:	697a      	ldr	r2, [r7, #20]
 8010144:	9201      	str	r2, [sp, #4]
 8010146:	9300      	str	r3, [sp, #0]
 8010148:	4623      	mov	r3, r4
 801014a:	4602      	mov	r2, r0
 801014c:	6878      	ldr	r0, [r7, #4]
 801014e:	f7fb faed 	bl	800b72c <lfs_bd_read>
 8010152:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d001      	beq.n	801015e <lfs_file_relocate+0xde>
                    return err;
 801015a:	693b      	ldr	r3, [r7, #16]
 801015c:	e05d      	b.n	801021a <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	f103 0110 	add.w	r1, r3, #16
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	2201      	movs	r2, #1
 801016a:	9203      	str	r2, [sp, #12]
 801016c:	f107 020b 	add.w	r2, r7, #11
 8010170:	9202      	str	r2, [sp, #8]
 8010172:	697a      	ldr	r2, [r7, #20]
 8010174:	9201      	str	r2, [sp, #4]
 8010176:	9300      	str	r3, [sp, #0]
 8010178:	2301      	movs	r3, #1
 801017a:	4602      	mov	r2, r0
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f7fb fd67 	bl	800bc50 <lfs_bd_prog>
 8010182:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8010184:	693b      	ldr	r3, [r7, #16]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d005      	beq.n	8010196 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 801018a:	693b      	ldr	r3, [r7, #16]
 801018c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8010190:	d032      	beq.n	80101f8 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8010192:	693b      	ldr	r3, [r7, #16]
 8010194:	e041      	b.n	801021a <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	3301      	adds	r3, #1
 801019a:	617b      	str	r3, [r7, #20]
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101a0:	697a      	ldr	r2, [r7, #20]
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d390      	bcc.n	80100c8 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	69d9      	ldr	r1, [r3, #28]
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80101b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101b4:	461a      	mov	r2, r3
 80101b6:	f002 fd04 	bl	8012bc2 <memcpy>
        file->cache.block = lfs->pcache.block;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	691a      	ldr	r2, [r3, #16]
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	695a      	ldr	r2, [r3, #20]
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	699a      	ldr	r2, [r3, #24]
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	649a      	str	r2, [r3, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	3310      	adds	r3, #16
 80101d6:	4619      	mov	r1, r3
 80101d8:	6878      	ldr	r0, [r7, #4]
 80101da:	f7fb fa90 	bl	800b6fe <lfs_cache_zero>

        file->block = nblock;
 80101de:	68fa      	ldr	r2, [r7, #12]
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	639a      	str	r2, [r3, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101e8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	631a      	str	r2, [r3, #48]	@ 0x30
        return 0;
 80101f0:	2300      	movs	r3, #0
 80101f2:	e012      	b.n	801021a <lfs_file_relocate+0x19a>
                goto relocate;
 80101f4:	bf00      	nop
 80101f6:	e000      	b.n	80101fa <lfs_file_relocate+0x17a>
                    goto relocate;
 80101f8:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	4a0a      	ldr	r2, [pc, #40]	@ (8010228 <lfs_file_relocate+0x1a8>)
 80101fe:	9200      	str	r2, [sp, #0]
 8010200:	f640 42ff 	movw	r2, #3327	@ 0xcff
 8010204:	4909      	ldr	r1, [pc, #36]	@ (801022c <lfs_file_relocate+0x1ac>)
 8010206:	480a      	ldr	r0, [pc, #40]	@ (8010230 <lfs_file_relocate+0x1b0>)
 8010208:	f002 fbca 	bl	80129a0 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	3310      	adds	r3, #16
 8010210:	4619      	mov	r1, r3
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f7fb fa64 	bl	800b6e0 <lfs_cache_drop>
    while (true) {
 8010218:	e737      	b.n	801008a <lfs_file_relocate+0xa>
    }
}
 801021a:	4618      	mov	r0, r3
 801021c:	371c      	adds	r7, #28
 801021e:	46bd      	mov	sp, r7
 8010220:	bd90      	pop	{r4, r7, pc}
 8010222:	bf00      	nop
 8010224:	fff7fc00 	.word	0xfff7fc00
 8010228:	080139e0 	.word	0x080139e0
 801022c:	080138c0 	.word	0x080138c0
 8010230:	08013a5c 	.word	0x08013a5c

08010234 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8010234:	b580      	push	{r7, lr}
 8010236:	b084      	sub	sp, #16
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
 801023c:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	63da      	str	r2, [r3, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f7fc f9ad 	bl	800c5a6 <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 801024c:	6839      	ldr	r1, [r7, #0]
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f7ff ff16 	bl	8010080 <lfs_file_relocate>
 8010254:	60f8      	str	r0, [r7, #12]
    if (err) {
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d001      	beq.n	8010260 <lfs_file_outline+0x2c>
        return err;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	e006      	b.n	801026e <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010264:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8010268:	683b      	ldr	r3, [r7, #0]
 801026a:	631a      	str	r2, [r3, #48]	@ 0x30
    return 0;
 801026c:	2300      	movs	r3, #0
}
 801026e:	4618      	mov	r0, r3
 8010270:	3710      	adds	r7, #16
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}
	...

08010278 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8010278:	b590      	push	{r4, r7, lr}
 801027a:	b09f      	sub	sp, #124	@ 0x7c
 801027c:	af02      	add	r7, sp, #8
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010286:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801028a:	2b00      	cmp	r3, #0
 801028c:	d011      	beq.n	80102b2 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 801028e:	683b      	ldr	r3, [r7, #0]
 8010290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010292:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010296:	2b00      	cmp	r3, #0
 8010298:	d105      	bne.n	80102a6 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	3340      	adds	r3, #64	@ 0x40
 801029e:	4619      	mov	r1, r3
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	f7fb fa1d 	bl	800b6e0 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102aa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	f000 80a4 	beq.w	8010408 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102c4:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d176      	bne.n	80103c0 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 80102d2:	f107 030c 	add.w	r3, r7, #12
 80102d6:	2254      	movs	r2, #84	@ 0x54
 80102d8:	2100      	movs	r1, #0
 80102da:	4618      	mov	r0, r3
 80102dc:	f002 fbc5 	bl	8012a6a <memset>
                .ctz.head = file->ctz.head,
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            lfs_file_t orig = {
 80102e4:	637b      	str	r3, [r7, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            lfs_file_t orig = {
 80102ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80102ec:	2301      	movs	r3, #1
 80102ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            lfs_file_t orig = {
 80102f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 80102fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80102fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	4619      	mov	r1, r3
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f7fb f9ea 	bl	800b6e0 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 801030c:	e02b      	b.n	8010366 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 801030e:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8010312:	f107 010c 	add.w	r1, r7, #12
 8010316:	2301      	movs	r3, #1
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f000 f921 	bl	8010560 <lfs_file_flushedread>
 801031e:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 8010320:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010322:	2b00      	cmp	r3, #0
 8010324:	da01      	bge.n	801032a <lfs_file_flush+0xb2>
                    return res;
 8010326:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010328:	e06f      	b.n	801040a <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 801032a:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 801032e:	2301      	movs	r3, #1
 8010330:	6839      	ldr	r1, [r7, #0]
 8010332:	6878      	ldr	r0, [r7, #4]
 8010334:	f000 fa1c 	bl	8010770 <lfs_file_flushedwrite>
 8010338:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 801033a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801033c:	2b00      	cmp	r3, #0
 801033e:	da01      	bge.n	8010344 <lfs_file_flush+0xcc>
                    return res;
 8010340:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010342:	e062      	b.n	801040a <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	f1b3 3fff 	cmp.w	r3, #4294967295
 801034c:	d00b      	beq.n	8010366 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 801034e:	f107 030c 	add.w	r3, r7, #12
 8010352:	3340      	adds	r3, #64	@ 0x40
 8010354:	4619      	mov	r1, r3
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f7fb f9c2 	bl	800b6e0 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	4619      	mov	r1, r3
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f7fb f9bd 	bl	800b6e0 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801036e:	429a      	cmp	r2, r3
 8010370:	d3cd      	bcc.n	801030e <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8010378:	687a      	ldr	r2, [r7, #4]
 801037a:	2301      	movs	r3, #1
 801037c:	6878      	ldr	r0, [r7, #4]
 801037e:	f7fb fbb9 	bl	800baf4 <lfs_bd_flush>
 8010382:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8010384:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010386:	2b00      	cmp	r3, #0
 8010388:	d026      	beq.n	80103d8 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 801038a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801038c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8010390:	d001      	beq.n	8010396 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8010392:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010394:	e039      	b.n	801040a <lfs_file_flush+0x192>
                        goto relocate;
 8010396:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801039c:	4a1d      	ldr	r2, [pc, #116]	@ (8010414 <lfs_file_flush+0x19c>)
 801039e:	9200      	str	r2, [sp, #0]
 80103a0:	f640 524e 	movw	r2, #3406	@ 0xd4e
 80103a4:	491c      	ldr	r1, [pc, #112]	@ (8010418 <lfs_file_flush+0x1a0>)
 80103a6:	481d      	ldr	r0, [pc, #116]	@ (801041c <lfs_file_flush+0x1a4>)
 80103a8:	f002 fafa 	bl	80129a0 <iprintf>
                err = lfs_file_relocate(lfs, file);
 80103ac:	6839      	ldr	r1, [r7, #0]
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f7ff fe66 	bl	8010080 <lfs_file_relocate>
 80103b4:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 80103b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d0da      	beq.n	8010372 <lfs_file_flush+0xfa>
                    return err;
 80103bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80103be:	e024      	b.n	801040a <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103c8:	4619      	mov	r1, r3
 80103ca:	4610      	mov	r0, r2
 80103cc:	f7fb f8c2 	bl	800b554 <lfs_max>
 80103d0:	4602      	mov	r2, r0
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80103d6:	e000      	b.n	80103da <lfs_file_flush+0x162>
                break;
 80103d8:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = file->pos;
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	631a      	str	r2, [r3, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103fa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	631a      	str	r2, [r3, #48]	@ 0x30

        file->pos = pos;
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010406:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif

    return 0;
 8010408:	2300      	movs	r3, #0
}
 801040a:	4618      	mov	r0, r3
 801040c:	3774      	adds	r7, #116	@ 0x74
 801040e:	46bd      	mov	sp, r7
 8010410:	bd90      	pop	{r4, r7, pc}
 8010412:	bf00      	nop
 8010414:	080139e0 	.word	0x080139e0
 8010418:	080138c0 	.word	0x080138c0
 801041c:	08013a5c 	.word	0x08013a5c

08010420 <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 8010420:	b580      	push	{r7, lr}
 8010422:	b090      	sub	sp, #64	@ 0x40
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 801042a:	683b      	ldr	r3, [r7, #0]
 801042c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801042e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8010432:	2b00      	cmp	r3, #0
 8010434:	d001      	beq.n	801043a <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8010436:	2300      	movs	r3, #0
 8010438:	e08e      	b.n	8010558 <lfs_file_sync_+0x138>
    }

    int err = lfs_file_flush(lfs, file);
 801043a:	6839      	ldr	r1, [r7, #0]
 801043c:	6878      	ldr	r0, [r7, #4]
 801043e:	f7ff ff1b 	bl	8010278 <lfs_file_flush>
 8010442:	6338      	str	r0, [r7, #48]	@ 0x30
    if (err) {
 8010444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010446:	2b00      	cmp	r3, #0
 8010448:	d007      	beq.n	801045a <lfs_file_sync_+0x3a>
        file->flags |= LFS_F_ERRED;
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801044e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	631a      	str	r2, [r3, #48]	@ 0x30
        return err;
 8010456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010458:	e07e      	b.n	8010558 <lfs_file_sync_+0x138>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801045e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010462:	2b00      	cmp	r3, #0
 8010464:	d077      	beq.n	8010556 <lfs_file_sync_+0x136>
            !lfs_pair_isnull(file->m.pair)) {
 8010466:	683b      	ldr	r3, [r7, #0]
 8010468:	3308      	adds	r3, #8
 801046a:	4618      	mov	r0, r3
 801046c:	f7fb fd29 	bl	800bec2 <lfs_pair_isnull>
 8010470:	4603      	mov	r3, r0
 8010472:	f083 0301 	eor.w	r3, r3, #1
 8010476:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8010478:	2b00      	cmp	r3, #0
 801047a:	d06c      	beq.n	8010556 <lfs_file_sync_+0x136>
        // before we commit metadata, we need sync the disk to make sure
        // data writes don't complete after metadata writes
        if (!(file->flags & LFS_F_INLINE)) {
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010480:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010484:	2b00      	cmp	r3, #0
 8010486:	d10d      	bne.n	80104a4 <lfs_file_sync_+0x84>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f103 0110 	add.w	r1, r3, #16
 801048e:	687a      	ldr	r2, [r7, #4]
 8010490:	2300      	movs	r3, #0
 8010492:	6878      	ldr	r0, [r7, #4]
 8010494:	f7fb fba8 	bl	800bbe8 <lfs_bd_sync>
 8010498:	6338      	str	r0, [r7, #48]	@ 0x30
            if (err) {
 801049a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801049c:	2b00      	cmp	r3, #0
 801049e:	d001      	beq.n	80104a4 <lfs_file_sync_+0x84>
                return err;
 80104a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104a2:	e059      	b.n	8010558 <lfs_file_sync_+0x138>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80104a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d009      	beq.n	80104c4 <lfs_file_sync_+0xa4>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 80104b0:	f240 2301 	movw	r3, #513	@ 0x201
 80104b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            buffer = file->cache.buffer;
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80104ba:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = file->ctz.size;
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80104c2:	e014      	b.n	80104ee <lfs_file_sync_+0xce>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 80104c4:	f240 2302 	movw	r3, #514	@ 0x202
 80104c8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 80104ca:	683a      	ldr	r2, [r7, #0]
 80104cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80104d0:	3228      	adds	r2, #40	@ 0x28
 80104d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80104d6:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 80104da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80104de:	4618      	mov	r0, r3
 80104e0:	f7fb ff5e 	bl	800c3a0 <lfs_ctz_tole32>
            buffer = &ctz;
 80104e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80104e8:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = sizeof(ctz);
 80104ea:	2308      	movs	r3, #8
 80104ec:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	f103 0108 	add.w	r1, r3, #8
 80104f4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80104f6:	051a      	lsls	r2, r3, #20
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	889b      	ldrh	r3, [r3, #4]
 80104fc:	029b      	lsls	r3, r3, #10
 80104fe:	431a      	orrs	r2, r3
 8010500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010502:	4313      	orrs	r3, r2
 8010504:	61bb      	str	r3, [r7, #24]
 8010506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010508:	61fb      	str	r3, [r7, #28]
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	889b      	ldrh	r3, [r3, #4]
 801050e:	029a      	lsls	r2, r3, #10
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010514:	689b      	ldr	r3, [r3, #8]
 8010516:	4313      	orrs	r3, r2
 8010518:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 801051c:	623b      	str	r3, [r7, #32]
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010522:	685b      	ldr	r3, [r3, #4]
 8010524:	627b      	str	r3, [r7, #36]	@ 0x24
 8010526:	f107 0218 	add.w	r2, r7, #24
 801052a:	2302      	movs	r3, #2
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f7ff f943 	bl	800f7b8 <lfs_dir_commit>
 8010532:	6338      	str	r0, [r7, #48]	@ 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8010534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010536:	2b00      	cmp	r3, #0
 8010538:	d007      	beq.n	801054a <lfs_file_sync_+0x12a>
            file->flags |= LFS_F_ERRED;
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801053e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8010546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010548:	e006      	b.n	8010558 <lfs_file_sync_+0x138>
        }

        file->flags &= ~LFS_F_DIRTY;
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801054e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return 0;
 8010556:	2300      	movs	r3, #0
}
 8010558:	4618      	mov	r0, r3
 801055a:	3740      	adds	r7, #64	@ 0x40
 801055c:	46bd      	mov	sp, r7
 801055e:	bd80      	pop	{r7, pc}

08010560 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8010560:	b5b0      	push	{r4, r5, r7, lr}
 8010562:	b090      	sub	sp, #64	@ 0x40
 8010564:	af06      	add	r7, sp, #24
 8010566:	60f8      	str	r0, [r7, #12]
 8010568:	60b9      	str	r1, [r7, #8]
 801056a:	607a      	str	r2, [r7, #4]
 801056c:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t nsize = size;
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8010576:	68bb      	ldr	r3, [r7, #8]
 8010578:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801057e:	429a      	cmp	r2, r3
 8010580:	d301      	bcc.n	8010586 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8010582:	2300      	movs	r3, #0
 8010584:	e0b7      	b.n	80106f6 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801058e:	1ad3      	subs	r3, r2, r3
 8010590:	4619      	mov	r1, r3
 8010592:	6838      	ldr	r0, [r7, #0]
 8010594:	f7fa ffee 	bl	800b574 <lfs_min>
 8010598:	6038      	str	r0, [r7, #0]
    nsize = size;
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 801059e:	e0a5      	b.n	80106ec <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80105a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d006      	beq.n	80105ba <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80105b4:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d130      	bne.n	801061c <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80105be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d11c      	bne.n	8010600 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80105c6:	68bb      	ldr	r3, [r7, #8]
 80105c8:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105d4:	68ba      	ldr	r2, [r7, #8]
 80105d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80105d8:	68b9      	ldr	r1, [r7, #8]
 80105da:	3138      	adds	r1, #56	@ 0x38
 80105dc:	68b8      	ldr	r0, [r7, #8]
 80105de:	303c      	adds	r0, #60	@ 0x3c
 80105e0:	9003      	str	r0, [sp, #12]
 80105e2:	9102      	str	r1, [sp, #8]
 80105e4:	9201      	str	r2, [sp, #4]
 80105e6:	9300      	str	r3, [sp, #0]
 80105e8:	462b      	mov	r3, r5
 80105ea:	4622      	mov	r2, r4
 80105ec:	2100      	movs	r1, #0
 80105ee:	68f8      	ldr	r0, [r7, #12]
 80105f0:	f7ff f93f 	bl	800f872 <lfs_ctz_find>
 80105f4:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 80105f6:	69fb      	ldr	r3, [r7, #28]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d009      	beq.n	8010610 <lfs_file_flushedread+0xb0>
                    return err;
 80105fc:	69fb      	ldr	r3, [r7, #28]
 80105fe:	e07a      	b.n	80106f6 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8010600:	68bb      	ldr	r3, [r7, #8]
 8010602:	f06f 0201 	mvn.w	r2, #1
 8010606:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_READING;
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010614:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010620:	69da      	ldr	r2, [r3, #28]
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010626:	1ad3      	subs	r3, r2, r3
 8010628:	4619      	mov	r1, r3
 801062a:	6a38      	ldr	r0, [r7, #32]
 801062c:	f7fa ffa2 	bl	800b574 <lfs_min>
 8010630:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8010632:	68bb      	ldr	r3, [r7, #8]
 8010634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010636:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801063a:	2b00      	cmp	r3, #0
 801063c:	d026      	beq.n	801068c <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	f103 0408 	add.w	r4, r3, #8
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	f103 0540 	add.w	r5, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801064e:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	889b      	ldrh	r3, [r3, #4]
 8010654:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8010656:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801065a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801065e:	68b9      	ldr	r1, [r7, #8]
 8010660:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8010662:	69b8      	ldr	r0, [r7, #24]
 8010664:	9005      	str	r0, [sp, #20]
 8010666:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010668:	9004      	str	r0, [sp, #16]
 801066a:	9103      	str	r1, [sp, #12]
 801066c:	9302      	str	r3, [sp, #8]
 801066e:	4b24      	ldr	r3, [pc, #144]	@ (8010700 <lfs_file_flushedread+0x1a0>)
 8010670:	9301      	str	r3, [sp, #4]
 8010672:	9200      	str	r2, [sp, #0]
 8010674:	462b      	mov	r3, r5
 8010676:	2200      	movs	r2, #0
 8010678:	4621      	mov	r1, r4
 801067a:	68f8      	ldr	r0, [r7, #12]
 801067c:	f7fc f9c3 	bl	800ca06 <lfs_dir_getread>
 8010680:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8010682:	693b      	ldr	r3, [r7, #16]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d01d      	beq.n	80106c4 <lfs_file_flushedread+0x164>
                return err;
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	e034      	b.n	80106f6 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	f103 0040 	add.w	r0, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010696:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801069c:	68ba      	ldr	r2, [r7, #8]
 801069e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80106a0:	69b9      	ldr	r1, [r7, #24]
 80106a2:	9103      	str	r1, [sp, #12]
 80106a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80106a6:	9102      	str	r1, [sp, #8]
 80106a8:	9201      	str	r2, [sp, #4]
 80106aa:	9300      	str	r3, [sp, #0]
 80106ac:	4623      	mov	r3, r4
 80106ae:	4602      	mov	r2, r0
 80106b0:	2100      	movs	r1, #0
 80106b2:	68f8      	ldr	r0, [r7, #12]
 80106b4:	f7fb f83a 	bl	800b72c <lfs_bd_read>
 80106b8:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80106ba:	697b      	ldr	r3, [r7, #20]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d001      	beq.n	80106c4 <lfs_file_flushedread+0x164>
                return err;
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	e018      	b.n	80106f6 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 80106c4:	68bb      	ldr	r3, [r7, #8]
 80106c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80106c8:	69bb      	ldr	r3, [r7, #24]
 80106ca:	441a      	add	r2, r3
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 80106d0:	68bb      	ldr	r3, [r7, #8]
 80106d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80106d4:	69bb      	ldr	r3, [r7, #24]
 80106d6:	441a      	add	r2, r3
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 80106dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80106de:	69bb      	ldr	r3, [r7, #24]
 80106e0:	4413      	add	r3, r2
 80106e2:	627b      	str	r3, [r7, #36]	@ 0x24
        nsize -= diff;
 80106e4:	6a3a      	ldr	r2, [r7, #32]
 80106e6:	69bb      	ldr	r3, [r7, #24]
 80106e8:	1ad3      	subs	r3, r2, r3
 80106ea:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 80106ec:	6a3b      	ldr	r3, [r7, #32]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	f47f af56 	bne.w	80105a0 <lfs_file_flushedread+0x40>
    }

    return size;
 80106f4:	683b      	ldr	r3, [r7, #0]
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	3728      	adds	r7, #40	@ 0x28
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bdb0      	pop	{r4, r5, r7, pc}
 80106fe:	bf00      	nop
 8010700:	fff7fc00 	.word	0xfff7fc00

08010704 <lfs_file_read_>:

static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8010704:	b580      	push	{r7, lr}
 8010706:	b086      	sub	sp, #24
 8010708:	af00      	add	r7, sp, #0
 801070a:	60f8      	str	r0, [r7, #12]
 801070c:	60b9      	str	r1, [r7, #8]
 801070e:	607a      	str	r2, [r7, #4]
 8010710:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8010712:	68bb      	ldr	r3, [r7, #8]
 8010714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010716:	f003 0301 	and.w	r3, r3, #1
 801071a:	2b00      	cmp	r3, #0
 801071c:	d106      	bne.n	801072c <lfs_file_read_+0x28>
 801071e:	4b11      	ldr	r3, [pc, #68]	@ (8010764 <lfs_file_read_+0x60>)
 8010720:	4a11      	ldr	r2, [pc, #68]	@ (8010768 <lfs_file_read_+0x64>)
 8010722:	f640 51e2 	movw	r1, #3554	@ 0xde2
 8010726:	4811      	ldr	r0, [pc, #68]	@ (801076c <lfs_file_read_+0x68>)
 8010728:	f001 ff8a 	bl	8012640 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010734:	2b00      	cmp	r3, #0
 8010736:	d009      	beq.n	801074c <lfs_file_read_+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8010738:	68b9      	ldr	r1, [r7, #8]
 801073a:	68f8      	ldr	r0, [r7, #12]
 801073c:	f7ff fd9c 	bl	8010278 <lfs_file_flush>
 8010740:	6178      	str	r0, [r7, #20]
        if (err) {
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d001      	beq.n	801074c <lfs_file_read_+0x48>
            return err;
 8010748:	697b      	ldr	r3, [r7, #20]
 801074a:	e006      	b.n	801075a <lfs_file_read_+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	687a      	ldr	r2, [r7, #4]
 8010750:	68b9      	ldr	r1, [r7, #8]
 8010752:	68f8      	ldr	r0, [r7, #12]
 8010754:	f7ff ff04 	bl	8010560 <lfs_file_flushedread>
 8010758:	4603      	mov	r3, r0
}
 801075a:	4618      	mov	r0, r3
 801075c:	3718      	adds	r7, #24
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}
 8010762:	bf00      	nop
 8010764:	08013c04 	.word	0x08013c04
 8010768:	08014760 	.word	0x08014760
 801076c:	080138c0 	.word	0x080138c0

08010770 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8010770:	b5b0      	push	{r4, r5, r7, lr}
 8010772:	b090      	sub	sp, #64	@ 0x40
 8010774:	af04      	add	r7, sp, #16
 8010776:	60f8      	str	r0, [r7, #12]
 8010778:	60b9      	str	r1, [r7, #8]
 801077a:	607a      	str	r2, [r7, #4]
 801077c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t nsize = size;
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801078a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801078e:	2b00      	cmp	r3, #0
 8010790:	f000 80f4 	beq.w	801097c <lfs_file_flushedwrite+0x20c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801079a:	441a      	add	r2, r3
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107a0:	4619      	mov	r1, r3
 80107a2:	4610      	mov	r0, r2
 80107a4:	f7fa fed6 	bl	800b554 <lfs_max>
 80107a8:	4602      	mov	r2, r0
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 80107ae:	429a      	cmp	r2, r3
 80107b0:	f240 80e4 	bls.w	801097c <lfs_file_flushedwrite+0x20c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 80107b4:	68b9      	ldr	r1, [r7, #8]
 80107b6:	68f8      	ldr	r0, [r7, #12]
 80107b8:	f7ff fd3c 	bl	8010234 <lfs_file_outline>
 80107bc:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 80107be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	f000 80db 	beq.w	801097c <lfs_file_flushedwrite+0x20c>
            file->flags |= LFS_F_ERRED;
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107ca:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 80107d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107d4:	e0d7      	b.n	8010986 <lfs_file_flushedwrite+0x216>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d006      	beq.n	80107f0 <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80107ea:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 80107ec:	429a      	cmp	r2, r3
 80107ee:	d16d      	bne.n	80108cc <lfs_file_flushedwrite+0x15c>
            if (!(file->flags & LFS_F_INLINE)) {
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d159      	bne.n	80108b0 <lfs_file_flushedwrite+0x140>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010804:	2b00      	cmp	r3, #0
 8010806:	d12f      	bne.n	8010868 <lfs_file_flushedwrite+0xf8>
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801080c:	2b00      	cmp	r3, #0
 801080e:	d02b      	beq.n	8010868 <lfs_file_flushedwrite+0xf8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 801081a:	68bb      	ldr	r3, [r7, #8]
 801081c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 801081e:	68ba      	ldr	r2, [r7, #8]
 8010820:	6b52      	ldr	r2, [r2, #52]	@ 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8010822:	3a01      	subs	r2, #1
 8010824:	68b9      	ldr	r1, [r7, #8]
 8010826:	3138      	adds	r1, #56	@ 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8010828:	2000      	movs	r0, #0
 801082a:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801082c:	f107 0010 	add.w	r0, r7, #16
 8010830:	9003      	str	r0, [sp, #12]
 8010832:	9102      	str	r1, [sp, #8]
 8010834:	9201      	str	r2, [sp, #4]
 8010836:	9300      	str	r3, [sp, #0]
 8010838:	462b      	mov	r3, r5
 801083a:	4622      	mov	r2, r4
 801083c:	2100      	movs	r1, #0
 801083e:	68f8      	ldr	r0, [r7, #12]
 8010840:	f7ff f817 	bl	800f872 <lfs_ctz_find>
 8010844:	6238      	str	r0, [r7, #32]
                    if (err) {
 8010846:	6a3b      	ldr	r3, [r7, #32]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d007      	beq.n	801085c <lfs_file_flushedwrite+0xec>
                        file->flags |= LFS_F_ERRED;
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010850:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	631a      	str	r2, [r3, #48]	@ 0x30
                        return err;
 8010858:	6a3b      	ldr	r3, [r7, #32]
 801085a:	e094      	b.n	8010986 <lfs_file_flushedwrite+0x216>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 801085c:	68bb      	ldr	r3, [r7, #8]
 801085e:	3340      	adds	r3, #64	@ 0x40
 8010860:	4619      	mov	r1, r3
 8010862:	68f8      	ldr	r0, [r7, #12]
 8010864:	f7fa ff4b 	bl	800b6fe <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 8010868:	68f8      	ldr	r0, [r7, #12]
 801086a:	f7fb fe9c 	bl	800c5a6 <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8010874:	68fc      	ldr	r4, [r7, #12]
 8010876:	68bb      	ldr	r3, [r7, #8]
 8010878:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801087e:	68ba      	ldr	r2, [r7, #8]
 8010880:	3238      	adds	r2, #56	@ 0x38
 8010882:	68b9      	ldr	r1, [r7, #8]
 8010884:	313c      	adds	r1, #60	@ 0x3c
 8010886:	9102      	str	r1, [sp, #8]
 8010888:	9201      	str	r2, [sp, #4]
 801088a:	9300      	str	r3, [sp, #0]
 801088c:	462b      	mov	r3, r5
 801088e:	4622      	mov	r2, r4
 8010890:	4601      	mov	r1, r0
 8010892:	68f8      	ldr	r0, [r7, #12]
 8010894:	f7ff f858 	bl	800f948 <lfs_ctz_extend>
 8010898:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 801089a:	69fb      	ldr	r3, [r7, #28]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d00f      	beq.n	80108c0 <lfs_file_flushedwrite+0x150>
                    file->flags |= LFS_F_ERRED;
 80108a0:	68bb      	ldr	r3, [r7, #8]
 80108a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108a4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	631a      	str	r2, [r3, #48]	@ 0x30
                    return err;
 80108ac:	69fb      	ldr	r3, [r7, #28]
 80108ae:	e06a      	b.n	8010986 <lfs_file_flushedwrite+0x216>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	f06f 0201 	mvn.w	r2, #1
 80108b6:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_WRITING;
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108c4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80108d0:	69da      	ldr	r2, [r3, #28]
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108d6:	1ad3      	subs	r3, r2, r3
 80108d8:	4619      	mov	r1, r3
 80108da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80108dc:	f7fa fe4a 	bl	800b574 <lfs_min>
 80108e0:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80108e8:	68fc      	ldr	r4, [r7, #12]
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108ee:	68ba      	ldr	r2, [r7, #8]
 80108f0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80108f2:	69b9      	ldr	r1, [r7, #24]
 80108f4:	9103      	str	r1, [sp, #12]
 80108f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80108f8:	9102      	str	r1, [sp, #8]
 80108fa:	9201      	str	r2, [sp, #4]
 80108fc:	9300      	str	r3, [sp, #0]
 80108fe:	2301      	movs	r3, #1
 8010900:	4622      	mov	r2, r4
 8010902:	4601      	mov	r1, r0
 8010904:	68f8      	ldr	r0, [r7, #12]
 8010906:	f7fb f9a3 	bl	800bc50 <lfs_bd_prog>
 801090a:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 801090c:	697b      	ldr	r3, [r7, #20]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d01c      	beq.n	801094c <lfs_file_flushedwrite+0x1dc>
                if (err == LFS_ERR_CORRUPT) {
 8010912:	697b      	ldr	r3, [r7, #20]
 8010914:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8010918:	d007      	beq.n	801092a <lfs_file_flushedwrite+0x1ba>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801091e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8010922:	68bb      	ldr	r3, [r7, #8]
 8010924:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8010926:	697b      	ldr	r3, [r7, #20]
 8010928:	e02d      	b.n	8010986 <lfs_file_flushedwrite+0x216>
                    goto relocate;
 801092a:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 801092c:	68b9      	ldr	r1, [r7, #8]
 801092e:	68f8      	ldr	r0, [r7, #12]
 8010930:	f7ff fba6 	bl	8010080 <lfs_file_relocate>
 8010934:	6178      	str	r0, [r7, #20]
            if (err) {
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d0d2      	beq.n	80108e2 <lfs_file_flushedwrite+0x172>
                file->flags |= LFS_F_ERRED;
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010940:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	e01c      	b.n	8010986 <lfs_file_flushedwrite+0x216>
            break;
 801094c:	bf00      	nop
            }
        }

        file->pos += diff;
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010952:	69bb      	ldr	r3, [r7, #24]
 8010954:	441a      	add	r2, r3
 8010956:	68bb      	ldr	r3, [r7, #8]
 8010958:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801095e:	69bb      	ldr	r3, [r7, #24]
 8010960:	441a      	add	r2, r3
 8010962:	68bb      	ldr	r3, [r7, #8]
 8010964:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8010966:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010968:	69bb      	ldr	r3, [r7, #24]
 801096a:	4413      	add	r3, r2
 801096c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nsize -= diff;
 801096e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010970:	69bb      	ldr	r3, [r7, #24]
 8010972:	1ad3      	subs	r3, r2, r3
 8010974:	62bb      	str	r3, [r7, #40]	@ 0x28

        lfs_alloc_ckpoint(lfs);
 8010976:	68f8      	ldr	r0, [r7, #12]
 8010978:	f7fb fe15 	bl	800c5a6 <lfs_alloc_ckpoint>
    while (nsize > 0) {
 801097c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801097e:	2b00      	cmp	r3, #0
 8010980:	f47f af29 	bne.w	80107d6 <lfs_file_flushedwrite+0x66>
    }

    return size;
 8010984:	683b      	ldr	r3, [r7, #0]
}
 8010986:	4618      	mov	r0, r3
 8010988:	3730      	adds	r7, #48	@ 0x30
 801098a:	46bd      	mov	sp, r7
 801098c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08010990 <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8010990:	b580      	push	{r7, lr}
 8010992:	b08a      	sub	sp, #40	@ 0x28
 8010994:	af00      	add	r7, sp, #0
 8010996:	60f8      	str	r0, [r7, #12]
 8010998:	60b9      	str	r1, [r7, #8]
 801099a:	607a      	str	r2, [r7, #4]
 801099c:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109a2:	f003 0302 	and.w	r3, r3, #2
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d106      	bne.n	80109b8 <lfs_file_write_+0x28>
 80109aa:	4b38      	ldr	r3, [pc, #224]	@ (8010a8c <lfs_file_write_+0xfc>)
 80109ac:	4a38      	ldr	r2, [pc, #224]	@ (8010a90 <lfs_file_write_+0x100>)
 80109ae:	f640 6149 	movw	r1, #3657	@ 0xe49
 80109b2:	4838      	ldr	r0, [pc, #224]	@ (8010a94 <lfs_file_write_+0x104>)
 80109b4:	f001 fe44 	bl	8012640 <__assert_func>

    if (file->flags & LFS_F_READING) {
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d009      	beq.n	80109d8 <lfs_file_write_+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 80109c4:	68b9      	ldr	r1, [r7, #8]
 80109c6:	68f8      	ldr	r0, [r7, #12]
 80109c8:	f7ff fc56 	bl	8010278 <lfs_file_flush>
 80109cc:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 80109ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d001      	beq.n	80109d8 <lfs_file_write_+0x48>
            return err;
 80109d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109d6:	e055      	b.n	8010a84 <lfs_file_write_+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d009      	beq.n	80109f8 <lfs_file_write_+0x68>
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80109e8:	68bb      	ldr	r3, [r7, #8]
 80109ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109ec:	429a      	cmp	r2, r3
 80109ee:	d203      	bcs.n	80109f8 <lfs_file_write_+0x68>
        file->pos = file->ctz.size;
 80109f0:	68bb      	ldr	r3, [r7, #8]
 80109f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109f4:	68bb      	ldr	r3, [r7, #8]
 80109f6:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if (file->pos + size > lfs->file_max) {
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80109fc:	683b      	ldr	r3, [r7, #0]
 80109fe:	441a      	add	r2, r3
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d902      	bls.n	8010a0e <lfs_file_write_+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8010a08:	f06f 031a 	mvn.w	r3, #26
 8010a0c:	e03a      	b.n	8010a84 <lfs_file_write_+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8010a0e:	68bb      	ldr	r3, [r7, #8]
 8010a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d121      	bne.n	8010a5e <lfs_file_write_+0xce>
 8010a1a:	68bb      	ldr	r3, [r7, #8]
 8010a1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010a1e:	68bb      	ldr	r3, [r7, #8]
 8010a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a22:	429a      	cmp	r2, r3
 8010a24:	d91b      	bls.n	8010a5e <lfs_file_write_+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a2a:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	635a      	str	r2, [r3, #52]	@ 0x34

        while (file->pos < pos) {
 8010a34:	e00e      	b.n	8010a54 <lfs_file_write_+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8010a36:	2300      	movs	r3, #0
 8010a38:	75fb      	strb	r3, [r7, #23]
 8010a3a:	f107 0217 	add.w	r2, r7, #23
 8010a3e:	2301      	movs	r3, #1
 8010a40:	68b9      	ldr	r1, [r7, #8]
 8010a42:	68f8      	ldr	r0, [r7, #12]
 8010a44:	f7ff fe94 	bl	8010770 <lfs_file_flushedwrite>
 8010a48:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8010a4a:	69fb      	ldr	r3, [r7, #28]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	da01      	bge.n	8010a54 <lfs_file_write_+0xc4>
                return res;
 8010a50:	69fb      	ldr	r3, [r7, #28]
 8010a52:	e017      	b.n	8010a84 <lfs_file_write_+0xf4>
        while (file->pos < pos) {
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a58:	6a3a      	ldr	r2, [r7, #32]
 8010a5a:	429a      	cmp	r2, r3
 8010a5c:	d8eb      	bhi.n	8010a36 <lfs_file_write_+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	687a      	ldr	r2, [r7, #4]
 8010a62:	68b9      	ldr	r1, [r7, #8]
 8010a64:	68f8      	ldr	r0, [r7, #12]
 8010a66:	f7ff fe83 	bl	8010770 <lfs_file_flushedwrite>
 8010a6a:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8010a6c:	69bb      	ldr	r3, [r7, #24]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	da01      	bge.n	8010a76 <lfs_file_write_+0xe6>
        return nsize;
 8010a72:	69bb      	ldr	r3, [r7, #24]
 8010a74:	e006      	b.n	8010a84 <lfs_file_write_+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8010a76:	68bb      	ldr	r3, [r7, #8]
 8010a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a7a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8010a7e:	68bb      	ldr	r3, [r7, #8]
 8010a80:	631a      	str	r2, [r3, #48]	@ 0x30
    return nsize;
 8010a82:	69bb      	ldr	r3, [r7, #24]
}
 8010a84:	4618      	mov	r0, r3
 8010a86:	3728      	adds	r7, #40	@ 0x28
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}
 8010a8c:	08013c34 	.word	0x08013c34
 8010a90:	08014770 	.word	0x08014770
 8010a94:	080138c0 	.word	0x080138c0

08010a98 <lfs_remove_>:

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
}

#ifndef LFS_READONLY
static int lfs_remove_(lfs_t *lfs, const char *path) {
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b0a0      	sub	sp, #128	@ 0x80
 8010a9c:	af02      	add	r7, sp, #8
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	f001 fc3a 	bl	801231c <lfs_fs_forceconsistency>
 8010aa8:	6778      	str	r0, [r7, #116]	@ 0x74
    if (err) {
 8010aaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d001      	beq.n	8010ab4 <lfs_remove_+0x1c>
        return err;
 8010ab0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010ab2:	e0c4      	b.n	8010c3e <lfs_remove_+0x1a6>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8010ab4:	463a      	mov	r2, r7
 8010ab6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8010aba:	2300      	movs	r3, #0
 8010abc:	6878      	ldr	r0, [r7, #4]
 8010abe:	f7fd f925 	bl	800dd0c <lfs_dir_find>
 8010ac2:	6738      	str	r0, [r7, #112]	@ 0x70
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 8010ac4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	db09      	blt.n	8010ade <lfs_remove_+0x46>
 8010aca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7fb fb09 	bl	800c0e4 <lfs_tag_id>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	461a      	mov	r2, r3
 8010ad6:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8010ada:	429a      	cmp	r2, r3
 8010adc:	d107      	bne.n	8010aee <lfs_remove_+0x56>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 8010ade:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	da01      	bge.n	8010ae8 <lfs_remove_+0x50>
 8010ae4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010ae6:	e0aa      	b.n	8010c3e <lfs_remove_+0x1a6>
 8010ae8:	f06f 0315 	mvn.w	r3, #21
 8010aec:	e0a7      	b.n	8010c3e <lfs_remove_+0x1a6>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010af2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8010af4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010af6:	4618      	mov	r0, r3
 8010af8:	f7fb faca 	bl	800c090 <lfs_tag_type3>
 8010afc:	4603      	mov	r3, r0
 8010afe:	2b02      	cmp	r3, #2
 8010b00:	d14a      	bne.n	8010b98 <lfs_remove_+0x100>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8010b02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7fb faed 	bl	800c0e4 <lfs_tag_id>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8010b0e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010b12:	f043 0308 	orr.w	r3, r3, #8
 8010b16:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8010b1a:	f107 020c 	add.w	r2, r7, #12
 8010b1e:	9200      	str	r2, [sp, #0]
 8010b20:	4a49      	ldr	r2, [pc, #292]	@ (8010c48 <lfs_remove_+0x1b0>)
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f7fb ff54 	bl	800c9d0 <lfs_dir_get>
 8010b28:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (res < 0) {
 8010b2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	da01      	bge.n	8010b34 <lfs_remove_+0x9c>
            return (int)res;
 8010b30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b32:	e084      	b.n	8010c3e <lfs_remove_+0x1a6>
        }
        lfs_pair_fromle32(pair);
 8010b34:	f107 030c 	add.w	r3, r7, #12
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f7fb fa34 	bl	800bfa6 <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 8010b3e:	f107 020c 	add.w	r2, r7, #12
 8010b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010b46:	3308      	adds	r3, #8
 8010b48:	4619      	mov	r1, r3
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f7fd f846 	bl	800dbdc <lfs_dir_fetch>
 8010b50:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8010b52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d001      	beq.n	8010b5c <lfs_remove_+0xc4>
            return err;
 8010b58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010b5a:	e070      	b.n	8010c3e <lfs_remove_+0x1a6>
        }

        if (dir.m.count > 0 || dir.m.split) {
 8010b5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d103      	bne.n	8010b6c <lfs_remove_+0xd4>
 8010b64:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d002      	beq.n	8010b72 <lfs_remove_+0xda>
            return LFS_ERR_NOTEMPTY;
 8010b6c:	f06f 0326 	mvn.w	r3, #38	@ 0x26
 8010b70:	e065      	b.n	8010c3e <lfs_remove_+0x1a6>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 8010b72:	2101      	movs	r1, #1
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f001 f8af 	bl	8011cd8 <lfs_fs_preporphans>
 8010b7a:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8010b7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d001      	beq.n	8010b86 <lfs_remove_+0xee>
            return err;
 8010b82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010b84:	e05b      	b.n	8010c3e <lfs_remove_+0x1a6>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 8010b86:	2300      	movs	r3, #0
 8010b88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        dir.id = 0;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	853b      	strh	r3, [r7, #40]	@ 0x28
        lfs->mlist = &dir;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8010b96:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 8010b98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7fb faa2 	bl	800c0e4 <lfs_tag_id>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	029b      	lsls	r3, r3, #10
 8010ba4:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8010ba8:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8010bac:	61fb      	str	r3, [r7, #28]
 8010bae:	2300      	movs	r3, #0
 8010bb0:	623b      	str	r3, [r7, #32]
 8010bb2:	f107 021c 	add.w	r2, r7, #28
 8010bb6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8010bba:	2301      	movs	r3, #1
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f7fe fdfb 	bl	800f7b8 <lfs_dir_commit>
 8010bc2:	6778      	str	r0, [r7, #116]	@ 0x74
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 8010bc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d004      	beq.n	8010bd4 <lfs_remove_+0x13c>
        lfs->mlist = dir.next;
 8010bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	629a      	str	r2, [r3, #40]	@ 0x28
        return err;
 8010bd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010bd2:	e034      	b.n	8010c3e <lfs_remove_+0x1a6>
    }

    lfs->mlist = dir.next;
 8010bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8010bda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f7fb fa57 	bl	800c090 <lfs_tag_type3>
 8010be2:	4603      	mov	r3, r0
 8010be4:	2b02      	cmp	r3, #2
 8010be6:	d129      	bne.n	8010c3c <lfs_remove_+0x1a4>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 8010be8:	f04f 31ff 	mov.w	r1, #4294967295
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f001 f873 	bl	8011cd8 <lfs_fs_preporphans>
 8010bf2:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8010bf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d001      	beq.n	8010bfe <lfs_remove_+0x166>
            return err;
 8010bfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010bfc:	e01f      	b.n	8010c3e <lfs_remove_+0x1a6>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 8010bfe:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8010c02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010c06:	3308      	adds	r3, #8
 8010c08:	4619      	mov	r1, r3
 8010c0a:	6878      	ldr	r0, [r7, #4]
 8010c0c:	f000 ff60 	bl	8011ad0 <lfs_fs_pred>
 8010c10:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8010c12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d001      	beq.n	8010c1c <lfs_remove_+0x184>
            return err;
 8010c18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010c1a:	e010      	b.n	8010c3e <lfs_remove_+0x1a6>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 8010c1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010c20:	f103 0208 	add.w	r2, r3, #8
 8010c24:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8010c28:	4619      	mov	r1, r3
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	f7fd fc12 	bl	800e454 <lfs_dir_drop>
 8010c30:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8010c32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d001      	beq.n	8010c3c <lfs_remove_+0x1a4>
            return err;
 8010c38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010c3a:	e000      	b.n	8010c3e <lfs_remove_+0x1a6>
        }
    }

    return 0;
 8010c3c:	2300      	movs	r3, #0
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3778      	adds	r7, #120	@ 0x78
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}
 8010c46:	bf00      	nop
 8010c48:	700ffc00 	.word	0x700ffc00

08010c4c <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8010c4c:	b590      	push	{r4, r7, lr}
 8010c4e:	b08d      	sub	sp, #52	@ 0x34
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
 8010c54:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	683a      	ldr	r2, [r7, #0]
 8010c5a:	669a      	str	r2, [r3, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8010c5c:	683b      	ldr	r3, [r7, #0]
 8010c5e:	6a1a      	ldr	r2, [r3, #32]
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	66da      	str	r2, [r3, #108]	@ 0x6c
    int err = 0;
 8010c64:	2300      	movs	r3, #0
 8010c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // note the most common reason for this failure is a before-c99 compiler,
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // check that the required io functions are provided
    LFS_ASSERT(lfs->cfg->read != NULL);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010c6c:	685b      	ldr	r3, [r3, #4]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d106      	bne.n	8010c80 <lfs_init+0x34>
 8010c72:	4b98      	ldr	r3, [pc, #608]	@ (8010ed4 <lfs_init+0x288>)
 8010c74:	4a98      	ldr	r2, [pc, #608]	@ (8010ed8 <lfs_init+0x28c>)
 8010c76:	f241 0176 	movw	r1, #4214	@ 0x1076
 8010c7a:	4898      	ldr	r0, [pc, #608]	@ (8010edc <lfs_init+0x290>)
 8010c7c:	f001 fce0 	bl	8012640 <__assert_func>
#ifndef LFS_READONLY
    LFS_ASSERT(lfs->cfg->prog != NULL);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010c84:	689b      	ldr	r3, [r3, #8]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d106      	bne.n	8010c98 <lfs_init+0x4c>
 8010c8a:	4b95      	ldr	r3, [pc, #596]	@ (8010ee0 <lfs_init+0x294>)
 8010c8c:	4a92      	ldr	r2, [pc, #584]	@ (8010ed8 <lfs_init+0x28c>)
 8010c8e:	f241 0178 	movw	r1, #4216	@ 0x1078
 8010c92:	4892      	ldr	r0, [pc, #584]	@ (8010edc <lfs_init+0x290>)
 8010c94:	f001 fcd4 	bl	8012640 <__assert_func>
    LFS_ASSERT(lfs->cfg->erase != NULL);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010c9c:	68db      	ldr	r3, [r3, #12]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d106      	bne.n	8010cb0 <lfs_init+0x64>
 8010ca2:	4b90      	ldr	r3, [pc, #576]	@ (8010ee4 <lfs_init+0x298>)
 8010ca4:	4a8c      	ldr	r2, [pc, #560]	@ (8010ed8 <lfs_init+0x28c>)
 8010ca6:	f241 0179 	movw	r1, #4217	@ 0x1079
 8010caa:	488c      	ldr	r0, [pc, #560]	@ (8010edc <lfs_init+0x290>)
 8010cac:	f001 fcc8 	bl	8012640 <__assert_func>
    LFS_ASSERT(lfs->cfg->sync != NULL);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010cb4:	691b      	ldr	r3, [r3, #16]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d106      	bne.n	8010cc8 <lfs_init+0x7c>
 8010cba:	4b8b      	ldr	r3, [pc, #556]	@ (8010ee8 <lfs_init+0x29c>)
 8010cbc:	4a86      	ldr	r2, [pc, #536]	@ (8010ed8 <lfs_init+0x28c>)
 8010cbe:	f241 017a 	movw	r1, #4218	@ 0x107a
 8010cc2:	4886      	ldr	r0, [pc, #536]	@ (8010edc <lfs_init+0x290>)
 8010cc4:	f001 fcbc 	bl	8012640 <__assert_func>
#endif

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010ccc:	695b      	ldr	r3, [r3, #20]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d106      	bne.n	8010ce0 <lfs_init+0x94>
 8010cd2:	4b86      	ldr	r3, [pc, #536]	@ (8010eec <lfs_init+0x2a0>)
 8010cd4:	4a80      	ldr	r2, [pc, #512]	@ (8010ed8 <lfs_init+0x28c>)
 8010cd6:	f241 017f 	movw	r1, #4223	@ 0x107f
 8010cda:	4880      	ldr	r0, [pc, #512]	@ (8010edc <lfs_init+0x290>)
 8010cdc:	f001 fcb0 	bl	8012640 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010ce4:	699b      	ldr	r3, [r3, #24]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d106      	bne.n	8010cf8 <lfs_init+0xac>
 8010cea:	4b81      	ldr	r3, [pc, #516]	@ (8010ef0 <lfs_init+0x2a4>)
 8010cec:	4a7a      	ldr	r2, [pc, #488]	@ (8010ed8 <lfs_init+0x28c>)
 8010cee:	f44f 5184 	mov.w	r1, #4224	@ 0x1080
 8010cf2:	487a      	ldr	r0, [pc, #488]	@ (8010edc <lfs_init+0x290>)
 8010cf4:	f001 fca4 	bl	8012640 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d106      	bne.n	8010d10 <lfs_init+0xc4>
 8010d02:	4b7c      	ldr	r3, [pc, #496]	@ (8010ef4 <lfs_init+0x2a8>)
 8010d04:	4a74      	ldr	r2, [pc, #464]	@ (8010ed8 <lfs_init+0x28c>)
 8010d06:	f241 0181 	movw	r1, #4225	@ 0x1081
 8010d0a:	4874      	ldr	r0, [pc, #464]	@ (8010edc <lfs_init+0x290>)
 8010d0c:	f001 fc98 	bl	8012640 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d16:	687a      	ldr	r2, [r7, #4]
 8010d18:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8010d1a:	6952      	ldr	r2, [r2, #20]
 8010d1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d20:	fb01 f202 	mul.w	r2, r1, r2
 8010d24:	1a9b      	subs	r3, r3, r2
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d006      	beq.n	8010d38 <lfs_init+0xec>
 8010d2a:	4b73      	ldr	r3, [pc, #460]	@ (8010ef8 <lfs_init+0x2ac>)
 8010d2c:	4a6a      	ldr	r2, [pc, #424]	@ (8010ed8 <lfs_init+0x28c>)
 8010d2e:	f241 0185 	movw	r1, #4229	@ 0x1085
 8010d32:	486a      	ldr	r0, [pc, #424]	@ (8010edc <lfs_init+0x290>)
 8010d34:	f001 fc84 	bl	8012640 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d3e:	687a      	ldr	r2, [r7, #4]
 8010d40:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8010d42:	6992      	ldr	r2, [r2, #24]
 8010d44:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d48:	fb01 f202 	mul.w	r2, r1, r2
 8010d4c:	1a9b      	subs	r3, r3, r2
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d006      	beq.n	8010d60 <lfs_init+0x114>
 8010d52:	4b6a      	ldr	r3, [pc, #424]	@ (8010efc <lfs_init+0x2b0>)
 8010d54:	4a60      	ldr	r2, [pc, #384]	@ (8010ed8 <lfs_init+0x28c>)
 8010d56:	f241 0186 	movw	r1, #4230	@ 0x1086
 8010d5a:	4860      	ldr	r0, [pc, #384]	@ (8010edc <lfs_init+0x290>)
 8010d5c:	f001 fc70 	bl	8012640 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010d64:	69db      	ldr	r3, [r3, #28]
 8010d66:	687a      	ldr	r2, [r7, #4]
 8010d68:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8010d6a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8010d6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d70:	fb01 f202 	mul.w	r2, r1, r2
 8010d74:	1a9b      	subs	r3, r3, r2
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d006      	beq.n	8010d88 <lfs_init+0x13c>
 8010d7a:	4b61      	ldr	r3, [pc, #388]	@ (8010f00 <lfs_init+0x2b4>)
 8010d7c:	4a56      	ldr	r2, [pc, #344]	@ (8010ed8 <lfs_init+0x28c>)
 8010d7e:	f241 0187 	movw	r1, #4231	@ 0x1087
 8010d82:	4856      	ldr	r0, [pc, #344]	@ (8010edc <lfs_init+0x290>)
 8010d84:	f001 fc5c 	bl	8012640 <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010d8c:	69db      	ldr	r3, [r3, #28]
 8010d8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8010d90:	d806      	bhi.n	8010da0 <lfs_init+0x154>
 8010d92:	4b5c      	ldr	r3, [pc, #368]	@ (8010f04 <lfs_init+0x2b8>)
 8010d94:	4a50      	ldr	r2, [pc, #320]	@ (8010ed8 <lfs_init+0x28c>)
 8010d96:	f241 018a 	movw	r1, #4234	@ 0x108a
 8010d9a:	4850      	ldr	r0, [pc, #320]	@ (8010edc <lfs_init+0x290>)
 8010d9c:	f001 fc50 	bl	8012640 <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010da4:	69db      	ldr	r3, [r3, #28]
 8010da6:	3b08      	subs	r3, #8
 8010da8:	f04f 32ff 	mov.w	r2, #4294967295
 8010dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7fa fc16 	bl	800b5e2 <lfs_npw2>
 8010db6:	4603      	mov	r3, r0
 8010db8:	009a      	lsls	r2, r3, #2
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010dbe:	69db      	ldr	r3, [r3, #28]
 8010dc0:	429a      	cmp	r2, r3
 8010dc2:	d906      	bls.n	8010dd2 <lfs_init+0x186>
 8010dc4:	4b50      	ldr	r3, [pc, #320]	@ (8010f08 <lfs_init+0x2bc>)
 8010dc6:	4a44      	ldr	r2, [pc, #272]	@ (8010ed8 <lfs_init+0x28c>)
 8010dc8:	f241 018d 	movw	r1, #4237	@ 0x108d
 8010dcc:	4843      	ldr	r0, [pc, #268]	@ (8010edc <lfs_init+0x290>)
 8010dce:	f001 fc37 	bl	8012640 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d106      	bne.n	8010dea <lfs_init+0x19e>
 8010ddc:	4b4b      	ldr	r3, [pc, #300]	@ (8010f0c <lfs_init+0x2c0>)
 8010dde:	4a3e      	ldr	r2, [pc, #248]	@ (8010ed8 <lfs_init+0x28c>)
 8010de0:	f241 0196 	movw	r1, #4246	@ 0x1096
 8010de4:	483d      	ldr	r0, [pc, #244]	@ (8010edc <lfs_init+0x290>)
 8010de6:	f001 fc2b 	bl	8012640 <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d00f      	beq.n	8010e14 <lfs_init+0x1c8>
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010df8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010dfe:	69db      	ldr	r3, [r3, #28]
 8010e00:	085b      	lsrs	r3, r3, #1
 8010e02:	429a      	cmp	r2, r3
 8010e04:	d206      	bcs.n	8010e14 <lfs_init+0x1c8>
 8010e06:	4b42      	ldr	r3, [pc, #264]	@ (8010f10 <lfs_init+0x2c4>)
 8010e08:	4a33      	ldr	r2, [pc, #204]	@ (8010ed8 <lfs_init+0x28c>)
 8010e0a:	f241 019c 	movw	r1, #4252	@ 0x109c
 8010e0e:	4833      	ldr	r0, [pc, #204]	@ (8010edc <lfs_init+0x290>)
 8010e10:	f001 fc16 	bl	8012640 <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e1e:	d00e      	beq.n	8010e3e <lfs_init+0x1f2>
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e2a:	69db      	ldr	r3, [r3, #28]
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	d906      	bls.n	8010e3e <lfs_init+0x1f2>
 8010e30:	4b38      	ldr	r3, [pc, #224]	@ (8010f14 <lfs_init+0x2c8>)
 8010e32:	4a29      	ldr	r2, [pc, #164]	@ (8010ed8 <lfs_init+0x28c>)
 8010e34:	f241 019e 	movw	r1, #4254	@ 0x109e
 8010e38:	4828      	ldr	r0, [pc, #160]	@ (8010edc <lfs_init+0x290>)
 8010e3a:	f001 fc01 	bl	8012640 <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // check that metadata_max is a multiple of read_size and prog_size,
    // and a factor of the block_size
    LFS_ASSERT(!lfs->cfg->metadata_max
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d013      	beq.n	8010e70 <lfs_init+0x224>
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010e4e:	687a      	ldr	r2, [r7, #4]
 8010e50:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8010e52:	6952      	ldr	r2, [r2, #20]
 8010e54:	fbb3 f1f2 	udiv	r1, r3, r2
 8010e58:	fb01 f202 	mul.w	r2, r1, r2
 8010e5c:	1a9b      	subs	r3, r3, r2
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d006      	beq.n	8010e70 <lfs_init+0x224>
 8010e62:	4b2d      	ldr	r3, [pc, #180]	@ (8010f18 <lfs_init+0x2cc>)
 8010e64:	4a1c      	ldr	r2, [pc, #112]	@ (8010ed8 <lfs_init+0x28c>)
 8010e66:	f241 01a3 	movw	r1, #4259	@ 0x10a3
 8010e6a:	481c      	ldr	r0, [pc, #112]	@ (8010edc <lfs_init+0x290>)
 8010e6c:	f001 fbe8 	bl	8012640 <__assert_func>
            || lfs->cfg->metadata_max % lfs->cfg->read_size == 0);
    LFS_ASSERT(!lfs->cfg->metadata_max
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d013      	beq.n	8010ea2 <lfs_init+0x256>
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010e80:	687a      	ldr	r2, [r7, #4]
 8010e82:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8010e84:	6992      	ldr	r2, [r2, #24]
 8010e86:	fbb3 f1f2 	udiv	r1, r3, r2
 8010e8a:	fb01 f202 	mul.w	r2, r1, r2
 8010e8e:	1a9b      	subs	r3, r3, r2
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d006      	beq.n	8010ea2 <lfs_init+0x256>
 8010e94:	4b21      	ldr	r3, [pc, #132]	@ (8010f1c <lfs_init+0x2d0>)
 8010e96:	4a10      	ldr	r2, [pc, #64]	@ (8010ed8 <lfs_init+0x28c>)
 8010e98:	f241 01a5 	movw	r1, #4261	@ 0x10a5
 8010e9c:	480f      	ldr	r0, [pc, #60]	@ (8010edc <lfs_init+0x290>)
 8010e9e:	f001 fbcf 	bl	8012640 <__assert_func>
            || lfs->cfg->metadata_max % lfs->cfg->prog_size == 0);
    LFS_ASSERT(!lfs->cfg->metadata_max
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d03b      	beq.n	8010f24 <lfs_init+0x2d8>
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010eb0:	69db      	ldr	r3, [r3, #28]
 8010eb2:	687a      	ldr	r2, [r7, #4]
 8010eb4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8010eb6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8010eb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ebc:	fb01 f202 	mul.w	r2, r1, r2
 8010ec0:	1a9b      	subs	r3, r3, r2
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d02e      	beq.n	8010f24 <lfs_init+0x2d8>
 8010ec6:	4b16      	ldr	r3, [pc, #88]	@ (8010f20 <lfs_init+0x2d4>)
 8010ec8:	4a03      	ldr	r2, [pc, #12]	@ (8010ed8 <lfs_init+0x28c>)
 8010eca:	f241 01a7 	movw	r1, #4263	@ 0x10a7
 8010ece:	4803      	ldr	r0, [pc, #12]	@ (8010edc <lfs_init+0x290>)
 8010ed0:	f001 fbb6 	bl	8012640 <__assert_func>
 8010ed4:	08013c64 	.word	0x08013c64
 8010ed8:	08014780 	.word	0x08014780
 8010edc:	080138c0 	.word	0x080138c0
 8010ee0:	08013c84 	.word	0x08013c84
 8010ee4:	08013ca4 	.word	0x08013ca4
 8010ee8:	08013cc4 	.word	0x08013cc4
 8010eec:	08013ce4 	.word	0x08013ce4
 8010ef0:	08013d00 	.word	0x08013d00
 8010ef4:	08013d1c 	.word	0x08013d1c
 8010ef8:	08013d38 	.word	0x08013d38
 8010efc:	08013d68 	.word	0x08013d68
 8010f00:	08013d98 	.word	0x08013d98
 8010f04:	08013dcc 	.word	0x08013dcc
 8010f08:	08013de8 	.word	0x08013de8
 8010f0c:	08013e34 	.word	0x08013e34
 8010f10:	08013e50 	.word	0x08013e50
 8010f14:	08013ea4 	.word	0x08013ea4
 8010f18:	08013f04 	.word	0x08013f04
 8010f1c:	08013f54 	.word	0x08013f54
 8010f20:	08013fa4 	.word	0x08013fa4
            || lfs->cfg->block_size % lfs->cfg->metadata_max == 0);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d005      	beq.n	8010f3a <lfs_init+0x2ee>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	60da      	str	r2, [r3, #12]
 8010f38:	e010      	b.n	8010f5c <lfs_init+0x310>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7fa fbb6 	bl	800b6b2 <lfs_malloc>
 8010f46:	4602      	mov	r2, r0
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	68db      	ldr	r3, [r3, #12]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d103      	bne.n	8010f5c <lfs_init+0x310>
            err = LFS_ERR_NOMEM;
 8010f54:	f06f 030b 	mvn.w	r3, #11
 8010f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8010f5a:	e145      	b.n	80111e8 <lfs_init+0x59c>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d005      	beq.n	8010f72 <lfs_init+0x326>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	61da      	str	r2, [r3, #28]
 8010f70:	e010      	b.n	8010f94 <lfs_init+0x348>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f7fa fb9a 	bl	800b6b2 <lfs_malloc>
 8010f7e:	4602      	mov	r2, r0
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	69db      	ldr	r3, [r3, #28]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d103      	bne.n	8010f94 <lfs_init+0x348>
            err = LFS_ERR_NOMEM;
 8010f8c:	f06f 030b 	mvn.w	r3, #11
 8010f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8010f92:	e129      	b.n	80111e8 <lfs_init+0x59c>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	4619      	mov	r1, r3
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f7fa fbb0 	bl	800b6fe <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	3310      	adds	r3, #16
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	6878      	ldr	r0, [r7, #4]
 8010fa6:	f7fa fbaa 	bl	800b6fe <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d106      	bne.n	8010fc2 <lfs_init+0x376>
 8010fb4:	4b90      	ldr	r3, [pc, #576]	@ (80111f8 <lfs_init+0x5ac>)
 8010fb6:	4a91      	ldr	r2, [pc, #580]	@ (80111fc <lfs_init+0x5b0>)
 8010fb8:	f241 01c6 	movw	r1, #4294	@ 0x10c6
 8010fbc:	4890      	ldr	r0, [pc, #576]	@ (8011200 <lfs_init+0x5b4>)
 8010fbe:	f001 fb3f 	bl	8012640 <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d005      	beq.n	8010fd8 <lfs_init+0x38c>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010fd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	665a      	str	r2, [r3, #100]	@ 0x64
 8010fd6:	e010      	b.n	8010ffa <lfs_init+0x3ae>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fde:	4618      	mov	r0, r3
 8010fe0:	f7fa fb67 	bl	800b6b2 <lfs_malloc>
 8010fe4:	4602      	mov	r2, r0
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	665a      	str	r2, [r3, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d103      	bne.n	8010ffa <lfs_init+0x3ae>
            err = LFS_ERR_NOMEM;
 8010ff2:	f06f 030b 	mvn.w	r3, #11
 8010ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8010ff8:	e0f6      	b.n	80111e8 <lfs_init+0x59c>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011000:	2bff      	cmp	r3, #255	@ 0xff
 8011002:	d906      	bls.n	8011012 <lfs_init+0x3c6>
 8011004:	4b7f      	ldr	r3, [pc, #508]	@ (8011204 <lfs_init+0x5b8>)
 8011006:	4a7d      	ldr	r2, [pc, #500]	@ (80111fc <lfs_init+0x5b0>)
 8011008:	f241 01d2 	movw	r1, #4306	@ 0x10d2
 801100c:	487c      	ldr	r0, [pc, #496]	@ (8011200 <lfs_init+0x5b4>)
 801100e:	f001 fb17 	bl	8012640 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011016:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	671a      	str	r2, [r3, #112]	@ 0x70
    if (!lfs->name_max) {
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011020:	2b00      	cmp	r3, #0
 8011022:	d102      	bne.n	801102a <lfs_init+0x3de>
        lfs->name_max = LFS_NAME_MAX;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	22ff      	movs	r2, #255	@ 0xff
 8011028:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801102e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011030:	2b00      	cmp	r3, #0
 8011032:	da06      	bge.n	8011042 <lfs_init+0x3f6>
 8011034:	4b74      	ldr	r3, [pc, #464]	@ (8011208 <lfs_init+0x5bc>)
 8011036:	4a71      	ldr	r2, [pc, #452]	@ (80111fc <lfs_init+0x5b0>)
 8011038:	f241 01d8 	movw	r1, #4312	@ 0x10d8
 801103c:	4870      	ldr	r0, [pc, #448]	@ (8011200 <lfs_init+0x5b4>)
 801103e:	f001 faff 	bl	8012640 <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011046:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	675a      	str	r2, [r3, #116]	@ 0x74
    if (!lfs->file_max) {
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011050:	2b00      	cmp	r3, #0
 8011052:	d103      	bne.n	801105c <lfs_init+0x410>
        lfs->file_max = LFS_FILE_MAX;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801105a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011062:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8011066:	4293      	cmp	r3, r2
 8011068:	d906      	bls.n	8011078 <lfs_init+0x42c>
 801106a:	4b68      	ldr	r3, [pc, #416]	@ (801120c <lfs_init+0x5c0>)
 801106c:	4a63      	ldr	r2, [pc, #396]	@ (80111fc <lfs_init+0x5b0>)
 801106e:	f241 01de 	movw	r1, #4318	@ 0x10de
 8011072:	4863      	ldr	r0, [pc, #396]	@ (8011200 <lfs_init+0x5b4>)
 8011074:	f001 fae4 	bl	8012640 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801107c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	679a      	str	r2, [r3, #120]	@ 0x78
    if (!lfs->attr_max) {
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011086:	2b00      	cmp	r3, #0
 8011088:	d103      	bne.n	8011092 <lfs_init+0x446>
        lfs->attr_max = LFS_ATTR_MAX;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8011090:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011096:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801109c:	69db      	ldr	r3, [r3, #28]
 801109e:	429a      	cmp	r2, r3
 80110a0:	d906      	bls.n	80110b0 <lfs_init+0x464>
 80110a2:	4b5b      	ldr	r3, [pc, #364]	@ (8011210 <lfs_init+0x5c4>)
 80110a4:	4a55      	ldr	r2, [pc, #340]	@ (80111fc <lfs_init+0x5b0>)
 80110a6:	f241 01e4 	movw	r1, #4324	@ 0x10e4
 80110aa:	4855      	ldr	r0, [pc, #340]	@ (8011200 <lfs_init+0x5b4>)
 80110ac:	f001 fac8 	bl	8012640 <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80110b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80110b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110ba:	d00e      	beq.n	80110da <lfs_init+0x48e>
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80110c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80110c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110c8:	429a      	cmp	r2, r3
 80110ca:	d906      	bls.n	80110da <lfs_init+0x48e>
 80110cc:	4b51      	ldr	r3, [pc, #324]	@ (8011214 <lfs_init+0x5c8>)
 80110ce:	4a4b      	ldr	r2, [pc, #300]	@ (80111fc <lfs_init+0x5b0>)
 80110d0:	f241 01e6 	movw	r1, #4326	@ 0x10e6
 80110d4:	484a      	ldr	r0, [pc, #296]	@ (8011200 <lfs_init+0x5b4>)
 80110d6:	f001 fab3 	bl	8012640 <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80110de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80110e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110e4:	d00d      	beq.n	8011102 <lfs_init+0x4b6>
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80110ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80110f0:	429a      	cmp	r2, r3
 80110f2:	d906      	bls.n	8011102 <lfs_init+0x4b6>
 80110f4:	4b48      	ldr	r3, [pc, #288]	@ (8011218 <lfs_init+0x5cc>)
 80110f6:	4a41      	ldr	r2, [pc, #260]	@ (80111fc <lfs_init+0x5b0>)
 80110f8:	f241 01e8 	movw	r1, #4328	@ 0x10e8
 80110fc:	4840      	ldr	r0, [pc, #256]	@ (8011200 <lfs_init+0x5b4>)
 80110fe:	f001 fa9f 	bl	8012640 <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011108:	f1b3 3fff 	cmp.w	r3, #4294967295
 801110c:	d019      	beq.n	8011142 <lfs_init+0x4f6>
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011112:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801111a:	2b00      	cmp	r3, #0
 801111c:	d004      	beq.n	8011128 <lfs_init+0x4dc>
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011124:	08db      	lsrs	r3, r3, #3
 8011126:	e003      	b.n	8011130 <lfs_init+0x4e4>
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801112c:	69db      	ldr	r3, [r3, #28]
 801112e:	08db      	lsrs	r3, r3, #3
 8011130:	4293      	cmp	r3, r2
 8011132:	d206      	bcs.n	8011142 <lfs_init+0x4f6>
 8011134:	4b39      	ldr	r3, [pc, #228]	@ (801121c <lfs_init+0x5d0>)
 8011136:	4a31      	ldr	r2, [pc, #196]	@ (80111fc <lfs_init+0x5b0>)
 8011138:	f241 01ea 	movw	r1, #4330	@ 0x10ea
 801113c:	4830      	ldr	r0, [pc, #192]	@ (8011200 <lfs_init+0x5b4>)
 801113e:	f001 fa7f 	bl	8012640 <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011146:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	67da      	str	r2, [r3, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011154:	d103      	bne.n	801115e <lfs_init+0x512>
        lfs->inline_max = 0;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	2200      	movs	r2, #0
 801115a:	67da      	str	r2, [r3, #124]	@ 0x7c
 801115c:	e022      	b.n	80111a4 <lfs_init+0x558>
    } else if (lfs->inline_max == 0) {
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011162:	2b00      	cmp	r3, #0
 8011164:	d11e      	bne.n	80111a4 <lfs_init+0x558>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801116a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
        lfs->inline_max = lfs_min(
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
        lfs->inline_max = lfs_min(
 8011176:	2b00      	cmp	r3, #0
 8011178:	d004      	beq.n	8011184 <lfs_init+0x538>
                        ? lfs->cfg->metadata_max
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801117e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
        lfs->inline_max = lfs_min(
 8011180:	08db      	lsrs	r3, r3, #3
 8011182:	e003      	b.n	801118c <lfs_init+0x540>
                        : lfs->cfg->block_size)/8));
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011188:	69db      	ldr	r3, [r3, #28]
        lfs->inline_max = lfs_min(
 801118a:	08db      	lsrs	r3, r3, #3
 801118c:	4619      	mov	r1, r3
 801118e:	4610      	mov	r0, r2
 8011190:	f7fa f9f0 	bl	800b574 <lfs_min>
 8011194:	4603      	mov	r3, r0
 8011196:	4619      	mov	r1, r3
 8011198:	4620      	mov	r0, r4
 801119a:	f7fa f9eb 	bl	800b574 <lfs_min>
 801119e:	4602      	mov	r2, r0
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f04f 32ff 	mov.w	r2, #4294967295
 80111aa:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f04f 32ff 	mov.w	r2, #4294967295
 80111b2:	625a      	str	r2, [r3, #36]	@ 0x24
    lfs->mlist = NULL;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2200      	movs	r2, #0
 80111b8:	629a      	str	r2, [r3, #40]	@ 0x28
    lfs->seed = 0;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2200      	movs	r2, #0
 80111be:	62da      	str	r2, [r3, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	333c      	adds	r3, #60	@ 0x3c
 80111c4:	2200      	movs	r2, #0
 80111c6:	601a      	str	r2, [r3, #0]
 80111c8:	605a      	str	r2, [r3, #4]
 80111ca:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	3330      	adds	r3, #48	@ 0x30
 80111d0:	2200      	movs	r2, #0
 80111d2:	601a      	str	r2, [r3, #0]
 80111d4:	605a      	str	r2, [r3, #4]
 80111d6:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	3348      	adds	r3, #72	@ 0x48
 80111dc:	2200      	movs	r2, #0
 80111de:	601a      	str	r2, [r3, #0]
 80111e0:	605a      	str	r2, [r3, #4]
 80111e2:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 80111e4:	2300      	movs	r3, #0
 80111e6:	e003      	b.n	80111f0 <lfs_init+0x5a4>

cleanup:
    lfs_deinit(lfs);
 80111e8:	6878      	ldr	r0, [r7, #4]
 80111ea:	f000 f819 	bl	8011220 <lfs_deinit>
    return err;
 80111ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80111f0:	4618      	mov	r0, r3
 80111f2:	3734      	adds	r7, #52	@ 0x34
 80111f4:	46bd      	mov	sp, r7
 80111f6:	bd90      	pop	{r4, r7, pc}
 80111f8:	08013ff4 	.word	0x08013ff4
 80111fc:	08014780 	.word	0x08014780
 8011200:	080138c0 	.word	0x080138c0
 8011204:	08014014 	.word	0x08014014
 8011208:	08014030 	.word	0x08014030
 801120c:	08014054 	.word	0x08014054
 8011210:	08014070 	.word	0x08014070
 8011214:	080140a0 	.word	0x080140a0
 8011218:	080140f8 	.word	0x080140f8
 801121c:	08014148 	.word	0x08014148

08011220 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8011220:	b580      	push	{r7, lr}
 8011222:	b082      	sub	sp, #8
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801122c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801122e:	2b00      	cmp	r3, #0
 8011230:	d104      	bne.n	801123c <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	68db      	ldr	r3, [r3, #12]
 8011236:	4618      	mov	r0, r3
 8011238:	f7fa fa47 	bl	800b6ca <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011242:	2b00      	cmp	r3, #0
 8011244:	d104      	bne.n	8011250 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	69db      	ldr	r3, [r3, #28]
 801124a:	4618      	mov	r0, r3
 801124c:	f7fa fa3d 	bl	800b6ca <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011256:	2b00      	cmp	r3, #0
 8011258:	d104      	bne.n	8011264 <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801125e:	4618      	mov	r0, r3
 8011260:	f7fa fa33 	bl	800b6ca <lfs_free>
    }

    return 0;
 8011264:	2300      	movs	r3, #0
}
 8011266:	4618      	mov	r0, r3
 8011268:	3708      	adds	r7, #8
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
	...

08011270 <lfs_format_>:



#ifndef LFS_READONLY
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 8011270:	b580      	push	{r7, lr}
 8011272:	b0a0      	sub	sp, #128	@ 0x80
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
 8011278:	6039      	str	r1, [r7, #0]
    int err = 0;
 801127a:	2300      	movs	r3, #0
 801127c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    {
        err = lfs_init(lfs, cfg);
 801127e:	6839      	ldr	r1, [r7, #0]
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f7ff fce3 	bl	8010c4c <lfs_init>
 8011286:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8011288:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801128a:	2b00      	cmp	r3, #0
 801128c:	d001      	beq.n	8011292 <lfs_format_+0x22>
            return err;
 801128e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011290:	e08d      	b.n	80113ae <lfs_format_+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	6a1b      	ldr	r3, [r3, #32]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d106      	bne.n	80112a8 <lfs_format_+0x38>
 801129a:	4b47      	ldr	r3, [pc, #284]	@ (80113b8 <lfs_format_+0x148>)
 801129c:	4a47      	ldr	r2, [pc, #284]	@ (80113bc <lfs_format_+0x14c>)
 801129e:	f241 112a 	movw	r1, #4394	@ 0x112a
 80112a2:	4847      	ldr	r0, [pc, #284]	@ (80113c0 <lfs_format_+0x150>)
 80112a4:	f001 f9cc 	bl	8012640 <__assert_func>

        // create free lookahead
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80112b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112b2:	461a      	mov	r2, r3
 80112b4:	2100      	movs	r1, #0
 80112b6:	f001 fbd8 	bl	8012a6a <memset>
        lfs->lookahead.start = 0;
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	2200      	movs	r2, #0
 80112be:	655a      	str	r2, [r3, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80112c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112c6:	00da      	lsls	r2, r3, #3
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80112cc:	4619      	mov	r1, r3
 80112ce:	4610      	mov	r0, r2
 80112d0:	f7fa f950 	bl	800b574 <lfs_min>
 80112d4:	4602      	mov	r2, r0
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	659a      	str	r2, [r3, #88]	@ 0x58
                lfs->block_count);
        lfs->lookahead.next = 0;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	2200      	movs	r2, #0
 80112de:	65da      	str	r2, [r3, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	f7fb f960 	bl	800c5a6 <lfs_alloc_ckpoint>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 80112e6:	f107 030c 	add.w	r3, r7, #12
 80112ea:	4619      	mov	r1, r3
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f7fd f837 	bl	800e360 <lfs_dir_alloc>
 80112f2:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 80112f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d150      	bne.n	801139c <lfs_format_+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 80112fa:	6878      	ldr	r0, [r7, #4]
 80112fc:	f7fb f92a 	bl	800c554 <lfs_fs_disk_version>
 8011300:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 8011302:	667b      	str	r3, [r7, #100]	@ 0x64
            .block_size  = lfs->cfg->block_size,
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011308:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 801130a:	66bb      	str	r3, [r7, #104]	@ 0x68
            .block_count = lfs->block_count,
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 8011310:	66fb      	str	r3, [r7, #108]	@ 0x6c
            .name_max    = lfs->name_max,
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
        lfs_superblock_t superblock = {
 8011316:	673b      	str	r3, [r7, #112]	@ 0x70
            .file_max    = lfs->file_max,
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
        lfs_superblock_t superblock = {
 801131c:	677b      	str	r3, [r7, #116]	@ 0x74
            .attr_max    = lfs->attr_max,
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
        lfs_superblock_t superblock = {
 8011322:	67bb      	str	r3, [r7, #120]	@ 0x78
        };

        lfs_superblock_tole32(&superblock);
 8011324:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8011328:	4618      	mov	r0, r3
 801132a:	f7fb f889 	bl	800c440 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801132e:	4b25      	ldr	r3, [pc, #148]	@ (80113c4 <lfs_format_+0x154>)
 8011330:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011332:	2300      	movs	r3, #0
 8011334:	653b      	str	r3, [r7, #80]	@ 0x50
 8011336:	4b24      	ldr	r3, [pc, #144]	@ (80113c8 <lfs_format_+0x158>)
 8011338:	657b      	str	r3, [r7, #84]	@ 0x54
 801133a:	4b24      	ldr	r3, [pc, #144]	@ (80113cc <lfs_format_+0x15c>)
 801133c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801133e:	4b24      	ldr	r3, [pc, #144]	@ (80113d0 <lfs_format_+0x160>)
 8011340:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011342:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8011346:	663b      	str	r3, [r7, #96]	@ 0x60
 8011348:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801134c:	f107 010c 	add.w	r1, r7, #12
 8011350:	2303      	movs	r3, #3
 8011352:	6878      	ldr	r0, [r7, #4]
 8011354:	f7fe fa30 	bl	800f7b8 <lfs_dir_commit>
 8011358:	67f8      	str	r0, [r7, #124]	@ 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 801135a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801135c:	2b00      	cmp	r3, #0
 801135e:	d11f      	bne.n	80113a0 <lfs_format_+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8011360:	2300      	movs	r3, #0
 8011362:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8011366:	f107 010c 	add.w	r1, r7, #12
 801136a:	2300      	movs	r3, #0
 801136c:	2200      	movs	r2, #0
 801136e:	6878      	ldr	r0, [r7, #4]
 8011370:	f7fe fa22 	bl	800f7b8 <lfs_dir_commit>
 8011374:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8011376:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011378:	2b00      	cmp	r3, #0
 801137a:	d113      	bne.n	80113a4 <lfs_format_+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 801137c:	2300      	movs	r3, #0
 801137e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011380:	2301      	movs	r3, #1
 8011382:	633b      	str	r3, [r7, #48]	@ 0x30
 8011384:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8011388:	f107 030c 	add.w	r3, r7, #12
 801138c:	4619      	mov	r1, r3
 801138e:	6878      	ldr	r0, [r7, #4]
 8011390:	f7fc fc24 	bl	800dbdc <lfs_dir_fetch>
 8011394:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8011396:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011398:	2b00      	cmp	r3, #0
 801139a:	e004      	b.n	80113a6 <lfs_format_+0x136>
            goto cleanup;
 801139c:	bf00      	nop
 801139e:	e002      	b.n	80113a6 <lfs_format_+0x136>
            goto cleanup;
 80113a0:	bf00      	nop
 80113a2:	e000      	b.n	80113a6 <lfs_format_+0x136>
            goto cleanup;
 80113a4:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 80113a6:	6878      	ldr	r0, [r7, #4]
 80113a8:	f7ff ff3a 	bl	8011220 <lfs_deinit>
    return err;
 80113ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c

}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3780      	adds	r7, #128	@ 0x80
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}
 80113b6:	bf00      	nop
 80113b8:	080141d8 	.word	0x080141d8
 80113bc:	0801478c 	.word	0x0801478c
 80113c0:	080138c0 	.word	0x080138c0
 80113c4:	40100000 	.word	0x40100000
 80113c8:	0ff00008 	.word	0x0ff00008
 80113cc:	080141f0 	.word	0x080141f0
 80113d0:	20100018 	.word	0x20100018

080113d4 <lfs_tortoise_detectcycles>:
    lfs_size_t i;
    lfs_size_t period;
};

static int lfs_tortoise_detectcycles(
    const lfs_mdir_t *dir, struct lfs_tortoise_t *tortoise) {
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b082      	sub	sp, #8
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
 80113dc:	6039      	str	r1, [r7, #0]
    // detect cycles with Brent's algorithm
    if (lfs_pair_issync(dir->tail, tortoise->pair)) {
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	3318      	adds	r3, #24
 80113e2:	683a      	ldr	r2, [r7, #0]
 80113e4:	4611      	mov	r1, r2
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7fa fdb0 	bl	800bf4c <lfs_pair_issync>
 80113ec:	4603      	mov	r3, r0
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d009      	beq.n	8011406 <lfs_tortoise_detectcycles+0x32>
        LFS_WARN("Cycle detected in tail list");
 80113f2:	4b15      	ldr	r3, [pc, #84]	@ (8011448 <lfs_tortoise_detectcycles+0x74>)
 80113f4:	f241 126f 	movw	r2, #4463	@ 0x116f
 80113f8:	4914      	ldr	r1, [pc, #80]	@ (801144c <lfs_tortoise_detectcycles+0x78>)
 80113fa:	4815      	ldr	r0, [pc, #84]	@ (8011450 <lfs_tortoise_detectcycles+0x7c>)
 80113fc:	f001 fad0 	bl	80129a0 <iprintf>
        return LFS_ERR_CORRUPT;
 8011400:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8011404:	e01b      	b.n	801143e <lfs_tortoise_detectcycles+0x6a>
    }
    if (tortoise->i == tortoise->period) {
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	689a      	ldr	r2, [r3, #8]
 801140a:	683b      	ldr	r3, [r7, #0]
 801140c:	68db      	ldr	r3, [r3, #12]
 801140e:	429a      	cmp	r2, r3
 8011410:	d10f      	bne.n	8011432 <lfs_tortoise_detectcycles+0x5e>
        tortoise->pair[0] = dir->tail[0];
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	699a      	ldr	r2, [r3, #24]
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	601a      	str	r2, [r3, #0]
        tortoise->pair[1] = dir->tail[1];
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	69da      	ldr	r2, [r3, #28]
 801141e:	683b      	ldr	r3, [r7, #0]
 8011420:	605a      	str	r2, [r3, #4]
        tortoise->i = 0;
 8011422:	683b      	ldr	r3, [r7, #0]
 8011424:	2200      	movs	r2, #0
 8011426:	609a      	str	r2, [r3, #8]
        tortoise->period *= 2;
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	68db      	ldr	r3, [r3, #12]
 801142c:	005a      	lsls	r2, r3, #1
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	60da      	str	r2, [r3, #12]
    }
    tortoise->i += 1;
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	689b      	ldr	r3, [r3, #8]
 8011436:	1c5a      	adds	r2, r3, #1
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	609a      	str	r2, [r3, #8]

    return LFS_ERR_OK;
 801143c:	2300      	movs	r3, #0
}
 801143e:	4618      	mov	r0, r3
 8011440:	3708      	adds	r7, #8
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}
 8011446:	bf00      	nop
 8011448:	080139e0 	.word	0x080139e0
 801144c:	080138c0 	.word	0x080138c0
 8011450:	080141fc 	.word	0x080141fc

08011454 <lfs_mount_>:

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 8011454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011456:	b0a1      	sub	sp, #132	@ 0x84
 8011458:	af04      	add	r7, sp, #16
 801145a:	6078      	str	r0, [r7, #4]
 801145c:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 801145e:	6839      	ldr	r1, [r7, #0]
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f7ff fbf3 	bl	8010c4c <lfs_init>
 8011466:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (err) {
 8011468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801146a:	2b00      	cmp	r3, #0
 801146c:	d001      	beq.n	8011472 <lfs_mount_+0x1e>
        return err;
 801146e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011470:	e1e5      	b.n	801183e <lfs_mount_+0x3ea>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8011472:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8011476:	2220      	movs	r2, #32
 8011478:	2100      	movs	r1, #0
 801147a:	4618      	mov	r0, r3
 801147c:	f001 faf5 	bl	8012a6a <memset>
 8011480:	2301      	movs	r3, #1
 8011482:	65fb      	str	r3, [r7, #92]	@ 0x5c
    struct lfs_tortoise_t tortoise = {
 8011484:	4ba0      	ldr	r3, [pc, #640]	@ (8011708 <lfs_mount_+0x2b4>)
 8011486:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 801148a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801148c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    while (!lfs_pair_isnull(dir.tail)) {
 8011490:	e17f      	b.n	8011792 <lfs_mount_+0x33e>
        err = lfs_tortoise_detectcycles(&dir, &tortoise);
 8011492:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011496:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801149a:	4611      	mov	r1, r2
 801149c:	4618      	mov	r0, r3
 801149e:	f7ff ff99 	bl	80113d4 <lfs_tortoise_detectcycles>
 80114a2:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (err < 0) {
 80114a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	f2c0 81c2 	blt.w	8011830 <lfs_mount_+0x3dc>
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80114b0:	4b96      	ldr	r3, [pc, #600]	@ (801170c <lfs_mount_+0x2b8>)
 80114b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80114b4:	2308      	movs	r3, #8
 80114b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 80114b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80114bc:	f103 0218 	add.w	r2, r3, #24
 80114c0:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80114c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80114c8:	9303      	str	r3, [sp, #12]
 80114ca:	4b91      	ldr	r3, [pc, #580]	@ (8011710 <lfs_mount_+0x2bc>)
 80114cc:	9302      	str	r3, [sp, #8]
 80114ce:	2300      	movs	r3, #0
 80114d0:	9301      	str	r3, [sp, #4]
 80114d2:	4b90      	ldr	r3, [pc, #576]	@ (8011714 <lfs_mount_+0x2c0>)
 80114d4:	9300      	str	r3, [sp, #0]
 80114d6:	4b90      	ldr	r3, [pc, #576]	@ (8011718 <lfs_mount_+0x2c4>)
 80114d8:	6878      	ldr	r0, [r7, #4]
 80114da:	f7fb ffaf 	bl	800d43c <lfs_dir_fetchmatch>
 80114de:	6678      	str	r0, [r7, #100]	@ 0x64
                    lfs, "littlefs", 8});
        if (tag < 0) {
 80114e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	da02      	bge.n	80114ec <lfs_mount_+0x98>
            err = tag;
 80114e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80114e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 80114ea:	e1a4      	b.n	8011836 <lfs_mount_+0x3e2>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 80114ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	f000 8142 	beq.w	8011778 <lfs_mount_+0x324>
 80114f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80114f6:	4618      	mov	r0, r3
 80114f8:	f7fa fd97 	bl	800c02a <lfs_tag_isdelete>
 80114fc:	4603      	mov	r3, r0
 80114fe:	f083 0301 	eor.w	r3, r3, #1
 8011502:	b2db      	uxtb	r3, r3
 8011504:	2b00      	cmp	r3, #0
 8011506:	f000 8137 	beq.w	8011778 <lfs_mount_+0x324>
            // update root
            lfs->root[0] = dir.pair[0];
 801150a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8011510:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	625a      	str	r2, [r3, #36]	@ 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8011516:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801151a:	f107 030c 	add.w	r3, r7, #12
 801151e:	9300      	str	r3, [sp, #0]
 8011520:	4b7e      	ldr	r3, [pc, #504]	@ (801171c <lfs_mount_+0x2c8>)
 8011522:	4a7d      	ldr	r2, [pc, #500]	@ (8011718 <lfs_mount_+0x2c4>)
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	f7fb fa53 	bl	800c9d0 <lfs_dir_get>
 801152a:	6678      	str	r0, [r7, #100]	@ 0x64
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 801152c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801152e:	2b00      	cmp	r3, #0
 8011530:	da02      	bge.n	8011538 <lfs_mount_+0xe4>
                err = tag;
 8011532:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011534:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8011536:	e11e      	b.n	8011776 <lfs_mount_+0x322>
            }
            lfs_superblock_fromle32(&superblock);
 8011538:	f107 030c 	add.w	r3, r7, #12
 801153c:	4618      	mov	r0, r3
 801153e:	f7fa ff47 	bl	800c3d0 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	0c1b      	lsrs	r3, r3, #16
 8011546:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
            if (major_version != lfs_fs_disk_version_major(lfs)
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	f7fb f80d 	bl	800c570 <lfs_fs_disk_version_major>
 8011556:	4603      	mov	r3, r0
 8011558:	461a      	mov	r2, r3
 801155a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 801155e:	4293      	cmp	r3, r2
 8011560:	d108      	bne.n	8011574 <lfs_mount_+0x120>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 8011562:	6878      	ldr	r0, [r7, #4]
 8011564:	f7fb f812 	bl	800c58c <lfs_fs_disk_version_minor>
 8011568:	4603      	mov	r3, r0
 801156a:	461a      	mov	r2, r3
 801156c:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8011570:	4293      	cmp	r3, r2
 8011572:	d91d      	bls.n	80115b0 <lfs_mount_+0x15c>
                LFS_ERROR("Invalid version "
 8011574:	f8b7 5062 	ldrh.w	r5, [r7, #98]	@ 0x62
 8011578:	f8b7 4060 	ldrh.w	r4, [r7, #96]	@ 0x60
 801157c:	6878      	ldr	r0, [r7, #4]
 801157e:	f7fa fff7 	bl	800c570 <lfs_fs_disk_version_major>
 8011582:	4603      	mov	r3, r0
 8011584:	461e      	mov	r6, r3
 8011586:	6878      	ldr	r0, [r7, #4]
 8011588:	f7fb f800 	bl	800c58c <lfs_fs_disk_version_minor>
 801158c:	4603      	mov	r3, r0
 801158e:	461a      	mov	r2, r3
 8011590:	4b63      	ldr	r3, [pc, #396]	@ (8011720 <lfs_mount_+0x2cc>)
 8011592:	9303      	str	r3, [sp, #12]
 8011594:	9202      	str	r2, [sp, #8]
 8011596:	9601      	str	r6, [sp, #4]
 8011598:	9400      	str	r4, [sp, #0]
 801159a:	462b      	mov	r3, r5
 801159c:	f241 12b2 	movw	r2, #4530	@ 0x11b2
 80115a0:	4960      	ldr	r1, [pc, #384]	@ (8011724 <lfs_mount_+0x2d0>)
 80115a2:	4861      	ldr	r0, [pc, #388]	@ (8011728 <lfs_mount_+0x2d4>)
 80115a4:	f001 f9fc 	bl	80129a0 <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 80115a8:	f06f 0315 	mvn.w	r3, #21
 80115ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 80115ae:	e0e2      	b.n	8011776 <lfs_mount_+0x322>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            bool needssuperblock = false;
 80115b0:	2300      	movs	r3, #0
 80115b2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 80115b6:	6878      	ldr	r0, [r7, #4]
 80115b8:	f7fa ffe8 	bl	800c58c <lfs_fs_disk_version_minor>
 80115bc:	4603      	mov	r3, r0
 80115be:	461a      	mov	r2, r3
 80115c0:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80115c4:	4293      	cmp	r3, r2
 80115c6:	d21c      	bcs.n	8011602 <lfs_mount_+0x1ae>
                LFS_DEBUG("Found older minor version "
 80115c8:	f8b7 5062 	ldrh.w	r5, [r7, #98]	@ 0x62
 80115cc:	f8b7 4060 	ldrh.w	r4, [r7, #96]	@ 0x60
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	f7fa ffcd 	bl	800c570 <lfs_fs_disk_version_major>
 80115d6:	4603      	mov	r3, r0
 80115d8:	461e      	mov	r6, r3
 80115da:	6878      	ldr	r0, [r7, #4]
 80115dc:	f7fa ffd6 	bl	800c58c <lfs_fs_disk_version_minor>
 80115e0:	4603      	mov	r3, r0
 80115e2:	461a      	mov	r2, r3
 80115e4:	4b4e      	ldr	r3, [pc, #312]	@ (8011720 <lfs_mount_+0x2cc>)
 80115e6:	9303      	str	r3, [sp, #12]
 80115e8:	9202      	str	r2, [sp, #8]
 80115ea:	9601      	str	r6, [sp, #4]
 80115ec:	9400      	str	r4, [sp, #0]
 80115ee:	462b      	mov	r3, r5
 80115f0:	f241 12c1 	movw	r2, #4545	@ 0x11c1
 80115f4:	494b      	ldr	r1, [pc, #300]	@ (8011724 <lfs_mount_+0x2d0>)
 80115f6:	484d      	ldr	r0, [pc, #308]	@ (801172c <lfs_mount_+0x2d8>)
 80115f8:	f001 f9d2 	bl	80129a0 <iprintf>
                        "v%"PRIu16".%"PRIu16" < v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                needssuperblock = true;
 80115fc:	2301      	movs	r3, #1
 80115fe:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
            }
            // note this bit is reserved on disk, so fetching more gstate
            // will not interfere here
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 8011602:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8011606:	4619      	mov	r1, r3
 8011608:	6878      	ldr	r0, [r7, #4]
 801160a:	f000 fb4f 	bl	8011cac <lfs_fs_prepsuperblock>

            // check superblock configuration
            if (superblock.name_max) {
 801160e:	69bb      	ldr	r3, [r7, #24]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d018      	beq.n	8011646 <lfs_mount_+0x1f2>
                if (superblock.name_max > lfs->name_max) {
 8011614:	69ba      	ldr	r2, [r7, #24]
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801161a:	429a      	cmp	r2, r3
 801161c:	d910      	bls.n	8011640 <lfs_mount_+0x1ec>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 801161e:	69ba      	ldr	r2, [r7, #24]
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011624:	493e      	ldr	r1, [pc, #248]	@ (8011720 <lfs_mount_+0x2cc>)
 8011626:	9101      	str	r1, [sp, #4]
 8011628:	9300      	str	r3, [sp, #0]
 801162a:	4613      	mov	r3, r2
 801162c:	f241 12d0 	movw	r2, #4560	@ 0x11d0
 8011630:	493c      	ldr	r1, [pc, #240]	@ (8011724 <lfs_mount_+0x2d0>)
 8011632:	483f      	ldr	r0, [pc, #252]	@ (8011730 <lfs_mount_+0x2dc>)
 8011634:	f001 f9b4 	bl	80129a0 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8011638:	f06f 0315 	mvn.w	r3, #21
 801163c:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 801163e:	e09a      	b.n	8011776 <lfs_mount_+0x322>
                }

                lfs->name_max = superblock.name_max;
 8011640:	69ba      	ldr	r2, [r7, #24]
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            if (superblock.file_max) {
 8011646:	69fb      	ldr	r3, [r7, #28]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d018      	beq.n	801167e <lfs_mount_+0x22a>
                if (superblock.file_max > lfs->file_max) {
 801164c:	69fa      	ldr	r2, [r7, #28]
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011652:	429a      	cmp	r2, r3
 8011654:	d910      	bls.n	8011678 <lfs_mount_+0x224>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8011656:	69fa      	ldr	r2, [r7, #28]
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801165c:	4930      	ldr	r1, [pc, #192]	@ (8011720 <lfs_mount_+0x2cc>)
 801165e:	9101      	str	r1, [sp, #4]
 8011660:	9300      	str	r3, [sp, #0]
 8011662:	4613      	mov	r3, r2
 8011664:	f241 12db 	movw	r2, #4571	@ 0x11db
 8011668:	492e      	ldr	r1, [pc, #184]	@ (8011724 <lfs_mount_+0x2d0>)
 801166a:	4832      	ldr	r0, [pc, #200]	@ (8011734 <lfs_mount_+0x2e0>)
 801166c:	f001 f998 	bl	80129a0 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8011670:	f06f 0315 	mvn.w	r3, #21
 8011674:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8011676:	e07e      	b.n	8011776 <lfs_mount_+0x322>
                }

                lfs->file_max = superblock.file_max;
 8011678:	69fa      	ldr	r2, [r7, #28]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            if (superblock.attr_max) {
 801167e:	6a3b      	ldr	r3, [r7, #32]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d023      	beq.n	80116cc <lfs_mount_+0x278>
                if (superblock.attr_max > lfs->attr_max) {
 8011684:	6a3a      	ldr	r2, [r7, #32]
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801168a:	429a      	cmp	r2, r3
 801168c:	d910      	bls.n	80116b0 <lfs_mount_+0x25c>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 801168e:	6a3a      	ldr	r2, [r7, #32]
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011694:	4922      	ldr	r1, [pc, #136]	@ (8011720 <lfs_mount_+0x2cc>)
 8011696:	9101      	str	r1, [sp, #4]
 8011698:	9300      	str	r3, [sp, #0]
 801169a:	4613      	mov	r3, r2
 801169c:	f241 12e6 	movw	r2, #4582	@ 0x11e6
 80116a0:	4920      	ldr	r1, [pc, #128]	@ (8011724 <lfs_mount_+0x2d0>)
 80116a2:	4825      	ldr	r0, [pc, #148]	@ (8011738 <lfs_mount_+0x2e4>)
 80116a4:	f001 f97c 	bl	80129a0 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 80116a8:	f06f 0315 	mvn.w	r3, #21
 80116ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 80116ae:	e062      	b.n	8011776 <lfs_mount_+0x322>
                }

                lfs->attr_max = superblock.attr_max;
 80116b0:	6a3a      	ldr	r2, [r7, #32]
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	679a      	str	r2, [r3, #120]	@ 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80116be:	4619      	mov	r1, r3
 80116c0:	4610      	mov	r0, r2
 80116c2:	f7f9 ff57 	bl	800b574 <lfs_min>
 80116c6:	4602      	mov	r2, r0
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80116d0:	6a1b      	ldr	r3, [r3, #32]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d034      	beq.n	8011740 <lfs_mount_+0x2ec>
                    && superblock.block_count != lfs->cfg->block_count) {
 80116d6:	697a      	ldr	r2, [r7, #20]
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80116dc:	6a1b      	ldr	r3, [r3, #32]
 80116de:	429a      	cmp	r2, r3
 80116e0:	d02e      	beq.n	8011740 <lfs_mount_+0x2ec>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 80116e2:	697a      	ldr	r2, [r7, #20]
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80116e8:	6a1b      	ldr	r3, [r3, #32]
 80116ea:	490d      	ldr	r1, [pc, #52]	@ (8011720 <lfs_mount_+0x2cc>)
 80116ec:	9101      	str	r1, [sp, #4]
 80116ee:	9300      	str	r3, [sp, #0]
 80116f0:	4613      	mov	r3, r2
 80116f2:	f241 12f5 	movw	r2, #4597	@ 0x11f5
 80116f6:	490b      	ldr	r1, [pc, #44]	@ (8011724 <lfs_mount_+0x2d0>)
 80116f8:	4810      	ldr	r0, [pc, #64]	@ (801173c <lfs_mount_+0x2e8>)
 80116fa:	f001 f951 	bl	80129a0 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 80116fe:	f06f 0315 	mvn.w	r3, #21
 8011702:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8011704:	e037      	b.n	8011776 <lfs_mount_+0x322>
 8011706:	bf00      	nop
 8011708:	080143d8 	.word	0x080143d8
 801170c:	080141f0 	.word	0x080141f0
 8011710:	0800dc79 	.word	0x0800dc79
 8011714:	0ff00008 	.word	0x0ff00008
 8011718:	7ffffc00 	.word	0x7ffffc00
 801171c:	20100018 	.word	0x20100018
 8011720:	080139e0 	.word	0x080139e0
 8011724:	080138c0 	.word	0x080138c0
 8011728:	08014228 	.word	0x08014228
 801172c:	08014260 	.word	0x08014260
 8011730:	080142a0 	.word	0x080142a0
 8011734:	080142d4 	.word	0x080142d4
 8011738:	08014308 	.word	0x08014308
 801173c:	0801433c 	.word	0x0801433c
            }

            lfs->block_count = superblock.block_count;
 8011740:	697a      	ldr	r2, [r7, #20]
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	66da      	str	r2, [r3, #108]	@ 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 8011746:	693a      	ldr	r2, [r7, #16]
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801174c:	69db      	ldr	r3, [r3, #28]
 801174e:	429a      	cmp	r2, r3
 8011750:	d012      	beq.n	8011778 <lfs_mount_+0x324>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8011752:	693a      	ldr	r2, [r7, #16]
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011758:	69db      	ldr	r3, [r3, #28]
 801175a:	493b      	ldr	r1, [pc, #236]	@ (8011848 <lfs_mount_+0x3f4>)
 801175c:	9101      	str	r1, [sp, #4]
 801175e:	9300      	str	r3, [sp, #0]
 8011760:	4613      	mov	r3, r2
 8011762:	f241 12fe 	movw	r2, #4606	@ 0x11fe
 8011766:	4939      	ldr	r1, [pc, #228]	@ (801184c <lfs_mount_+0x3f8>)
 8011768:	4839      	ldr	r0, [pc, #228]	@ (8011850 <lfs_mount_+0x3fc>)
 801176a:	f001 f919 	bl	80129a0 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 801176e:	f06f 0315 	mvn.w	r3, #21
 8011772:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8011774:	bf00      	nop
            goto cleanup;
 8011776:	e05e      	b.n	8011836 <lfs_mount_+0x3e2>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801177e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8011782:	4619      	mov	r1, r3
 8011784:	6878      	ldr	r0, [r7, #4]
 8011786:	f7fc fa45 	bl	800dc14 <lfs_dir_getgstate>
 801178a:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (err) {
 801178c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801178e:	2b00      	cmp	r3, #0
 8011790:	d150      	bne.n	8011834 <lfs_mount_+0x3e0>
    while (!lfs_pair_isnull(dir.tail)) {
 8011792:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8011796:	3318      	adds	r3, #24
 8011798:	4618      	mov	r0, r3
 801179a:	f7fa fb92 	bl	800bec2 <lfs_pair_isnull>
 801179e:	4603      	mov	r3, r0
 80117a0:	f083 0301 	eor.w	r3, r3, #1
 80117a4:	b2db      	uxtb	r3, r3
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	f47f ae73 	bne.w	8011492 <lfs_mount_+0x3e>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	3330      	adds	r3, #48	@ 0x30
 80117b0:	4618      	mov	r0, r3
 80117b2:	f7fa fce8 	bl	800c186 <lfs_gstate_iszero>
 80117b6:	4603      	mov	r3, r0
 80117b8:	f083 0301 	eor.w	r3, r3, #1
 80117bc:	b2db      	uxtb	r3, r3
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d010      	beq.n	80117e4 <lfs_mount_+0x390>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80117ca:	687a      	ldr	r2, [r7, #4]
 80117cc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80117ce:	481e      	ldr	r0, [pc, #120]	@ (8011848 <lfs_mount_+0x3f4>)
 80117d0:	9002      	str	r0, [sp, #8]
 80117d2:	9201      	str	r2, [sp, #4]
 80117d4:	9300      	str	r3, [sp, #0]
 80117d6:	460b      	mov	r3, r1
 80117d8:	f241 220e 	movw	r2, #4622	@ 0x120e
 80117dc:	491b      	ldr	r1, [pc, #108]	@ (801184c <lfs_mount_+0x3f8>)
 80117de:	481d      	ldr	r0, [pc, #116]	@ (8011854 <lfs_mount_+0x400>)
 80117e0:	f001 f8de 	bl	80129a0 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117e8:	4618      	mov	r0, r3
 80117ea:	f7fa fc10 	bl	800c00e <lfs_tag_isvalid>
 80117ee:	4603      	mov	r3, r0
 80117f0:	f083 0301 	eor.w	r3, r3, #1
 80117f4:	b2db      	uxtb	r3, r3
 80117f6:	461a      	mov	r2, r3
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117fc:	441a      	add	r2, r3
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	687a      	ldr	r2, [r7, #4]
 8011806:	333c      	adds	r3, #60	@ 0x3c
 8011808:	3230      	adds	r2, #48	@ 0x30
 801180a:	ca07      	ldmia	r2, {r0, r1, r2}
 801180c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011814:	687a      	ldr	r2, [r7, #4]
 8011816:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8011818:	fbb3 f1f2 	udiv	r1, r3, r2
 801181c:	fb01 f202 	mul.w	r2, r1, r2
 8011820:	1a9a      	subs	r2, r3, r2
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 8011826:	6878      	ldr	r0, [r7, #4]
 8011828:	f7fa fecb 	bl	800c5c2 <lfs_alloc_drop>

    return 0;
 801182c:	2300      	movs	r3, #0
 801182e:	e006      	b.n	801183e <lfs_mount_+0x3ea>
            goto cleanup;
 8011830:	bf00      	nop
 8011832:	e000      	b.n	8011836 <lfs_mount_+0x3e2>
            goto cleanup;
 8011834:	bf00      	nop

cleanup:
    lfs_unmount_(lfs);
 8011836:	6878      	ldr	r0, [r7, #4]
 8011838:	f000 f80e 	bl	8011858 <lfs_unmount_>
    return err;
 801183c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 801183e:	4618      	mov	r0, r3
 8011840:	3774      	adds	r7, #116	@ 0x74
 8011842:	46bd      	mov	sp, r7
 8011844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011846:	bf00      	nop
 8011848:	080139e0 	.word	0x080139e0
 801184c:	080138c0 	.word	0x080138c0
 8011850:	08014370 	.word	0x08014370
 8011854:	080143a0 	.word	0x080143a0

08011858 <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 8011858:	b580      	push	{r7, lr}
 801185a:	b082      	sub	sp, #8
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8011860:	6878      	ldr	r0, [r7, #4]
 8011862:	f7ff fcdd 	bl	8011220 <lfs_deinit>
 8011866:	4603      	mov	r3, r0
}
 8011868:	4618      	mov	r0, r3
 801186a:	3708      	adds	r7, #8
 801186c:	46bd      	mov	sp, r7
 801186e:	bd80      	pop	{r7, pc}

08011870 <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8011870:	b590      	push	{r4, r7, lr}
 8011872:	b0a1      	sub	sp, #132	@ 0x84
 8011874:	af04      	add	r7, sp, #16
 8011876:	60f8      	str	r0, [r7, #12]
 8011878:	60b9      	str	r1, [r7, #8]
 801187a:	607a      	str	r2, [r7, #4]
 801187c:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 801187e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011882:	2220      	movs	r2, #32
 8011884:	2100      	movs	r1, #0
 8011886:	4618      	mov	r0, r3
 8011888:	f001 f8ef 	bl	8012a6a <memset>
 801188c:	2301      	movs	r3, #1
 801188e:	647b      	str	r3, [r7, #68]	@ 0x44
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    struct lfs_tortoise_t tortoise = {
 8011890:	4b8d      	ldr	r3, [pc, #564]	@ (8011ac8 <lfs_fs_traverse_+0x258>)
 8011892:	f107 0418 	add.w	r4, r7, #24
 8011896:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011898:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    int err = LFS_ERR_OK;
 801189c:	2300      	movs	r3, #0
 801189e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 80118a0:	e0a9      	b.n	80119f6 <lfs_fs_traverse_+0x186>
        err = lfs_tortoise_detectcycles(&dir, &tortoise);
 80118a2:	f107 0218 	add.w	r2, r7, #24
 80118a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80118aa:	4611      	mov	r1, r2
 80118ac:	4618      	mov	r0, r3
 80118ae:	f7ff fd91 	bl	80113d4 <lfs_tortoise_detectcycles>
 80118b2:	65f8      	str	r0, [r7, #92]	@ 0x5c
        if (err < 0) {
 80118b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	da02      	bge.n	80118c0 <lfs_fs_traverse_+0x50>
            return LFS_ERR_CORRUPT;
 80118ba:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80118be:	e0ff      	b.n	8011ac0 <lfs_fs_traverse_+0x250>
        }

        for (int i = 0; i < 2; i++) {
 80118c0:	2300      	movs	r3, #0
 80118c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80118c4:	e013      	b.n	80118ee <lfs_fs_traverse_+0x7e>
            int err = cb(data, dir.tail[i]);
 80118c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80118c8:	3306      	adds	r3, #6
 80118ca:	009b      	lsls	r3, r3, #2
 80118cc:	3370      	adds	r3, #112	@ 0x70
 80118ce:	443b      	add	r3, r7
 80118d0:	f853 2c48 	ldr.w	r2, [r3, #-72]
 80118d4:	68bb      	ldr	r3, [r7, #8]
 80118d6:	4611      	mov	r1, r2
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	4798      	blx	r3
 80118dc:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (err) {
 80118de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d001      	beq.n	80118e8 <lfs_fs_traverse_+0x78>
                return err;
 80118e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80118e6:	e0eb      	b.n	8011ac0 <lfs_fs_traverse_+0x250>
        for (int i = 0; i < 2; i++) {
 80118e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80118ea:	3301      	adds	r3, #1
 80118ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80118ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80118f0:	2b01      	cmp	r3, #1
 80118f2:	dde8      	ble.n	80118c6 <lfs_fs_traverse_+0x56>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 80118f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80118f8:	f103 0218 	add.w	r2, r3, #24
 80118fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011900:	4619      	mov	r1, r3
 8011902:	68f8      	ldr	r0, [r7, #12]
 8011904:	f7fc f96a 	bl	800dbdc <lfs_dir_fetch>
 8011908:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 801190a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801190c:	2b00      	cmp	r3, #0
 801190e:	d001      	beq.n	8011914 <lfs_fs_traverse_+0xa4>
            return err;
 8011910:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011912:	e0d5      	b.n	8011ac0 <lfs_fs_traverse_+0x250>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8011914:	2300      	movs	r3, #0
 8011916:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 801191a:	e067      	b.n	80119ec <lfs_fs_traverse_+0x17c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 801191c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8011920:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8011922:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011926:	f043 0308 	orr.w	r3, r3, #8
 801192a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801192e:	f107 0210 	add.w	r2, r7, #16
 8011932:	9200      	str	r2, [sp, #0]
 8011934:	4a65      	ldr	r2, [pc, #404]	@ (8011acc <lfs_fs_traverse_+0x25c>)
 8011936:	68f8      	ldr	r0, [r7, #12]
 8011938:	f7fb f84a 	bl	800c9d0 <lfs_dir_get>
 801193c:	64f8      	str	r0, [r7, #76]	@ 0x4c
            if (tag < 0) {
 801193e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011940:	2b00      	cmp	r3, #0
 8011942:	da05      	bge.n	8011950 <lfs_fs_traverse_+0xe0>
                if (tag == LFS_ERR_NOENT) {
 8011944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011946:	f113 0f02 	cmn.w	r3, #2
 801194a:	d049      	beq.n	80119e0 <lfs_fs_traverse_+0x170>
                    continue;
                }
                return tag;
 801194c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801194e:	e0b7      	b.n	8011ac0 <lfs_fs_traverse_+0x250>
            }
            lfs_ctz_fromle32(&ctz);
 8011950:	f107 0310 	add.w	r3, r7, #16
 8011954:	4618      	mov	r0, r3
 8011956:	f7fa fd0b 	bl	800c370 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801195a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801195c:	4618      	mov	r0, r3
 801195e:	f7fa fb97 	bl	800c090 <lfs_tag_type3>
 8011962:	4603      	mov	r3, r0
 8011964:	461a      	mov	r2, r3
 8011966:	f240 2302 	movw	r3, #514	@ 0x202
 801196a:	429a      	cmp	r2, r3
 801196c:	d113      	bne.n	8011996 <lfs_fs_traverse_+0x126>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 801196e:	68f9      	ldr	r1, [r7, #12]
 8011970:	6938      	ldr	r0, [r7, #16]
 8011972:	697b      	ldr	r3, [r7, #20]
 8011974:	687a      	ldr	r2, [r7, #4]
 8011976:	9202      	str	r2, [sp, #8]
 8011978:	68ba      	ldr	r2, [r7, #8]
 801197a:	9201      	str	r2, [sp, #4]
 801197c:	9300      	str	r3, [sp, #0]
 801197e:	4603      	mov	r3, r0
 8011980:	460a      	mov	r2, r1
 8011982:	2100      	movs	r1, #0
 8011984:	68f8      	ldr	r0, [r7, #12]
 8011986:	f7fe f8e9 	bl	800fb5c <lfs_ctz_traverse>
 801198a:	6538      	str	r0, [r7, #80]	@ 0x50
                        ctz.head, ctz.size, cb, data);
                if (err) {
 801198c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801198e:	2b00      	cmp	r3, #0
 8011990:	d027      	beq.n	80119e2 <lfs_fs_traverse_+0x172>
                    return err;
 8011992:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011994:	e094      	b.n	8011ac0 <lfs_fs_traverse_+0x250>
                }
            } else if (includeorphans &&
 8011996:	78fb      	ldrb	r3, [r7, #3]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d022      	beq.n	80119e2 <lfs_fs_traverse_+0x172>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 801199c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801199e:	4618      	mov	r0, r3
 80119a0:	f7fa fb76 	bl	800c090 <lfs_tag_type3>
 80119a4:	4603      	mov	r3, r0
            } else if (includeorphans &&
 80119a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80119aa:	d11a      	bne.n	80119e2 <lfs_fs_traverse_+0x172>
                for (int i = 0; i < 2; i++) {
 80119ac:	2300      	movs	r3, #0
 80119ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80119b0:	e012      	b.n	80119d8 <lfs_fs_traverse_+0x168>
                    err = cb(data, (&ctz.head)[i]);
 80119b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80119b4:	009b      	lsls	r3, r3, #2
 80119b6:	f107 0210 	add.w	r2, r7, #16
 80119ba:	4413      	add	r3, r2
 80119bc:	681a      	ldr	r2, [r3, #0]
 80119be:	68bb      	ldr	r3, [r7, #8]
 80119c0:	4611      	mov	r1, r2
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	4798      	blx	r3
 80119c6:	6538      	str	r0, [r7, #80]	@ 0x50
                    if (err) {
 80119c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d001      	beq.n	80119d2 <lfs_fs_traverse_+0x162>
                        return err;
 80119ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119d0:	e076      	b.n	8011ac0 <lfs_fs_traverse_+0x250>
                for (int i = 0; i < 2; i++) {
 80119d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80119d4:	3301      	adds	r3, #1
 80119d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80119d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80119da:	2b01      	cmp	r3, #1
 80119dc:	dde9      	ble.n	80119b2 <lfs_fs_traverse_+0x142>
 80119de:	e000      	b.n	80119e2 <lfs_fs_traverse_+0x172>
                    continue;
 80119e0:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 80119e2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80119e6:	3301      	adds	r3, #1
 80119e8:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80119ec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80119ee:	f8b7 206a 	ldrh.w	r2, [r7, #106]	@ 0x6a
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d392      	bcc.n	801191c <lfs_fs_traverse_+0xac>
    while (!lfs_pair_isnull(dir.tail)) {
 80119f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80119fa:	3318      	adds	r3, #24
 80119fc:	4618      	mov	r0, r3
 80119fe:	f7fa fa60 	bl	800bec2 <lfs_pair_isnull>
 8011a02:	4603      	mov	r3, r0
 8011a04:	f083 0301 	eor.w	r3, r3, #1
 8011a08:	b2db      	uxtb	r3, r3
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	f47f af49 	bne.w	80118a2 <lfs_fs_traverse_+0x32>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a14:	663b      	str	r3, [r7, #96]	@ 0x60
 8011a16:	e04f      	b.n	8011ab8 <lfs_fs_traverse_+0x248>
        if (f->type != LFS_TYPE_REG) {
 8011a18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a1a:	799b      	ldrb	r3, [r3, #6]
 8011a1c:	2b01      	cmp	r3, #1
 8011a1e:	d147      	bne.n	8011ab0 <lfs_fs_traverse_+0x240>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8011a20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d01d      	beq.n	8011a68 <lfs_fs_traverse_+0x1f8>
 8011a2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d117      	bne.n	8011a68 <lfs_fs_traverse_+0x1f8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8011a38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a3a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8011a3e:	68f8      	ldr	r0, [r7, #12]
 8011a40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a42:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8011a44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a48:	687a      	ldr	r2, [r7, #4]
 8011a4a:	9202      	str	r2, [sp, #8]
 8011a4c:	68ba      	ldr	r2, [r7, #8]
 8011a4e:	9201      	str	r2, [sp, #4]
 8011a50:	9300      	str	r3, [sp, #0]
 8011a52:	4623      	mov	r3, r4
 8011a54:	4602      	mov	r2, r0
 8011a56:	68f8      	ldr	r0, [r7, #12]
 8011a58:	f7fe f880 	bl	800fb5c <lfs_ctz_traverse>
 8011a5c:	65b8      	str	r0, [r7, #88]	@ 0x58
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8011a5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d001      	beq.n	8011a68 <lfs_fs_traverse_+0x1f8>
                return err;
 8011a64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011a66:	e02b      	b.n	8011ac0 <lfs_fs_traverse_+0x250>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8011a68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d01e      	beq.n	8011ab2 <lfs_fs_traverse_+0x242>
 8011a74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d118      	bne.n	8011ab2 <lfs_fs_traverse_+0x242>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8011a80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a82:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8011a86:	68f8      	ldr	r0, [r7, #12]
 8011a88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a8a:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8011a8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011a90:	687a      	ldr	r2, [r7, #4]
 8011a92:	9202      	str	r2, [sp, #8]
 8011a94:	68ba      	ldr	r2, [r7, #8]
 8011a96:	9201      	str	r2, [sp, #4]
 8011a98:	9300      	str	r3, [sp, #0]
 8011a9a:	4623      	mov	r3, r4
 8011a9c:	4602      	mov	r2, r0
 8011a9e:	68f8      	ldr	r0, [r7, #12]
 8011aa0:	f7fe f85c 	bl	800fb5c <lfs_ctz_traverse>
 8011aa4:	6578      	str	r0, [r7, #84]	@ 0x54
                    f->block, f->pos, cb, data);
            if (err) {
 8011aa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d002      	beq.n	8011ab2 <lfs_fs_traverse_+0x242>
                return err;
 8011aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011aae:	e007      	b.n	8011ac0 <lfs_fs_traverse_+0x250>
            continue;
 8011ab0:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8011ab2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	663b      	str	r3, [r7, #96]	@ 0x60
 8011ab8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d1ac      	bne.n	8011a18 <lfs_fs_traverse_+0x1a8>
            }
        }
    }
#endif

    return 0;
 8011abe:	2300      	movs	r3, #0
}
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	3774      	adds	r7, #116	@ 0x74
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd90      	pop	{r4, r7, pc}
 8011ac8:	080143d8 	.word	0x080143d8
 8011acc:	700ffc00 	.word	0x700ffc00

08011ad0 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8011ad0:	b590      	push	{r4, r7, lr}
 8011ad2:	b08b      	sub	sp, #44	@ 0x2c
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	60f8      	str	r0, [r7, #12]
 8011ad8:	60b9      	str	r1, [r7, #8]
 8011ada:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	2200      	movs	r2, #0
 8011ae0:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	2201      	movs	r2, #1
 8011ae6:	61da      	str	r2, [r3, #28]
    struct lfs_tortoise_t tortoise = {
 8011ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8011b68 <lfs_fs_pred+0x98>)
 8011aea:	f107 0410 	add.w	r4, r7, #16
 8011aee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011af0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    int err = LFS_ERR_OK;
 8011af4:	2300      	movs	r3, #0
 8011af6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (!lfs_pair_isnull(pdir->tail)) {
 8011af8:	e024      	b.n	8011b44 <lfs_fs_pred+0x74>
        err = lfs_tortoise_detectcycles(pdir, &tortoise);
 8011afa:	f107 0310 	add.w	r3, r7, #16
 8011afe:	4619      	mov	r1, r3
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f7ff fc67 	bl	80113d4 <lfs_tortoise_detectcycles>
 8011b06:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err < 0) {
 8011b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	da02      	bge.n	8011b14 <lfs_fs_pred+0x44>
            return LFS_ERR_CORRUPT;
 8011b0e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8011b12:	e024      	b.n	8011b5e <lfs_fs_pred+0x8e>
        }

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	3318      	adds	r3, #24
 8011b18:	68b9      	ldr	r1, [r7, #8]
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f7fa f9ec 	bl	800bef8 <lfs_pair_cmp>
 8011b20:	4603      	mov	r3, r0
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d101      	bne.n	8011b2a <lfs_fs_pred+0x5a>
            return 0;
 8011b26:	2300      	movs	r3, #0
 8011b28:	e019      	b.n	8011b5e <lfs_fs_pred+0x8e>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	3318      	adds	r3, #24
 8011b2e:	461a      	mov	r2, r3
 8011b30:	6879      	ldr	r1, [r7, #4]
 8011b32:	68f8      	ldr	r0, [r7, #12]
 8011b34:	f7fc f852 	bl	800dbdc <lfs_dir_fetch>
 8011b38:	6238      	str	r0, [r7, #32]
        if (err) {
 8011b3a:	6a3b      	ldr	r3, [r7, #32]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d001      	beq.n	8011b44 <lfs_fs_pred+0x74>
            return err;
 8011b40:	6a3b      	ldr	r3, [r7, #32]
 8011b42:	e00c      	b.n	8011b5e <lfs_fs_pred+0x8e>
    while (!lfs_pair_isnull(pdir->tail)) {
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	3318      	adds	r3, #24
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7fa f9ba 	bl	800bec2 <lfs_pair_isnull>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	f083 0301 	eor.w	r3, r3, #1
 8011b54:	b2db      	uxtb	r3, r3
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d1cf      	bne.n	8011afa <lfs_fs_pred+0x2a>
        }
    }

    return LFS_ERR_NOENT;
 8011b5a:	f06f 0301 	mvn.w	r3, #1
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	372c      	adds	r7, #44	@ 0x2c
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd90      	pop	{r4, r7, pc}
 8011b66:	bf00      	nop
 8011b68:	080143d8 	.word	0x080143d8

08011b6c <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8011b6c:	b5b0      	push	{r4, r5, r7, lr}
 8011b6e:	b08e      	sub	sp, #56	@ 0x38
 8011b70:	af04      	add	r7, sp, #16
 8011b72:	60f8      	str	r0, [r7, #12]
 8011b74:	60b9      	str	r1, [r7, #8]
 8011b76:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = find->lfs;
 8011b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8011b86:	6a3b      	ldr	r3, [r7, #32]
 8011b88:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8011b8c:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8011b8e:	6a3b      	ldr	r3, [r7, #32]
 8011b90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011b92:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 8011b94:	69fb      	ldr	r3, [r7, #28]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	69fa      	ldr	r2, [r7, #28]
 8011b9a:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8011b9c:	2108      	movs	r1, #8
 8011b9e:	9103      	str	r1, [sp, #12]
 8011ba0:	f107 0110 	add.w	r1, r7, #16
 8011ba4:	9102      	str	r1, [sp, #8]
 8011ba6:	9201      	str	r2, [sp, #4]
 8011ba8:	9300      	str	r3, [sp, #0]
 8011baa:	462b      	mov	r3, r5
 8011bac:	4622      	mov	r2, r4
 8011bae:	4601      	mov	r1, r0
 8011bb0:	6a38      	ldr	r0, [r7, #32]
 8011bb2:	f7f9 fdbb 	bl	800b72c <lfs_bd_read>
 8011bb6:	61b8      	str	r0, [r7, #24]
    if (err) {
 8011bb8:	69bb      	ldr	r3, [r7, #24]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d001      	beq.n	8011bc2 <lfs_fs_parent_match+0x56>
        return err;
 8011bbe:	69bb      	ldr	r3, [r7, #24]
 8011bc0:	e012      	b.n	8011be8 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8011bc2:	f107 0310 	add.w	r3, r7, #16
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f7fa f9ed 	bl	800bfa6 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8011bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bce:	1d1a      	adds	r2, r3, #4
 8011bd0:	f107 0310 	add.w	r3, r7, #16
 8011bd4:	4611      	mov	r1, r2
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f7fa f98e 	bl	800bef8 <lfs_pair_cmp>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	bf14      	ite	ne
 8011be2:	2301      	movne	r3, #1
 8011be4:	2300      	moveq	r3, #0
 8011be6:	b2db      	uxtb	r3, r3
}
 8011be8:	4618      	mov	r0, r3
 8011bea:	3728      	adds	r7, #40	@ 0x28
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bdb0      	pop	{r4, r5, r7, pc}

08011bf0 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8011bf0:	b590      	push	{r4, r7, lr}
 8011bf2:	b093      	sub	sp, #76	@ 0x4c
 8011bf4:	af04      	add	r7, sp, #16
 8011bf6:	60f8      	str	r0, [r7, #12]
 8011bf8:	60b9      	str	r1, [r7, #8]
 8011bfa:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	2200      	movs	r2, #0
 8011c00:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2201      	movs	r2, #1
 8011c06:	61da      	str	r2, [r3, #28]
    struct lfs_tortoise_t tortoise = {
 8011c08:	4b24      	ldr	r3, [pc, #144]	@ (8011c9c <lfs_fs_parent+0xac>)
 8011c0a:	f107 0420 	add.w	r4, r7, #32
 8011c0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011c10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    int err = LFS_ERR_OK;
 8011c14:	2300      	movs	r3, #0
 8011c16:	637b      	str	r3, [r7, #52]	@ 0x34
    while (!lfs_pair_isnull(parent->tail)) {
 8011c18:	e02f      	b.n	8011c7a <lfs_fs_parent+0x8a>
        err = lfs_tortoise_detectcycles(parent, &tortoise);
 8011c1a:	f107 0320 	add.w	r3, r7, #32
 8011c1e:	4619      	mov	r1, r3
 8011c20:	6878      	ldr	r0, [r7, #4]
 8011c22:	f7ff fbd7 	bl	80113d4 <lfs_tortoise_detectcycles>
 8011c26:	6378      	str	r0, [r7, #52]	@ 0x34
        if (err < 0) {
 8011c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	da01      	bge.n	8011c32 <lfs_fs_parent+0x42>
            return err;
 8011c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c30:	e030      	b.n	8011c94 <lfs_fs_parent+0xa4>
        }

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8011c40:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	3304      	adds	r3, #4
 8011c46:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8011c48:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8011c4a:	f107 0314 	add.w	r3, r7, #20
 8011c4e:	9303      	str	r3, [sp, #12]
 8011c50:	4b13      	ldr	r3, [pc, #76]	@ (8011ca0 <lfs_fs_parent+0xb0>)
 8011c52:	9302      	str	r3, [sp, #8]
 8011c54:	2300      	movs	r3, #0
 8011c56:	9301      	str	r3, [sp, #4]
 8011c58:	4b12      	ldr	r3, [pc, #72]	@ (8011ca4 <lfs_fs_parent+0xb4>)
 8011c5a:	9300      	str	r3, [sp, #0]
 8011c5c:	4b12      	ldr	r3, [pc, #72]	@ (8011ca8 <lfs_fs_parent+0xb8>)
 8011c5e:	6879      	ldr	r1, [r7, #4]
 8011c60:	68f8      	ldr	r0, [r7, #12]
 8011c62:	f7fb fbeb 	bl	800d43c <lfs_dir_fetchmatch>
 8011c66:	6338      	str	r0, [r7, #48]	@ 0x30
        if (tag && tag != LFS_ERR_NOENT) {
 8011c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d005      	beq.n	8011c7a <lfs_fs_parent+0x8a>
 8011c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c70:	f113 0f02 	cmn.w	r3, #2
 8011c74:	d001      	beq.n	8011c7a <lfs_fs_parent+0x8a>
            return tag;
 8011c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c78:	e00c      	b.n	8011c94 <lfs_fs_parent+0xa4>
    while (!lfs_pair_isnull(parent->tail)) {
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	3318      	adds	r3, #24
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f7fa f91f 	bl	800bec2 <lfs_pair_isnull>
 8011c84:	4603      	mov	r3, r0
 8011c86:	f083 0301 	eor.w	r3, r3, #1
 8011c8a:	b2db      	uxtb	r3, r3
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d1c4      	bne.n	8011c1a <lfs_fs_parent+0x2a>
        }
    }

    return LFS_ERR_NOENT;
 8011c90:	f06f 0301 	mvn.w	r3, #1
}
 8011c94:	4618      	mov	r0, r3
 8011c96:	373c      	adds	r7, #60	@ 0x3c
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd90      	pop	{r4, r7, pc}
 8011c9c:	080143d8 	.word	0x080143d8
 8011ca0:	08011b6d 	.word	0x08011b6d
 8011ca4:	20000008 	.word	0x20000008
 8011ca8:	7ff003ff 	.word	0x7ff003ff

08011cac <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 8011cac:	b480      	push	{r7}
 8011cae:	b083      	sub	sp, #12
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
 8011cb4:	460b      	mov	r3, r1
 8011cb6:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cbc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 8011cc0:	78fb      	ldrb	r3, [r7, #3]
 8011cc2:	025b      	lsls	r3, r3, #9
 8011cc4:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8011cca:	bf00      	nop
 8011ccc:	370c      	adds	r7, #12
 8011cce:	46bd      	mov	sp, r7
 8011cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd4:	4770      	bx	lr
	...

08011cd8 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8011cd8:	b590      	push	{r4, r7, lr}
 8011cda:	b083      	sub	sp, #12
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	460b      	mov	r3, r1
 8011ce2:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f7fa fa0b 	bl	800c104 <lfs_tag_size>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d10a      	bne.n	8011d0a <lfs_fs_preporphans+0x32>
 8011cf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	da06      	bge.n	8011d0a <lfs_fs_preporphans+0x32>
 8011cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8011d68 <lfs_fs_preporphans+0x90>)
 8011cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8011d6c <lfs_fs_preporphans+0x94>)
 8011d00:	f241 311a 	movw	r1, #4890	@ 0x131a
 8011d04:	481a      	ldr	r0, [pc, #104]	@ (8011d70 <lfs_fs_preporphans+0x98>)
 8011d06:	f000 fc9b 	bl	8012640 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f7fa f9f8 	bl	800c104 <lfs_tag_size>
 8011d14:	4603      	mov	r3, r0
 8011d16:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8011d1a:	d90a      	bls.n	8011d32 <lfs_fs_preporphans+0x5a>
 8011d1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	dd06      	ble.n	8011d32 <lfs_fs_preporphans+0x5a>
 8011d24:	4b13      	ldr	r3, [pc, #76]	@ (8011d74 <lfs_fs_preporphans+0x9c>)
 8011d26:	4a11      	ldr	r2, [pc, #68]	@ (8011d6c <lfs_fs_preporphans+0x94>)
 8011d28:	f241 311b 	movw	r1, #4891	@ 0x131b
 8011d2c:	4810      	ldr	r0, [pc, #64]	@ (8011d70 <lfs_fs_preporphans+0x98>)
 8011d2e:	f000 fc87 	bl	8012640 <__assert_func>
    lfs->gstate.tag += orphans;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011d36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011d3a:	441a      	add	r2, r3
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d44:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	3330      	adds	r3, #48	@ 0x30
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f7fa fa36 	bl	800c1be <lfs_gstate_hasorphans>
 8011d52:	4603      	mov	r3, r0
 8011d54:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8011d56:	ea44 0203 	orr.w	r2, r4, r3
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8011d5e:	2300      	movs	r3, #0
}
 8011d60:	4618      	mov	r0, r3
 8011d62:	370c      	adds	r7, #12
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd90      	pop	{r4, r7, pc}
 8011d68:	080143e8 	.word	0x080143e8
 8011d6c:	08014798 	.word	0x08014798
 8011d70:	080138c0 	.word	0x080138c0
 8011d74:	08014420 	.word	0x08014420

08011d78 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8011d78:	b480      	push	{r7}
 8011d7a:	b085      	sub	sp, #20
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	60f8      	str	r0, [r7, #12]
 8011d80:	460b      	mov	r3, r1
 8011d82:	607a      	str	r2, [r7, #4]
 8011d84:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d8a:	4a17      	ldr	r2, [pc, #92]	@ (8011de8 <lfs_fs_prepmove+0x70>)
 8011d8c:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8011d8e:	897b      	ldrh	r3, [r7, #10]
 8011d90:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8011d94:	428b      	cmp	r3, r1
 8011d96:	d006      	beq.n	8011da6 <lfs_fs_prepmove+0x2e>
 8011d98:	897b      	ldrh	r3, [r7, #10]
 8011d9a:	029b      	lsls	r3, r3, #10
 8011d9c:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8011da0:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8011da4:	e000      	b.n	8011da8 <lfs_fs_prepmove+0x30>
 8011da6:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8011da8:	431a      	orrs	r2, r3
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8011dae:	897b      	ldrh	r3, [r7, #10]
 8011db0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8011db4:	4293      	cmp	r3, r2
 8011db6:	d002      	beq.n	8011dbe <lfs_fs_prepmove+0x46>
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	e000      	b.n	8011dc0 <lfs_fs_prepmove+0x48>
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	68fa      	ldr	r2, [r7, #12]
 8011dc2:	6353      	str	r3, [r2, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8011dc4:	897b      	ldrh	r3, [r7, #10]
 8011dc6:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8011dca:	4293      	cmp	r3, r2
 8011dcc:	d003      	beq.n	8011dd6 <lfs_fs_prepmove+0x5e>
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	3304      	adds	r3, #4
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	e000      	b.n	8011dd8 <lfs_fs_prepmove+0x60>
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	68fa      	ldr	r2, [r7, #12]
 8011dda:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8011ddc:	bf00      	nop
 8011dde:	3714      	adds	r7, #20
 8011de0:	46bd      	mov	sp, r7
 8011de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de6:	4770      	bx	lr
 8011de8:	800003ff 	.word	0x800003ff

08011dec <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b098      	sub	sp, #96	@ 0x60
 8011df0:	af02      	add	r7, sp, #8
 8011df2:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	3330      	adds	r3, #48	@ 0x30
 8011df8:	4618      	mov	r0, r3
 8011dfa:	f7fa fa15 	bl	800c228 <lfs_gstate_needssuperblock>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	f083 0301 	eor.w	r3, r3, #1
 8011e04:	b2db      	uxtb	r3, r3
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d001      	beq.n	8011e0e <lfs_fs_desuperblock+0x22>
        return 0;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	e04e      	b.n	8011eac <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	6a1a      	ldr	r2, [r3, #32]
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e16:	4927      	ldr	r1, [pc, #156]	@ (8011eb4 <lfs_fs_desuperblock+0xc8>)
 8011e18:	9101      	str	r1, [sp, #4]
 8011e1a:	9300      	str	r3, [sp, #0]
 8011e1c:	4613      	mov	r3, r2
 8011e1e:	f241 3234 	movw	r2, #4916	@ 0x1334
 8011e22:	4925      	ldr	r1, [pc, #148]	@ (8011eb8 <lfs_fs_desuperblock+0xcc>)
 8011e24:	4825      	ldr	r0, [pc, #148]	@ (8011ebc <lfs_fs_desuperblock+0xd0>)
 8011e26:	f000 fdbb 	bl	80129a0 <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	f103 0220 	add.w	r2, r3, #32
 8011e30:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011e34:	4619      	mov	r1, r3
 8011e36:	6878      	ldr	r0, [r7, #4]
 8011e38:	f7fb fed0 	bl	800dbdc <lfs_dir_fetch>
 8011e3c:	6578      	str	r0, [r7, #84]	@ 0x54
    if (err) {
 8011e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d001      	beq.n	8011e48 <lfs_fs_desuperblock+0x5c>
        return err;
 8011e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e46:	e031      	b.n	8011eac <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8011e48:	6878      	ldr	r0, [r7, #4]
 8011e4a:	f7fa fb83 	bl	800c554 <lfs_fs_disk_version>
 8011e4e:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 8011e50:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011e56:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 8011e58:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 8011e5e:	627b      	str	r3, [r7, #36]	@ 0x24
        .name_max    = lfs->name_max,
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    lfs_superblock_t superblock = {
 8011e64:	62bb      	str	r3, [r7, #40]	@ 0x28
        .file_max    = lfs->file_max,
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
    lfs_superblock_t superblock = {
 8011e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .attr_max    = lfs->attr_max,
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    lfs_superblock_t superblock = {
 8011e70:	633b      	str	r3, [r7, #48]	@ 0x30
    };

    lfs_superblock_tole32(&superblock);
 8011e72:	f107 031c 	add.w	r3, r7, #28
 8011e76:	4618      	mov	r0, r3
 8011e78:	f7fa fae2 	bl	800c440 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8011e7c:	4b10      	ldr	r3, [pc, #64]	@ (8011ec0 <lfs_fs_desuperblock+0xd4>)
 8011e7e:	617b      	str	r3, [r7, #20]
 8011e80:	f107 031c 	add.w	r3, r7, #28
 8011e84:	61bb      	str	r3, [r7, #24]
 8011e86:	f107 0214 	add.w	r2, r7, #20
 8011e8a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8011e8e:	2301      	movs	r3, #1
 8011e90:	6878      	ldr	r0, [r7, #4]
 8011e92:	f7fd fc91 	bl	800f7b8 <lfs_dir_commit>
 8011e96:	6578      	str	r0, [r7, #84]	@ 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 8011e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d001      	beq.n	8011ea2 <lfs_fs_desuperblock+0xb6>
        return err;
 8011e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ea0:	e004      	b.n	8011eac <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 8011ea2:	2100      	movs	r1, #0
 8011ea4:	6878      	ldr	r0, [r7, #4]
 8011ea6:	f7ff ff01 	bl	8011cac <lfs_fs_prepsuperblock>
    return 0;
 8011eaa:	2300      	movs	r3, #0
}
 8011eac:	4618      	mov	r0, r3
 8011eae:	3758      	adds	r7, #88	@ 0x58
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}
 8011eb4:	080139e0 	.word	0x080139e0
 8011eb8:	080138c0 	.word	0x080138c0
 8011ebc:	08014458 	.word	0x08014458
 8011ec0:	20100018 	.word	0x20100018

08011ec4 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8011ec4:	b5b0      	push	{r4, r5, r7, lr}
 8011ec6:	b094      	sub	sp, #80	@ 0x50
 8011ec8:	af04      	add	r7, sp, #16
 8011eca:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	333c      	adds	r3, #60	@ 0x3c
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	f7fa f996 	bl	800c202 <lfs_gstate_hasmove>
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	f083 0301 	eor.w	r3, r3, #1
 8011edc:	b2db      	uxtb	r3, r3
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d001      	beq.n	8011ee6 <lfs_fs_demove+0x22>
        return 0;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	e05b      	b.n	8011f9e <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f7fa f8f6 	bl	800c0e4 <lfs_tag_id>
 8011ef8:	4603      	mov	r3, r0
 8011efa:	461a      	mov	r2, r3
 8011efc:	4b2a      	ldr	r3, [pc, #168]	@ (8011fa8 <lfs_fs_demove+0xe4>)
 8011efe:	9302      	str	r3, [sp, #8]
 8011f00:	9201      	str	r2, [sp, #4]
 8011f02:	9400      	str	r4, [sp, #0]
 8011f04:	462b      	mov	r3, r5
 8011f06:	f241 325c 	movw	r2, #4956	@ 0x135c
 8011f0a:	4928      	ldr	r1, [pc, #160]	@ (8011fac <lfs_fs_demove+0xe8>)
 8011f0c:	4828      	ldr	r0, [pc, #160]	@ (8011fb0 <lfs_fs_demove+0xec>)
 8011f0e:	f000 fd47 	bl	80129a0 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011f16:	4618      	mov	r0, r3
 8011f18:	f7fa f8ba 	bl	800c090 <lfs_tag_type3>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	461a      	mov	r2, r3
 8011f20:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8011f24:	429a      	cmp	r2, r3
 8011f26:	d006      	beq.n	8011f36 <lfs_fs_demove+0x72>
 8011f28:	4b22      	ldr	r3, [pc, #136]	@ (8011fb4 <lfs_fs_demove+0xf0>)
 8011f2a:	4a23      	ldr	r2, [pc, #140]	@ (8011fb8 <lfs_fs_demove+0xf4>)
 8011f2c:	f241 3163 	movw	r1, #4963	@ 0x1363
 8011f30:	481e      	ldr	r0, [pc, #120]	@ (8011fac <lfs_fs_demove+0xe8>)
 8011f32:	f000 fb85 	bl	8012640 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8011f3c:	f107 0318 	add.w	r3, r7, #24
 8011f40:	4619      	mov	r1, r3
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f7fb fe4a 	bl	800dbdc <lfs_dir_fetch>
 8011f48:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (err) {
 8011f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d001      	beq.n	8011f54 <lfs_fs_demove+0x90>
        return err;
 8011f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f52:	e024      	b.n	8011f9e <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f7fa f8c3 	bl	800c0e4 <lfs_tag_id>
 8011f5e:	4603      	mov	r3, r0
 8011f60:	877b      	strh	r3, [r7, #58]	@ 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8011f62:	2200      	movs	r2, #0
 8011f64:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f7ff ff05 	bl	8011d78 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8011f6e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011f70:	029b      	lsls	r3, r3, #10
 8011f72:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8011f76:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8011f7a:	613b      	str	r3, [r7, #16]
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	617b      	str	r3, [r7, #20]
 8011f80:	f107 0210 	add.w	r2, r7, #16
 8011f84:	f107 0118 	add.w	r1, r7, #24
 8011f88:	2301      	movs	r3, #1
 8011f8a:	6878      	ldr	r0, [r7, #4]
 8011f8c:	f7fd fc14 	bl	800f7b8 <lfs_dir_commit>
 8011f90:	63f8      	str	r0, [r7, #60]	@ 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8011f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d001      	beq.n	8011f9c <lfs_fs_demove+0xd8>
        return err;
 8011f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f9a:	e000      	b.n	8011f9e <lfs_fs_demove+0xda>
    }

    return 0;
 8011f9c:	2300      	movs	r3, #0
}
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	3740      	adds	r7, #64	@ 0x40
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8011fa6:	bf00      	nop
 8011fa8:	080139e0 	.word	0x080139e0
 8011fac:	080138c0 	.word	0x080138c0
 8011fb0:	0801448c 	.word	0x0801448c
 8011fb4:	080144c0 	.word	0x080144c0
 8011fb8:	080147ac 	.word	0x080147ac

08011fbc <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8011fbc:	b5b0      	push	{r4, r5, r7, lr}
 8011fbe:	b0b2      	sub	sp, #200	@ 0xc8
 8011fc0:	af04      	add	r7, sp, #16
 8011fc2:	6078      	str	r0, [r7, #4]
 8011fc4:	460b      	mov	r3, r1
 8011fc6:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	3330      	adds	r3, #48	@ 0x30
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f7fa f8f6 	bl	800c1be <lfs_gstate_hasorphans>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	f083 0301 	eor.w	r3, r3, #1
 8011fd8:	b2db      	uxtb	r3, r3
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d001      	beq.n	8011fe2 <lfs_fs_deorphan+0x26>
        return 0;
 8011fde:	2300      	movs	r3, #0
 8011fe0:	e188      	b.n	80122f4 <lfs_fs_deorphan+0x338>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 8011fe8:	e171      	b.n	80122ce <lfs_fs_deorphan+0x312>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8011fea:	f107 0308 	add.w	r3, r7, #8
 8011fee:	2220      	movs	r2, #32
 8011ff0:	2100      	movs	r1, #0
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f000 fd39 	bl	8012a6a <memset>
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	77fb      	strb	r3, [r7, #31]
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 8012000:	2300      	movs	r3, #0
 8012002:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8012006:	e14a      	b.n	801229e <lfs_fs_deorphan+0x2e2>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8012008:	f107 0308 	add.w	r3, r7, #8
 801200c:	f103 0218 	add.w	r2, r3, #24
 8012010:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012014:	4619      	mov	r1, r3
 8012016:	6878      	ldr	r0, [r7, #4]
 8012018:	f7fb fde0 	bl	800dbdc <lfs_dir_fetch>
 801201c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
            if (err) {
 8012020:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012024:	2b00      	cmp	r3, #0
 8012026:	d002      	beq.n	801202e <lfs_fs_deorphan+0x72>
                return err;
 8012028:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801202c:	e162      	b.n	80122f4 <lfs_fs_deorphan+0x338>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 801202e:	7ffb      	ldrb	r3, [r7, #31]
 8012030:	f083 0301 	eor.w	r3, r3, #1
 8012034:	b2db      	uxtb	r3, r3
 8012036:	2b00      	cmp	r3, #0
 8012038:	f000 8125 	beq.w	8012286 <lfs_fs_deorphan+0x2ca>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 801203c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8012040:	f107 0308 	add.w	r3, r7, #8
 8012044:	3318      	adds	r3, #24
 8012046:	4619      	mov	r1, r3
 8012048:	6878      	ldr	r0, [r7, #4]
 801204a:	f7ff fdd1 	bl	8011bf0 <lfs_fs_parent>
 801204e:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8012052:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012056:	2b00      	cmp	r3, #0
 8012058:	da07      	bge.n	801206a <lfs_fs_deorphan+0xae>
 801205a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801205e:	f113 0f02 	cmn.w	r3, #2
 8012062:	d002      	beq.n	801206a <lfs_fs_deorphan+0xae>
                    return tag;
 8012064:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012068:	e10c      	b.n	8012284 <lfs_fs_deorphan+0x2c8>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 801206a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801206e:	2b00      	cmp	r3, #0
 8012070:	f040 80ac 	bne.w	80121cc <lfs_fs_deorphan+0x210>
 8012074:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012078:	f113 0f02 	cmn.w	r3, #2
 801207c:	f000 80a6 	beq.w	80121cc <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8012080:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012084:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8012088:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 801208c:	9300      	str	r3, [sp, #0]
 801208e:	4613      	mov	r3, r2
 8012090:	4a9a      	ldr	r2, [pc, #616]	@ (80122fc <lfs_fs_deorphan+0x340>)
 8012092:	6878      	ldr	r0, [r7, #4]
 8012094:	f7fa fc9c 	bl	800c9d0 <lfs_dir_get>
 8012098:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 801209c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	da02      	bge.n	80120aa <lfs_fs_deorphan+0xee>
                        return state;
 80120a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                    return tag;
 80120a8:	e124      	b.n	80122f4 <lfs_fs_deorphan+0x338>
                    }
                    lfs_pair_fromle32(pair);
 80120aa:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7f9 ff79 	bl	800bfa6 <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 80120b4:	f107 0308 	add.w	r3, r7, #8
 80120b8:	f103 0218 	add.w	r2, r3, #24
 80120bc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80120c0:	4611      	mov	r1, r2
 80120c2:	4618      	mov	r0, r3
 80120c4:	f7f9 ff42 	bl	800bf4c <lfs_pair_issync>
 80120c8:	4603      	mov	r3, r0
 80120ca:	f083 0301 	eor.w	r3, r3, #1
 80120ce:	b2db      	uxtb	r3, r3
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d07b      	beq.n	80121cc <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 80120d4:	6a38      	ldr	r0, [r7, #32]
 80120d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120d8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80120dc:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80120e0:	4c87      	ldr	r4, [pc, #540]	@ (8012300 <lfs_fs_deorphan+0x344>)
 80120e2:	9403      	str	r4, [sp, #12]
 80120e4:	9102      	str	r1, [sp, #8]
 80120e6:	9201      	str	r2, [sp, #4]
 80120e8:	9300      	str	r3, [sp, #0]
 80120ea:	4603      	mov	r3, r0
 80120ec:	f241 32a9 	movw	r2, #5033	@ 0x13a9
 80120f0:	4984      	ldr	r1, [pc, #528]	@ (8012304 <lfs_fs_deorphan+0x348>)
 80120f2:	4885      	ldr	r0, [pc, #532]	@ (8012308 <lfs_fs_deorphan+0x34c>)
 80120f4:	f000 fc54 	bl	80129a0 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 80120f8:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80120fc:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	3330      	adds	r3, #48	@ 0x30
 8012104:	f107 0208 	add.w	r2, r7, #8
 8012108:	4611      	mov	r1, r2
 801210a:	4618      	mov	r0, r3
 801210c:	f7fa f8a0 	bl	800c250 <lfs_gstate_hasmovehere>
 8012110:	4603      	mov	r3, r0
 8012112:	2b00      	cmp	r3, #0
 8012114:	d01c      	beq.n	8012150 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801211a:	4618      	mov	r0, r3
 801211c:	f7f9 ffe2 	bl	800c0e4 <lfs_tag_id>
 8012120:	4603      	mov	r3, r0
 8012122:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 8012126:	68b9      	ldr	r1, [r7, #8]
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 801212e:	4874      	ldr	r0, [pc, #464]	@ (8012300 <lfs_fs_deorphan+0x344>)
 8012130:	9002      	str	r0, [sp, #8]
 8012132:	9201      	str	r2, [sp, #4]
 8012134:	9300      	str	r3, [sp, #0]
 8012136:	460b      	mov	r3, r1
 8012138:	f241 32b4 	movw	r2, #5044	@ 0x13b4
 801213c:	4971      	ldr	r1, [pc, #452]	@ (8012304 <lfs_fs_deorphan+0x348>)
 801213e:	4873      	ldr	r0, [pc, #460]	@ (801230c <lfs_fs_deorphan+0x350>)
 8012140:	f000 fc2e 	bl	80129a0 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8012144:	2200      	movs	r2, #0
 8012146:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	f7ff fe14 	bl	8011d78 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8012150:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8012154:	4618      	mov	r0, r3
 8012156:	f7f9 ff40 	bl	800bfda <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801215a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 801215e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8012162:	4293      	cmp	r3, r2
 8012164:	d007      	beq.n	8012176 <lfs_fs_deorphan+0x1ba>
 8012166:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 801216a:	029b      	lsls	r3, r3, #10
 801216c:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8012170:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8012174:	e000      	b.n	8012178 <lfs_fs_deorphan+0x1bc>
 8012176:	2300      	movs	r3, #0
 8012178:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801217c:	2300      	movs	r3, #0
 801217e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012182:	4b63      	ldr	r3, [pc, #396]	@ (8012310 <lfs_fs_deorphan+0x354>)
 8012184:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012188:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 801218c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012190:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8012194:	f107 0108 	add.w	r1, r7, #8
 8012198:	2302      	movs	r3, #2
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f7fd f812 	bl	800f1c4 <lfs_dir_orphaningcommit>
 80121a0:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 80121a4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80121a8:	4618      	mov	r0, r3
 80121aa:	f7f9 fefc 	bl	800bfa6 <lfs_pair_fromle32>
                        if (state < 0) {
 80121ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	da02      	bge.n	80121bc <lfs_fs_deorphan+0x200>
                            return state;
 80121b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        return state;
 80121ba:	e063      	b.n	8012284 <lfs_fs_deorphan+0x2c8>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 80121bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80121c0:	2b03      	cmp	r3, #3
 80121c2:	d16c      	bne.n	801229e <lfs_fs_deorphan+0x2e2>
                            moreorphans = true;
 80121c4:	2301      	movs	r3, #1
 80121c6:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 80121ca:	e068      	b.n	801229e <lfs_fs_deorphan+0x2e2>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 80121cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80121d0:	2b01      	cmp	r3, #1
 80121d2:	d158      	bne.n	8012286 <lfs_fs_deorphan+0x2ca>
 80121d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80121d8:	f113 0f02 	cmn.w	r3, #2
 80121dc:	d153      	bne.n	8012286 <lfs_fs_deorphan+0x2ca>
 80121de:	78fb      	ldrb	r3, [r7, #3]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d050      	beq.n	8012286 <lfs_fs_deorphan+0x2ca>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 80121e4:	6a3a      	ldr	r2, [r7, #32]
 80121e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121e8:	4945      	ldr	r1, [pc, #276]	@ (8012300 <lfs_fs_deorphan+0x344>)
 80121ea:	9101      	str	r1, [sp, #4]
 80121ec:	9300      	str	r3, [sp, #0]
 80121ee:	4613      	mov	r3, r2
 80121f0:	f241 32d4 	movw	r2, #5076	@ 0x13d4
 80121f4:	4943      	ldr	r1, [pc, #268]	@ (8012304 <lfs_fs_deorphan+0x348>)
 80121f6:	4847      	ldr	r0, [pc, #284]	@ (8012314 <lfs_fs_deorphan+0x358>)
 80121f8:	f000 fbd2 	bl	80129a0 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8012202:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012206:	4619      	mov	r1, r3
 8012208:	6878      	ldr	r0, [r7, #4]
 801220a:	f7fb fd03 	bl	800dc14 <lfs_dir_getgstate>
 801220e:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                    if (err) {
 8012212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012216:	2b00      	cmp	r3, #0
 8012218:	d002      	beq.n	8012220 <lfs_fs_deorphan+0x264>
                        return err;
 801221a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801221e:	e030      	b.n	8012282 <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8012220:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012224:	3318      	adds	r3, #24
 8012226:	4618      	mov	r0, r3
 8012228:	f7f9 fed7 	bl	800bfda <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801222c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012230:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8012234:	051a      	lsls	r2, r3, #20
 8012236:	4b38      	ldr	r3, [pc, #224]	@ (8012318 <lfs_fs_deorphan+0x35c>)
 8012238:	4313      	orrs	r3, r2
 801223a:	673b      	str	r3, [r7, #112]	@ 0x70
 801223c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012240:	3318      	adds	r3, #24
 8012242:	677b      	str	r3, [r7, #116]	@ 0x74
 8012244:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8012248:	f107 0108 	add.w	r1, r7, #8
 801224c:	2301      	movs	r3, #1
 801224e:	6878      	ldr	r0, [r7, #4]
 8012250:	f7fc ffb8 	bl	800f1c4 <lfs_dir_orphaningcommit>
 8012254:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8012258:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801225c:	3318      	adds	r3, #24
 801225e:	4618      	mov	r0, r3
 8012260:	f7f9 fea1 	bl	800bfa6 <lfs_pair_fromle32>
                    if (state < 0) {
 8012264:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012268:	2b00      	cmp	r3, #0
 801226a:	da02      	bge.n	8012272 <lfs_fs_deorphan+0x2b6>
                        return state;
 801226c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012270:	e007      	b.n	8012282 <lfs_fs_deorphan+0x2c6>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8012272:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012276:	2b03      	cmp	r3, #3
 8012278:	d110      	bne.n	801229c <lfs_fs_deorphan+0x2e0>
                        moreorphans = true;
 801227a:	2301      	movs	r3, #1
 801227c:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8012280:	e00d      	b.n	801229e <lfs_fs_deorphan+0x2e2>
                    return tag;
 8012282:	e037      	b.n	80122f4 <lfs_fs_deorphan+0x338>
                return err;
 8012284:	e036      	b.n	80122f4 <lfs_fs_deorphan+0x338>
                    // refetch tail
                    continue;
                }
            }

            pdir = dir;
 8012286:	f107 0408 	add.w	r4, r7, #8
 801228a:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 801228e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012292:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012296:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801229a:	e000      	b.n	801229e <lfs_fs_deorphan+0x2e2>
                    continue;
 801229c:	bf00      	nop
        while (!lfs_pair_isnull(pdir.tail)) {
 801229e:	f107 0308 	add.w	r3, r7, #8
 80122a2:	3318      	adds	r3, #24
 80122a4:	4618      	mov	r0, r3
 80122a6:	f7f9 fe0c 	bl	800bec2 <lfs_pair_isnull>
 80122aa:	4603      	mov	r3, r0
 80122ac:	f083 0301 	eor.w	r3, r3, #1
 80122b0:	b2db      	uxtb	r3, r3
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	f47f aea8 	bne.w	8012008 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 80122b8:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d001      	beq.n	80122c4 <lfs_fs_deorphan+0x308>
 80122c0:	2300      	movs	r3, #0
 80122c2:	e002      	b.n	80122ca <lfs_fs_deorphan+0x30e>
 80122c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80122c8:	3301      	adds	r3, #1
 80122ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 80122ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80122d2:	2b01      	cmp	r3, #1
 80122d4:	f77f ae89 	ble.w	8011fea <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	3330      	adds	r3, #48	@ 0x30
 80122dc:	4618      	mov	r0, r3
 80122de:	f7f9 ff81 	bl	800c1e4 <lfs_gstate_getorphans>
 80122e2:	4603      	mov	r3, r0
 80122e4:	425b      	negs	r3, r3
 80122e6:	b2db      	uxtb	r3, r3
 80122e8:	b25b      	sxtb	r3, r3
 80122ea:	4619      	mov	r1, r3
 80122ec:	6878      	ldr	r0, [r7, #4]
 80122ee:	f7ff fcf3 	bl	8011cd8 <lfs_fs_preporphans>
 80122f2:	4603      	mov	r3, r0
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	37b8      	adds	r7, #184	@ 0xb8
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bdb0      	pop	{r4, r5, r7, pc}
 80122fc:	7ffffc00 	.word	0x7ffffc00
 8012300:	080139e0 	.word	0x080139e0
 8012304:	080138c0 	.word	0x080138c0
 8012308:	080144f4 	.word	0x080144f4
 801230c:	08014538 	.word	0x08014538
 8012310:	600ffc08 	.word	0x600ffc08
 8012314:	08014580 	.word	0x08014580
 8012318:	000ffc08 	.word	0x000ffc08

0801231c <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 801231c:	b580      	push	{r7, lr}
 801231e:	b084      	sub	sp, #16
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 8012324:	6878      	ldr	r0, [r7, #4]
 8012326:	f7ff fd61 	bl	8011dec <lfs_fs_desuperblock>
 801232a:	60f8      	str	r0, [r7, #12]
    if (err) {
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d001      	beq.n	8012336 <lfs_fs_forceconsistency+0x1a>
        return err;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	e013      	b.n	801235e <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 8012336:	6878      	ldr	r0, [r7, #4]
 8012338:	f7ff fdc4 	bl	8011ec4 <lfs_fs_demove>
 801233c:	60f8      	str	r0, [r7, #12]
    if (err) {
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d001      	beq.n	8012348 <lfs_fs_forceconsistency+0x2c>
        return err;
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	e00a      	b.n	801235e <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 8012348:	2101      	movs	r1, #1
 801234a:	6878      	ldr	r0, [r7, #4]
 801234c:	f7ff fe36 	bl	8011fbc <lfs_fs_deorphan>
 8012350:	60f8      	str	r0, [r7, #12]
    if (err) {
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d001      	beq.n	801235c <lfs_fs_forceconsistency+0x40>
        return err;
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	e000      	b.n	801235e <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 801235c:	2300      	movs	r3, #0
}
 801235e:	4618      	mov	r0, r3
 8012360:	3710      	adds	r7, #16
 8012362:	46bd      	mov	sp, r7
 8012364:	bd80      	pop	{r7, pc}

08012366 <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8012366:	b480      	push	{r7}
 8012368:	b085      	sub	sp, #20
 801236a:	af00      	add	r7, sp, #0
 801236c:	6078      	str	r0, [r7, #4]
 801236e:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	1c5a      	adds	r2, r3, #1
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	601a      	str	r2, [r3, #0]
    return 0;
 801237e:	2300      	movs	r3, #0
}
 8012380:	4618      	mov	r0, r3
 8012382:	3714      	adds	r7, #20
 8012384:	46bd      	mov	sp, r7
 8012386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238a:	4770      	bx	lr

0801238c <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 801238c:	b580      	push	{r7, lr}
 801238e:	b084      	sub	sp, #16
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8012394:	2300      	movs	r3, #0
 8012396:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 8012398:	f107 0208 	add.w	r2, r7, #8
 801239c:	2300      	movs	r3, #0
 801239e:	4907      	ldr	r1, [pc, #28]	@ (80123bc <lfs_fs_size_+0x30>)
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	f7ff fa65 	bl	8011870 <lfs_fs_traverse_>
 80123a6:	60f8      	str	r0, [r7, #12]
    if (err) {
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d001      	beq.n	80123b2 <lfs_fs_size_+0x26>
        return err;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	e000      	b.n	80123b4 <lfs_fs_size_+0x28>
    }

    return size;
 80123b2:	68bb      	ldr	r3, [r7, #8]
}
 80123b4:	4618      	mov	r0, r3
 80123b6:	3710      	adds	r7, #16
 80123b8:	46bd      	mov	sp, r7
 80123ba:	bd80      	pop	{r7, pc}
 80123bc:	08012367 	.word	0x08012367

080123c0 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b084      	sub	sp, #16
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
 80123c8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80123ca:	2300      	movs	r3, #0
 80123cc:	60fb      	str	r3, [r7, #12]
    if (err) {
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d001      	beq.n	80123d8 <lfs_format+0x18>
        return err;
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	e005      	b.n	80123e4 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_format_(lfs, cfg);
 80123d8:	6839      	ldr	r1, [r7, #0]
 80123da:	6878      	ldr	r0, [r7, #4]
 80123dc:	f7fe ff48 	bl	8011270 <lfs_format_>
 80123e0:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 80123e2:	68fb      	ldr	r3, [r7, #12]
}
 80123e4:	4618      	mov	r0, r3
 80123e6:	3710      	adds	r7, #16
 80123e8:	46bd      	mov	sp, r7
 80123ea:	bd80      	pop	{r7, pc}

080123ec <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b084      	sub	sp, #16
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
 80123f4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80123f6:	2300      	movs	r3, #0
 80123f8:	60fb      	str	r3, [r7, #12]
    if (err) {
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d001      	beq.n	8012404 <lfs_mount+0x18>
        return err;
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	e005      	b.n	8012410 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 8012404:	6839      	ldr	r1, [r7, #0]
 8012406:	6878      	ldr	r0, [r7, #4]
 8012408:	f7ff f824 	bl	8011454 <lfs_mount_>
 801240c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 801240e:	68fb      	ldr	r3, [r7, #12]
}
 8012410:	4618      	mov	r0, r3
 8012412:	3710      	adds	r7, #16
 8012414:	46bd      	mov	sp, r7
 8012416:	bd80      	pop	{r7, pc}

08012418 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 8012418:	b580      	push	{r7, lr}
 801241a:	b084      	sub	sp, #16
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
 8012420:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8012422:	2300      	movs	r3, #0
 8012424:	60fb      	str	r3, [r7, #12]
    if (err) {
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d001      	beq.n	8012430 <lfs_remove+0x18>
        return err;
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	e005      	b.n	801243c <lfs_remove+0x24>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_remove_(lfs, path);
 8012430:	6839      	ldr	r1, [r7, #0]
 8012432:	6878      	ldr	r0, [r7, #4]
 8012434:	f7fe fb30 	bl	8010a98 <lfs_remove_>
 8012438:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 801243a:	68fb      	ldr	r3, [r7, #12]
}
 801243c:	4618      	mov	r0, r3
 801243e:	3710      	adds	r7, #16
 8012440:	46bd      	mov	sp, r7
 8012442:	bd80      	pop	{r7, pc}

08012444 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8012444:	b580      	push	{r7, lr}
 8012446:	b086      	sub	sp, #24
 8012448:	af00      	add	r7, sp, #0
 801244a:	60f8      	str	r0, [r7, #12]
 801244c:	60b9      	str	r1, [r7, #8]
 801244e:	607a      	str	r2, [r7, #4]
 8012450:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8012452:	2300      	movs	r3, #0
 8012454:	617b      	str	r3, [r7, #20]
    if (err) {
 8012456:	697b      	ldr	r3, [r7, #20]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d001      	beq.n	8012460 <lfs_file_open+0x1c>
        return err;
 801245c:	697b      	ldr	r3, [r7, #20]
 801245e:	e01a      	b.n	8012496 <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, (unsigned)flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012464:	68b9      	ldr	r1, [r7, #8]
 8012466:	4618      	mov	r0, r3
 8012468:	f7fa f822 	bl	800c4b0 <lfs_mlist_isopen>
 801246c:	4603      	mov	r3, r0
 801246e:	f083 0301 	eor.w	r3, r3, #1
 8012472:	b2db      	uxtb	r3, r3
 8012474:	2b00      	cmp	r3, #0
 8012476:	d106      	bne.n	8012486 <lfs_file_open+0x42>
 8012478:	4b09      	ldr	r3, [pc, #36]	@ (80124a0 <lfs_file_open+0x5c>)
 801247a:	4a0a      	ldr	r2, [pc, #40]	@ (80124a4 <lfs_file_open+0x60>)
 801247c:	f241 71e5 	movw	r1, #6117	@ 0x17e5
 8012480:	4809      	ldr	r0, [pc, #36]	@ (80124a8 <lfs_file_open+0x64>)
 8012482:	f000 f8dd 	bl	8012640 <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	687a      	ldr	r2, [r7, #4]
 801248a:	68b9      	ldr	r1, [r7, #8]
 801248c:	68f8      	ldr	r0, [r7, #12]
 801248e:	f7fd fdc1 	bl	8010014 <lfs_file_open_>
 8012492:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8012494:	697b      	ldr	r3, [r7, #20]
}
 8012496:	4618      	mov	r0, r3
 8012498:	3718      	adds	r7, #24
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}
 801249e:	bf00      	nop
 80124a0:	080145d0 	.word	0x080145d0
 80124a4:	080147bc 	.word	0x080147bc
 80124a8:	080138c0 	.word	0x080138c0

080124ac <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b084      	sub	sp, #16
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
 80124b4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80124b6:	2300      	movs	r3, #0
 80124b8:	60fb      	str	r3, [r7, #12]
    if (err) {
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d001      	beq.n	80124c4 <lfs_file_close+0x18>
        return err;
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	e015      	b.n	80124f0 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124c8:	6839      	ldr	r1, [r7, #0]
 80124ca:	4618      	mov	r0, r3
 80124cc:	f7f9 fff0 	bl	800c4b0 <lfs_mlist_isopen>
 80124d0:	4603      	mov	r3, r0
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d106      	bne.n	80124e4 <lfs_file_close+0x38>
 80124d6:	4b08      	ldr	r3, [pc, #32]	@ (80124f8 <lfs_file_close+0x4c>)
 80124d8:	4a08      	ldr	r2, [pc, #32]	@ (80124fc <lfs_file_close+0x50>)
 80124da:	f641 0109 	movw	r1, #6153	@ 0x1809
 80124de:	4808      	ldr	r0, [pc, #32]	@ (8012500 <lfs_file_close+0x54>)
 80124e0:	f000 f8ae 	bl	8012640 <__assert_func>

    err = lfs_file_close_(lfs, file);
 80124e4:	6839      	ldr	r1, [r7, #0]
 80124e6:	6878      	ldr	r0, [r7, #4]
 80124e8:	f7fd fdac 	bl	8010044 <lfs_file_close_>
 80124ec:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80124ee:	68fb      	ldr	r3, [r7, #12]
}
 80124f0:	4618      	mov	r0, r3
 80124f2:	3710      	adds	r7, #16
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}
 80124f8:	08014608 	.word	0x08014608
 80124fc:	080147cc 	.word	0x080147cc
 8012500:	080138c0 	.word	0x080138c0

08012504 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8012504:	b580      	push	{r7, lr}
 8012506:	b086      	sub	sp, #24
 8012508:	af00      	add	r7, sp, #0
 801250a:	60f8      	str	r0, [r7, #12]
 801250c:	60b9      	str	r1, [r7, #8]
 801250e:	607a      	str	r2, [r7, #4]
 8012510:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8012512:	2300      	movs	r3, #0
 8012514:	617b      	str	r3, [r7, #20]
    if (err) {
 8012516:	697b      	ldr	r3, [r7, #20]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d001      	beq.n	8012520 <lfs_file_read+0x1c>
        return err;
 801251c:	697b      	ldr	r3, [r7, #20]
 801251e:	e017      	b.n	8012550 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012524:	68b9      	ldr	r1, [r7, #8]
 8012526:	4618      	mov	r0, r3
 8012528:	f7f9 ffc2 	bl	800c4b0 <lfs_mlist_isopen>
 801252c:	4603      	mov	r3, r0
 801252e:	2b00      	cmp	r3, #0
 8012530:	d106      	bne.n	8012540 <lfs_file_read+0x3c>
 8012532:	4b09      	ldr	r3, [pc, #36]	@ (8012558 <lfs_file_read+0x54>)
 8012534:	4a09      	ldr	r2, [pc, #36]	@ (801255c <lfs_file_read+0x58>)
 8012536:	f641 012b 	movw	r1, #6187	@ 0x182b
 801253a:	4809      	ldr	r0, [pc, #36]	@ (8012560 <lfs_file_read+0x5c>)
 801253c:	f000 f880 	bl	8012640 <__assert_func>

    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 8012540:	683b      	ldr	r3, [r7, #0]
 8012542:	687a      	ldr	r2, [r7, #4]
 8012544:	68b9      	ldr	r1, [r7, #8]
 8012546:	68f8      	ldr	r0, [r7, #12]
 8012548:	f7fe f8dc 	bl	8010704 <lfs_file_read_>
 801254c:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 801254e:	693b      	ldr	r3, [r7, #16]
}
 8012550:	4618      	mov	r0, r3
 8012552:	3718      	adds	r7, #24
 8012554:	46bd      	mov	sp, r7
 8012556:	bd80      	pop	{r7, pc}
 8012558:	08014608 	.word	0x08014608
 801255c:	080147dc 	.word	0x080147dc
 8012560:	080138c0 	.word	0x080138c0

08012564 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8012564:	b580      	push	{r7, lr}
 8012566:	b086      	sub	sp, #24
 8012568:	af00      	add	r7, sp, #0
 801256a:	60f8      	str	r0, [r7, #12]
 801256c:	60b9      	str	r1, [r7, #8]
 801256e:	607a      	str	r2, [r7, #4]
 8012570:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8012572:	2300      	movs	r3, #0
 8012574:	617b      	str	r3, [r7, #20]
    if (err) {
 8012576:	697b      	ldr	r3, [r7, #20]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d001      	beq.n	8012580 <lfs_file_write+0x1c>
        return err;
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	e017      	b.n	80125b0 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012584:	68b9      	ldr	r1, [r7, #8]
 8012586:	4618      	mov	r0, r3
 8012588:	f7f9 ff92 	bl	800c4b0 <lfs_mlist_isopen>
 801258c:	4603      	mov	r3, r0
 801258e:	2b00      	cmp	r3, #0
 8012590:	d106      	bne.n	80125a0 <lfs_file_write+0x3c>
 8012592:	4b09      	ldr	r3, [pc, #36]	@ (80125b8 <lfs_file_write+0x54>)
 8012594:	4a09      	ldr	r2, [pc, #36]	@ (80125bc <lfs_file_write+0x58>)
 8012596:	f641 013d 	movw	r1, #6205	@ 0x183d
 801259a:	4809      	ldr	r0, [pc, #36]	@ (80125c0 <lfs_file_write+0x5c>)
 801259c:	f000 f850 	bl	8012640 <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 80125a0:	683b      	ldr	r3, [r7, #0]
 80125a2:	687a      	ldr	r2, [r7, #4]
 80125a4:	68b9      	ldr	r1, [r7, #8]
 80125a6:	68f8      	ldr	r0, [r7, #12]
 80125a8:	f7fe f9f2 	bl	8010990 <lfs_file_write_>
 80125ac:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 80125ae:	693b      	ldr	r3, [r7, #16]
}
 80125b0:	4618      	mov	r0, r3
 80125b2:	3718      	adds	r7, #24
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bd80      	pop	{r7, pc}
 80125b8:	08014608 	.word	0x08014608
 80125bc:	080147ec 	.word	0x080147ec
 80125c0:	080138c0 	.word	0x080138c0

080125c4 <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 80125c4:	b480      	push	{r7}
 80125c6:	b087      	sub	sp, #28
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	60f8      	str	r0, [r7, #12]
 80125cc:	60b9      	str	r1, [r7, #8]
 80125ce:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 80125d4:	2300      	movs	r3, #0
 80125d6:	617b      	str	r3, [r7, #20]
 80125d8:	e024      	b.n	8012624 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	091a      	lsrs	r2, r3, #4
 80125de:	6939      	ldr	r1, [r7, #16]
 80125e0:	697b      	ldr	r3, [r7, #20]
 80125e2:	440b      	add	r3, r1
 80125e4:	781b      	ldrb	r3, [r3, #0]
 80125e6:	4619      	mov	r1, r3
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	404b      	eors	r3, r1
 80125ec:	f003 030f 	and.w	r3, r3, #15
 80125f0:	4912      	ldr	r1, [pc, #72]	@ (801263c <lfs_crc+0x78>)
 80125f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80125f6:	4053      	eors	r3, r2
 80125f8:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	091a      	lsrs	r2, r3, #4
 80125fe:	6939      	ldr	r1, [r7, #16]
 8012600:	697b      	ldr	r3, [r7, #20]
 8012602:	440b      	add	r3, r1
 8012604:	781b      	ldrb	r3, [r3, #0]
 8012606:	091b      	lsrs	r3, r3, #4
 8012608:	b2db      	uxtb	r3, r3
 801260a:	4619      	mov	r1, r3
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	404b      	eors	r3, r1
 8012610:	f003 030f 	and.w	r3, r3, #15
 8012614:	4909      	ldr	r1, [pc, #36]	@ (801263c <lfs_crc+0x78>)
 8012616:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801261a:	4053      	eors	r3, r2
 801261c:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 801261e:	697b      	ldr	r3, [r7, #20]
 8012620:	3301      	adds	r3, #1
 8012622:	617b      	str	r3, [r7, #20]
 8012624:	697a      	ldr	r2, [r7, #20]
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	429a      	cmp	r2, r3
 801262a:	d3d6      	bcc.n	80125da <lfs_crc+0x16>
    }

    return crc;
 801262c:	68fb      	ldr	r3, [r7, #12]
}
 801262e:	4618      	mov	r0, r3
 8012630:	371c      	adds	r7, #28
 8012632:	46bd      	mov	sp, r7
 8012634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012638:	4770      	bx	lr
 801263a:	bf00      	nop
 801263c:	080147fc 	.word	0x080147fc

08012640 <__assert_func>:
 8012640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012642:	4614      	mov	r4, r2
 8012644:	461a      	mov	r2, r3
 8012646:	4b09      	ldr	r3, [pc, #36]	@ (801266c <__assert_func+0x2c>)
 8012648:	4605      	mov	r5, r0
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	68d8      	ldr	r0, [r3, #12]
 801264e:	b14c      	cbz	r4, 8012664 <__assert_func+0x24>
 8012650:	4b07      	ldr	r3, [pc, #28]	@ (8012670 <__assert_func+0x30>)
 8012652:	9100      	str	r1, [sp, #0]
 8012654:	4907      	ldr	r1, [pc, #28]	@ (8012674 <__assert_func+0x34>)
 8012656:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801265a:	462b      	mov	r3, r5
 801265c:	f000 f970 	bl	8012940 <fiprintf>
 8012660:	f000 fabc 	bl	8012bdc <abort>
 8012664:	4b04      	ldr	r3, [pc, #16]	@ (8012678 <__assert_func+0x38>)
 8012666:	461c      	mov	r4, r3
 8012668:	e7f3      	b.n	8012652 <__assert_func+0x12>
 801266a:	bf00      	nop
 801266c:	20000018 	.word	0x20000018
 8012670:	0801483c 	.word	0x0801483c
 8012674:	08014849 	.word	0x08014849
 8012678:	08014877 	.word	0x08014877

0801267c <malloc>:
 801267c:	4b02      	ldr	r3, [pc, #8]	@ (8012688 <malloc+0xc>)
 801267e:	4601      	mov	r1, r0
 8012680:	6818      	ldr	r0, [r3, #0]
 8012682:	f000 b82d 	b.w	80126e0 <_malloc_r>
 8012686:	bf00      	nop
 8012688:	20000018 	.word	0x20000018

0801268c <free>:
 801268c:	4b02      	ldr	r3, [pc, #8]	@ (8012698 <free+0xc>)
 801268e:	4601      	mov	r1, r0
 8012690:	6818      	ldr	r0, [r3, #0]
 8012692:	f000 baab 	b.w	8012bec <_free_r>
 8012696:	bf00      	nop
 8012698:	20000018 	.word	0x20000018

0801269c <sbrk_aligned>:
 801269c:	b570      	push	{r4, r5, r6, lr}
 801269e:	4e0f      	ldr	r6, [pc, #60]	@ (80126dc <sbrk_aligned+0x40>)
 80126a0:	460c      	mov	r4, r1
 80126a2:	4605      	mov	r5, r0
 80126a4:	6831      	ldr	r1, [r6, #0]
 80126a6:	b911      	cbnz	r1, 80126ae <sbrk_aligned+0x12>
 80126a8:	f000 fa3c 	bl	8012b24 <_sbrk_r>
 80126ac:	6030      	str	r0, [r6, #0]
 80126ae:	4621      	mov	r1, r4
 80126b0:	4628      	mov	r0, r5
 80126b2:	f000 fa37 	bl	8012b24 <_sbrk_r>
 80126b6:	1c43      	adds	r3, r0, #1
 80126b8:	d103      	bne.n	80126c2 <sbrk_aligned+0x26>
 80126ba:	f04f 34ff 	mov.w	r4, #4294967295
 80126be:	4620      	mov	r0, r4
 80126c0:	bd70      	pop	{r4, r5, r6, pc}
 80126c2:	1cc4      	adds	r4, r0, #3
 80126c4:	f024 0403 	bic.w	r4, r4, #3
 80126c8:	42a0      	cmp	r0, r4
 80126ca:	d0f8      	beq.n	80126be <sbrk_aligned+0x22>
 80126cc:	1a21      	subs	r1, r4, r0
 80126ce:	4628      	mov	r0, r5
 80126d0:	f000 fa28 	bl	8012b24 <_sbrk_r>
 80126d4:	3001      	adds	r0, #1
 80126d6:	d1f2      	bne.n	80126be <sbrk_aligned+0x22>
 80126d8:	e7ef      	b.n	80126ba <sbrk_aligned+0x1e>
 80126da:	bf00      	nop
 80126dc:	200001dc 	.word	0x200001dc

080126e0 <_malloc_r>:
 80126e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126e4:	1ccd      	adds	r5, r1, #3
 80126e6:	4606      	mov	r6, r0
 80126e8:	f025 0503 	bic.w	r5, r5, #3
 80126ec:	3508      	adds	r5, #8
 80126ee:	2d0c      	cmp	r5, #12
 80126f0:	bf38      	it	cc
 80126f2:	250c      	movcc	r5, #12
 80126f4:	2d00      	cmp	r5, #0
 80126f6:	db01      	blt.n	80126fc <_malloc_r+0x1c>
 80126f8:	42a9      	cmp	r1, r5
 80126fa:	d904      	bls.n	8012706 <_malloc_r+0x26>
 80126fc:	230c      	movs	r3, #12
 80126fe:	6033      	str	r3, [r6, #0]
 8012700:	2000      	movs	r0, #0
 8012702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012706:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80127dc <_malloc_r+0xfc>
 801270a:	f000 f869 	bl	80127e0 <__malloc_lock>
 801270e:	f8d8 3000 	ldr.w	r3, [r8]
 8012712:	461c      	mov	r4, r3
 8012714:	bb44      	cbnz	r4, 8012768 <_malloc_r+0x88>
 8012716:	4629      	mov	r1, r5
 8012718:	4630      	mov	r0, r6
 801271a:	f7ff ffbf 	bl	801269c <sbrk_aligned>
 801271e:	1c43      	adds	r3, r0, #1
 8012720:	4604      	mov	r4, r0
 8012722:	d158      	bne.n	80127d6 <_malloc_r+0xf6>
 8012724:	f8d8 4000 	ldr.w	r4, [r8]
 8012728:	4627      	mov	r7, r4
 801272a:	2f00      	cmp	r7, #0
 801272c:	d143      	bne.n	80127b6 <_malloc_r+0xd6>
 801272e:	2c00      	cmp	r4, #0
 8012730:	d04b      	beq.n	80127ca <_malloc_r+0xea>
 8012732:	6823      	ldr	r3, [r4, #0]
 8012734:	4639      	mov	r1, r7
 8012736:	4630      	mov	r0, r6
 8012738:	eb04 0903 	add.w	r9, r4, r3
 801273c:	f000 f9f2 	bl	8012b24 <_sbrk_r>
 8012740:	4581      	cmp	r9, r0
 8012742:	d142      	bne.n	80127ca <_malloc_r+0xea>
 8012744:	6821      	ldr	r1, [r4, #0]
 8012746:	4630      	mov	r0, r6
 8012748:	1a6d      	subs	r5, r5, r1
 801274a:	4629      	mov	r1, r5
 801274c:	f7ff ffa6 	bl	801269c <sbrk_aligned>
 8012750:	3001      	adds	r0, #1
 8012752:	d03a      	beq.n	80127ca <_malloc_r+0xea>
 8012754:	6823      	ldr	r3, [r4, #0]
 8012756:	442b      	add	r3, r5
 8012758:	6023      	str	r3, [r4, #0]
 801275a:	f8d8 3000 	ldr.w	r3, [r8]
 801275e:	685a      	ldr	r2, [r3, #4]
 8012760:	bb62      	cbnz	r2, 80127bc <_malloc_r+0xdc>
 8012762:	f8c8 7000 	str.w	r7, [r8]
 8012766:	e00f      	b.n	8012788 <_malloc_r+0xa8>
 8012768:	6822      	ldr	r2, [r4, #0]
 801276a:	1b52      	subs	r2, r2, r5
 801276c:	d420      	bmi.n	80127b0 <_malloc_r+0xd0>
 801276e:	2a0b      	cmp	r2, #11
 8012770:	d917      	bls.n	80127a2 <_malloc_r+0xc2>
 8012772:	1961      	adds	r1, r4, r5
 8012774:	42a3      	cmp	r3, r4
 8012776:	6025      	str	r5, [r4, #0]
 8012778:	bf18      	it	ne
 801277a:	6059      	strne	r1, [r3, #4]
 801277c:	6863      	ldr	r3, [r4, #4]
 801277e:	bf08      	it	eq
 8012780:	f8c8 1000 	streq.w	r1, [r8]
 8012784:	5162      	str	r2, [r4, r5]
 8012786:	604b      	str	r3, [r1, #4]
 8012788:	4630      	mov	r0, r6
 801278a:	f000 f82f 	bl	80127ec <__malloc_unlock>
 801278e:	f104 000b 	add.w	r0, r4, #11
 8012792:	1d23      	adds	r3, r4, #4
 8012794:	f020 0007 	bic.w	r0, r0, #7
 8012798:	1ac2      	subs	r2, r0, r3
 801279a:	bf1c      	itt	ne
 801279c:	1a1b      	subne	r3, r3, r0
 801279e:	50a3      	strne	r3, [r4, r2]
 80127a0:	e7af      	b.n	8012702 <_malloc_r+0x22>
 80127a2:	6862      	ldr	r2, [r4, #4]
 80127a4:	42a3      	cmp	r3, r4
 80127a6:	bf0c      	ite	eq
 80127a8:	f8c8 2000 	streq.w	r2, [r8]
 80127ac:	605a      	strne	r2, [r3, #4]
 80127ae:	e7eb      	b.n	8012788 <_malloc_r+0xa8>
 80127b0:	4623      	mov	r3, r4
 80127b2:	6864      	ldr	r4, [r4, #4]
 80127b4:	e7ae      	b.n	8012714 <_malloc_r+0x34>
 80127b6:	463c      	mov	r4, r7
 80127b8:	687f      	ldr	r7, [r7, #4]
 80127ba:	e7b6      	b.n	801272a <_malloc_r+0x4a>
 80127bc:	461a      	mov	r2, r3
 80127be:	685b      	ldr	r3, [r3, #4]
 80127c0:	42a3      	cmp	r3, r4
 80127c2:	d1fb      	bne.n	80127bc <_malloc_r+0xdc>
 80127c4:	2300      	movs	r3, #0
 80127c6:	6053      	str	r3, [r2, #4]
 80127c8:	e7de      	b.n	8012788 <_malloc_r+0xa8>
 80127ca:	230c      	movs	r3, #12
 80127cc:	4630      	mov	r0, r6
 80127ce:	6033      	str	r3, [r6, #0]
 80127d0:	f000 f80c 	bl	80127ec <__malloc_unlock>
 80127d4:	e794      	b.n	8012700 <_malloc_r+0x20>
 80127d6:	6005      	str	r5, [r0, #0]
 80127d8:	e7d6      	b.n	8012788 <_malloc_r+0xa8>
 80127da:	bf00      	nop
 80127dc:	200001e0 	.word	0x200001e0

080127e0 <__malloc_lock>:
 80127e0:	4801      	ldr	r0, [pc, #4]	@ (80127e8 <__malloc_lock+0x8>)
 80127e2:	f000 b9ec 	b.w	8012bbe <__retarget_lock_acquire_recursive>
 80127e6:	bf00      	nop
 80127e8:	20000324 	.word	0x20000324

080127ec <__malloc_unlock>:
 80127ec:	4801      	ldr	r0, [pc, #4]	@ (80127f4 <__malloc_unlock+0x8>)
 80127ee:	f000 b9e7 	b.w	8012bc0 <__retarget_lock_release_recursive>
 80127f2:	bf00      	nop
 80127f4:	20000324 	.word	0x20000324

080127f8 <std>:
 80127f8:	2300      	movs	r3, #0
 80127fa:	b510      	push	{r4, lr}
 80127fc:	4604      	mov	r4, r0
 80127fe:	6083      	str	r3, [r0, #8]
 8012800:	8181      	strh	r1, [r0, #12]
 8012802:	4619      	mov	r1, r3
 8012804:	6643      	str	r3, [r0, #100]	@ 0x64
 8012806:	81c2      	strh	r2, [r0, #14]
 8012808:	2208      	movs	r2, #8
 801280a:	6183      	str	r3, [r0, #24]
 801280c:	e9c0 3300 	strd	r3, r3, [r0]
 8012810:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012814:	305c      	adds	r0, #92	@ 0x5c
 8012816:	f000 f928 	bl	8012a6a <memset>
 801281a:	4b0d      	ldr	r3, [pc, #52]	@ (8012850 <std+0x58>)
 801281c:	6224      	str	r4, [r4, #32]
 801281e:	6263      	str	r3, [r4, #36]	@ 0x24
 8012820:	4b0c      	ldr	r3, [pc, #48]	@ (8012854 <std+0x5c>)
 8012822:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012824:	4b0c      	ldr	r3, [pc, #48]	@ (8012858 <std+0x60>)
 8012826:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012828:	4b0c      	ldr	r3, [pc, #48]	@ (801285c <std+0x64>)
 801282a:	6323      	str	r3, [r4, #48]	@ 0x30
 801282c:	4b0c      	ldr	r3, [pc, #48]	@ (8012860 <std+0x68>)
 801282e:	429c      	cmp	r4, r3
 8012830:	d006      	beq.n	8012840 <std+0x48>
 8012832:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012836:	4294      	cmp	r4, r2
 8012838:	d002      	beq.n	8012840 <std+0x48>
 801283a:	33d0      	adds	r3, #208	@ 0xd0
 801283c:	429c      	cmp	r4, r3
 801283e:	d105      	bne.n	801284c <std+0x54>
 8012840:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012848:	f000 b9b8 	b.w	8012bbc <__retarget_lock_init_recursive>
 801284c:	bd10      	pop	{r4, pc}
 801284e:	bf00      	nop
 8012850:	080129c5 	.word	0x080129c5
 8012854:	080129e7 	.word	0x080129e7
 8012858:	08012a1f 	.word	0x08012a1f
 801285c:	08012a43 	.word	0x08012a43
 8012860:	200001e4 	.word	0x200001e4

08012864 <stdio_exit_handler>:
 8012864:	4a02      	ldr	r2, [pc, #8]	@ (8012870 <stdio_exit_handler+0xc>)
 8012866:	4903      	ldr	r1, [pc, #12]	@ (8012874 <stdio_exit_handler+0x10>)
 8012868:	4803      	ldr	r0, [pc, #12]	@ (8012878 <stdio_exit_handler+0x14>)
 801286a:	f000 b87b 	b.w	8012964 <_fwalk_sglue>
 801286e:	bf00      	nop
 8012870:	2000000c 	.word	0x2000000c
 8012874:	0801332d 	.word	0x0801332d
 8012878:	2000001c 	.word	0x2000001c

0801287c <cleanup_stdio>:
 801287c:	6841      	ldr	r1, [r0, #4]
 801287e:	4b0c      	ldr	r3, [pc, #48]	@ (80128b0 <cleanup_stdio+0x34>)
 8012880:	4299      	cmp	r1, r3
 8012882:	b510      	push	{r4, lr}
 8012884:	4604      	mov	r4, r0
 8012886:	d001      	beq.n	801288c <cleanup_stdio+0x10>
 8012888:	f000 fd50 	bl	801332c <_fflush_r>
 801288c:	68a1      	ldr	r1, [r4, #8]
 801288e:	4b09      	ldr	r3, [pc, #36]	@ (80128b4 <cleanup_stdio+0x38>)
 8012890:	4299      	cmp	r1, r3
 8012892:	d002      	beq.n	801289a <cleanup_stdio+0x1e>
 8012894:	4620      	mov	r0, r4
 8012896:	f000 fd49 	bl	801332c <_fflush_r>
 801289a:	68e1      	ldr	r1, [r4, #12]
 801289c:	4b06      	ldr	r3, [pc, #24]	@ (80128b8 <cleanup_stdio+0x3c>)
 801289e:	4299      	cmp	r1, r3
 80128a0:	d004      	beq.n	80128ac <cleanup_stdio+0x30>
 80128a2:	4620      	mov	r0, r4
 80128a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128a8:	f000 bd40 	b.w	801332c <_fflush_r>
 80128ac:	bd10      	pop	{r4, pc}
 80128ae:	bf00      	nop
 80128b0:	200001e4 	.word	0x200001e4
 80128b4:	2000024c 	.word	0x2000024c
 80128b8:	200002b4 	.word	0x200002b4

080128bc <global_stdio_init.part.0>:
 80128bc:	b510      	push	{r4, lr}
 80128be:	4b0b      	ldr	r3, [pc, #44]	@ (80128ec <global_stdio_init.part.0+0x30>)
 80128c0:	2104      	movs	r1, #4
 80128c2:	4c0b      	ldr	r4, [pc, #44]	@ (80128f0 <global_stdio_init.part.0+0x34>)
 80128c4:	4a0b      	ldr	r2, [pc, #44]	@ (80128f4 <global_stdio_init.part.0+0x38>)
 80128c6:	4620      	mov	r0, r4
 80128c8:	601a      	str	r2, [r3, #0]
 80128ca:	2200      	movs	r2, #0
 80128cc:	f7ff ff94 	bl	80127f8 <std>
 80128d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80128d4:	2201      	movs	r2, #1
 80128d6:	2109      	movs	r1, #9
 80128d8:	f7ff ff8e 	bl	80127f8 <std>
 80128dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80128e0:	2202      	movs	r2, #2
 80128e2:	2112      	movs	r1, #18
 80128e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128e8:	f7ff bf86 	b.w	80127f8 <std>
 80128ec:	2000031c 	.word	0x2000031c
 80128f0:	200001e4 	.word	0x200001e4
 80128f4:	08012865 	.word	0x08012865

080128f8 <__sfp_lock_acquire>:
 80128f8:	4801      	ldr	r0, [pc, #4]	@ (8012900 <__sfp_lock_acquire+0x8>)
 80128fa:	f000 b960 	b.w	8012bbe <__retarget_lock_acquire_recursive>
 80128fe:	bf00      	nop
 8012900:	20000325 	.word	0x20000325

08012904 <__sfp_lock_release>:
 8012904:	4801      	ldr	r0, [pc, #4]	@ (801290c <__sfp_lock_release+0x8>)
 8012906:	f000 b95b 	b.w	8012bc0 <__retarget_lock_release_recursive>
 801290a:	bf00      	nop
 801290c:	20000325 	.word	0x20000325

08012910 <__sinit>:
 8012910:	b510      	push	{r4, lr}
 8012912:	4604      	mov	r4, r0
 8012914:	f7ff fff0 	bl	80128f8 <__sfp_lock_acquire>
 8012918:	6a23      	ldr	r3, [r4, #32]
 801291a:	b11b      	cbz	r3, 8012924 <__sinit+0x14>
 801291c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012920:	f7ff bff0 	b.w	8012904 <__sfp_lock_release>
 8012924:	4b04      	ldr	r3, [pc, #16]	@ (8012938 <__sinit+0x28>)
 8012926:	6223      	str	r3, [r4, #32]
 8012928:	4b04      	ldr	r3, [pc, #16]	@ (801293c <__sinit+0x2c>)
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d1f5      	bne.n	801291c <__sinit+0xc>
 8012930:	f7ff ffc4 	bl	80128bc <global_stdio_init.part.0>
 8012934:	e7f2      	b.n	801291c <__sinit+0xc>
 8012936:	bf00      	nop
 8012938:	0801287d 	.word	0x0801287d
 801293c:	2000031c 	.word	0x2000031c

08012940 <fiprintf>:
 8012940:	b40e      	push	{r1, r2, r3}
 8012942:	b503      	push	{r0, r1, lr}
 8012944:	ab03      	add	r3, sp, #12
 8012946:	4601      	mov	r1, r0
 8012948:	4805      	ldr	r0, [pc, #20]	@ (8012960 <fiprintf+0x20>)
 801294a:	f853 2b04 	ldr.w	r2, [r3], #4
 801294e:	6800      	ldr	r0, [r0, #0]
 8012950:	9301      	str	r3, [sp, #4]
 8012952:	f000 f9bf 	bl	8012cd4 <_vfiprintf_r>
 8012956:	b002      	add	sp, #8
 8012958:	f85d eb04 	ldr.w	lr, [sp], #4
 801295c:	b003      	add	sp, #12
 801295e:	4770      	bx	lr
 8012960:	20000018 	.word	0x20000018

08012964 <_fwalk_sglue>:
 8012964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012968:	4607      	mov	r7, r0
 801296a:	4688      	mov	r8, r1
 801296c:	4614      	mov	r4, r2
 801296e:	2600      	movs	r6, #0
 8012970:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012974:	f1b9 0901 	subs.w	r9, r9, #1
 8012978:	d505      	bpl.n	8012986 <_fwalk_sglue+0x22>
 801297a:	6824      	ldr	r4, [r4, #0]
 801297c:	2c00      	cmp	r4, #0
 801297e:	d1f7      	bne.n	8012970 <_fwalk_sglue+0xc>
 8012980:	4630      	mov	r0, r6
 8012982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012986:	89ab      	ldrh	r3, [r5, #12]
 8012988:	2b01      	cmp	r3, #1
 801298a:	d907      	bls.n	801299c <_fwalk_sglue+0x38>
 801298c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012990:	3301      	adds	r3, #1
 8012992:	d003      	beq.n	801299c <_fwalk_sglue+0x38>
 8012994:	4629      	mov	r1, r5
 8012996:	4638      	mov	r0, r7
 8012998:	47c0      	blx	r8
 801299a:	4306      	orrs	r6, r0
 801299c:	3568      	adds	r5, #104	@ 0x68
 801299e:	e7e9      	b.n	8012974 <_fwalk_sglue+0x10>

080129a0 <iprintf>:
 80129a0:	b40f      	push	{r0, r1, r2, r3}
 80129a2:	b507      	push	{r0, r1, r2, lr}
 80129a4:	4906      	ldr	r1, [pc, #24]	@ (80129c0 <iprintf+0x20>)
 80129a6:	ab04      	add	r3, sp, #16
 80129a8:	6808      	ldr	r0, [r1, #0]
 80129aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80129ae:	6881      	ldr	r1, [r0, #8]
 80129b0:	9301      	str	r3, [sp, #4]
 80129b2:	f000 f98f 	bl	8012cd4 <_vfiprintf_r>
 80129b6:	b003      	add	sp, #12
 80129b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80129bc:	b004      	add	sp, #16
 80129be:	4770      	bx	lr
 80129c0:	20000018 	.word	0x20000018

080129c4 <__sread>:
 80129c4:	b510      	push	{r4, lr}
 80129c6:	460c      	mov	r4, r1
 80129c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129cc:	f000 f898 	bl	8012b00 <_read_r>
 80129d0:	2800      	cmp	r0, #0
 80129d2:	bfab      	itete	ge
 80129d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80129d6:	89a3      	ldrhlt	r3, [r4, #12]
 80129d8:	181b      	addge	r3, r3, r0
 80129da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80129de:	bfac      	ite	ge
 80129e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80129e2:	81a3      	strhlt	r3, [r4, #12]
 80129e4:	bd10      	pop	{r4, pc}

080129e6 <__swrite>:
 80129e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129ea:	461f      	mov	r7, r3
 80129ec:	898b      	ldrh	r3, [r1, #12]
 80129ee:	4605      	mov	r5, r0
 80129f0:	460c      	mov	r4, r1
 80129f2:	05db      	lsls	r3, r3, #23
 80129f4:	4616      	mov	r6, r2
 80129f6:	d505      	bpl.n	8012a04 <__swrite+0x1e>
 80129f8:	2302      	movs	r3, #2
 80129fa:	2200      	movs	r2, #0
 80129fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a00:	f000 f86c 	bl	8012adc <_lseek_r>
 8012a04:	89a3      	ldrh	r3, [r4, #12]
 8012a06:	4632      	mov	r2, r6
 8012a08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a0c:	4628      	mov	r0, r5
 8012a0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012a12:	81a3      	strh	r3, [r4, #12]
 8012a14:	463b      	mov	r3, r7
 8012a16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a1a:	f000 b893 	b.w	8012b44 <_write_r>

08012a1e <__sseek>:
 8012a1e:	b510      	push	{r4, lr}
 8012a20:	460c      	mov	r4, r1
 8012a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a26:	f000 f859 	bl	8012adc <_lseek_r>
 8012a2a:	1c43      	adds	r3, r0, #1
 8012a2c:	89a3      	ldrh	r3, [r4, #12]
 8012a2e:	bf15      	itete	ne
 8012a30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012a32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012a36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012a3a:	81a3      	strheq	r3, [r4, #12]
 8012a3c:	bf18      	it	ne
 8012a3e:	81a3      	strhne	r3, [r4, #12]
 8012a40:	bd10      	pop	{r4, pc}

08012a42 <__sclose>:
 8012a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a46:	f000 b839 	b.w	8012abc <_close_r>

08012a4a <memcmp>:
 8012a4a:	3901      	subs	r1, #1
 8012a4c:	4402      	add	r2, r0
 8012a4e:	b510      	push	{r4, lr}
 8012a50:	4290      	cmp	r0, r2
 8012a52:	d101      	bne.n	8012a58 <memcmp+0xe>
 8012a54:	2000      	movs	r0, #0
 8012a56:	e005      	b.n	8012a64 <memcmp+0x1a>
 8012a58:	7803      	ldrb	r3, [r0, #0]
 8012a5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012a5e:	42a3      	cmp	r3, r4
 8012a60:	d001      	beq.n	8012a66 <memcmp+0x1c>
 8012a62:	1b18      	subs	r0, r3, r4
 8012a64:	bd10      	pop	{r4, pc}
 8012a66:	3001      	adds	r0, #1
 8012a68:	e7f2      	b.n	8012a50 <memcmp+0x6>

08012a6a <memset>:
 8012a6a:	4402      	add	r2, r0
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	4293      	cmp	r3, r2
 8012a70:	d100      	bne.n	8012a74 <memset+0xa>
 8012a72:	4770      	bx	lr
 8012a74:	f803 1b01 	strb.w	r1, [r3], #1
 8012a78:	e7f9      	b.n	8012a6e <memset+0x4>

08012a7a <strcspn>:
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	b570      	push	{r4, r5, r6, lr}
 8012a7e:	461e      	mov	r6, r3
 8012a80:	f813 4b01 	ldrb.w	r4, [r3], #1
 8012a84:	b144      	cbz	r4, 8012a98 <strcspn+0x1e>
 8012a86:	1e4a      	subs	r2, r1, #1
 8012a88:	e001      	b.n	8012a8e <strcspn+0x14>
 8012a8a:	42a5      	cmp	r5, r4
 8012a8c:	d004      	beq.n	8012a98 <strcspn+0x1e>
 8012a8e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8012a92:	2d00      	cmp	r5, #0
 8012a94:	d1f9      	bne.n	8012a8a <strcspn+0x10>
 8012a96:	e7f2      	b.n	8012a7e <strcspn+0x4>
 8012a98:	1a30      	subs	r0, r6, r0
 8012a9a:	bd70      	pop	{r4, r5, r6, pc}

08012a9c <strspn>:
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	b570      	push	{r4, r5, r6, lr}
 8012aa0:	461e      	mov	r6, r3
 8012aa2:	f813 4b01 	ldrb.w	r4, [r3], #1
 8012aa6:	b13c      	cbz	r4, 8012ab8 <strspn+0x1c>
 8012aa8:	1e4a      	subs	r2, r1, #1
 8012aaa:	e001      	b.n	8012ab0 <strspn+0x14>
 8012aac:	42a5      	cmp	r5, r4
 8012aae:	d0f7      	beq.n	8012aa0 <strspn+0x4>
 8012ab0:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8012ab4:	2d00      	cmp	r5, #0
 8012ab6:	d1f9      	bne.n	8012aac <strspn+0x10>
 8012ab8:	1a30      	subs	r0, r6, r0
 8012aba:	bd70      	pop	{r4, r5, r6, pc}

08012abc <_close_r>:
 8012abc:	b538      	push	{r3, r4, r5, lr}
 8012abe:	2300      	movs	r3, #0
 8012ac0:	4d05      	ldr	r5, [pc, #20]	@ (8012ad8 <_close_r+0x1c>)
 8012ac2:	4604      	mov	r4, r0
 8012ac4:	4608      	mov	r0, r1
 8012ac6:	602b      	str	r3, [r5, #0]
 8012ac8:	f7ee fc39 	bl	800133e <_close>
 8012acc:	1c43      	adds	r3, r0, #1
 8012ace:	d102      	bne.n	8012ad6 <_close_r+0x1a>
 8012ad0:	682b      	ldr	r3, [r5, #0]
 8012ad2:	b103      	cbz	r3, 8012ad6 <_close_r+0x1a>
 8012ad4:	6023      	str	r3, [r4, #0]
 8012ad6:	bd38      	pop	{r3, r4, r5, pc}
 8012ad8:	20000320 	.word	0x20000320

08012adc <_lseek_r>:
 8012adc:	b538      	push	{r3, r4, r5, lr}
 8012ade:	4604      	mov	r4, r0
 8012ae0:	4d06      	ldr	r5, [pc, #24]	@ (8012afc <_lseek_r+0x20>)
 8012ae2:	4608      	mov	r0, r1
 8012ae4:	4611      	mov	r1, r2
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	602a      	str	r2, [r5, #0]
 8012aea:	461a      	mov	r2, r3
 8012aec:	f7ee fc4e 	bl	800138c <_lseek>
 8012af0:	1c43      	adds	r3, r0, #1
 8012af2:	d102      	bne.n	8012afa <_lseek_r+0x1e>
 8012af4:	682b      	ldr	r3, [r5, #0]
 8012af6:	b103      	cbz	r3, 8012afa <_lseek_r+0x1e>
 8012af8:	6023      	str	r3, [r4, #0]
 8012afa:	bd38      	pop	{r3, r4, r5, pc}
 8012afc:	20000320 	.word	0x20000320

08012b00 <_read_r>:
 8012b00:	b538      	push	{r3, r4, r5, lr}
 8012b02:	4604      	mov	r4, r0
 8012b04:	4d06      	ldr	r5, [pc, #24]	@ (8012b20 <_read_r+0x20>)
 8012b06:	4608      	mov	r0, r1
 8012b08:	4611      	mov	r1, r2
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	602a      	str	r2, [r5, #0]
 8012b0e:	461a      	mov	r2, r3
 8012b10:	f7ee fbdc 	bl	80012cc <_read>
 8012b14:	1c43      	adds	r3, r0, #1
 8012b16:	d102      	bne.n	8012b1e <_read_r+0x1e>
 8012b18:	682b      	ldr	r3, [r5, #0]
 8012b1a:	b103      	cbz	r3, 8012b1e <_read_r+0x1e>
 8012b1c:	6023      	str	r3, [r4, #0]
 8012b1e:	bd38      	pop	{r3, r4, r5, pc}
 8012b20:	20000320 	.word	0x20000320

08012b24 <_sbrk_r>:
 8012b24:	b538      	push	{r3, r4, r5, lr}
 8012b26:	2300      	movs	r3, #0
 8012b28:	4d05      	ldr	r5, [pc, #20]	@ (8012b40 <_sbrk_r+0x1c>)
 8012b2a:	4604      	mov	r4, r0
 8012b2c:	4608      	mov	r0, r1
 8012b2e:	602b      	str	r3, [r5, #0]
 8012b30:	f7ee fc3a 	bl	80013a8 <_sbrk>
 8012b34:	1c43      	adds	r3, r0, #1
 8012b36:	d102      	bne.n	8012b3e <_sbrk_r+0x1a>
 8012b38:	682b      	ldr	r3, [r5, #0]
 8012b3a:	b103      	cbz	r3, 8012b3e <_sbrk_r+0x1a>
 8012b3c:	6023      	str	r3, [r4, #0]
 8012b3e:	bd38      	pop	{r3, r4, r5, pc}
 8012b40:	20000320 	.word	0x20000320

08012b44 <_write_r>:
 8012b44:	b538      	push	{r3, r4, r5, lr}
 8012b46:	4604      	mov	r4, r0
 8012b48:	4d06      	ldr	r5, [pc, #24]	@ (8012b64 <_write_r+0x20>)
 8012b4a:	4608      	mov	r0, r1
 8012b4c:	4611      	mov	r1, r2
 8012b4e:	2200      	movs	r2, #0
 8012b50:	602a      	str	r2, [r5, #0]
 8012b52:	461a      	mov	r2, r3
 8012b54:	f7ee fbd7 	bl	8001306 <_write>
 8012b58:	1c43      	adds	r3, r0, #1
 8012b5a:	d102      	bne.n	8012b62 <_write_r+0x1e>
 8012b5c:	682b      	ldr	r3, [r5, #0]
 8012b5e:	b103      	cbz	r3, 8012b62 <_write_r+0x1e>
 8012b60:	6023      	str	r3, [r4, #0]
 8012b62:	bd38      	pop	{r3, r4, r5, pc}
 8012b64:	20000320 	.word	0x20000320

08012b68 <__errno>:
 8012b68:	4b01      	ldr	r3, [pc, #4]	@ (8012b70 <__errno+0x8>)
 8012b6a:	6818      	ldr	r0, [r3, #0]
 8012b6c:	4770      	bx	lr
 8012b6e:	bf00      	nop
 8012b70:	20000018 	.word	0x20000018

08012b74 <__libc_init_array>:
 8012b74:	b570      	push	{r4, r5, r6, lr}
 8012b76:	4d0d      	ldr	r5, [pc, #52]	@ (8012bac <__libc_init_array+0x38>)
 8012b78:	2600      	movs	r6, #0
 8012b7a:	4c0d      	ldr	r4, [pc, #52]	@ (8012bb0 <__libc_init_array+0x3c>)
 8012b7c:	1b64      	subs	r4, r4, r5
 8012b7e:	10a4      	asrs	r4, r4, #2
 8012b80:	42a6      	cmp	r6, r4
 8012b82:	d109      	bne.n	8012b98 <__libc_init_array+0x24>
 8012b84:	4d0b      	ldr	r5, [pc, #44]	@ (8012bb4 <__libc_init_array+0x40>)
 8012b86:	2600      	movs	r6, #0
 8012b88:	4c0b      	ldr	r4, [pc, #44]	@ (8012bb8 <__libc_init_array+0x44>)
 8012b8a:	f000 fd61 	bl	8013650 <_init>
 8012b8e:	1b64      	subs	r4, r4, r5
 8012b90:	10a4      	asrs	r4, r4, #2
 8012b92:	42a6      	cmp	r6, r4
 8012b94:	d105      	bne.n	8012ba2 <__libc_init_array+0x2e>
 8012b96:	bd70      	pop	{r4, r5, r6, pc}
 8012b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b9c:	3601      	adds	r6, #1
 8012b9e:	4798      	blx	r3
 8012ba0:	e7ee      	b.n	8012b80 <__libc_init_array+0xc>
 8012ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ba6:	3601      	adds	r6, #1
 8012ba8:	4798      	blx	r3
 8012baa:	e7f2      	b.n	8012b92 <__libc_init_array+0x1e>
 8012bac:	080148b4 	.word	0x080148b4
 8012bb0:	080148b4 	.word	0x080148b4
 8012bb4:	080148b4 	.word	0x080148b4
 8012bb8:	080148b8 	.word	0x080148b8

08012bbc <__retarget_lock_init_recursive>:
 8012bbc:	4770      	bx	lr

08012bbe <__retarget_lock_acquire_recursive>:
 8012bbe:	4770      	bx	lr

08012bc0 <__retarget_lock_release_recursive>:
 8012bc0:	4770      	bx	lr

08012bc2 <memcpy>:
 8012bc2:	440a      	add	r2, r1
 8012bc4:	1e43      	subs	r3, r0, #1
 8012bc6:	4291      	cmp	r1, r2
 8012bc8:	d100      	bne.n	8012bcc <memcpy+0xa>
 8012bca:	4770      	bx	lr
 8012bcc:	b510      	push	{r4, lr}
 8012bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012bd2:	4291      	cmp	r1, r2
 8012bd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012bd8:	d1f9      	bne.n	8012bce <memcpy+0xc>
 8012bda:	bd10      	pop	{r4, pc}

08012bdc <abort>:
 8012bdc:	2006      	movs	r0, #6
 8012bde:	b508      	push	{r3, lr}
 8012be0:	f000 fc88 	bl	80134f4 <raise>
 8012be4:	2001      	movs	r0, #1
 8012be6:	f7ee fb66 	bl	80012b6 <_exit>
	...

08012bec <_free_r>:
 8012bec:	b538      	push	{r3, r4, r5, lr}
 8012bee:	4605      	mov	r5, r0
 8012bf0:	2900      	cmp	r1, #0
 8012bf2:	d041      	beq.n	8012c78 <_free_r+0x8c>
 8012bf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012bf8:	1f0c      	subs	r4, r1, #4
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	bfb8      	it	lt
 8012bfe:	18e4      	addlt	r4, r4, r3
 8012c00:	f7ff fdee 	bl	80127e0 <__malloc_lock>
 8012c04:	4a1d      	ldr	r2, [pc, #116]	@ (8012c7c <_free_r+0x90>)
 8012c06:	6813      	ldr	r3, [r2, #0]
 8012c08:	b933      	cbnz	r3, 8012c18 <_free_r+0x2c>
 8012c0a:	6063      	str	r3, [r4, #4]
 8012c0c:	6014      	str	r4, [r2, #0]
 8012c0e:	4628      	mov	r0, r5
 8012c10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c14:	f7ff bdea 	b.w	80127ec <__malloc_unlock>
 8012c18:	42a3      	cmp	r3, r4
 8012c1a:	d908      	bls.n	8012c2e <_free_r+0x42>
 8012c1c:	6820      	ldr	r0, [r4, #0]
 8012c1e:	1821      	adds	r1, r4, r0
 8012c20:	428b      	cmp	r3, r1
 8012c22:	bf01      	itttt	eq
 8012c24:	6819      	ldreq	r1, [r3, #0]
 8012c26:	685b      	ldreq	r3, [r3, #4]
 8012c28:	1809      	addeq	r1, r1, r0
 8012c2a:	6021      	streq	r1, [r4, #0]
 8012c2c:	e7ed      	b.n	8012c0a <_free_r+0x1e>
 8012c2e:	461a      	mov	r2, r3
 8012c30:	685b      	ldr	r3, [r3, #4]
 8012c32:	b10b      	cbz	r3, 8012c38 <_free_r+0x4c>
 8012c34:	42a3      	cmp	r3, r4
 8012c36:	d9fa      	bls.n	8012c2e <_free_r+0x42>
 8012c38:	6811      	ldr	r1, [r2, #0]
 8012c3a:	1850      	adds	r0, r2, r1
 8012c3c:	42a0      	cmp	r0, r4
 8012c3e:	d10b      	bne.n	8012c58 <_free_r+0x6c>
 8012c40:	6820      	ldr	r0, [r4, #0]
 8012c42:	4401      	add	r1, r0
 8012c44:	1850      	adds	r0, r2, r1
 8012c46:	6011      	str	r1, [r2, #0]
 8012c48:	4283      	cmp	r3, r0
 8012c4a:	d1e0      	bne.n	8012c0e <_free_r+0x22>
 8012c4c:	6818      	ldr	r0, [r3, #0]
 8012c4e:	685b      	ldr	r3, [r3, #4]
 8012c50:	4408      	add	r0, r1
 8012c52:	6053      	str	r3, [r2, #4]
 8012c54:	6010      	str	r0, [r2, #0]
 8012c56:	e7da      	b.n	8012c0e <_free_r+0x22>
 8012c58:	d902      	bls.n	8012c60 <_free_r+0x74>
 8012c5a:	230c      	movs	r3, #12
 8012c5c:	602b      	str	r3, [r5, #0]
 8012c5e:	e7d6      	b.n	8012c0e <_free_r+0x22>
 8012c60:	6820      	ldr	r0, [r4, #0]
 8012c62:	1821      	adds	r1, r4, r0
 8012c64:	428b      	cmp	r3, r1
 8012c66:	bf02      	ittt	eq
 8012c68:	6819      	ldreq	r1, [r3, #0]
 8012c6a:	685b      	ldreq	r3, [r3, #4]
 8012c6c:	1809      	addeq	r1, r1, r0
 8012c6e:	6063      	str	r3, [r4, #4]
 8012c70:	bf08      	it	eq
 8012c72:	6021      	streq	r1, [r4, #0]
 8012c74:	6054      	str	r4, [r2, #4]
 8012c76:	e7ca      	b.n	8012c0e <_free_r+0x22>
 8012c78:	bd38      	pop	{r3, r4, r5, pc}
 8012c7a:	bf00      	nop
 8012c7c:	200001e0 	.word	0x200001e0

08012c80 <__sfputc_r>:
 8012c80:	6893      	ldr	r3, [r2, #8]
 8012c82:	3b01      	subs	r3, #1
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	b410      	push	{r4}
 8012c88:	6093      	str	r3, [r2, #8]
 8012c8a:	da08      	bge.n	8012c9e <__sfputc_r+0x1e>
 8012c8c:	6994      	ldr	r4, [r2, #24]
 8012c8e:	42a3      	cmp	r3, r4
 8012c90:	db01      	blt.n	8012c96 <__sfputc_r+0x16>
 8012c92:	290a      	cmp	r1, #10
 8012c94:	d103      	bne.n	8012c9e <__sfputc_r+0x1e>
 8012c96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c9a:	f000 bb6f 	b.w	801337c <__swbuf_r>
 8012c9e:	6813      	ldr	r3, [r2, #0]
 8012ca0:	1c58      	adds	r0, r3, #1
 8012ca2:	6010      	str	r0, [r2, #0]
 8012ca4:	4608      	mov	r0, r1
 8012ca6:	7019      	strb	r1, [r3, #0]
 8012ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cac:	4770      	bx	lr

08012cae <__sfputs_r>:
 8012cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cb0:	4606      	mov	r6, r0
 8012cb2:	460f      	mov	r7, r1
 8012cb4:	4614      	mov	r4, r2
 8012cb6:	18d5      	adds	r5, r2, r3
 8012cb8:	42ac      	cmp	r4, r5
 8012cba:	d101      	bne.n	8012cc0 <__sfputs_r+0x12>
 8012cbc:	2000      	movs	r0, #0
 8012cbe:	e007      	b.n	8012cd0 <__sfputs_r+0x22>
 8012cc0:	463a      	mov	r2, r7
 8012cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cc6:	4630      	mov	r0, r6
 8012cc8:	f7ff ffda 	bl	8012c80 <__sfputc_r>
 8012ccc:	1c43      	adds	r3, r0, #1
 8012cce:	d1f3      	bne.n	8012cb8 <__sfputs_r+0xa>
 8012cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012cd4 <_vfiprintf_r>:
 8012cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cd8:	460d      	mov	r5, r1
 8012cda:	b09d      	sub	sp, #116	@ 0x74
 8012cdc:	4614      	mov	r4, r2
 8012cde:	4698      	mov	r8, r3
 8012ce0:	4606      	mov	r6, r0
 8012ce2:	b118      	cbz	r0, 8012cec <_vfiprintf_r+0x18>
 8012ce4:	6a03      	ldr	r3, [r0, #32]
 8012ce6:	b90b      	cbnz	r3, 8012cec <_vfiprintf_r+0x18>
 8012ce8:	f7ff fe12 	bl	8012910 <__sinit>
 8012cec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012cee:	07d9      	lsls	r1, r3, #31
 8012cf0:	d405      	bmi.n	8012cfe <_vfiprintf_r+0x2a>
 8012cf2:	89ab      	ldrh	r3, [r5, #12]
 8012cf4:	059a      	lsls	r2, r3, #22
 8012cf6:	d402      	bmi.n	8012cfe <_vfiprintf_r+0x2a>
 8012cf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012cfa:	f7ff ff60 	bl	8012bbe <__retarget_lock_acquire_recursive>
 8012cfe:	89ab      	ldrh	r3, [r5, #12]
 8012d00:	071b      	lsls	r3, r3, #28
 8012d02:	d501      	bpl.n	8012d08 <_vfiprintf_r+0x34>
 8012d04:	692b      	ldr	r3, [r5, #16]
 8012d06:	b99b      	cbnz	r3, 8012d30 <_vfiprintf_r+0x5c>
 8012d08:	4629      	mov	r1, r5
 8012d0a:	4630      	mov	r0, r6
 8012d0c:	f000 fb74 	bl	80133f8 <__swsetup_r>
 8012d10:	b170      	cbz	r0, 8012d30 <_vfiprintf_r+0x5c>
 8012d12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012d14:	07dc      	lsls	r4, r3, #31
 8012d16:	d504      	bpl.n	8012d22 <_vfiprintf_r+0x4e>
 8012d18:	f04f 30ff 	mov.w	r0, #4294967295
 8012d1c:	b01d      	add	sp, #116	@ 0x74
 8012d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d22:	89ab      	ldrh	r3, [r5, #12]
 8012d24:	0598      	lsls	r0, r3, #22
 8012d26:	d4f7      	bmi.n	8012d18 <_vfiprintf_r+0x44>
 8012d28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012d2a:	f7ff ff49 	bl	8012bc0 <__retarget_lock_release_recursive>
 8012d2e:	e7f3      	b.n	8012d18 <_vfiprintf_r+0x44>
 8012d30:	2300      	movs	r3, #0
 8012d32:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d36:	f04f 0901 	mov.w	r9, #1
 8012d3a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8012ef0 <_vfiprintf_r+0x21c>
 8012d3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d40:	2320      	movs	r3, #32
 8012d42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012d46:	2330      	movs	r3, #48	@ 0x30
 8012d48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012d4c:	4623      	mov	r3, r4
 8012d4e:	469a      	mov	sl, r3
 8012d50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d54:	b10a      	cbz	r2, 8012d5a <_vfiprintf_r+0x86>
 8012d56:	2a25      	cmp	r2, #37	@ 0x25
 8012d58:	d1f9      	bne.n	8012d4e <_vfiprintf_r+0x7a>
 8012d5a:	ebba 0b04 	subs.w	fp, sl, r4
 8012d5e:	d00b      	beq.n	8012d78 <_vfiprintf_r+0xa4>
 8012d60:	465b      	mov	r3, fp
 8012d62:	4622      	mov	r2, r4
 8012d64:	4629      	mov	r1, r5
 8012d66:	4630      	mov	r0, r6
 8012d68:	f7ff ffa1 	bl	8012cae <__sfputs_r>
 8012d6c:	3001      	adds	r0, #1
 8012d6e:	f000 80a7 	beq.w	8012ec0 <_vfiprintf_r+0x1ec>
 8012d72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012d74:	445a      	add	r2, fp
 8012d76:	9209      	str	r2, [sp, #36]	@ 0x24
 8012d78:	f89a 3000 	ldrb.w	r3, [sl]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	f000 809f 	beq.w	8012ec0 <_vfiprintf_r+0x1ec>
 8012d82:	2300      	movs	r3, #0
 8012d84:	f04f 32ff 	mov.w	r2, #4294967295
 8012d88:	f10a 0a01 	add.w	sl, sl, #1
 8012d8c:	9304      	str	r3, [sp, #16]
 8012d8e:	9307      	str	r3, [sp, #28]
 8012d90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012d94:	931a      	str	r3, [sp, #104]	@ 0x68
 8012d96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d9a:	4654      	mov	r4, sl
 8012d9c:	2205      	movs	r2, #5
 8012d9e:	4854      	ldr	r0, [pc, #336]	@ (8012ef0 <_vfiprintf_r+0x21c>)
 8012da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012da4:	f000 fbc2 	bl	801352c <memchr>
 8012da8:	9a04      	ldr	r2, [sp, #16]
 8012daa:	b9d8      	cbnz	r0, 8012de4 <_vfiprintf_r+0x110>
 8012dac:	06d1      	lsls	r1, r2, #27
 8012dae:	bf44      	itt	mi
 8012db0:	2320      	movmi	r3, #32
 8012db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012db6:	0713      	lsls	r3, r2, #28
 8012db8:	bf44      	itt	mi
 8012dba:	232b      	movmi	r3, #43	@ 0x2b
 8012dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8012dc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8012dc6:	d015      	beq.n	8012df4 <_vfiprintf_r+0x120>
 8012dc8:	9a07      	ldr	r2, [sp, #28]
 8012dca:	4654      	mov	r4, sl
 8012dcc:	2000      	movs	r0, #0
 8012dce:	f04f 0c0a 	mov.w	ip, #10
 8012dd2:	4621      	mov	r1, r4
 8012dd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012dd8:	3b30      	subs	r3, #48	@ 0x30
 8012dda:	2b09      	cmp	r3, #9
 8012ddc:	d94b      	bls.n	8012e76 <_vfiprintf_r+0x1a2>
 8012dde:	b1b0      	cbz	r0, 8012e0e <_vfiprintf_r+0x13a>
 8012de0:	9207      	str	r2, [sp, #28]
 8012de2:	e014      	b.n	8012e0e <_vfiprintf_r+0x13a>
 8012de4:	eba0 0308 	sub.w	r3, r0, r8
 8012de8:	46a2      	mov	sl, r4
 8012dea:	fa09 f303 	lsl.w	r3, r9, r3
 8012dee:	4313      	orrs	r3, r2
 8012df0:	9304      	str	r3, [sp, #16]
 8012df2:	e7d2      	b.n	8012d9a <_vfiprintf_r+0xc6>
 8012df4:	9b03      	ldr	r3, [sp, #12]
 8012df6:	1d19      	adds	r1, r3, #4
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	9103      	str	r1, [sp, #12]
 8012dfe:	bfbb      	ittet	lt
 8012e00:	425b      	neglt	r3, r3
 8012e02:	f042 0202 	orrlt.w	r2, r2, #2
 8012e06:	9307      	strge	r3, [sp, #28]
 8012e08:	9307      	strlt	r3, [sp, #28]
 8012e0a:	bfb8      	it	lt
 8012e0c:	9204      	strlt	r2, [sp, #16]
 8012e0e:	7823      	ldrb	r3, [r4, #0]
 8012e10:	2b2e      	cmp	r3, #46	@ 0x2e
 8012e12:	d10a      	bne.n	8012e2a <_vfiprintf_r+0x156>
 8012e14:	7863      	ldrb	r3, [r4, #1]
 8012e16:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e18:	d132      	bne.n	8012e80 <_vfiprintf_r+0x1ac>
 8012e1a:	9b03      	ldr	r3, [sp, #12]
 8012e1c:	3402      	adds	r4, #2
 8012e1e:	1d1a      	adds	r2, r3, #4
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012e26:	9203      	str	r2, [sp, #12]
 8012e28:	9305      	str	r3, [sp, #20]
 8012e2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012f00 <_vfiprintf_r+0x22c>
 8012e2e:	2203      	movs	r2, #3
 8012e30:	7821      	ldrb	r1, [r4, #0]
 8012e32:	4650      	mov	r0, sl
 8012e34:	f000 fb7a 	bl	801352c <memchr>
 8012e38:	b138      	cbz	r0, 8012e4a <_vfiprintf_r+0x176>
 8012e3a:	eba0 000a 	sub.w	r0, r0, sl
 8012e3e:	2240      	movs	r2, #64	@ 0x40
 8012e40:	9b04      	ldr	r3, [sp, #16]
 8012e42:	3401      	adds	r4, #1
 8012e44:	4082      	lsls	r2, r0
 8012e46:	4313      	orrs	r3, r2
 8012e48:	9304      	str	r3, [sp, #16]
 8012e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e4e:	2206      	movs	r2, #6
 8012e50:	4828      	ldr	r0, [pc, #160]	@ (8012ef4 <_vfiprintf_r+0x220>)
 8012e52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012e56:	f000 fb69 	bl	801352c <memchr>
 8012e5a:	2800      	cmp	r0, #0
 8012e5c:	d03f      	beq.n	8012ede <_vfiprintf_r+0x20a>
 8012e5e:	4b26      	ldr	r3, [pc, #152]	@ (8012ef8 <_vfiprintf_r+0x224>)
 8012e60:	bb1b      	cbnz	r3, 8012eaa <_vfiprintf_r+0x1d6>
 8012e62:	9b03      	ldr	r3, [sp, #12]
 8012e64:	3307      	adds	r3, #7
 8012e66:	f023 0307 	bic.w	r3, r3, #7
 8012e6a:	3308      	adds	r3, #8
 8012e6c:	9303      	str	r3, [sp, #12]
 8012e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e70:	443b      	add	r3, r7
 8012e72:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e74:	e76a      	b.n	8012d4c <_vfiprintf_r+0x78>
 8012e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e7a:	460c      	mov	r4, r1
 8012e7c:	2001      	movs	r0, #1
 8012e7e:	e7a8      	b.n	8012dd2 <_vfiprintf_r+0xfe>
 8012e80:	2300      	movs	r3, #0
 8012e82:	3401      	adds	r4, #1
 8012e84:	f04f 0c0a 	mov.w	ip, #10
 8012e88:	4619      	mov	r1, r3
 8012e8a:	9305      	str	r3, [sp, #20]
 8012e8c:	4620      	mov	r0, r4
 8012e8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e92:	3a30      	subs	r2, #48	@ 0x30
 8012e94:	2a09      	cmp	r2, #9
 8012e96:	d903      	bls.n	8012ea0 <_vfiprintf_r+0x1cc>
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d0c6      	beq.n	8012e2a <_vfiprintf_r+0x156>
 8012e9c:	9105      	str	r1, [sp, #20]
 8012e9e:	e7c4      	b.n	8012e2a <_vfiprintf_r+0x156>
 8012ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8012ea4:	4604      	mov	r4, r0
 8012ea6:	2301      	movs	r3, #1
 8012ea8:	e7f0      	b.n	8012e8c <_vfiprintf_r+0x1b8>
 8012eaa:	ab03      	add	r3, sp, #12
 8012eac:	462a      	mov	r2, r5
 8012eae:	a904      	add	r1, sp, #16
 8012eb0:	4630      	mov	r0, r6
 8012eb2:	9300      	str	r3, [sp, #0]
 8012eb4:	4b11      	ldr	r3, [pc, #68]	@ (8012efc <_vfiprintf_r+0x228>)
 8012eb6:	f3af 8000 	nop.w
 8012eba:	4607      	mov	r7, r0
 8012ebc:	1c78      	adds	r0, r7, #1
 8012ebe:	d1d6      	bne.n	8012e6e <_vfiprintf_r+0x19a>
 8012ec0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012ec2:	07d9      	lsls	r1, r3, #31
 8012ec4:	d405      	bmi.n	8012ed2 <_vfiprintf_r+0x1fe>
 8012ec6:	89ab      	ldrh	r3, [r5, #12]
 8012ec8:	059a      	lsls	r2, r3, #22
 8012eca:	d402      	bmi.n	8012ed2 <_vfiprintf_r+0x1fe>
 8012ecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012ece:	f7ff fe77 	bl	8012bc0 <__retarget_lock_release_recursive>
 8012ed2:	89ab      	ldrh	r3, [r5, #12]
 8012ed4:	065b      	lsls	r3, r3, #25
 8012ed6:	f53f af1f 	bmi.w	8012d18 <_vfiprintf_r+0x44>
 8012eda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012edc:	e71e      	b.n	8012d1c <_vfiprintf_r+0x48>
 8012ede:	ab03      	add	r3, sp, #12
 8012ee0:	462a      	mov	r2, r5
 8012ee2:	a904      	add	r1, sp, #16
 8012ee4:	4630      	mov	r0, r6
 8012ee6:	9300      	str	r3, [sp, #0]
 8012ee8:	4b04      	ldr	r3, [pc, #16]	@ (8012efc <_vfiprintf_r+0x228>)
 8012eea:	f000 f87d 	bl	8012fe8 <_printf_i>
 8012eee:	e7e4      	b.n	8012eba <_vfiprintf_r+0x1e6>
 8012ef0:	08014878 	.word	0x08014878
 8012ef4:	08014882 	.word	0x08014882
 8012ef8:	00000000 	.word	0x00000000
 8012efc:	08012caf 	.word	0x08012caf
 8012f00:	0801487e 	.word	0x0801487e

08012f04 <_printf_common>:
 8012f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f08:	4616      	mov	r6, r2
 8012f0a:	4698      	mov	r8, r3
 8012f0c:	688a      	ldr	r2, [r1, #8]
 8012f0e:	4607      	mov	r7, r0
 8012f10:	690b      	ldr	r3, [r1, #16]
 8012f12:	460c      	mov	r4, r1
 8012f14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012f18:	4293      	cmp	r3, r2
 8012f1a:	bfb8      	it	lt
 8012f1c:	4613      	movlt	r3, r2
 8012f1e:	6033      	str	r3, [r6, #0]
 8012f20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012f24:	b10a      	cbz	r2, 8012f2a <_printf_common+0x26>
 8012f26:	3301      	adds	r3, #1
 8012f28:	6033      	str	r3, [r6, #0]
 8012f2a:	6823      	ldr	r3, [r4, #0]
 8012f2c:	0699      	lsls	r1, r3, #26
 8012f2e:	bf42      	ittt	mi
 8012f30:	6833      	ldrmi	r3, [r6, #0]
 8012f32:	3302      	addmi	r3, #2
 8012f34:	6033      	strmi	r3, [r6, #0]
 8012f36:	6825      	ldr	r5, [r4, #0]
 8012f38:	f015 0506 	ands.w	r5, r5, #6
 8012f3c:	d106      	bne.n	8012f4c <_printf_common+0x48>
 8012f3e:	f104 0a19 	add.w	sl, r4, #25
 8012f42:	68e3      	ldr	r3, [r4, #12]
 8012f44:	6832      	ldr	r2, [r6, #0]
 8012f46:	1a9b      	subs	r3, r3, r2
 8012f48:	42ab      	cmp	r3, r5
 8012f4a:	dc2b      	bgt.n	8012fa4 <_printf_common+0xa0>
 8012f4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012f50:	6822      	ldr	r2, [r4, #0]
 8012f52:	3b00      	subs	r3, #0
 8012f54:	bf18      	it	ne
 8012f56:	2301      	movne	r3, #1
 8012f58:	0692      	lsls	r2, r2, #26
 8012f5a:	d430      	bmi.n	8012fbe <_printf_common+0xba>
 8012f5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012f60:	4641      	mov	r1, r8
 8012f62:	4638      	mov	r0, r7
 8012f64:	47c8      	blx	r9
 8012f66:	3001      	adds	r0, #1
 8012f68:	d023      	beq.n	8012fb2 <_printf_common+0xae>
 8012f6a:	6823      	ldr	r3, [r4, #0]
 8012f6c:	341a      	adds	r4, #26
 8012f6e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8012f72:	f003 0306 	and.w	r3, r3, #6
 8012f76:	2b04      	cmp	r3, #4
 8012f78:	bf0a      	itet	eq
 8012f7a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8012f7e:	2500      	movne	r5, #0
 8012f80:	6833      	ldreq	r3, [r6, #0]
 8012f82:	f04f 0600 	mov.w	r6, #0
 8012f86:	bf08      	it	eq
 8012f88:	1aed      	subeq	r5, r5, r3
 8012f8a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8012f8e:	bf08      	it	eq
 8012f90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012f94:	4293      	cmp	r3, r2
 8012f96:	bfc4      	itt	gt
 8012f98:	1a9b      	subgt	r3, r3, r2
 8012f9a:	18ed      	addgt	r5, r5, r3
 8012f9c:	42b5      	cmp	r5, r6
 8012f9e:	d11a      	bne.n	8012fd6 <_printf_common+0xd2>
 8012fa0:	2000      	movs	r0, #0
 8012fa2:	e008      	b.n	8012fb6 <_printf_common+0xb2>
 8012fa4:	2301      	movs	r3, #1
 8012fa6:	4652      	mov	r2, sl
 8012fa8:	4641      	mov	r1, r8
 8012faa:	4638      	mov	r0, r7
 8012fac:	47c8      	blx	r9
 8012fae:	3001      	adds	r0, #1
 8012fb0:	d103      	bne.n	8012fba <_printf_common+0xb6>
 8012fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8012fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fba:	3501      	adds	r5, #1
 8012fbc:	e7c1      	b.n	8012f42 <_printf_common+0x3e>
 8012fbe:	18e1      	adds	r1, r4, r3
 8012fc0:	1c5a      	adds	r2, r3, #1
 8012fc2:	2030      	movs	r0, #48	@ 0x30
 8012fc4:	3302      	adds	r3, #2
 8012fc6:	4422      	add	r2, r4
 8012fc8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012fcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012fd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012fd4:	e7c2      	b.n	8012f5c <_printf_common+0x58>
 8012fd6:	2301      	movs	r3, #1
 8012fd8:	4622      	mov	r2, r4
 8012fda:	4641      	mov	r1, r8
 8012fdc:	4638      	mov	r0, r7
 8012fde:	47c8      	blx	r9
 8012fe0:	3001      	adds	r0, #1
 8012fe2:	d0e6      	beq.n	8012fb2 <_printf_common+0xae>
 8012fe4:	3601      	adds	r6, #1
 8012fe6:	e7d9      	b.n	8012f9c <_printf_common+0x98>

08012fe8 <_printf_i>:
 8012fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012fec:	7e0f      	ldrb	r7, [r1, #24]
 8012fee:	4691      	mov	r9, r2
 8012ff0:	4680      	mov	r8, r0
 8012ff2:	460c      	mov	r4, r1
 8012ff4:	2f78      	cmp	r7, #120	@ 0x78
 8012ff6:	469a      	mov	sl, r3
 8012ff8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012ffa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012ffe:	d807      	bhi.n	8013010 <_printf_i+0x28>
 8013000:	2f62      	cmp	r7, #98	@ 0x62
 8013002:	d80a      	bhi.n	801301a <_printf_i+0x32>
 8013004:	2f00      	cmp	r7, #0
 8013006:	f000 80d1 	beq.w	80131ac <_printf_i+0x1c4>
 801300a:	2f58      	cmp	r7, #88	@ 0x58
 801300c:	f000 80b8 	beq.w	8013180 <_printf_i+0x198>
 8013010:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013014:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013018:	e03a      	b.n	8013090 <_printf_i+0xa8>
 801301a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801301e:	2b15      	cmp	r3, #21
 8013020:	d8f6      	bhi.n	8013010 <_printf_i+0x28>
 8013022:	a101      	add	r1, pc, #4	@ (adr r1, 8013028 <_printf_i+0x40>)
 8013024:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013028:	08013081 	.word	0x08013081
 801302c:	08013095 	.word	0x08013095
 8013030:	08013011 	.word	0x08013011
 8013034:	08013011 	.word	0x08013011
 8013038:	08013011 	.word	0x08013011
 801303c:	08013011 	.word	0x08013011
 8013040:	08013095 	.word	0x08013095
 8013044:	08013011 	.word	0x08013011
 8013048:	08013011 	.word	0x08013011
 801304c:	08013011 	.word	0x08013011
 8013050:	08013011 	.word	0x08013011
 8013054:	08013193 	.word	0x08013193
 8013058:	080130bf 	.word	0x080130bf
 801305c:	0801314d 	.word	0x0801314d
 8013060:	08013011 	.word	0x08013011
 8013064:	08013011 	.word	0x08013011
 8013068:	080131b5 	.word	0x080131b5
 801306c:	08013011 	.word	0x08013011
 8013070:	080130bf 	.word	0x080130bf
 8013074:	08013011 	.word	0x08013011
 8013078:	08013011 	.word	0x08013011
 801307c:	08013155 	.word	0x08013155
 8013080:	6833      	ldr	r3, [r6, #0]
 8013082:	1d1a      	adds	r2, r3, #4
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	6032      	str	r2, [r6, #0]
 8013088:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801308c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013090:	2301      	movs	r3, #1
 8013092:	e09c      	b.n	80131ce <_printf_i+0x1e6>
 8013094:	6833      	ldr	r3, [r6, #0]
 8013096:	6820      	ldr	r0, [r4, #0]
 8013098:	1d19      	adds	r1, r3, #4
 801309a:	6031      	str	r1, [r6, #0]
 801309c:	0606      	lsls	r6, r0, #24
 801309e:	d501      	bpl.n	80130a4 <_printf_i+0xbc>
 80130a0:	681d      	ldr	r5, [r3, #0]
 80130a2:	e003      	b.n	80130ac <_printf_i+0xc4>
 80130a4:	0645      	lsls	r5, r0, #25
 80130a6:	d5fb      	bpl.n	80130a0 <_printf_i+0xb8>
 80130a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80130ac:	2d00      	cmp	r5, #0
 80130ae:	da03      	bge.n	80130b8 <_printf_i+0xd0>
 80130b0:	232d      	movs	r3, #45	@ 0x2d
 80130b2:	426d      	negs	r5, r5
 80130b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80130b8:	4858      	ldr	r0, [pc, #352]	@ (801321c <_printf_i+0x234>)
 80130ba:	230a      	movs	r3, #10
 80130bc:	e011      	b.n	80130e2 <_printf_i+0xfa>
 80130be:	6821      	ldr	r1, [r4, #0]
 80130c0:	6833      	ldr	r3, [r6, #0]
 80130c2:	0608      	lsls	r0, r1, #24
 80130c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80130c8:	d402      	bmi.n	80130d0 <_printf_i+0xe8>
 80130ca:	0649      	lsls	r1, r1, #25
 80130cc:	bf48      	it	mi
 80130ce:	b2ad      	uxthmi	r5, r5
 80130d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80130d2:	6033      	str	r3, [r6, #0]
 80130d4:	4851      	ldr	r0, [pc, #324]	@ (801321c <_printf_i+0x234>)
 80130d6:	bf14      	ite	ne
 80130d8:	230a      	movne	r3, #10
 80130da:	2308      	moveq	r3, #8
 80130dc:	2100      	movs	r1, #0
 80130de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80130e2:	6866      	ldr	r6, [r4, #4]
 80130e4:	2e00      	cmp	r6, #0
 80130e6:	60a6      	str	r6, [r4, #8]
 80130e8:	db05      	blt.n	80130f6 <_printf_i+0x10e>
 80130ea:	6821      	ldr	r1, [r4, #0]
 80130ec:	432e      	orrs	r6, r5
 80130ee:	f021 0104 	bic.w	r1, r1, #4
 80130f2:	6021      	str	r1, [r4, #0]
 80130f4:	d04b      	beq.n	801318e <_printf_i+0x1a6>
 80130f6:	4616      	mov	r6, r2
 80130f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80130fc:	fb03 5711 	mls	r7, r3, r1, r5
 8013100:	5dc7      	ldrb	r7, [r0, r7]
 8013102:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013106:	462f      	mov	r7, r5
 8013108:	460d      	mov	r5, r1
 801310a:	42bb      	cmp	r3, r7
 801310c:	d9f4      	bls.n	80130f8 <_printf_i+0x110>
 801310e:	2b08      	cmp	r3, #8
 8013110:	d10b      	bne.n	801312a <_printf_i+0x142>
 8013112:	6823      	ldr	r3, [r4, #0]
 8013114:	07df      	lsls	r7, r3, #31
 8013116:	d508      	bpl.n	801312a <_printf_i+0x142>
 8013118:	6923      	ldr	r3, [r4, #16]
 801311a:	6861      	ldr	r1, [r4, #4]
 801311c:	4299      	cmp	r1, r3
 801311e:	bfde      	ittt	le
 8013120:	2330      	movle	r3, #48	@ 0x30
 8013122:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013126:	f106 36ff 	addle.w	r6, r6, #4294967295
 801312a:	1b92      	subs	r2, r2, r6
 801312c:	6122      	str	r2, [r4, #16]
 801312e:	464b      	mov	r3, r9
 8013130:	aa03      	add	r2, sp, #12
 8013132:	4621      	mov	r1, r4
 8013134:	4640      	mov	r0, r8
 8013136:	f8cd a000 	str.w	sl, [sp]
 801313a:	f7ff fee3 	bl	8012f04 <_printf_common>
 801313e:	3001      	adds	r0, #1
 8013140:	d14a      	bne.n	80131d8 <_printf_i+0x1f0>
 8013142:	f04f 30ff 	mov.w	r0, #4294967295
 8013146:	b004      	add	sp, #16
 8013148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801314c:	6823      	ldr	r3, [r4, #0]
 801314e:	f043 0320 	orr.w	r3, r3, #32
 8013152:	6023      	str	r3, [r4, #0]
 8013154:	2778      	movs	r7, #120	@ 0x78
 8013156:	4832      	ldr	r0, [pc, #200]	@ (8013220 <_printf_i+0x238>)
 8013158:	6823      	ldr	r3, [r4, #0]
 801315a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801315e:	061f      	lsls	r7, r3, #24
 8013160:	6831      	ldr	r1, [r6, #0]
 8013162:	f851 5b04 	ldr.w	r5, [r1], #4
 8013166:	d402      	bmi.n	801316e <_printf_i+0x186>
 8013168:	065f      	lsls	r7, r3, #25
 801316a:	bf48      	it	mi
 801316c:	b2ad      	uxthmi	r5, r5
 801316e:	6031      	str	r1, [r6, #0]
 8013170:	07d9      	lsls	r1, r3, #31
 8013172:	bf44      	itt	mi
 8013174:	f043 0320 	orrmi.w	r3, r3, #32
 8013178:	6023      	strmi	r3, [r4, #0]
 801317a:	b11d      	cbz	r5, 8013184 <_printf_i+0x19c>
 801317c:	2310      	movs	r3, #16
 801317e:	e7ad      	b.n	80130dc <_printf_i+0xf4>
 8013180:	4826      	ldr	r0, [pc, #152]	@ (801321c <_printf_i+0x234>)
 8013182:	e7e9      	b.n	8013158 <_printf_i+0x170>
 8013184:	6823      	ldr	r3, [r4, #0]
 8013186:	f023 0320 	bic.w	r3, r3, #32
 801318a:	6023      	str	r3, [r4, #0]
 801318c:	e7f6      	b.n	801317c <_printf_i+0x194>
 801318e:	4616      	mov	r6, r2
 8013190:	e7bd      	b.n	801310e <_printf_i+0x126>
 8013192:	6833      	ldr	r3, [r6, #0]
 8013194:	6825      	ldr	r5, [r4, #0]
 8013196:	1d18      	adds	r0, r3, #4
 8013198:	6961      	ldr	r1, [r4, #20]
 801319a:	6030      	str	r0, [r6, #0]
 801319c:	062e      	lsls	r6, r5, #24
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	d501      	bpl.n	80131a6 <_printf_i+0x1be>
 80131a2:	6019      	str	r1, [r3, #0]
 80131a4:	e002      	b.n	80131ac <_printf_i+0x1c4>
 80131a6:	0668      	lsls	r0, r5, #25
 80131a8:	d5fb      	bpl.n	80131a2 <_printf_i+0x1ba>
 80131aa:	8019      	strh	r1, [r3, #0]
 80131ac:	2300      	movs	r3, #0
 80131ae:	4616      	mov	r6, r2
 80131b0:	6123      	str	r3, [r4, #16]
 80131b2:	e7bc      	b.n	801312e <_printf_i+0x146>
 80131b4:	6833      	ldr	r3, [r6, #0]
 80131b6:	2100      	movs	r1, #0
 80131b8:	1d1a      	adds	r2, r3, #4
 80131ba:	6032      	str	r2, [r6, #0]
 80131bc:	681e      	ldr	r6, [r3, #0]
 80131be:	6862      	ldr	r2, [r4, #4]
 80131c0:	4630      	mov	r0, r6
 80131c2:	f000 f9b3 	bl	801352c <memchr>
 80131c6:	b108      	cbz	r0, 80131cc <_printf_i+0x1e4>
 80131c8:	1b80      	subs	r0, r0, r6
 80131ca:	6060      	str	r0, [r4, #4]
 80131cc:	6863      	ldr	r3, [r4, #4]
 80131ce:	6123      	str	r3, [r4, #16]
 80131d0:	2300      	movs	r3, #0
 80131d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80131d6:	e7aa      	b.n	801312e <_printf_i+0x146>
 80131d8:	6923      	ldr	r3, [r4, #16]
 80131da:	4632      	mov	r2, r6
 80131dc:	4649      	mov	r1, r9
 80131de:	4640      	mov	r0, r8
 80131e0:	47d0      	blx	sl
 80131e2:	3001      	adds	r0, #1
 80131e4:	d0ad      	beq.n	8013142 <_printf_i+0x15a>
 80131e6:	6823      	ldr	r3, [r4, #0]
 80131e8:	079b      	lsls	r3, r3, #30
 80131ea:	d413      	bmi.n	8013214 <_printf_i+0x22c>
 80131ec:	68e0      	ldr	r0, [r4, #12]
 80131ee:	9b03      	ldr	r3, [sp, #12]
 80131f0:	4298      	cmp	r0, r3
 80131f2:	bfb8      	it	lt
 80131f4:	4618      	movlt	r0, r3
 80131f6:	e7a6      	b.n	8013146 <_printf_i+0x15e>
 80131f8:	2301      	movs	r3, #1
 80131fa:	4632      	mov	r2, r6
 80131fc:	4649      	mov	r1, r9
 80131fe:	4640      	mov	r0, r8
 8013200:	47d0      	blx	sl
 8013202:	3001      	adds	r0, #1
 8013204:	d09d      	beq.n	8013142 <_printf_i+0x15a>
 8013206:	3501      	adds	r5, #1
 8013208:	68e3      	ldr	r3, [r4, #12]
 801320a:	9903      	ldr	r1, [sp, #12]
 801320c:	1a5b      	subs	r3, r3, r1
 801320e:	42ab      	cmp	r3, r5
 8013210:	dcf2      	bgt.n	80131f8 <_printf_i+0x210>
 8013212:	e7eb      	b.n	80131ec <_printf_i+0x204>
 8013214:	2500      	movs	r5, #0
 8013216:	f104 0619 	add.w	r6, r4, #25
 801321a:	e7f5      	b.n	8013208 <_printf_i+0x220>
 801321c:	08014889 	.word	0x08014889
 8013220:	0801489a 	.word	0x0801489a

08013224 <__sflush_r>:
 8013224:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801322c:	0716      	lsls	r6, r2, #28
 801322e:	4605      	mov	r5, r0
 8013230:	460c      	mov	r4, r1
 8013232:	d454      	bmi.n	80132de <__sflush_r+0xba>
 8013234:	684b      	ldr	r3, [r1, #4]
 8013236:	2b00      	cmp	r3, #0
 8013238:	dc02      	bgt.n	8013240 <__sflush_r+0x1c>
 801323a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801323c:	2b00      	cmp	r3, #0
 801323e:	dd48      	ble.n	80132d2 <__sflush_r+0xae>
 8013240:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013242:	2e00      	cmp	r6, #0
 8013244:	d045      	beq.n	80132d2 <__sflush_r+0xae>
 8013246:	2300      	movs	r3, #0
 8013248:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801324c:	682f      	ldr	r7, [r5, #0]
 801324e:	6a21      	ldr	r1, [r4, #32]
 8013250:	602b      	str	r3, [r5, #0]
 8013252:	d030      	beq.n	80132b6 <__sflush_r+0x92>
 8013254:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013256:	89a3      	ldrh	r3, [r4, #12]
 8013258:	0759      	lsls	r1, r3, #29
 801325a:	d505      	bpl.n	8013268 <__sflush_r+0x44>
 801325c:	6863      	ldr	r3, [r4, #4]
 801325e:	1ad2      	subs	r2, r2, r3
 8013260:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013262:	b10b      	cbz	r3, 8013268 <__sflush_r+0x44>
 8013264:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013266:	1ad2      	subs	r2, r2, r3
 8013268:	2300      	movs	r3, #0
 801326a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801326c:	6a21      	ldr	r1, [r4, #32]
 801326e:	4628      	mov	r0, r5
 8013270:	47b0      	blx	r6
 8013272:	1c43      	adds	r3, r0, #1
 8013274:	89a3      	ldrh	r3, [r4, #12]
 8013276:	d106      	bne.n	8013286 <__sflush_r+0x62>
 8013278:	6829      	ldr	r1, [r5, #0]
 801327a:	291d      	cmp	r1, #29
 801327c:	d82b      	bhi.n	80132d6 <__sflush_r+0xb2>
 801327e:	4a2a      	ldr	r2, [pc, #168]	@ (8013328 <__sflush_r+0x104>)
 8013280:	40ca      	lsrs	r2, r1
 8013282:	07d6      	lsls	r6, r2, #31
 8013284:	d527      	bpl.n	80132d6 <__sflush_r+0xb2>
 8013286:	2200      	movs	r2, #0
 8013288:	04d9      	lsls	r1, r3, #19
 801328a:	6062      	str	r2, [r4, #4]
 801328c:	6922      	ldr	r2, [r4, #16]
 801328e:	6022      	str	r2, [r4, #0]
 8013290:	d504      	bpl.n	801329c <__sflush_r+0x78>
 8013292:	1c42      	adds	r2, r0, #1
 8013294:	d101      	bne.n	801329a <__sflush_r+0x76>
 8013296:	682b      	ldr	r3, [r5, #0]
 8013298:	b903      	cbnz	r3, 801329c <__sflush_r+0x78>
 801329a:	6560      	str	r0, [r4, #84]	@ 0x54
 801329c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801329e:	602f      	str	r7, [r5, #0]
 80132a0:	b1b9      	cbz	r1, 80132d2 <__sflush_r+0xae>
 80132a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80132a6:	4299      	cmp	r1, r3
 80132a8:	d002      	beq.n	80132b0 <__sflush_r+0x8c>
 80132aa:	4628      	mov	r0, r5
 80132ac:	f7ff fc9e 	bl	8012bec <_free_r>
 80132b0:	2300      	movs	r3, #0
 80132b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80132b4:	e00d      	b.n	80132d2 <__sflush_r+0xae>
 80132b6:	2301      	movs	r3, #1
 80132b8:	4628      	mov	r0, r5
 80132ba:	47b0      	blx	r6
 80132bc:	4602      	mov	r2, r0
 80132be:	1c50      	adds	r0, r2, #1
 80132c0:	d1c9      	bne.n	8013256 <__sflush_r+0x32>
 80132c2:	682b      	ldr	r3, [r5, #0]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d0c6      	beq.n	8013256 <__sflush_r+0x32>
 80132c8:	2b1d      	cmp	r3, #29
 80132ca:	d001      	beq.n	80132d0 <__sflush_r+0xac>
 80132cc:	2b16      	cmp	r3, #22
 80132ce:	d11d      	bne.n	801330c <__sflush_r+0xe8>
 80132d0:	602f      	str	r7, [r5, #0]
 80132d2:	2000      	movs	r0, #0
 80132d4:	e021      	b.n	801331a <__sflush_r+0xf6>
 80132d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80132da:	b21b      	sxth	r3, r3
 80132dc:	e01a      	b.n	8013314 <__sflush_r+0xf0>
 80132de:	690f      	ldr	r7, [r1, #16]
 80132e0:	2f00      	cmp	r7, #0
 80132e2:	d0f6      	beq.n	80132d2 <__sflush_r+0xae>
 80132e4:	0793      	lsls	r3, r2, #30
 80132e6:	680e      	ldr	r6, [r1, #0]
 80132e8:	600f      	str	r7, [r1, #0]
 80132ea:	bf0c      	ite	eq
 80132ec:	694b      	ldreq	r3, [r1, #20]
 80132ee:	2300      	movne	r3, #0
 80132f0:	eba6 0807 	sub.w	r8, r6, r7
 80132f4:	608b      	str	r3, [r1, #8]
 80132f6:	f1b8 0f00 	cmp.w	r8, #0
 80132fa:	ddea      	ble.n	80132d2 <__sflush_r+0xae>
 80132fc:	4643      	mov	r3, r8
 80132fe:	463a      	mov	r2, r7
 8013300:	6a21      	ldr	r1, [r4, #32]
 8013302:	4628      	mov	r0, r5
 8013304:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013306:	47b0      	blx	r6
 8013308:	2800      	cmp	r0, #0
 801330a:	dc08      	bgt.n	801331e <__sflush_r+0xfa>
 801330c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013310:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013314:	f04f 30ff 	mov.w	r0, #4294967295
 8013318:	81a3      	strh	r3, [r4, #12]
 801331a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801331e:	4407      	add	r7, r0
 8013320:	eba8 0800 	sub.w	r8, r8, r0
 8013324:	e7e7      	b.n	80132f6 <__sflush_r+0xd2>
 8013326:	bf00      	nop
 8013328:	20400001 	.word	0x20400001

0801332c <_fflush_r>:
 801332c:	b538      	push	{r3, r4, r5, lr}
 801332e:	690b      	ldr	r3, [r1, #16]
 8013330:	4605      	mov	r5, r0
 8013332:	460c      	mov	r4, r1
 8013334:	b913      	cbnz	r3, 801333c <_fflush_r+0x10>
 8013336:	2500      	movs	r5, #0
 8013338:	4628      	mov	r0, r5
 801333a:	bd38      	pop	{r3, r4, r5, pc}
 801333c:	b118      	cbz	r0, 8013346 <_fflush_r+0x1a>
 801333e:	6a03      	ldr	r3, [r0, #32]
 8013340:	b90b      	cbnz	r3, 8013346 <_fflush_r+0x1a>
 8013342:	f7ff fae5 	bl	8012910 <__sinit>
 8013346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d0f3      	beq.n	8013336 <_fflush_r+0xa>
 801334e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013350:	07d0      	lsls	r0, r2, #31
 8013352:	d404      	bmi.n	801335e <_fflush_r+0x32>
 8013354:	0599      	lsls	r1, r3, #22
 8013356:	d402      	bmi.n	801335e <_fflush_r+0x32>
 8013358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801335a:	f7ff fc30 	bl	8012bbe <__retarget_lock_acquire_recursive>
 801335e:	4628      	mov	r0, r5
 8013360:	4621      	mov	r1, r4
 8013362:	f7ff ff5f 	bl	8013224 <__sflush_r>
 8013366:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013368:	4605      	mov	r5, r0
 801336a:	07da      	lsls	r2, r3, #31
 801336c:	d4e4      	bmi.n	8013338 <_fflush_r+0xc>
 801336e:	89a3      	ldrh	r3, [r4, #12]
 8013370:	059b      	lsls	r3, r3, #22
 8013372:	d4e1      	bmi.n	8013338 <_fflush_r+0xc>
 8013374:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013376:	f7ff fc23 	bl	8012bc0 <__retarget_lock_release_recursive>
 801337a:	e7dd      	b.n	8013338 <_fflush_r+0xc>

0801337c <__swbuf_r>:
 801337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801337e:	460e      	mov	r6, r1
 8013380:	4614      	mov	r4, r2
 8013382:	4605      	mov	r5, r0
 8013384:	b118      	cbz	r0, 801338e <__swbuf_r+0x12>
 8013386:	6a03      	ldr	r3, [r0, #32]
 8013388:	b90b      	cbnz	r3, 801338e <__swbuf_r+0x12>
 801338a:	f7ff fac1 	bl	8012910 <__sinit>
 801338e:	69a3      	ldr	r3, [r4, #24]
 8013390:	60a3      	str	r3, [r4, #8]
 8013392:	89a3      	ldrh	r3, [r4, #12]
 8013394:	071a      	lsls	r2, r3, #28
 8013396:	d501      	bpl.n	801339c <__swbuf_r+0x20>
 8013398:	6923      	ldr	r3, [r4, #16]
 801339a:	b943      	cbnz	r3, 80133ae <__swbuf_r+0x32>
 801339c:	4621      	mov	r1, r4
 801339e:	4628      	mov	r0, r5
 80133a0:	f000 f82a 	bl	80133f8 <__swsetup_r>
 80133a4:	b118      	cbz	r0, 80133ae <__swbuf_r+0x32>
 80133a6:	f04f 37ff 	mov.w	r7, #4294967295
 80133aa:	4638      	mov	r0, r7
 80133ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133ae:	6823      	ldr	r3, [r4, #0]
 80133b0:	b2f6      	uxtb	r6, r6
 80133b2:	6922      	ldr	r2, [r4, #16]
 80133b4:	4637      	mov	r7, r6
 80133b6:	1a98      	subs	r0, r3, r2
 80133b8:	6963      	ldr	r3, [r4, #20]
 80133ba:	4283      	cmp	r3, r0
 80133bc:	dc05      	bgt.n	80133ca <__swbuf_r+0x4e>
 80133be:	4621      	mov	r1, r4
 80133c0:	4628      	mov	r0, r5
 80133c2:	f7ff ffb3 	bl	801332c <_fflush_r>
 80133c6:	2800      	cmp	r0, #0
 80133c8:	d1ed      	bne.n	80133a6 <__swbuf_r+0x2a>
 80133ca:	68a3      	ldr	r3, [r4, #8]
 80133cc:	3b01      	subs	r3, #1
 80133ce:	60a3      	str	r3, [r4, #8]
 80133d0:	6823      	ldr	r3, [r4, #0]
 80133d2:	1c5a      	adds	r2, r3, #1
 80133d4:	6022      	str	r2, [r4, #0]
 80133d6:	701e      	strb	r6, [r3, #0]
 80133d8:	1c43      	adds	r3, r0, #1
 80133da:	6962      	ldr	r2, [r4, #20]
 80133dc:	429a      	cmp	r2, r3
 80133de:	d004      	beq.n	80133ea <__swbuf_r+0x6e>
 80133e0:	89a3      	ldrh	r3, [r4, #12]
 80133e2:	07db      	lsls	r3, r3, #31
 80133e4:	d5e1      	bpl.n	80133aa <__swbuf_r+0x2e>
 80133e6:	2e0a      	cmp	r6, #10
 80133e8:	d1df      	bne.n	80133aa <__swbuf_r+0x2e>
 80133ea:	4621      	mov	r1, r4
 80133ec:	4628      	mov	r0, r5
 80133ee:	f7ff ff9d 	bl	801332c <_fflush_r>
 80133f2:	2800      	cmp	r0, #0
 80133f4:	d0d9      	beq.n	80133aa <__swbuf_r+0x2e>
 80133f6:	e7d6      	b.n	80133a6 <__swbuf_r+0x2a>

080133f8 <__swsetup_r>:
 80133f8:	b538      	push	{r3, r4, r5, lr}
 80133fa:	4b29      	ldr	r3, [pc, #164]	@ (80134a0 <__swsetup_r+0xa8>)
 80133fc:	4605      	mov	r5, r0
 80133fe:	460c      	mov	r4, r1
 8013400:	6818      	ldr	r0, [r3, #0]
 8013402:	b118      	cbz	r0, 801340c <__swsetup_r+0x14>
 8013404:	6a03      	ldr	r3, [r0, #32]
 8013406:	b90b      	cbnz	r3, 801340c <__swsetup_r+0x14>
 8013408:	f7ff fa82 	bl	8012910 <__sinit>
 801340c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013410:	0719      	lsls	r1, r3, #28
 8013412:	d422      	bmi.n	801345a <__swsetup_r+0x62>
 8013414:	06da      	lsls	r2, r3, #27
 8013416:	d407      	bmi.n	8013428 <__swsetup_r+0x30>
 8013418:	2209      	movs	r2, #9
 801341a:	602a      	str	r2, [r5, #0]
 801341c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013420:	f04f 30ff 	mov.w	r0, #4294967295
 8013424:	81a3      	strh	r3, [r4, #12]
 8013426:	e033      	b.n	8013490 <__swsetup_r+0x98>
 8013428:	0758      	lsls	r0, r3, #29
 801342a:	d512      	bpl.n	8013452 <__swsetup_r+0x5a>
 801342c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801342e:	b141      	cbz	r1, 8013442 <__swsetup_r+0x4a>
 8013430:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013434:	4299      	cmp	r1, r3
 8013436:	d002      	beq.n	801343e <__swsetup_r+0x46>
 8013438:	4628      	mov	r0, r5
 801343a:	f7ff fbd7 	bl	8012bec <_free_r>
 801343e:	2300      	movs	r3, #0
 8013440:	6363      	str	r3, [r4, #52]	@ 0x34
 8013442:	89a3      	ldrh	r3, [r4, #12]
 8013444:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013448:	81a3      	strh	r3, [r4, #12]
 801344a:	2300      	movs	r3, #0
 801344c:	6063      	str	r3, [r4, #4]
 801344e:	6923      	ldr	r3, [r4, #16]
 8013450:	6023      	str	r3, [r4, #0]
 8013452:	89a3      	ldrh	r3, [r4, #12]
 8013454:	f043 0308 	orr.w	r3, r3, #8
 8013458:	81a3      	strh	r3, [r4, #12]
 801345a:	6923      	ldr	r3, [r4, #16]
 801345c:	b94b      	cbnz	r3, 8013472 <__swsetup_r+0x7a>
 801345e:	89a3      	ldrh	r3, [r4, #12]
 8013460:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013468:	d003      	beq.n	8013472 <__swsetup_r+0x7a>
 801346a:	4621      	mov	r1, r4
 801346c:	4628      	mov	r0, r5
 801346e:	f000 f890 	bl	8013592 <__smakebuf_r>
 8013472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013476:	f013 0201 	ands.w	r2, r3, #1
 801347a:	d00a      	beq.n	8013492 <__swsetup_r+0x9a>
 801347c:	2200      	movs	r2, #0
 801347e:	60a2      	str	r2, [r4, #8]
 8013480:	6962      	ldr	r2, [r4, #20]
 8013482:	4252      	negs	r2, r2
 8013484:	61a2      	str	r2, [r4, #24]
 8013486:	6922      	ldr	r2, [r4, #16]
 8013488:	b942      	cbnz	r2, 801349c <__swsetup_r+0xa4>
 801348a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801348e:	d1c5      	bne.n	801341c <__swsetup_r+0x24>
 8013490:	bd38      	pop	{r3, r4, r5, pc}
 8013492:	0799      	lsls	r1, r3, #30
 8013494:	bf58      	it	pl
 8013496:	6962      	ldrpl	r2, [r4, #20]
 8013498:	60a2      	str	r2, [r4, #8]
 801349a:	e7f4      	b.n	8013486 <__swsetup_r+0x8e>
 801349c:	2000      	movs	r0, #0
 801349e:	e7f7      	b.n	8013490 <__swsetup_r+0x98>
 80134a0:	20000018 	.word	0x20000018

080134a4 <_raise_r>:
 80134a4:	291f      	cmp	r1, #31
 80134a6:	b538      	push	{r3, r4, r5, lr}
 80134a8:	4605      	mov	r5, r0
 80134aa:	460c      	mov	r4, r1
 80134ac:	d904      	bls.n	80134b8 <_raise_r+0x14>
 80134ae:	2316      	movs	r3, #22
 80134b0:	6003      	str	r3, [r0, #0]
 80134b2:	f04f 30ff 	mov.w	r0, #4294967295
 80134b6:	bd38      	pop	{r3, r4, r5, pc}
 80134b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80134ba:	b112      	cbz	r2, 80134c2 <_raise_r+0x1e>
 80134bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80134c0:	b94b      	cbnz	r3, 80134d6 <_raise_r+0x32>
 80134c2:	4628      	mov	r0, r5
 80134c4:	f000 f830 	bl	8013528 <_getpid_r>
 80134c8:	4622      	mov	r2, r4
 80134ca:	4601      	mov	r1, r0
 80134cc:	4628      	mov	r0, r5
 80134ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80134d2:	f000 b817 	b.w	8013504 <_kill_r>
 80134d6:	2b01      	cmp	r3, #1
 80134d8:	d00a      	beq.n	80134f0 <_raise_r+0x4c>
 80134da:	1c59      	adds	r1, r3, #1
 80134dc:	d103      	bne.n	80134e6 <_raise_r+0x42>
 80134de:	2316      	movs	r3, #22
 80134e0:	6003      	str	r3, [r0, #0]
 80134e2:	2001      	movs	r0, #1
 80134e4:	e7e7      	b.n	80134b6 <_raise_r+0x12>
 80134e6:	2100      	movs	r1, #0
 80134e8:	4620      	mov	r0, r4
 80134ea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80134ee:	4798      	blx	r3
 80134f0:	2000      	movs	r0, #0
 80134f2:	e7e0      	b.n	80134b6 <_raise_r+0x12>

080134f4 <raise>:
 80134f4:	4b02      	ldr	r3, [pc, #8]	@ (8013500 <raise+0xc>)
 80134f6:	4601      	mov	r1, r0
 80134f8:	6818      	ldr	r0, [r3, #0]
 80134fa:	f7ff bfd3 	b.w	80134a4 <_raise_r>
 80134fe:	bf00      	nop
 8013500:	20000018 	.word	0x20000018

08013504 <_kill_r>:
 8013504:	b538      	push	{r3, r4, r5, lr}
 8013506:	2300      	movs	r3, #0
 8013508:	4d06      	ldr	r5, [pc, #24]	@ (8013524 <_kill_r+0x20>)
 801350a:	4604      	mov	r4, r0
 801350c:	4608      	mov	r0, r1
 801350e:	4611      	mov	r1, r2
 8013510:	602b      	str	r3, [r5, #0]
 8013512:	f7ed fec0 	bl	8001296 <_kill>
 8013516:	1c43      	adds	r3, r0, #1
 8013518:	d102      	bne.n	8013520 <_kill_r+0x1c>
 801351a:	682b      	ldr	r3, [r5, #0]
 801351c:	b103      	cbz	r3, 8013520 <_kill_r+0x1c>
 801351e:	6023      	str	r3, [r4, #0]
 8013520:	bd38      	pop	{r3, r4, r5, pc}
 8013522:	bf00      	nop
 8013524:	20000320 	.word	0x20000320

08013528 <_getpid_r>:
 8013528:	f7ed bead 	b.w	8001286 <_getpid>

0801352c <memchr>:
 801352c:	b2c9      	uxtb	r1, r1
 801352e:	4603      	mov	r3, r0
 8013530:	4402      	add	r2, r0
 8013532:	b510      	push	{r4, lr}
 8013534:	4293      	cmp	r3, r2
 8013536:	4618      	mov	r0, r3
 8013538:	d101      	bne.n	801353e <memchr+0x12>
 801353a:	2000      	movs	r0, #0
 801353c:	e003      	b.n	8013546 <memchr+0x1a>
 801353e:	7804      	ldrb	r4, [r0, #0]
 8013540:	3301      	adds	r3, #1
 8013542:	428c      	cmp	r4, r1
 8013544:	d1f6      	bne.n	8013534 <memchr+0x8>
 8013546:	bd10      	pop	{r4, pc}

08013548 <__swhatbuf_r>:
 8013548:	b570      	push	{r4, r5, r6, lr}
 801354a:	460c      	mov	r4, r1
 801354c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013550:	b096      	sub	sp, #88	@ 0x58
 8013552:	4615      	mov	r5, r2
 8013554:	2900      	cmp	r1, #0
 8013556:	461e      	mov	r6, r3
 8013558:	da0c      	bge.n	8013574 <__swhatbuf_r+0x2c>
 801355a:	89a3      	ldrh	r3, [r4, #12]
 801355c:	2100      	movs	r1, #0
 801355e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013562:	bf14      	ite	ne
 8013564:	2340      	movne	r3, #64	@ 0x40
 8013566:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801356a:	2000      	movs	r0, #0
 801356c:	6031      	str	r1, [r6, #0]
 801356e:	602b      	str	r3, [r5, #0]
 8013570:	b016      	add	sp, #88	@ 0x58
 8013572:	bd70      	pop	{r4, r5, r6, pc}
 8013574:	466a      	mov	r2, sp
 8013576:	f000 f849 	bl	801360c <_fstat_r>
 801357a:	2800      	cmp	r0, #0
 801357c:	dbed      	blt.n	801355a <__swhatbuf_r+0x12>
 801357e:	9901      	ldr	r1, [sp, #4]
 8013580:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013584:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013588:	4259      	negs	r1, r3
 801358a:	4159      	adcs	r1, r3
 801358c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013590:	e7eb      	b.n	801356a <__swhatbuf_r+0x22>

08013592 <__smakebuf_r>:
 8013592:	898b      	ldrh	r3, [r1, #12]
 8013594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013596:	079d      	lsls	r5, r3, #30
 8013598:	4606      	mov	r6, r0
 801359a:	460c      	mov	r4, r1
 801359c:	d507      	bpl.n	80135ae <__smakebuf_r+0x1c>
 801359e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80135a2:	6023      	str	r3, [r4, #0]
 80135a4:	6123      	str	r3, [r4, #16]
 80135a6:	2301      	movs	r3, #1
 80135a8:	6163      	str	r3, [r4, #20]
 80135aa:	b003      	add	sp, #12
 80135ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135ae:	ab01      	add	r3, sp, #4
 80135b0:	466a      	mov	r2, sp
 80135b2:	f7ff ffc9 	bl	8013548 <__swhatbuf_r>
 80135b6:	9f00      	ldr	r7, [sp, #0]
 80135b8:	4605      	mov	r5, r0
 80135ba:	4630      	mov	r0, r6
 80135bc:	4639      	mov	r1, r7
 80135be:	f7ff f88f 	bl	80126e0 <_malloc_r>
 80135c2:	b948      	cbnz	r0, 80135d8 <__smakebuf_r+0x46>
 80135c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135c8:	059a      	lsls	r2, r3, #22
 80135ca:	d4ee      	bmi.n	80135aa <__smakebuf_r+0x18>
 80135cc:	f023 0303 	bic.w	r3, r3, #3
 80135d0:	f043 0302 	orr.w	r3, r3, #2
 80135d4:	81a3      	strh	r3, [r4, #12]
 80135d6:	e7e2      	b.n	801359e <__smakebuf_r+0xc>
 80135d8:	89a3      	ldrh	r3, [r4, #12]
 80135da:	6020      	str	r0, [r4, #0]
 80135dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80135e0:	81a3      	strh	r3, [r4, #12]
 80135e2:	9b01      	ldr	r3, [sp, #4]
 80135e4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80135e8:	b15b      	cbz	r3, 8013602 <__smakebuf_r+0x70>
 80135ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80135ee:	4630      	mov	r0, r6
 80135f0:	f000 f81e 	bl	8013630 <_isatty_r>
 80135f4:	b128      	cbz	r0, 8013602 <__smakebuf_r+0x70>
 80135f6:	89a3      	ldrh	r3, [r4, #12]
 80135f8:	f023 0303 	bic.w	r3, r3, #3
 80135fc:	f043 0301 	orr.w	r3, r3, #1
 8013600:	81a3      	strh	r3, [r4, #12]
 8013602:	89a3      	ldrh	r3, [r4, #12]
 8013604:	431d      	orrs	r5, r3
 8013606:	81a5      	strh	r5, [r4, #12]
 8013608:	e7cf      	b.n	80135aa <__smakebuf_r+0x18>
	...

0801360c <_fstat_r>:
 801360c:	b538      	push	{r3, r4, r5, lr}
 801360e:	2300      	movs	r3, #0
 8013610:	4d06      	ldr	r5, [pc, #24]	@ (801362c <_fstat_r+0x20>)
 8013612:	4604      	mov	r4, r0
 8013614:	4608      	mov	r0, r1
 8013616:	4611      	mov	r1, r2
 8013618:	602b      	str	r3, [r5, #0]
 801361a:	f7ed fe9c 	bl	8001356 <_fstat>
 801361e:	1c43      	adds	r3, r0, #1
 8013620:	d102      	bne.n	8013628 <_fstat_r+0x1c>
 8013622:	682b      	ldr	r3, [r5, #0]
 8013624:	b103      	cbz	r3, 8013628 <_fstat_r+0x1c>
 8013626:	6023      	str	r3, [r4, #0]
 8013628:	bd38      	pop	{r3, r4, r5, pc}
 801362a:	bf00      	nop
 801362c:	20000320 	.word	0x20000320

08013630 <_isatty_r>:
 8013630:	b538      	push	{r3, r4, r5, lr}
 8013632:	2300      	movs	r3, #0
 8013634:	4d05      	ldr	r5, [pc, #20]	@ (801364c <_isatty_r+0x1c>)
 8013636:	4604      	mov	r4, r0
 8013638:	4608      	mov	r0, r1
 801363a:	602b      	str	r3, [r5, #0]
 801363c:	f7ed fe9b 	bl	8001376 <_isatty>
 8013640:	1c43      	adds	r3, r0, #1
 8013642:	d102      	bne.n	801364a <_isatty_r+0x1a>
 8013644:	682b      	ldr	r3, [r5, #0]
 8013646:	b103      	cbz	r3, 801364a <_isatty_r+0x1a>
 8013648:	6023      	str	r3, [r4, #0]
 801364a:	bd38      	pop	{r3, r4, r5, pc}
 801364c:	20000320 	.word	0x20000320

08013650 <_init>:
 8013650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013652:	bf00      	nop
 8013654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013656:	bc08      	pop	{r3}
 8013658:	469e      	mov	lr, r3
 801365a:	4770      	bx	lr

0801365c <_fini>:
 801365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801365e:	bf00      	nop
 8013660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013662:	bc08      	pop	{r3}
 8013664:	469e      	mov	lr, r3
 8013666:	4770      	bx	lr
